cset: moving following pidspec: 2863916
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.367636521 seconds)
loading group "shootout"... done (took 0.794085045 seconds)
loading group "string"... done (took 0.233130068 seconds)
loading group "linalg"... done (took 3.265237272 seconds)
loading group "parallel"... done (took 0.023737438 seconds)
loading group "find"... done (took 1.318129817 seconds)
loading group "tuple"... done (took 0.737230533 seconds)
loading group "union"... done (took 3.26991468 seconds)
loading group "dates"... done (took 0.164529001 seconds)
loading group "micro"... done (took 0.062771258 seconds)
loading group "simd"... done (took 0.387958074 seconds)
loading group "io"... done (took 1.484854939 seconds)
loading group "random"... done (took 2.490439191 seconds)
loading group "problem"... done (took 1.208249959 seconds)
loading group "array"... done (took 4.581232992 seconds)
loading group "misc"... done (took 1.168975794 seconds)
loading group "scalar"... done (took 3.773240112 seconds)
loading group "sort"... done (took 0.329543655 seconds)
loading group "sparse"... done (took 3.677311169 seconds)
loading group "collection"... done (took 6.318761312 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.499067826 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.079544514 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.283894929 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.078556161 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.282934763 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.088167187 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.098050065 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.077706555 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.207992584 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.164810217 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.252324507 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.377578847 seconds)
done (took 5.268193173 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.327358273 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.033663941 seconds)
    (2/2) benchmarking "String"...
    done (took 0.129581077 seconds)
  done (took 0.790661539 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.141827306 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.017550537 seconds)
    (3/3) benchmarking "different"...
    done (took 0.025474366 seconds)
  done (took 0.813619144 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.022870577 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.10372328 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.02437965 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.025187294 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.025033836 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.024345367 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.023908779 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.023825944 seconds)
  done (took 0.888625283 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.03016719 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.024827719 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.023076612 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.024878254 seconds)
  done (took 0.740045752 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.024005805 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.097497263 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.030157932 seconds)
    (4/4) benchmarking "different"...
    done (took 0.030007621 seconds)
  done (took 0.81715795 seconds)
done (took 5.038806569 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.206895228 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.799086077 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.925040935 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.184886445 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.354176791 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.328859055 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.080927724 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.238068712 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.153395684 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.037079366 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.188172278 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.039220656 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.518514716 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.585512402 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.028967842 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.154136507 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.591212596 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.039601294 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.073469456 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.253239282 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.035798266 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.040691797 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.04583472 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.02936222 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.117239764 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.13399563 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.596107879 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.066043542 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.025901761 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.050614932 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.029091757 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.030515035 seconds)
  done (took 9.665511293 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.165410063 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.150335031 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.026612167 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.062530518 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.055816774 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.027077387 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.033344014 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.025794423 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.046170059 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.093432223 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.048240173 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.161644026 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.023757648 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.027264537 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.145931564 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.120152093 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.039030009 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.039241437 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.024106296 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.038370432 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.051317167 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.035957389 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.03381481 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.034155683 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.070652375 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.090637644 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.042681198 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.069641549 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.023784264 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.03517438 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.05644922 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.064403887 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.024752917 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.023198272 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.068141626 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.045905297 seconds)
  done (took 2.832115772 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.829392317 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.121313848 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.145244067 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.187325295 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070410886 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.052907693 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.179778977 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.077935282 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.057217868 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026214152 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.202093418 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.68831041 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.169663831 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.377376469 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.029357448 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.291424977 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.980293646 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.989304156 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.024527784 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.024940067 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.134064428 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.027933203 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.287839477 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.023172274 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.147393346 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.537703146 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.029029688 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.027360775 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.055717323 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.144581418 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.023142354 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.099098854 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.04940402 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.02806675 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.377146814 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.023304678 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.021512987 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.044246681 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.054214143 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.023669369 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.025024364 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.032981627 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.023075758 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.07372846 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.034712416 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.510018983 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.027142738 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.693380882 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 4.865389771 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.031666352 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.028892219 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.063074875 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.02162986 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.025256098 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.562663095 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.094923396 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.024373848 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.305297913 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.026341958 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.025986572 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.049702437 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.058298597 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.025626234 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.027271079 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.029141963 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.043536951 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.028588883 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.033897137 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.044031782 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.02357371 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.024445572 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.023037632 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.413844836 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.030194699 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.129125415 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.022254284 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.028410423 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.02496037 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.024572913 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.063915612 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.051340751 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.048334619 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.029085106 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.026003095 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.025078491 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.499771216 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.977632226 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.025280692 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.026258535 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.346921758 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.022547666 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.024752863 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.026752726 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.046827521 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.026114088 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.022124321 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.065406187 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.02689097 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.133134741 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.355759014 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.027056288 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.022757472 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.622807184 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.025974024 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.05686411 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.075035494 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.024555066 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.058306132 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.024998782 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.022329757 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.028719746 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.022477776 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.048797159 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.023849739 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.024368223 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.024243038 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.025235262 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.026906614 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.025961701 seconds)
  done (took 24.357291729 seconds)
done (took 39.323354665 seconds)
(4/20) benchmarking "parallel"...
done (took 0.815047066 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.217018082 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.053637561 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.022152712 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.163940985 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.046823996 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.136038036 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.175243114 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.128461821 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.047787148 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.047666792 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.047481938 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.18070388 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.188678991 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.048951261 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.119753075 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.189682641 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.048531015 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.021626499 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.047215131 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.048126654 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.04813376 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.021778673 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.047714054 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.047981981 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.118164881 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.047369975 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.021440341 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.119047311 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.048535239 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.120766763 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.050103696 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.049181181 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.050173189 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.121928431 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.050487476 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.121468396 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.022401575 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.050831663 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.050871055 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.051807764 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.050933956 seconds)
  done (took 4.05021778 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.0485787 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.042323545 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.058166231 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.020569527 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.031319686 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.042222209 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.020047959 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.041835046 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.060731772 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.042655369 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.042710279 seconds)
  done (took 1.240859897 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.043570008 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.043405141 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.049470966 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.019986412 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.033134128 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.042951001 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.020043561 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.042967344 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.057645922 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.043264425 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.043377504 seconds)
  done (took 1.176308969 seconds)
done (took 7.185119655 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.15452703 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.125545428 seconds)
  done (took 1.009885618 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.592633612 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.213664475 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.132024074 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.247224779 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.124940772 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.156293632 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.713846924 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.158034875 seconds)
  done (took 7.122178201 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.082553975 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.146844731 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.026532076 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.024493706 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.025057632 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.025046071 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.026630873 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.025538959 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.024760943 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.027197263 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.026779188 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.024683944 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.025230337 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.026726794 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.024669347 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.024722257 seconds)
  done (took 1.45403275 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.028772266 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.027441951 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.02920822 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.018789775 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.028863501 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.027839675 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.029492744 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.031060067 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.028537168 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.02858816 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.02638422 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.029763332 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.028457953 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.027323769 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.030042624 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.018691689 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.030458586 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.029535897 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.031632155 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.029748404 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.028590405 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.026867157 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.030694326 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.028175036 seconds)
  done (took 1.429163506 seconds)
done (took 11.752907907 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.138734035 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.031408836 seconds)
  done (took 0.912501494 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.127647603 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.129091641 seconds)
  done (took 1.006659397 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.028232949 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.017383352 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.033237118 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.026217167 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.018217416 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.017826154 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.032094525 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.01808294 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.018101686 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.018066665 seconds)
  done (took 0.98130392 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019829166 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.024229808 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.022406176 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.020721456 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.022285145 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.018696175 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.021474481 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.019193426 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.024326882 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.018007777 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.021723211 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.040687675 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.02112485 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.040923655 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.021205737 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.021612868 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.023029032 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.020936705 seconds)
  done (took 1.173311461 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.018348185 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.018046366 seconds)
  done (took 0.785735557 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020795477 seconds)
    (2/7) benchmarking "second"...
    done (took 0.018001873 seconds)
    (3/7) benchmarking "month"...
    done (took 0.019834403 seconds)
    (4/7) benchmarking "year"...
    done (took 0.019943666 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.018185169 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.018084893 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.018657757 seconds)
  done (took 0.886788292 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.405592224 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.097278751 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.335638901 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.027042949 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.039765651 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.246309118 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.021800591 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.026576008 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.026342541 seconds)
  done (took 1.972675267 seconds)
done (took 8.468895606 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.047271694 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.151832113 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.153747148 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.463406789 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.036475356 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.024565475 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.059798474 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.227568293 seconds)
done (took 1.931017892 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.280737263 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.319807632 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.196742017 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.022953448 seconds)
  done (took 2.296390693 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.317052226 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.143947479 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.033431369 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.025388279 seconds)
  done (took 1.290123159 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.02270695 seconds)
    (2/2) benchmarking "read"...
    done (took 0.029345779 seconds)
  done (took 0.811646881 seconds)
done (took 5.445540029 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.031052193 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.017966701 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.02792133 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.019795201 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.019559529 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.01898366 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.019011159 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.020180583 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.018015149 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.019991297 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.020218352 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020068714 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020231895 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020205127 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.019220853 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020434567 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.018328544 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.019856351 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019776972 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019668959 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.01807344 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.02021052 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.019408906 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.019821221 seconds)
  done (took 1.242283657 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.04057173 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.023961593 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.0243021 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.023782495 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.025248594 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.02426629 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.024911786 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.024235593 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.024645809 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.023292543 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.025583855 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.025408333 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.022865359 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.025305862 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.023501356 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.025480551 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.024528254 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024295224 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.023370377 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.025553766 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.024152655 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024216884 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.025464377 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.024207354 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.025048248 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.025386223 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.023470799 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.024199535 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.024638556 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.0253709 seconds)
  done (took 1.517316783 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.023874259 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.016385566 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.016957874 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.027538749 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.016461448 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.016787121 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.017211154 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.016664172 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.017039862 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.017878854 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.017470936 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.016594512 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.017547242 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.016938244 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.017072048 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.017112919 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.021997035 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.039215399 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.017043905 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.016616941 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.021658962 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.016850747 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.016533738 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.016747702 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.01715877 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.016608726 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.016610226 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.017090046 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.016616615 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.017258576 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.016623533 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.021676474 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.023503317 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.017328731 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.028069748 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.022107157 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.017081418 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.021345375 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.017625658 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.016516565 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.016622086 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.016631156 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.016814114 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.016791388 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.028520007 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.017165675 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.017881129 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.017385991 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.01726019 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.016539218 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.016993772 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.018379225 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.023199322 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.018260225 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.016795072 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.017932312 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.016732946 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.017707024 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.016867662 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.01664774 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.016453721 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.020952839 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.018070278 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.017485188 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.039539724 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.017968444 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.028034446 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.016689043 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.017224696 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.021441665 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.017412072 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.037821818 seconds)
  done (took 2.157047509 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.029260853 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.026485551 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.037048482 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.026915122 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.02039518 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.017517606 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.020750715 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.01796997 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.027088998 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.021107971 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017648109 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020831485 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.027370569 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021172696 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.018539421 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.027260296 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.021327205 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.020389057 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.017783469 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021099937 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.01868905 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.020936889 seconds)
  done (took 1.267857327 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.109509936 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.024451671 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.072719177 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.023974839 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.023167917 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.023915728 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.02466834 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.024800183 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.024857206 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.025714682 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025532421 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024797508 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.022625974 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025579105 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.02608818 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.025770606 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.024824149 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.025632965 seconds)
  done (took 1.344003901 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.041143663 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.0257759 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.053376169 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.025679531 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.026041892 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.022432709 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.029990649 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.028475559 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.022347629 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.026102233 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.028144066 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022272558 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.022358322 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025966091 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022293338 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.026232418 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.022532422 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.026309904 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.028074467 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.029861101 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.029952451 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.028320061 seconds)
  done (took 1.382155384 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.038382702 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.023332779 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.043269909 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.025411945 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.017238282 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.017163043 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.025286269 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.024017815 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.024958359 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.022971483 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.024037571 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.017179108 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.026292321 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.02424103 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.026162195 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023803608 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.022934052 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.024112874 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.022945107 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.016882021 seconds)
  done (took 1.265486831 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.129262582 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.019465054 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.018868718 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.02322441 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.019079231 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.018838735 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.023219385 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.018865696 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.018818763 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.044476633 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.019126916 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.018845488 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.023471321 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.021945895 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.018979252 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.023553749 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.023657673 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.023424323 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.019107795 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.018961131 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.04467582 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.019151397 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.023625451 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.018892337 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.018801246 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.018956202 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018856657 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.021893298 seconds)
  done (took 1.493772819 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.039663355 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.016304063 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.016760579 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.020388005 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.020775631 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.026785952 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.020677805 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.020537785 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.016261563 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.016767668 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.018756526 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.016524384 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.016573095 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.026410677 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.016593939 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.019048064 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.025966309 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.020746476 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.028941919 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.026907908 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.018691522 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.025536197 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.01860771 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.016588987 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.027130803 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.018822469 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020610964 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.021432778 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018688098 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.016535794 seconds)
  done (took 1.412888624 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.030287976 seconds)
    (2/2) benchmarking "in"...
    done (took 0.028325275 seconds)
  done (took 0.825800543 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.021420644 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.036878336 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.016761938 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.032992004 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.029206992 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.021311524 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.027618372 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.030019423 seconds)
  done (took 0.981782753 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.128578792 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.15436346 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.018667838 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.018509186 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.127460582 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.087953454 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.13832656 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.031548412 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.032822467 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.021361672 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.018409957 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.137613639 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.018371992 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.03252465 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019405239 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.02836012 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.025628919 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.03707221 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.031805515 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.01708754 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.031303657 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.01867406 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.017749998 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.018772876 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.018923963 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.025339284 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.034059656 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.031069307 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026784105 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.016357201 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.037132178 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.01732459 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.017757048 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.026781132 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.128369872 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.017718212 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.056503402 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.017739331 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.021347828 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.016903453 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.029817076 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.039096372 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.032235398 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.035330351 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.018619576 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.019317743 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.017187758 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.0187986 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.021543064 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.027043067 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.017638596 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.025667035 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.017275626 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.019263272 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.028814088 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.017813141 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.021922164 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.027413539 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.032150478 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.028732751 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.031097099 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.034225961 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.027040942 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.025599923 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.018116469 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.039129252 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.019298653 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.03280718 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.033461054 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.018780007 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.031128135 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.017797011 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.016723033 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.017474479 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.053118736 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.018786682 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.018246366 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.01756501 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.017693574 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.018792899 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.027058818 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021726936 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.025440579 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020482835 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.034096529 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.027288801 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.01742768 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.024135603 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.036701928 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.02223901 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.017761944 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.035348849 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.021885433 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.01749889 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.036132195 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.028695518 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.018986733 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.018640232 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.022009915 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031855882 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.019282134 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.016889125 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.02673668 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.019573958 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.129031881 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.022608918 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.026702696 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.017899608 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.028786844 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.024270645 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.019563487 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.016896257 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.022885682 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.018762788 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.017080018 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.027941018 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.018192548 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.032957674 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.025324488 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.033284739 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.033867028 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.029192141 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.034642751 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.017682537 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.016741846 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.037526575 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.027875461 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.019216422 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.037149166 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.017976294 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.029344512 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.018166711 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.019636264 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.028134437 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.017474568 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.02004955 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.018355047 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.024529672 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.019589105 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019741853 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.024452661 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.027161345 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.030938607 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.018875723 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.027313599 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.018376185 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.03487304 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.02824561 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.023596042 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021153861 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.018603459 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.030732934 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.025416472 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.027594084 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.018083409 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.018697785 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.017966461 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.030032884 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.028141935 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.019884059 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.027180312 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.023298491 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.018771923 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.018054535 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.019005508 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.022124184 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.021435263 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.018599173 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.026104982 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.027508857 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.03312465 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.025259862 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.02754416 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.017464936 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.018044511 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.019808768 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.018135173 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.023498461 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.027665867 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.034630052 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.030491204 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.040828352 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.018275295 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.028351834 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.019721456 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.035846716 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.032048155 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.019014435 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022468847 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.017130267 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020025577 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.02807986 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.030137356 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.032876557 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.034387174 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.023720671 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.023514045 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.017940838 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.034186605 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.018658706 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.026998513 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.028150365 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.024559552 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.018173835 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.020014512 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.028279501 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.023710042 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.019428546 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.034974972 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.026022108 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.018176328 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.033489715 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.018486929 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.029666793 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.018205611 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.022614589 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.024447623 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.020363926 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.02823107 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.034307923 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.017375613 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.018671945 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.034871658 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.020038913 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.0199239 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.026548655 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.034266504 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.023550402 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.026442339 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029233713 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.029406225 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.147589014 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.029666056 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.019615448 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.028181718 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.021608892 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.030602948 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.018359115 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.037542604 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.017178081 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.034029607 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.018954954 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.02995106 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.018575712 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.028039137 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.019107608 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.036355055 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.019946654 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.019040052 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.030421511 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.017303639 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.027709945 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.01791693 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.176181523 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.025082899 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.027397997 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.019025858 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.027526775 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.01891568 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.027333228 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.023389077 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.026914561 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.027447916 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.023048953 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.017207651 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.026489444 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.028691461 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.026502744 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.018844859 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.01862063 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.017586162 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.026930009 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.018892654 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.018369694 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.026098818 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.023112493 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.024388821 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.018883435 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.018901546 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.018732804 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.026333659 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.027830525 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.036687626 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.026696545 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.025162402 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.026550102 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.017075416 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.033419742 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.017184197 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.025261038 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.016579221 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022940375 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.026928484 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.017328512 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.03659343 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.018424503 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.025192225 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.028874116 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.025895161 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.021548461 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.035536902 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.019774441 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.025709726 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.025256816 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.02232279 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.02449558 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.018337214 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.026236723 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.027362072 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.028176953 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.01801593 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.0250346 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.026271663 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.01861649 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.02426397 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.018095648 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.025743202 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.018804929 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.016807444 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.022411651 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.028279071 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.022497901 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.022738416 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.017238946 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.016330529 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.017198929 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.022967983 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.022120837 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.025883843 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.033392715 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.016391034 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.017706619 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.017090725 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.021544067 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.035443269 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026766425 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.025805556 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.022718254 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.016289095 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.018187667 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.018381858 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.017073222 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.019816893 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.016292624 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.016887682 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.027858579 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.018813229 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.022427313 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017313635 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.01800516 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.027350678 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.021180823 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.01762928 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.024797888 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.017368206 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.023319787 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.016866552 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.018785681 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.022587507 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.017020234 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.021572458 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.028146217 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.035015015 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.025269993 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.026705461 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.018375261 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.0261492 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.033537372 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.024883123 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017996548 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.027316362 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.016958354 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.036860177 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.027377169 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.026897389 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.027788985 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.01829554 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.035126444 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.022755488 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.027781111 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.033115155 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.018248704 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.02466071 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.017787026 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.034499345 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.023135109 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.017704144 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.026994335 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.026131631 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.024582304 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.030067889 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.018614485 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.027081838 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.023098138 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.02273425 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.019382964 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.019309941 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.02711265 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.035150382 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.018855571 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.023540104 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.026170922 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.02678744 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.023421464 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.031130954 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.026546056 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019027795 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.019570061 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.022649677 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.018768893 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.030853124 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018429015 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.023068712 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.022886131 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.01762746 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.025578985 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.035471747 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.028077778 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.027917911 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.017768032 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.017014432 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.036322019 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.022046699 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.02124259 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.026392177 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.028241077 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.030788944 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.027970708 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.035928035 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.018405431 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.024476682 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.030895997 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.018995534 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.017829134 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.022013919 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.019591164 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.027529502 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.028357574 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.025928035 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019804808 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.025576282 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.032575968 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.019699097 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.023839314 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.024446726 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.018863934 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.029688779 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.026578339 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.027492558 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.019613643 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.017862881 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.022051594 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.027188943 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.026295422 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.027697344 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019229189 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.026437839 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.03286132 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.026224019 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021551487 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.017931691 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.02112425 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.027520045 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.024273639 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.017739222 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.023365794 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.022112045 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.026719127 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.028027733 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.023274576 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.017875505 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.036014201 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.026936378 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.027306226 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.019449729 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.019719678 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.018270219 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.018055274 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.029673013 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.018054896 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.019814288 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.023569701 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.01987778 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.036974662 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.026545602 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.034480454 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019022179 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.023101197 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.017858191 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.028162942 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.023348976 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.017893637 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.029203269 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.017412577 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.034562557 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.030814852 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.025378078 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.018186437 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.024042667 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.027954607 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.034749416 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.028887498 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.027911855 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.022146668 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.028621384 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.02011349 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.03022213 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.018231639 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.01749889 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.029255966 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.027856662 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.031822012 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.018427124 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.029416948 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020035054 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.026665933 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.027322251 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.019680455 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019943491 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.019871511 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028361564 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.02349087 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.028053712 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.023639457 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.036422834 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.019209814 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.029754481 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.027576783 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.029901547 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.032951657 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.031166247 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.027609232 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.018515032 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.025993818 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.027378938 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.019256563 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.023847648 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.021642602 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.041721109 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.019927174 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.019721696 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.033629416 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.026625124 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.172240287 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.023713149 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.02334302 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.028468852 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.018245788 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.028605986 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.021881714 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.018127489 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.023135526 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.023432757 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.016886276 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.01741569 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.01783415 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.028157331 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.023518237 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.017918482 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.037889335 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.01875624 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.026932345 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.028830281 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.025354149 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.018739629 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.016612098 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.018228143 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.032364349 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.034210088 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.022636501 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.026854829 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.019145048 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.027520718 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.016737973 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.026503113 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.026346741 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.026788448 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.01754233 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017672879 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.033491452 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.033802975 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.022837342 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.035395695 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.026530397 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.018555871 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.039526406 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.026644189 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017944956 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.028278681 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018769119 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.01637991 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.016298884 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.018317408 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.029328493 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.017124975 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.018993742 seconds)
  done (took 16.570858971 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.061577229 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.018205963 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.017111744 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017011669 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.023855465 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018404822 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017075358 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.018075088 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.018060342 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.019149386 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.01690578 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017039974 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.022407364 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.032333905 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.024612331 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.020355776 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017184561 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.018348986 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017123037 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018010735 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.022781645 seconds)
  done (took 1.283693692 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020120453 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.02083318 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.020657593 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020960501 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.020127856 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.017291929 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.020626784 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017319084 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021130963 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017713846 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.021019242 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017325813 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.017606919 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.01755142 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017466352 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.018531859 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.020957634 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.020599101 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.017543613 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020652324 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.018655978 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.021176897 seconds)
  done (took 1.242519061 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.01873621 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.017532264 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.026080251 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.016549199 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.01660896 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.019037503 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.016531801 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.021800283 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.021951666 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.021881751 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.026209682 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.017516248 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.016961991 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.023688885 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.017017624 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.017365644 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.073118956 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.017637465 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.017687232 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.01712079 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.019112241 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.026363756 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.016819558 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.017105112 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.022026857 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.019621081 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.01691701 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.019070293 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.017509595 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.022370122 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.017754907 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.01677661 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.026234262 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.025302621 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.021956897 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.021723362 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.01791732 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.017172877 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.01660664 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.016785188 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.025388557 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.0179173 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.016845106 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.017554572 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.026190379 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.017013844 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.016645142 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.026284432 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.016829474 seconds)
  done (took 1.831370884 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.027629131 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.073535162 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.025238915 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.054794737 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.030633666 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.022173592 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.02423471 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.057264247 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.017805114 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.018093951 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.030382336 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.031340482 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.019650761 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.020529803 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.025285555 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.019138531 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.019668867 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.018478718 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.021308944 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018763496 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.021553218 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.02506134 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.030334839 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.031100771 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.020028715 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.018393428 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.01869922 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.02007091 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.030571942 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.022081142 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.020445283 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.020603276 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.030072225 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.026117668 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018944541 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.018812897 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.030597651 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.019245506 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.019060227 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.017562133 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.018685834 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.020139721 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.025086507 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.030910706 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.019163968 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.026087362 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.01919535 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.017301593 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.031182305 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.018964986 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.022416077 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.03190756 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.020158125 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.019483254 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.020363439 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.030228123 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.019333836 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.018173733 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.019370233 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.030953866 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.017763706 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.01981588 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.031336258 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.018724156 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.021841172 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.031234924 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.02685006 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.021034004 seconds)
  done (took 2.631199076 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.027515143 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.023639631 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.028103661 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.028067281 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.023810663 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.023810089 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.023869694 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.023937368 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.023851939 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.026613934 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.024094802 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.137707908 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.021671086 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.024574093 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.024166324 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.02449021 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.024088967 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.024260369 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.024092675 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.024014812 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.024231868 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.028669575 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.024235859 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.028883091 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.05918185 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.021460558 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.024112508 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.023911917 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.028569106 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.023922624 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.031141961 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.024224017 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.024369642 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.028816999 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.031183033 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.024212995 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.017482627 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.024455242 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.02451671 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.02443181 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.021516078 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.029073542 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.024282325 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.021575663 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.024701298 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.024247714 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.028817501 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.031410662 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.024834124 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.027196019 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.024368315 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.029983794 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.025569863 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.025903263 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.030862617 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.068062815 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.031389771 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.031029074 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.025918486 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.031016305 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.031118044 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.040075396 seconds)
  done (took 2.624101031 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030513793 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.021854406 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.027554716 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.016733125 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.016574379 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.022852557 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017045393 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.0169414 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.022590557 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.022369259 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.023522924 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022554314 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024450202 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.023694547 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.022664917 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024390942 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022812449 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.022792309 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.022369325 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.022769776 seconds)
  done (took 1.284381524 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.01921151 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.021596268 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.01700958 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020829119 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.017017612 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.02048656 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.017193938 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.0172749 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017391246 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017461671 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.021482199 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021677231 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017435518 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023817174 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.02065931 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.02094311 seconds)
  done (took 1.125304781 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.020550674 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.026438679 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.126707682 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.018588934 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.020107741 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.017385883 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.018092498 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.016646248 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.019672527 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.033944582 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.017913937 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.02019711 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.018371145 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.017186184 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.017494644 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.020263486 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.019548562 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.017796368 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.018494331 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.126728821 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.030597493 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.018874828 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.020525184 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.018830718 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.019975462 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.030060138 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.01903959 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.019804122 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.017596345 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.020255592 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.020015083 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.028414061 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.020149311 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.018367476 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.016934235 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.017647682 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.018189094 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.019999897 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.020343838 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.018296042 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.016804547 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.020124177 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.018427229 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.018474692 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.019607667 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.020503616 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.019689155 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.027731628 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.018187092 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.020244039 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.01830616 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.019109094 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.018188111 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.025258747 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.020060065 seconds)
  done (took 2.143092539 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.036647438 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.023564061 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.016466315 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.01638807 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.022836164 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.024501491 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.023680582 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.02415593 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.024587796 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.016384921 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.025128333 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.023263168 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.024676758 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.023675069 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.024365994 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.023594263 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.016567162 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.024632635 seconds)
  done (took 1.243639603 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.024038315 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.021675547 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.02192882 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.018646952 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.0186717 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.022221704 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.016876554 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.018269021 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018595629 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.018690075 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018451078 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.018236883 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018475154 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.018505476 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.021962936 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018460214 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.018291952 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017266448 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.018719716 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.017029275 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.022400423 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017228528 seconds)
  done (took 1.243458402 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.192768106 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.150007002 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.04134269 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.036195861 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.027563318 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.054811506 seconds)
  done (took 1.319161611 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.055614786 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026244691 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.023611988 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.051575127 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022614235 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021173516 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.021589464 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.021878548 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024401877 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.030797852 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021778954 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023846304 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024329667 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026693647 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023253666 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022755073 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021781633 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022153428 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024078107 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.034707242 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.021990684 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023836747 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021856869 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.021523048 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021618289 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026379798 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024785119 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030397799 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021495776 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023840358 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022376784 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.021590009 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023916255 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.030628831 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023336532 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024344385 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.021466674 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.034523851 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022415989 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026231435 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.02308462 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023282303 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024265631 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024476777 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02417591 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022100435 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024699692 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022046178 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021978796 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.037090081 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022595466 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026076975 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023272792 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024180107 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024685005 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.037413782 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.031416244 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028373853 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024583762 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.032433827 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028623764 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024388817 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028382336 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.033125668 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025148052 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028555077 seconds)
  done (took 2.546440096 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.030647605 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.052472847 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021538364 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.030778949 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026125702 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02159802 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.021622701 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021518605 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.021458896 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02411993 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065755239 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022259604 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026272705 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026402996 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021954132 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021605537 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.021551479 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025906871 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024099448 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.037282267 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021857644 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026038019 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.0262407 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026155325 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.031039941 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023084279 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022072047 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021809765 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0218073 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021938915 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024587409 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021991547 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025977728 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.024194486 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026381791 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021936682 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.021895025 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02467242 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021798364 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023040846 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026820592 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.035234315 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022387169 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022403631 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031308763 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022318072 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02254549 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024425664 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022145443 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024766875 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.031425836 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.031420083 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.031742381 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026942694 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022488168 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022442635 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023248 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02323292 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02344852 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024173443 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028315346 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023179737 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.040528313 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02318754 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023135839 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028251622 seconds)
  done (took 2.568339636 seconds)
done (took 55.308334551 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.218806137 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.177822123 seconds)
  done (took 1.214957502 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.137062451 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.13730366 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.167290958 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.026298387 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.084018363 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.178813569 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.128235433 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.027117735 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.025570258 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.027214252 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.025689583 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.027194664 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.026970662 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.025397622 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.089666813 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.026901491 seconds)
  done (took 1.990271923 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.093372566 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.291793877 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.072337094 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.024927065 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.081628569 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.034962983 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.025825417 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.031486789 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.034990035 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.025475807 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.09225059 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.04778775 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.029794039 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.034764397 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.025657997 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.029733246 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.031455645 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.035137025 seconds)
  done (took 1.876005378 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.091740327 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.034338786 seconds)
  done (took 0.955637328 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.142441545 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.064896769 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.109258901 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.348139087 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.09673004 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.305271494 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.104649986 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.099705301 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.069597711 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.096666318 seconds)
  done (took 2.265084081 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.06267279 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.059091962 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.29370744 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.059061258 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.037168909 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.031603154 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.032873639 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.032034387 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.033455833 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.032437819 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.077341271 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.03152675 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.026825674 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.072899519 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.049758208 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.063559168 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.025973361 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.031403646 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.035706996 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.025692251 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.029956241 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.031663077 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.139684252 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.031524816 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.050964001 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.029026651 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.030657995 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.032042783 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.031925094 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.032699109 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.033336849 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.052707791 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.031540355 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.039568374 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.030324104 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.049872754 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.026648996 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.050132259 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.029285401 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.02635756 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.029321514 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.032920811 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.027227082 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.03245275 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.033259191 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.031587995 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.031494959 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.025647631 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.033239614 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.029368544 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.026788975 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.030910364 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.030894517 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.031478115 seconds)
  done (took 3.199009973 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.078303595 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.070014201 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.02613775 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.077484636 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069732184 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02640243 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.08265928 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.064367982 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.082659673 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.025786013 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.025821423 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.025622754 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.032729562 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.036410692 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079383296 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.072038643 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02727666 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.02610006 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.071992858 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.071541625 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024656535 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.082480971 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.072832934 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.070578351 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.024597685 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.025928305 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.025156046 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.025800982 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.03219405 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.032631412 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.0257888 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.034818736 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.03645898 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.032617545 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.024689541 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.024703898 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024697857 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.033310861 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033690886 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.033570363 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.031353269 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024565926 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.024576887 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.025212398 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.025971583 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.024695529 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.033334182 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.032478421 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.033489419 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.025339082 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.025262471 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.025046196 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.025745974 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.032078232 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.031251406 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.032576019 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.034357923 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.025224774 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.025204716 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.026263623 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034962791 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.032947725 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.032801785 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.026191405 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.033192431 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.025218781 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034051131 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.037636136 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.025239638 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.025644128 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.025342677 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.025129851 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.025268246 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.031463984 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.031676462 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.025997608 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.025993705 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02539683 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.033188599 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031833296 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025187054 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.032681529 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.024836565 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.025492987 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.025598213 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.026151932 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.033690282 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.033882778 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.026363544 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.025789735 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.025720163 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025855831 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.024950141 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.034068459 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.033456098 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.033960413 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.035045527 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.026009414 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.035655975 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.034153026 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.026178494 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.032973279 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.025508421 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.026088201 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026040114 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.032801525 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.032846684 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.034690121 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.026387858 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.026323595 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.034149143 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.037443473 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.025996767 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.033031662 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.036172397 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.033895932 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.025796471 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.036751817 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026008072 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.035149057 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02599371 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034982885 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026585737 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.033557932 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.026198592 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.025563576 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.0257794 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.036150621 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.026306849 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.026033757 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.02604562 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.025548735 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.033542999 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.036719879 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.026719353 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.034406401 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.034364927 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.026583626 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.035096119 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.026073448 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.035206425 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.026184299 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.026454131 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.025305427 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.038020019 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.026258989 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.02643895 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.025893907 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.035831511 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.026018468 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035214149 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.032741091 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.025408022 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.035559001 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.035380786 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.032680458 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.03563394 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.027019005 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.026226391 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.025932594 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.026263657 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.034885297 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.036896624 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.026719087 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.025813917 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.032789639 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.035121119 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.025296888 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.033083687 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.032957978 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.033459572 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.026337585 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.026277313 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.036719392 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.037611359 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.033795952 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.035784768 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.034734876 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.026227444 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.033304759 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.0357244 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025869467 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.039747419 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026058157 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.036719602 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.035880495 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.03266372 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.035815055 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.03695086 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.181671487 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.033917282 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.035953623 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.025785535 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.025431708 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.031730901 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.025655952 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.026191954 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.031530902 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.026136827 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.025801327 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.036712963 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.025823238 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.033232781 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.025210593 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.031702319 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024822142 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.026055347 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.036029221 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.025604205 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.026096706 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.031204082 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.025392761 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.031039359 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034187166 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.031403635 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.025542634 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.026154494 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.033593737 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.032969445 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.025424221 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.025486372 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.026222754 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.033125701 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.032570479 seconds)
  done (took 8.312278699 seconds)
done (took 20.654276041 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.137221278 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.075161571 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.13508563 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.082808141 seconds)
  done (took 1.265782443 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.05799022 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.021989361 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.142607294 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.155335129 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.022391727 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.137061505 seconds)
  done (took 1.392207806 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.249749058 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.150622067 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.152135428 seconds)
  done (took 1.408039598 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.154214514 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.289918064 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.570891896 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.148221264 seconds)
  done (took 2.025739356 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.173281118 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.162846976 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.032637256 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.178736943 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.039188955 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.01777541 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.099954884 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.018666634 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.051048964 seconds)
  done (took 1.686002908 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.095415726 seconds)
done (took 8.722053841 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.205867564 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.139619007 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.03609203 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.030116131 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.128070429 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.131611082 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.151000413 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.032631725 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.141749125 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.314231448 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.188224545 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.051816349 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.154759489 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.044592256 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.269050698 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.033149994 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.031902893 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.026505787 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.147922531 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.13990307 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.252317385 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.031165915 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.102312042 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.032963871 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.106069585 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.08205856 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.192392471 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.316557288 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.278470352 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.034094454 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.123920424 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.044314759 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.119921354 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.127230375 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.134070658 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.051718696 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.021771412 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.246121106 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.106309339 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.325329297 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.171317466 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.030071447 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.144165307 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.027756984 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.0214844 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.147065488 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.036005287 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.029118144 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.045814287 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.029566256 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.04143843 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.030674335 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.135309299 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.026238871 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.098165425 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.139275271 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.188694286 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.107503405 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.028346644 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.04036378 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.032878607 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.164282069 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.040300349 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.027883493 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.03443352 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.022075449 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.136842262 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.043295744 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.022406974 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.034432761 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.031919273 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.103122221 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.153742225 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.068299299 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.034999997 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.113061598 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.10258369 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.04951176 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.050975733 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.032158279 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.021802437 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.196565813 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.027980668 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.041063238 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.029534998 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.056216026 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.021688948 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.037374212 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.173473404 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.151324676 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.091916864 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.023133259 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.245248648 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.023946205 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.048297982 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.0231523 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.022516615 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.192069747 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.022398064 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.022457313 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.034154273 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.0319052 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.024638636 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.173193358 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.107412409 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.031532894 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.02992889 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.023055044 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.029061576 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.023770805 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.022958257 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.022640933 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.101672614 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.04055388 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.022119869 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.108736207 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.289527425 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.034520068 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.040276516 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.092504089 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.026551801 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.034135537 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.031718235 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.14630993 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.029934709 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.109504037 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.024154137 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.044372559 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.12238205 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.10345798 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.107123592 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.021726347 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.145808264 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.03220223 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.021251747 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.029923027 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.05041364 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.032130808 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.039560148 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.030727774 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.144085907 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.032092743 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.027834901 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.121714195 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.021262782 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.112078635 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.10508167 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.136228867 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.027192634 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.03227318 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.097930385 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.045255945 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.052151836 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.043882525 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.026657419 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.021703676 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.021287202 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.035108109 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.02067978 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.021690002 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.035362339 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.028978775 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.038174032 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.245165683 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.032116299 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.026236301 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.25624543 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.034468642 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.095648538 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.04252957 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.022013239 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.105694898 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.023424872 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.043378176 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.087933803 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.02214974 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.102225844 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.022530076 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.021994962 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.0285143 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.023979412 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.032195697 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.037376621 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.022500502 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.036394775 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.030646552 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.022818854 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.106897121 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.024429534 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.194070748 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.104796134 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.100102021 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.022329901 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.041437304 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.021632839 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.107547928 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.022285587 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.073560746 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.116733065 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.037051957 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.043353802 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.023089765 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.104904173 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.037059463 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.027571651 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.105887673 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.137620976 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.096949961 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.028944383 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.250864406 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.031875189 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.022468039 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.028271021 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.031326502 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.022239064 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.104447496 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.027085614 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.021254487 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.021790245 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.024032858 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.020767875 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.046271541 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.02085994 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.030276962 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.027932338 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.025084467 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.023887815 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.020995119 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.031044562 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.105513519 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.124133017 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.028342641 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.042220328 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.034891181 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.032704999 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.071499102 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.030928603 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.165462871 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.021303479 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.032274129 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.043475204 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.02131822 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.027090271 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.027814494 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.03955159 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.025693888 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.023366948 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.031702611 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.022201409 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.022337558 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.021885348 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.021964919 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.031561575 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.023695479 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.021738937 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.021667222 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.038549335 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.028575186 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.027769785 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.034325858 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.04308539 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.489528005 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.023672838 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.024885669 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.035793705 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.02875766 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.022720875 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.023774688 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.022049091 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.02507065 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.022670404 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.021764155 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.050733304 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.027339321 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.022241215 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.04343412 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.028340449 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.032830209 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.123915521 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.040440866 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.027942567 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.021453303 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.264261677 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.099560155 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.044032091 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.042952603 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.022911627 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.033512868 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.022436179 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.02259846 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.021310486 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.049857647 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.027844212 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.022210459 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.021118246 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.02169444 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.071774619 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.031008626 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.022023321 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.031261883 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.022314035 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.022086018 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.049731273 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.02276036 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.022006398 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.040477102 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.03482293 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.111338224 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.036206819 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.025946635 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.074644596 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.02163559 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.021979249 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.022418594 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.112254989 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.035319587 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.023928083 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.022475727 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.03020529 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.03195884 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.07718206 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.029007306 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.02589941 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.030847212 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.021765154 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.022841561 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.050116188 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.052486325 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.023747314 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.026725954 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.022490262 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.206592553 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.110654025 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.031202832 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.028458053 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.11506545 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.02489209 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.032470105 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.021661736 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.512014139 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.027503092 seconds)
  done (took 23.422036955 seconds)
done (took 24.288143806 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.153610278 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.036181195 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.04403561 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.031335936 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.034868465 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.034561442 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.046085893 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.032265751 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.036019874 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.043690363 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.149818111 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.022236091 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.030400873 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.036888378 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.030782188 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.035262188 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.034034869 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.035475587 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.022558381 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.03495568 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.033138628 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.033992563 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.031547477 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.034420032 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.022661642 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.030742449 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.151389056 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.03749063 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.033260781 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.031872561 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.030397103 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.04520124 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.030056179 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.029757916 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.031496895 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.027750396 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.032266746 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.028781774 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.150451494 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.028078611 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.022463254 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.034216101 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.029541131 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.030009236 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.03078061 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.03312616 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.027663401 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.03504234 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.03054237 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.042618598 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.149771481 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.031617392 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.032580887 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.03061309 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.027827773 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.031663342 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.032179583 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.033250964 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.027395216 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.042195234 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.030759816 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.030474609 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.02737488 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.030667907 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.029698747 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.029792961 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.020570882 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.030873832 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.021685504 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.021335659 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.030258846 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.030381244 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.028719696 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.026690078 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.030019433 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.021704371 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.0297997 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.041283712 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.029028766 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.030400612 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.021586468 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.027029463 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.026748938 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.021822503 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.030926536 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.03290741 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.030949047 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.02182234 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.030414611 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.041919823 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.028620724 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.021403096 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.032785425 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.030887697 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.030887719 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.021545093 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.030879315 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.030498449 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.029817809 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.021467049 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.021109226 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.031274808 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.027442613 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.030681733 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.022286528 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.031278276 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.03110718 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.021074328 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.03051434 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.029261864 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.031382686 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.032996988 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.030749677 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.033637692 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.022250626 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.020631205 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.031905396 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.022093064 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.031038864 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.030620833 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.027652917 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.02981573 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.022206606 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.02992967 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.030945469 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.02830386 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.022046496 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.022343028 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.022204665 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.031173491 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.029627246 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.020774417 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.021273943 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.03072102 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.030931514 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.030203657 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.030825361 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.031179864 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.022481096 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.028209829 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.027783951 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.031258102 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.030780849 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.022137846 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.030971902 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.030460365 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.031371474 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.027650227 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.031046406 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.022620533 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.03098428 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.029619505 seconds)
done (took 6.11082023 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.078755914 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.063223978 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.181066286 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.148611374 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.036427965 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.037766918 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.027508431 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.043242161 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.02966146 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.048764937 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.049329943 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.04710981 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.165242128 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.044544806 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.022136197 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.034985507 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.022968109 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.050107857 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.146985114 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.048871699 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.066818442 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.021054815 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.03826184 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.041537476 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.035139191 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.041896955 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.047760785 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.023095471 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.041035759 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.040683352 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.050451209 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.025089816 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.022724353 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.042830781 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.039817153 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.032385891 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.021802654 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.030152993 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.034555241 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.02201559 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066893475 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.042113875 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.03014762 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.029825845 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.022955292 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.037580584 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.023129252 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.031266973 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.03760499 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.029956664 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.0350993 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.039825118 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.024348557 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.040536612 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.020864535 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.030633427 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.029684178 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.022156051 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.022837631 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.022140341 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.022027099 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.025316419 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.035441433 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.041168373 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.026082192 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.029947174 seconds)
  done (took 3.79760264 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.048399047 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.071163612 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.03761596 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.038161682 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.021867167 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.022167221 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.022138603 seconds)
  done (took 1.22614781 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.095991532 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.142568674 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.147171976 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.148975912 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.161001562 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.145374455 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.036110658 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.044056232 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.059253889 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.163433605 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.155528547 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.149880744 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.024986846 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.03329396 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.056221642 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.151571385 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.036099331 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.030185871 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.142478828 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.150427489 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026154663 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.045697976 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.036472377 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.025866272 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.151529232 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.144919987 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.02704784 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066776662 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.025421525 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.022931573 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023060718 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.046785907 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.144911417 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.036838001 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023267857 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.021639158 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.14224861 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.02387032 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.144304727 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.028936269 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.141570228 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.025661416 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.025686664 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.023232966 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.023822686 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.141624582 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.024342473 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.02257605 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.022248532 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.14606668 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.034792454 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.145461627 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.024979896 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.026342827 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.030896804 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.028575015 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.030472594 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.023335645 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.147299132 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.033867598 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.025029105 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.150495692 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.150583997 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.146070881 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.151415035 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.032889066 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.146430604 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.142577727 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.02362495 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.03154876 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.023840856 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.15363981 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.027651819 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.025982517 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.021746872 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.031035874 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.15751729 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.157791625 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.157809134 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.033763988 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.024849322 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.024408667 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.158631039 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.158788357 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.027722089 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.02366192 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.02409909 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.04053276 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.049412726 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.026405128 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.028833385 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.023919392 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.035288366 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.026076634 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.025611224 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.152155295 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.023007029 seconds)
  done (took 8.017712394 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.040731421 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.023455328 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.023453065 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.023940471 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.023922482 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.024057341 seconds)
  done (took 1.207892266 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.063593882 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.024356349 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.023929688 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.024323047 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.047649288 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.137855826 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.138192161 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.025825875 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.04198322 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.036804903 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.136542124 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.139855264 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.13939255 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.025341781 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.136557579 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.036063373 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.136728117 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.02910741 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.034788527 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.024915652 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.035217703 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.02449322 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.024781697 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.155740026 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.019052027 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.036038007 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.033454682 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.035598476 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.035236383 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.024675881 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.024664243 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.018679279 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.034621485 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.024897209 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.137028107 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.034878081 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.024342697 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.019481586 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.028213353 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.018364423 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.14017459 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.025997324 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.028641145 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.019716301 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.024896499 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.034407061 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.019705122 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.034241545 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.137472524 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.019903363 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.019398161 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.024391959 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.018710312 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.019511616 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.034404498 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.025011128 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.019499445 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.138182991 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.025560364 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.035129352 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.024496558 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.018728549 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.024785181 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.018410616 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.029508178 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.019682078 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.034624304 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.025517839 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.025204981 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.023744824 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.019405912 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.023637569 seconds)
  done (took 4.30162335 seconds)
done (took 19.514001798 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.4587246 seconds)
  done (took 1.432626927 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.999409593 seconds)
  done (took 1.983076973 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.051877982 seconds)
  done (took 1.050760168 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.301529265 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.482889279 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.7441811 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.092916843 seconds)
  done (took 2.60019543 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.859991047 seconds)
  done (took 1.865045125 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.21423733 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.179857056 seconds)
  done (took 1.42632932 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.511155657 seconds)
  done (took 1.510745056 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.397079455 seconds)
  done (took 2.410065654 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.196770197 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.139287613 seconds)
  done (took 1.340257521 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.631106663 seconds)
  done (took 1.632550584 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 6.687596064 seconds)
  done (took 7.689490138 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.204353965 seconds)
  done (took 1.255658456 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.24693722 seconds)
  done (took 1.247587584 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.707823093 seconds)
  done (took 1.708441206 seconds)
done (took 30.160344716 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.045336206 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.039953372 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.040110879 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.037529584 seconds)
  done (took 1.157850682 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.031920541 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.027698223 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.029689526 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.030225035 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.027559897 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.029468624 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.030106453 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.026515952 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.027401082 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.026772186 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.025630119 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.026682837 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.029154019 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.026247612 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.02903221 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.030274211 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.026704386 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.027319536 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.02847073 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.026594086 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.029618661 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.026666598 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.026818356 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.028042631 seconds)
  done (took 1.684384065 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.040875129 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.037427738 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.034778397 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.034659349 seconds)
  done (took 1.153169846 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.033876842 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.032658276 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.041197084 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.041013345 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.032808688 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.033810277 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.03982132 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.040030316 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.047438715 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.042620463 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.024070253 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.023504963 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.02286776 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.03714725 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.039250682 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.017439818 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.018626921 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.033560511 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.033012756 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.035859163 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.026145496 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.021456775 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.032791656 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.033270735 seconds)
  done (took 1.795484778 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.038307917 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.021566154 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.038146261 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.047357728 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.048116383 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.02172969 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.035855321 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.049082214 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.195035995 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.021962908 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.028504688 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.021818215 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.061411981 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.021586896 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.037272419 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.172312355 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.175120485 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.026345275 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.054378084 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.021697983 seconds)
  done (took 2.155236558 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.030205195 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.030207882 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.027981577 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.021539834 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.033412031 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.036849131 seconds)
  done (took 1.195572422 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.025101226 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.023315255 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.023182518 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.027848985 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.022943837 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.023058215 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.023324726 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.022086302 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.021882645 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.023197487 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.023269859 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.023574412 seconds)
  done (took 1.302099873 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.166508098 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.028687674 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.026682906 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.022292657 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.024009966 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.023233648 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.03711213 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.024977649 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.040693676 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.023075072 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.023391158 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.02584648 seconds)
  done (took 1.481829413 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061656039 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067450979 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102093603 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077044936 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083772487 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053112907 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.205531574 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.036026133 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.11774183 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093216449 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080067455 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048953918 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042651426 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.025854699 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057275417 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073950708 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093736484 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029511557 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076740396 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.241407672 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089036558 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.08779595 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103930665 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080974787 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.048483176 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103632289 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055014795 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.059538646 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08101413 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084067192 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07896208 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.060528669 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.02789525 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.02730268 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119446463 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.061064576 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078425005 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.051381299 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.063787597 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.047210354 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084807972 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.026746823 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.041133002 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.069561181 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.04470962 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09430787 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.052968272 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074539931 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039104654 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100089867 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088500352 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.18902923 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.045274514 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064807951 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103456982 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072023105 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092996381 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067194823 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039366091 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.080936971 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.070380594 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061494483 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068317639 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038672173 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.296892168 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045818827 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.081929193 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070737238 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.04785844 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052033897 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.068194142 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.093829986 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082168932 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.073890152 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086907364 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.049499137 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083903485 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.05622984 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.081631727 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058236929 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.028756178 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077316599 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085184138 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.053612287 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.056239361 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083424223 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.060786394 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032493184 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.046642695 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.07640547 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.036994164 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.064771234 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041949965 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.085000946 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090783256 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054242572 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071836629 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07820716 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.035204204 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122353505 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.066831966 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029885607 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076301327 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070307274 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109287945 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053193728 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.032183785 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.057690545 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059551436 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.119732297 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061369936 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.038151242 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074792854 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102396552 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054028947 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.284234511 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.054236871 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10232391 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075428088 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.045630487 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.033101127 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.05464801 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072658963 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071097671 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083947226 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054568106 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.041413207 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04529111 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.080089402 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066210951 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037728381 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08000655 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.063422282 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.03277364 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047714324 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.034839964 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.274075112 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.044423408 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092911719 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08950669 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.032784344 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064184153 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.053902703 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063012145 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.058710773 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077877846 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095762847 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.155026265 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.047076229 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.03987877 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065095646 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.100927641 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081941567 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047942509 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.041504229 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.0560967 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067905129 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.0570031 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.33234042 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050537233 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06738123 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059863656 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098292128 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100407597 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057865657 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.062745576 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061971473 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.070612525 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031484346 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116160855 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060413905 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081624385 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.044471471 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099599636 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.075198928 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063426357 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.044486464 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.062499575 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.060127422 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064575091 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102180585 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.051538718 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.029341048 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050524202 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105105967 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.034547725 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077289505 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.048722451 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.050217386 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075643604 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.051474403 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040108511 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.025329714 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084240972 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11882254 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.027290279 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.07683801 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.074637652 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.062313306 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.082388471 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.026472849 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087564172 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099584377 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085955939 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108558388 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158847946 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.235623902 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.074370375 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.07669518 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.069444651 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.035926547 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.082921879 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09103125 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048785822 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048710647 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091218153 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104541364 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.090847229 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.0688828 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078304077 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.060401842 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065138332 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059226142 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.056646672 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099159938 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079776534 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.083070604 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.0416025 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068742602 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.078152052 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094064532 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.037599521 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097146292 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.04168559 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099192639 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.034807034 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.083054054 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.032931327 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.131244491 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.036924588 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057197257 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.026785053 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.029460927 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101207843 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.079911896 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.062218304 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055934882 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.092479039 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095651699 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.03462376 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070717127 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.073037396 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.062383623 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073116586 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.068883939 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.047484884 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054082149 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.067920012 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.043356269 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.039203611 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085455952 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053940877 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094865464 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.04130171 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.032308858 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098751855 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070981907 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052445172 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033921421 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067812624 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.088366052 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.0522937 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044898393 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081854552 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064982171 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103694695 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.049680636 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.062140293 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.248669218 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.038487165 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.053764883 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.026725339 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.046925939 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.033813553 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083133927 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03349118 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.073077579 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.025578502 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085701255 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041077634 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.054662409 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.061615133 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064703278 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092200376 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051784308 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095852034 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045263223 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.076739146 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06477136 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069173429 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04349156 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060568116 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.061284621 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077677093 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.051370175 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076753224 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099947194 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060232948 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102125199 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047501303 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081890664 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064491876 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082829119 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.069796354 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152479818 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096429939 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071605798 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070654121 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.032251193 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053047939 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068721086 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.068542307 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133465868 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081980258 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.02880896 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.061689771 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.051326286 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065242602 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065237058 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037285829 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101817421 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057877541 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.045869432 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067843858 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.047879493 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.06435574 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033744827 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061499285 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.054582273 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.054246471 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056665759 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.077603403 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08969763 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070141312 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106999335 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.06293644 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.050034361 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.079815575 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078646712 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075108669 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041774234 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042177449 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.25854807 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.076033246 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.083456895 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.054367333 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063874 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.069396131 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055302223 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084924709 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06202857 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.079180449 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035582436 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.032894789 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.025212844 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.028171917 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078646793 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066732397 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065522437 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061222856 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.029040127 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.062565948 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064591869 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028636776 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041561328 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049293447 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055232322 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.038171513 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06163716 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.07230463 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.051412585 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058240331 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061629335 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099081373 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.055757842 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045234114 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102110922 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107339133 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045324077 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050029865 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.028598669 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.03640948 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079807894 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101742603 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107055676 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.036089364 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.043839183 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.041325777 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044024156 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.028145623 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.046006303 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.046566467 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062585161 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057309559 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.071704681 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061990292 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031867635 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.065876889 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057588225 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.064288308 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.067201621 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08122207 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.086574776 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.098822154 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074849922 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074736174 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033552688 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.037229569 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.034313118 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03756835 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.065838474 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.036954979 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033657914 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109434665 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.0509005 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072055568 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073902324 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04724585 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032984125 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095254755 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.026841694 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096378439 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.02826288 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.194356088 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.039449884 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035313583 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049734045 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093447563 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065185561 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063616994 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062917525 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066401006 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144129833 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114390508 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041266879 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097810701 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031911467 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032458074 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.032813487 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064226662 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045229373 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.074376082 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097542875 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044066216 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056393621 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.033740709 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098108041 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.053648756 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058593485 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.042282757 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.036235182 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10109059 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.036904395 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.042683561 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.047171385 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.069863019 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.029111088 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059377927 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039962389 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.036268393 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148539052 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.669873428 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054049835 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.031576618 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.054068408 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101032505 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0912565 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052616082 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067710655 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.077079579 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.062302697 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.051322555 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071556331 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.159508313 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030750123 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051718473 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.055188585 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.060032796 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065738221 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.054586476 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.052614739 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.054500822 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.044649498 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036980817 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073631397 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045181947 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.055533384 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.067300744 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04102203 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.04658988 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089622079 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.060365761 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.041487864 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046685532 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.070399867 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04441751 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065874357 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.0267889 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.070356281 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047285993 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080134039 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.058603412 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.224697861 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082321274 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051490938 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089834781 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.062056948 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078024716 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044447577 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.034021366 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077851193 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.044881495 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033541124 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097597032 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.048049146 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.060722035 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061595492 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.052937689 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06527896 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.06917953 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068067958 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.056290783 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034079652 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053458224 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.06014999 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042396286 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.0354486 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.029425659 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.032165002 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065244501 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041214261 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04335399 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074363894 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046594376 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.061415876 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.05579293 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078853396 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046787405 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.062585646 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068271581 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049346037 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090351929 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058421401 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.086520638 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132633238 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088975565 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087827931 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090934821 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.034478155 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.035626241 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.025427033 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.072198497 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.036648931 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.044110443 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.035353484 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09089453 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.04181141 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068474232 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.219332257 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.037072326 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.050159894 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053951756 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.026812438 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.041192898 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068108892 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044515905 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037359747 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071439668 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039484761 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087399474 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067753289 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058298295 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.054637928 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038674592 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069094488 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.063745283 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.089942456 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.058074676 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.033063905 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086251726 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.066678131 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103599485 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.032485509 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039142677 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.243269199 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058929555 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08617604 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037794093 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110920791 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098206298 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059374603 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08798423 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027087501 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045963112 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.04444438 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.079553838 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039271835 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060563711 seconds)
  done (took 42.980147518 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.136483428 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.257292778 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.130526638 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.111685779 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.077916152 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.080730107 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.248281944 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.092006953 seconds)
  done (took 2.271121217 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.025460035 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.058380306 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.038391538 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.317603762 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.056750302 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.023124457 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.029597773 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.039321374 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.023184583 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.022666971 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.05889792 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.023018982 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.023136991 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.456428569 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.021705729 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.02691535 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.023003079 seconds)
  done (took 2.411821279 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.317322106 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.699936018 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.284014508 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.473078743 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.10628763 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.563509689 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.031160116 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.036817166 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.64965967 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.362332903 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.099751357 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.184033545 seconds)
  done (took 17.940414332 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.032435344 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.157045239 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.156451247 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.030810726 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.030543161 seconds)
  done (took 1.606392157 seconds)
done (took 80.213448172 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.042687237 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.132127444 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.023271491 seconds)
  done (took 1.319724155 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.156975756 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.15612912 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.156535242 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.156770885 seconds)
  done (took 1.75452206 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.031731472 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.03216501 seconds)
  done (took 1.199337255 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.179086876 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.299230809 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.056158318 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.0412472 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.037196774 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.037794178 seconds)
  done (took 1.253407974 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.027773624 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.026765689 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.027203685 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.027642914 seconds)
  done (took 1.237283837 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.136117772 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.022063534 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.024401643 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.025860268 seconds)
  done (took 1.341260695 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.041289706 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.042038814 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.073205066 seconds)
  done (took 1.290078216 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.040541273 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.04123545 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.035847119 seconds)
  done (took 1.256060683 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.057779526 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.051077615 seconds)
  done (took 1.24108175 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.037555314 seconds)
  done (took 1.173637074 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.046178545 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.054414577 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.215895693 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.183702211 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.220853785 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.202863505 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.035050498 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.032183647 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.035136912 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.036832647 seconds)
  done (took 2.193504886 seconds)
done (took 16.970074641 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.037448734 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.148109164 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.272980827 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.044771262 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.612615093 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.269755265 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.691503409 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.049390908 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.059388113 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.02461915 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.041346838 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.589161089 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.691677777 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.103935874 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.675107687 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.100292048 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.519267822 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.026076037 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.023984312 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.024468282 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.667364661 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.025318013 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.024409435 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.024813993 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.516227213 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.292752364 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.026533941 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.098805721 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.025239488 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.028185706 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.273235597 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.02651822 seconds)
  done (took 12.167812705 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.027109862 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.081344802 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.029400675 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.040762919 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.026417168 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.026365792 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.044217866 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.02467315 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.069073639 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.024389305 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.042039668 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.024103369 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.028698653 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.025967297 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.044729165 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.024027119 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.026017703 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.024738583 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.024151751 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.024641068 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.04337493 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.024149318 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.02501892 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.0250107 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.024703378 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.039101026 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.025378465 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.024741369 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.024979917 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.028172693 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.029250703 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.025692988 seconds)
  done (took 2.173898919 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080559186 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.082392557 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.02980442 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.065465515 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.07785722 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.027112299 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.111254801 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.047713396 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.072487948 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.025243043 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.042025182 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.024714526 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.063163985 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.025738098 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.045235964 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.024789498 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.026971131 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.025070753 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.024196624 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.02469343 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.043951473 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.024701156 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.024727556 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.025781196 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.025285047 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.041113708 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.025762829 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.024715686 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.024552155 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.028161182 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.030118666 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.026143213 seconds)
  done (took 2.431696991 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.026798002 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.02797046 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.034170524 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.037621563 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.022533447 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.025670718 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.026490322 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.022297429 seconds)
  done (took 1.369241252 seconds)
done (took 19.296433566 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.037658786 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.024175298 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.027662527 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.050064124 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.031552649 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.142907371 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.027022661 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.029648286 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.028145953 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.027675371 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.029556015 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.021399942 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.026527522 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.026913734 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.028531841 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.022660098 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.147141922 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.02725402 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.144587782 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.147341823 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.025694095 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.028894853 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.032045941 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.1461551 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.146448579 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.147135563 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.032675659 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.029314812 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.028670346 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.02595236 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.143143574 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.145012394 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.025269605 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.140733325 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.023035395 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.022847365 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.027832623 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.024120114 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.148083112 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.032612532 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.024861973 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.031631246 seconds)
  done (took 3.61463121 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.146997769 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.155364157 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.149139924 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.035636007 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.031633582 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.034675765 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.153447621 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.032063372 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.030777518 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.152777354 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.026148721 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.030360948 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.032815934 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.023126166 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.030033751 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.026432132 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.032157709 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.024545681 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.030277698 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.030638598 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.152966274 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.023878424 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.031512211 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.031588301 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.025804657 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.032361056 seconds)
  done (took 2.668917413 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.032490048 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.046224568 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.048845982 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.116156822 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.066702703 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.047238346 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.040201587 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.051450523 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.057315087 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.023610093 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.046721334 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.052637845 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.054096165 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.030841396 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.064125199 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.04361697 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.038163695 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.025451778 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.030264565 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.060697337 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.048214488 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.044190891 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.057861935 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.045170457 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.022592125 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.033290446 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.028050126 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.040799037 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.035294625 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.036382498 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.027091055 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.027284391 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.024573198 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.03628663 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.027299055 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.021741063 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.047847296 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036663627 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.039606248 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.06429709 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.034694224 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.025107274 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.051618083 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.08654535 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.02225193 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.026180125 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.027792662 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.036278073 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.024852651 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.068353957 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.039304725 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.022524571 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.04384462 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.025188084 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.02497559 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.046590346 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.025201779 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.025967672 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.04500486 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.02997832 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.046933424 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.029656794 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.044950381 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.022316131 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.035597995 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.02472304 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.025259336 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.02199908 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.058712031 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.030994646 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.072352589 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.024575804 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.021755973 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.035900943 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.035317935 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.031473841 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.022148504 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.042851942 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.037467376 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.027589915 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.042725913 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.02675254 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.026831981 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.070048866 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.023270487 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.02188731 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.021809058 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.026808226 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.027316627 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.024173186 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.037205295 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.023203505 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.027067771 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.053448864 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.023400853 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.024382239 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.026567378 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.025351999 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.023243043 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.034318438 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.027093668 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.025774029 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.037570158 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.024869241 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.027552186 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.040006569 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.033681994 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.021848524 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.025206756 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.026019944 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.025374213 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.025129426 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.026842764 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.02544983 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.029182874 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.031364189 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.029555312 seconds)
  done (took 5.405776972 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.243969576 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.234024331 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.024807016 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.229159126 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.032786171 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.158928508 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.234172352 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.233702666 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.024248932 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.024800626 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.023403207 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.174031638 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.170254299 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.181009008 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.160515995 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.026621592 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.058358845 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.180994653 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.238848281 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.232407976 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.057569713 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.031784738 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.027138619 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.026065332 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.024998332 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.037971508 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.042011956 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.033569382 seconds)
  done (took 4.346379145 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.031208538 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.070231796 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.028739986 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.050326202 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.041053582 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.024749212 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.026077515 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.024989617 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.042257845 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.029956862 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.024335094 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.028349491 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.027788001 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.026295614 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.024393016 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.031455649 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.03145357 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.023009179 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.027953765 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.029111152 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.036114502 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.048487119 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.028470046 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.024012283 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.027877879 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.024388023 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.02939948 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.032751266 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.023971058 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.024050777 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.021135037 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.033008409 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.039607761 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.02524394 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.023433759 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.024567507 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.024356444 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.02473262 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.024569645 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.022466338 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.022392042 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.029858862 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.023332659 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.029451737 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.038610809 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.027207153 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.026348563 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.027003237 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.027821913 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.021743329 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.028125026 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.028258385 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.027784378 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.033654761 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.026807942 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.027125338 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.025720466 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.039758289 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.03048165 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.023670861 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.023769088 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.022868407 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.026273221 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.030768882 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.04140648 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.026722557 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.022771287 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.024514744 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.025768568 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.038521158 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.023962135 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.031488318 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.021376222 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.024428228 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.027066486 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.027067184 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.025870953 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.022974345 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.024300364 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.023658592 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.024293899 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.024135752 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.023166919 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.026751819 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.022136022 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.022788841 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.024835535 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.026082395 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.029387874 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.022827563 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.027479328 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.025820332 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.023090439 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.026961777 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.029587458 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.026908098 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.042576833 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.031992963 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.025010528 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.021817235 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.04198863 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.027149516 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.023465429 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.026162679 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.033416867 seconds)
  done (took 4.185910245 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.055089504 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.026931426 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.044816178 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.061307497 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.035082334 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.030425563 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.038486145 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.025506864 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.04690111 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.023244933 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.033837767 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.022597741 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.038384611 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.033749126 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.026297861 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.034705091 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.026854877 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.045575983 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.040301213 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.023238791 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.033570345 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.036860115 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.037774703 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.043459723 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.042211412 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.044074213 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.037720502 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.027245687 seconds)
  done (took 2.19054001 seconds)
done (took 23.545189262 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.236350881 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.391784442 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.185523626 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.758580479 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.238342991 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.232465111 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.381612195 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.170171814 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.398053429 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.276252858 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.861362165 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.382681243 seconds)
done (took 60.758183338 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.212338466 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.348205489 seconds)
    (2/2) benchmarking "String"...
    done (took 1.43406719 seconds)
  done (took 3.954809811 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.62196856 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.176186461 seconds)
    (3/3) benchmarking "different"...
    done (took 1.217028025 seconds)
  done (took 5.177613036 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.558772732 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.161453657 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.485399484 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.169150714 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.17191715 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.81610962 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.339056375 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.862966106 seconds)
  done (took 28.173750793 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.27677805 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.454077225 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.573660657 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.684679583 seconds)
  done (took 18.238633738 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.640719622 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.552983871 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.559664323 seconds)
    (4/4) benchmarking "different"...
    done (took 1.830737767 seconds)
  done (took 7.876509267 seconds)
done (took 73.443049291 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.171758519 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.573489782 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.203299888 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.350951421 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.25790261 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.242185546 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.167941846 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.174257965 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.16910924 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.174687476 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.165256043 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.16897608 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.166171104 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.237993709 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.163982868 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.176548847 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.562580443 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.167509322 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.171791699 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.123041077 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.339167508 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.177572144 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.181569094 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.238738043 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.588088572 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.187530498 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.709092968 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.165893167 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.771472206 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.168674329 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.177033553 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.175550496 seconds)
  done (took 184.649597861 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.170721964 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.999797843 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.033139661 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.172346597 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.575011692 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.518909814 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.032164835 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.603376958 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.162133852 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.18251206 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.23048147 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.17698646 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.276844192 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.7287325 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.213013077 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.220689106 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.109288569 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.045763078 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.221966806 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.106000088 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.173671428 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.698566773 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.676499086 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.049132034 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.171245128 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.180833728 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.184189872 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.198961614 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.667031463 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.076609469 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.185821749 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.187347127 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.352610783 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.404456244 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.177883392 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.18304468 seconds)
  done (took 155.522640104 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.345079476 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.179182949 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.213404924 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.278814058 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.107218344 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.032866905 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.173571234 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.165271908 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.176426333 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.16905671 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.172063794 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.238641042 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.174852466 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.536379435 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.186424108 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.168472824 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.166268109 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.512648224 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.182887716 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.17217939 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.167163437 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.272010833 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.508019181 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.280999643 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.173219171 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.178298536 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.284489993 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.175098461 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.172471834 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.169645627 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.278642976 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.176917057 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.308445865 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.283308658 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.182666109 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.229901517 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.174111371 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.453534756 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.16743887 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.162929419 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.16435819 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.205465849 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.160854538 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.286852847 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.277077771 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.1732312 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.188333722 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.612260428 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.761997479 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.168404435 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.16082745 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.164344124 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.168708875 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.161784962 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.279761589 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.172664962 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.209234248 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.959292228 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.175675735 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.171109494 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.164204615 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.165876984 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.166358418 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.171829369 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.206580303 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.859550911 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.301641938 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.523195397 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.895267863 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.170336786 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.170411485 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.170450888 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.576242712 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.230880233 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.179756827 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.174000859 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.349413439 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.172536828 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.172614538 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.087672618 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.084553924 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.167774997 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.266361848 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.165265754 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.160101267 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.358182335 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.533403791 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.175987103 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.18197034 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.216607001 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.170280942 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.163567982 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.175464394 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.078498705 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.164462347 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.178696779 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.611170757 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.162057984 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.158998743 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.264862487 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.533953531 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.172813435 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.250086623 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.573050212 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.180160701 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.168077707 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.170373187 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.190243412 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.172501766 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.188509315 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.183988986 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.170322996 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.170858935 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.173705944 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.174447427 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.165179233 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.172322112 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.190757118 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.17320854 seconds)
  done (took 335.132857209 seconds)
done (took 677.927024084 seconds)
(4/20) benchmarking "parallel"...
done (took 1.167067039 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.429458141 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.18622631 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.405001542 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.422722465 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.375442779 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.348497429 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.371926425 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.458239746 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.39062121 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.334138219 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.391278216 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.337609136 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.454620121 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.41672693 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.429752378 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.453758462 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.374068705 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.914330417 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.384737758 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.342489965 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.378154853 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.343378096 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.329744314 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.400214912 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.435215188 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.371159116 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.575045243 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.420906864 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.374808051 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.416261133 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.437513502 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.460785263 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.387436472 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.41764847 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.438663368 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.440967332 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.39154076 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.444730163 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.356875407 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.381524442 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.399751031 seconds)
  done (took 65.988632524 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.584445974 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.366626076 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.490118193 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.476404798 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.112245681 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.51723437 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.566645131 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.35589921 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.369507073 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.494703906 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.515200811 seconds)
  done (took 19.04002961 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.433817166 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.364233112 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.499661165 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.504174279 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.604084171 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.487293693 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.539670043 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.371360896 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.383453358 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.493281578 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.500850974 seconds)
  done (took 18.361557281 seconds)
done (took 104.554052799 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.776329313 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.242365619 seconds)
  done (took 4.185844104 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.212934155 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.198174756 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.191695871 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.197329314 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.193925148 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.196973221 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.244707157 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.204103003 seconds)
  done (took 10.807842735 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.190579095 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.198286203 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.188105619 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.188333941 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.177084977 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.182649929 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.183697161 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.186275988 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.177031382 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.179666128 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.180167514 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.179491329 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.176062145 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.181893754 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.178313458 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.180721332 seconds)
  done (took 20.103438015 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.188007096 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.180737232 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.184621621 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.183884648 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.188048749 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.187577793 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.188117235 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.195269867 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.188813523 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.184829826 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.178016248 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.179870055 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.184524383 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.1840025 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.189842238 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.189872641 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.192672312 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.187355866 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.185966921 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.19178284 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.183904097 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.182290189 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.182762233 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.179641606 seconds)
  done (took 29.637445317 seconds)
done (took 65.923482899 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.781893042 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.983182426 seconds)
  done (took 6.933524505 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.175903409 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.174713645 seconds)
  done (took 3.573550762 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.18074814 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.175465061 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.177263116 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.175007349 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.17833455 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.178708062 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.178730473 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.172238471 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.173411222 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.179400074 seconds)
  done (took 12.933355818 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.180411114 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.174957923 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.174181029 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.177981328 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.18207691 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.174616004 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.181600184 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.172004725 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.182471669 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.17821868 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.175642739 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.376983672 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.197403042 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.411121385 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.184857681 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.185247874 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.184313235 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.187765694 seconds)
  done (took 22.842224203 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.191789751 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.194396514 seconds)
  done (took 3.558733431 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.18257477 seconds)
    (2/7) benchmarking "second"...
    done (took 1.184779941 seconds)
    (3/7) benchmarking "month"...
    done (took 1.179039723 seconds)
    (4/7) benchmarking "year"...
    done (took 1.181865943 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.187628692 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.185024098 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.186365083 seconds)
  done (took 9.458114697 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.625483978 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.347488547 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.391712999 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.642916954 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.845426616 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.09161199 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.840333223 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.101918885 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.93458649 seconds)
  done (took 16.993203327 seconds)
done (took 77.45873766 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.911476576 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.178024796 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.616372476 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.257076172 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.233538955 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.543256363 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.196991045 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.767210149 seconds)
done (took 37.872731172 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.222217349 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.175131948 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.198639868 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.20468729 seconds)
  done (took 19.745743737 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.161603789 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.768497614 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.194908226 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.235813361 seconds)
  done (took 19.592521877 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.572776267 seconds)
    (2/2) benchmarking "read"...
    done (took 1.691330844 seconds)
  done (took 4.44947547 seconds)
done (took 51.187327487 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.19155391 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.18889526 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.189317751 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.185504131 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.188437422 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.186204513 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.190521328 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.18617956 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.197558111 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.185508341 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.183471007 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.188072802 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.182586195 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.18046154 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.178733728 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.174467604 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.181657967 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.181741847 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.180255705 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.170416964 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.168489469 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.178211547 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.170710581 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.176877542 seconds)
  done (took 29.558712069 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.306516826 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.282309811 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.322834591 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.309442585 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.301510273 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.313616317 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.310395642 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.242711525 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.31436719 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.325037721 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.227888561 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.291565547 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.315162021 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.29689866 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.314497282 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.293010359 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.318832249 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.248521643 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.316771038 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.294760417 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.302616293 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.246525181 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.287884636 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.268445065 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.286198982 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.226674555 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.325340898 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.289194319 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.293770002 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.293224085 seconds)
  done (took 39.926714651 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.212226454 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.182640971 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.185295884 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.274064356 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.183688371 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.180048082 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.186457683 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.175008892 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.181498269 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.177587199 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.18400247 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.18857499 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.180273544 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.176039183 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.185218167 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.177914213 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.214707463 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.519503015 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.177335677 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.17713161 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.231989651 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.179067002 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.184371624 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.182468521 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.179465612 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.17720371 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.181224532 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.180133505 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.179324688 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.180861097 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.183552619 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.22390799 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.209088123 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.178397359 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.303722304 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.237351132 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.178058439 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.213706861 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.177538484 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.182769617 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.181292991 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.186387585 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.187125365 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.188825597 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.253173139 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.18704408 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.180663998 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.180567178 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.181815828 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.185475238 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.191728643 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.186273524 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.206397025 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.186466091 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.189280056 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.187044453 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.193593844 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.186568635 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.185621283 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.18569137 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.184977311 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.271568319 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.187533906 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.186957699 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.56511445 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.185073664 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.253174914 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.179959862 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.179423878 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.393564916 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.179781551 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.387871479 seconds)
  done (took 88.204376667 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.175567206 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.174269423 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.250449651 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.252800551 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.174925505 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.177058879 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.176226807 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.175993589 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.844646288 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.178512345 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.179484503 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.176894012 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.856132154 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.180628494 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.182707471 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.255734471 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.181004125 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.182590685 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.187729936 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.184075388 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.181984286 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.187369793 seconds)
  done (took 28.682915348 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.217343772 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.194157216 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.227960271 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.178870007 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.179063793 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.182204273 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.215190858 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.197304069 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.223154683 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.218283451 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.216052064 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.212961221 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.179833045 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.216417858 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.208274528 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.199513926 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.217389497 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.195655716 seconds)
  done (took 22.849007584 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.356101533 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.339743227 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.304553059 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.223858045 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.43665431 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.432909053 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.289483465 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.404960854 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.278900641 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.348580293 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.405756529 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.276883449 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.437618598 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.22141076 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.264823685 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.446594631 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.313038548 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.228819319 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.350270697 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.286039301 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.357849565 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.355512999 seconds)
  done (took 30.529538499 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.269126751 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.28924023 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.268709754 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.269407286 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.190169566 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.188824838 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.244573263 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.223182275 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.201231857 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.270713695 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.223461747 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.182021991 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.197798906 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.244401058 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.272871118 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.224556152 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.287991428 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.231371877 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.267280137 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.185089119 seconds)
  done (took 25.905001164 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.188509564 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.183659144 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.183633706 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.176633687 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.178479598 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.179660727 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.1766388 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.18124706 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.180642185 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.470360333 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.180597609 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.182458338 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.173919546 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.174347843 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.184049208 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.175146277 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.183891958 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.181952294 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.181116084 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.17792869 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.463955283 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.183403268 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.183798468 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.185639506 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.17962488 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.183662532 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.183423349 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.182540557 seconds)
  done (took 34.821126357 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.235401231 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.186990252 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.175826574 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.182623661 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.18145768 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.263645845 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.178592984 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.181063152 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.175050588 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.181589656 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.179592845 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.185871404 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.185118419 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.244064582 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.182285578 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.18581337 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.27361661 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.178509821 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.260428698 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.164631422 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.177490286 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.273584185 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.18389777 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.179932714 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.169887065 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.176496281 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.179952921 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.172181739 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.175822119 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.177835115 seconds)
  done (took 55.025654657 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.202405775 seconds)
    (2/2) benchmarking "in"...
    done (took 1.206072113 seconds)
  done (took 3.570190032 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.183738039 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.343035245 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.187675548 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.385339511 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.354190484 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.360194554 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.403927598 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.284204666 seconds)
  done (took 11.675735644 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.188545588 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.330493001 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.302270511 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.181330398 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.181477242 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.44322085 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.187485605 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.985812247 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.843055044 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.148656581 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.281547329 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.763056556 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.158434599 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.466740133 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.291083332 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.01439611 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.326025377 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.602833784 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.110119302 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.276563048 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.815435616 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.238871893 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.180940337 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.186459261 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.186977182 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.112169116 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.928542015 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.773664415 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.258323152 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.276179576 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.851874542 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.212707791 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.183507536 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.36413613 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.27062945 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.178019537 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.261079779 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.258236464 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.179019973 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.179140632 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.704504194 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.83005488 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.338335079 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.322364391 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.236608036 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.182239349 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.183259293 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.188148541 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.391833019 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.843372297 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.165303277 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.133867335 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.310755903 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.188055724 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.645451176 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.277200615 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.172685871 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.095193332 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.678157243 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.280818374 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.540792534 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.259600063 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.123873611 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.279091633 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.175877019 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.395942497 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.006060616 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.894115695 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.812904505 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.261226488 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.554263609 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.32254995 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.180194016 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.184343497 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.110165072 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.486237976 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.201233283 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.180069236 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.182833843 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.177581932 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.343661033 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.269952714 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.969075528 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.314609032 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.390488289 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.57842273 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.277845549 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.17656646 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.775705591 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.026307609 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.282408284 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.624562952 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.474500377 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.316110339 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.097289747 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.402847881 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.207941443 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.190009001 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.981924473 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.571845795 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.308990702 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.179814282 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.552968914 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.220278446 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.195384787 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.176618802 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.806641577 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.281194294 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.250302923 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.197204175 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.179932594 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.177861552 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.799186358 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.287536186 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.195063851 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.684668809 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.162591308 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.508569199 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.50156662 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.307844469 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.438916156 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.110727497 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.415964813 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 3.011821916 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.207032822 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.482594599 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.194135161 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.793510917 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.380660718 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.288629275 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.848270045 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.367795453 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.207178891 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.258379759 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.209737007 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.182457204 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.18420259 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.187125324 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.180957779 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.191055285 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.287353374 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.474688397 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.752592169 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.277461366 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.387995833 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.295067677 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.808636296 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.425003813 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.801980978 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.316365849 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.188819229 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.685833207 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.328004672 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.956870575 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.277722878 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.186437517 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.187473825 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.003280923 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.123357451 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.24405302 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.188287256 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.813658272 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.294383517 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.195071447 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.179460105 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.662658359 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.306416498 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.180343592 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.206151173 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.857694289 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.800442255 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.282030083 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.466039887 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.291079341 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.183655119 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.183083401 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.179599415 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.922868595 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.852404739 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.238794275 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.769887855 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.868823157 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.20738345 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.260530619 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.239340521 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.363462826 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.325466161 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.305732571 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.178722742 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.186443289 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.185904701 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.713806061 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.012923495 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.99106972 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.071173767 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.188985255 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.175259865 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.299341939 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.833620423 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.357950853 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.826300095 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.070687707 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.259108975 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.186918483 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.19129237 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.311104907 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.317599862 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.316746339 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.534755652 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.308454462 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.17827546 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.772762358 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.278385113 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.792306259 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.250320498 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.964414337 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.170517626 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.266128073 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.269992729 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.679261745 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.225753349 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.179806915 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.76617925 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.249819744 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.186932097 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.190697794 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.621120049 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.066083789 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.890447718 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.604312764 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.201397402 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.744078284 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.390005208 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.317766309 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.957604905 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.255157843 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.465588477 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.248198415 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.472970234 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.304325027 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.771539183 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.348540491 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.685965338 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.292252334 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.109431645 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.28114293 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.579620734 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.27071094 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.191667457 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.286368381 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.253815042 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.783704812 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.281303446 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.288311764 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.482378545 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 3.98700156 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.251940586 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.459608322 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.240616607 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.042454907 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.130728069 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.496694262 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.049390575 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.160471965 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.286655188 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.906427833 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.280884784 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.463763273 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.323969885 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.190523965 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.194918476 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.356801007 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.245137155 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.192818148 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.455070659 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.12147422 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.236772152 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.291698802 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.204575682 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.193291024 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.325766611 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.232609444 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.350017632 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.514732881 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.751679792 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.908926704 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.268096709 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.709170292 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.223253185 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.897825214 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.28992124 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.196916998 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.785739856 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.276539874 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.384170131 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.301460219 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.264572756 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.633623903 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.373853304 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.38171785 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.234487595 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.269679486 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.889045607 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.710951981 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.38722941 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.379071394 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.351037737 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.738455866 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.218136061 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.736204142 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.188856843 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.910950472 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.207920452 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.205828358 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.187521279 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.188751521 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.740977687 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.163815095 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.203415685 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.927221552 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.664383732 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.24386024 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.951880413 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.289540143 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.200378658 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.18894041 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.185705767 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.115537183 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.231244442 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.386984103 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.255914267 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.182451769 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.181534939 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.127449764 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.409178163 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.868908918 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.966888147 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.103778396 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.316749911 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.186667927 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.185997562 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.184963041 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.185848654 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.18469766 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.186117974 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.471397682 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.322301899 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.825949725 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.29677554 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.205635732 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.32961709 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.214149445 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.191002576 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.297368665 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.215064881 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.277203874 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.241441878 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.181244453 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.604598733 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.31906204 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.175029608 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.405509554 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.360785634 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.349523774 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.480207304 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.33188384 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.621685205 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.516844886 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.964728964 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.204768497 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.112259779 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.28329012 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.921680665 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.14025978 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.584510283 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.785470503 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.182709093 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.384511805 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.005405435 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.589823999 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.282711347 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.206713847 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.180813255 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.179766663 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.208212258 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.36510286 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.209698726 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.435662963 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.290488725 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.165006041 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.413447208 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.244207751 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.211286426 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.347911338 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.203235537 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.188524978 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.186842809 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.576208278 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.958419688 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.215938382 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.184623477 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.108997708 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 4.011774805 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.011804327 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.811127888 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.126254631 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.305712315 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.180319868 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.358431435 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.22554818 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.734532691 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.291111947 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.90705411 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.477394714 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.210778132 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.294428899 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.555453406 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.853057864 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.452282919 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.264016505 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.188785101 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.483273858 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.114547166 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.320654602 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.113555717 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.4447064 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.730356461 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.659403144 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.369156876 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.254960787 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.10037406 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.773172645 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.180922122 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.192791818 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.981402168 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.31222514 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.43643962 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.060396185 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.374130582 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.320112797 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.841373484 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.874265794 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.316943909 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.743129263 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.30984663 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.190905287 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.759842252 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.196672532 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.308202897 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.269816188 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.189482575 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.206241931 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.795005475 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.77420321 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.371496374 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.221725931 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.191693598 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.745565707 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.011701375 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.289675106 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.1969647 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.182943774 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.423517659 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.331369384 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.185873075 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.606223528 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.81268028 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.326589407 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.719328376 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.282690605 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.320676271 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.380945147 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.546467822 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.318422647 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.243272743 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.185116714 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.182672972 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.183141277 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.52308606 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.307767584 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.182617748 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.737389535 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.311844106 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.775967501 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.278393522 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.365708277 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.215314496 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.611959261 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.31025584 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.708989313 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.10409693 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.290614637 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.489887908 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.250185549 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.276905491 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.846610458 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.262269332 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.20438004 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.074663524 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.425661937 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.41536819 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.480089183 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.43972644 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.235472214 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.812442732 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.256357527 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.748497947 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.29587592 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.182121201 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.693475563 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.287652718 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.509115605 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.299806895 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.611759251 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.270692496 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.546272059 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.409953744 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.273246121 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.198696871 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.191328947 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.121906724 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.197587759 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.768493134 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.108727019 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.570234708 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.268656266 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.090651195 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.684098987 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.768586818 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.479551708 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.292280231 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.40797792 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.354191423 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.13002485 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.46343479 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.196623522 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.331103556 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.277714821 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.92377118 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.200410074 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.188846269 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.531829168 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.303559362 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.186075363 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.185871429 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.102819829 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.922816788 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.249201215 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.330668181 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.241262676 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.186856429 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.777004244 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.456464716 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.209507971 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.186761882 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.191567447 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.003356031 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.25884528 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.189170662 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.477116267 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.302129834 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.428117528 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.948480243 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.596334515 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.262894305 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.186033678 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.180206453 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.72481607 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.695735412 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.314191582 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.559458441 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.227997585 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.732292971 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.174302319 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.618078636 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.697130259 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.132215535 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.272536315 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.184024655 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.174953417 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.880349639 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.215090572 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.955071779 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.548696742 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.244829862 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.940999445 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.072648544 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.207672106 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.355604676 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.199048061 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.195844349 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.187910653 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.187691238 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.684456832 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.180118352 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.200410964 seconds)
  done (took 1459.212124974 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.504854204 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.182863361 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.18972401 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.180924008 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.184229838 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.185016821 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.182484827 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.182465506 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.179693421 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.182023802 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.178894109 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.179234493 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.179308355 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.502892456 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.189425201 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.182299095 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.185129414 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.18460815 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.186499242 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.188168986 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.198435704 seconds)
  done (took 26.680859918 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.197389152 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.193790781 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.200044223 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.191307904 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.18624451 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.186911138 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.188146585 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.190056975 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.191874866 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.188314195 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.190523474 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.194635821 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.193010719 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.196302774 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.189518513 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.191345211 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.186468875 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.190323295 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.1960169 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.195233212 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.195087983 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.189961852 seconds)
  done (took 27.400526357 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.186872737 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.192665374 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.848837642 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.272173387 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.18305371 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.185610362 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.184045731 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.360039079 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.16288815 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.086360194 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.634192198 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.226142032 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.193511986 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.341191635 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.273775329 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.193272929 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.311681976 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.190989921 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.188189803 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.186579434 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.183477638 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.350339986 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.285275819 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.193333421 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.976680056 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.320956388 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.189354998 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.19683708 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.18873837 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.183759619 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.290963673 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.207778138 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.002537109 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.884830518 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.417041723 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.091149217 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.296436712 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.203269173 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.183301061 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.182477294 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.411662499 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.974875032 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.201985478 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.185997328 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.426616357 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.263070659 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.192919914 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.572621337 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.241019538 seconds)
  done (took 91.882747906 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.212839588 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.37919409 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.276673642 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.196319878 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.369106767 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.193949026 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.342988088 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.199636099 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.197279536 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.204074725 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.392869722 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.3770017 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.195056361 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.193962073 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.337244647 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.192999315 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.192053966 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.19483006 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.195163509 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.192928737 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.192893855 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.292344541 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.371450347 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.368523001 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.189096423 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.187902781 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.183082744 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.184375522 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.351750889 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.194812165 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.184801034 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.194559324 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.371761288 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.326165377 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.187780566 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.190606311 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.371769474 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.196297238 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.190180421 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.193095645 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.184263599 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.183975646 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.29626797 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.381178011 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.195620755 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.324321737 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.189976596 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.186909041 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.356948538 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.186801752 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.186770631 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.36980036 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.181629471 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.188858018 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.186631008 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.361168995 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.188216649 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.191527377 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.185850882 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.355694408 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.187605064 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.191871039 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.365216776 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.188500885 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.193688728 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.372457845 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.317356298 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.186574825 seconds)
  done (took 86.029594626 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.185402851 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.185357289 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.186257173 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.189428214 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.177261354 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.182249724 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.185874629 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.184476686 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.184179196 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.18566412 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.185156331 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.184924523 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.1795897 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.186325069 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.179645816 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.183809257 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.184367185 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.185152746 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.18721316 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.189418512 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.190526017 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.187163087 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.194543233 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.183495991 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.553291789 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.190319276 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.192386842 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.187236968 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.19671272 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.191858658 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.554539462 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.189556641 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.191455249 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.194723165 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.548561578 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.183877039 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.188024933 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.189886836 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.192466744 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.189175102 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.194126754 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.197916722 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.196931812 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.199380552 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.197184189 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.196797754 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.187745453 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.553536828 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.191705784 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.187903315 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.182684284 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.186956545 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.186360645 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.18496105 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.188636686 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.340269558 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.188556706 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.188038483 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.186693345 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.188485664 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.188525227 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.334924192 seconds)
  done (took 76.6043981 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.181452657 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.190625417 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.185713081 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.183876172 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.190814701 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.190985029 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.19136189 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.186553256 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.188076419 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.19142834 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.186049525 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.192092192 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.18844416 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.186897795 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.194709557 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.18873095 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.193184357 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.19609617 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.194540913 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.191230206 seconds)
  done (took 24.96553663 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.187537179 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.182369702 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.189709349 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.189606073 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.188886934 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.183685735 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.193345354 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.188059372 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.192932264 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.19109171 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.190758773 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.185248967 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.184592495 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.188120673 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.188746877 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.184169526 seconds)
  done (took 20.181070319 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.188385776 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.181622949 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.183469626 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.183266572 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.181835325 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.187351181 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.184776863 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.181131128 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.186364854 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.719455372 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.188502878 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.183914606 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.183481628 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.186371281 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.190387928 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.190331969 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.190496789 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.191316506 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.185616597 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.194649584 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.763629007 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.196631769 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.189698778 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.194717756 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.186686263 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.762436965 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.18671477 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.19268816 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.191439424 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.19424042 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.194518697 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.680573518 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.199509278 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.197946765 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.199852114 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.196106167 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.200183859 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.19505241 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.193304926 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.18790977 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.193723541 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.194525279 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.192860085 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.19451343 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.19028349 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.191174233 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.188039554 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.654032168 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.189744171 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.188688481 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.184984938 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.188731662 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.181630993 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.744592176 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.182331093 seconds)
  done (took 69.801114393 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.272593635 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.287122711 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.185349457 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.186314821 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.237259737 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.232814214 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.276645572 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.201541638 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.232858511 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.178355762 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.266364813 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.202709845 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.232617228 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.289935775 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.271080149 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.274809299 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.183055542 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.262042344 seconds)
  done (took 23.446237695 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.188571892 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.187985611 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.192908861 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.189052346 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.184036695 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.189796282 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.198068204 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.188079686 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.192892096 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.18807117 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.194968024 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.18082392 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.193419599 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.189311159 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.189406677 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.186516369 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.190042023 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.190597089 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.193857184 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.183020157 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.192511856 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.184074578 seconds)
  done (took 27.346824542 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.217414251 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.233119572 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.187865215 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.185771514 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.183627806 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.200509444 seconds)
  done (took 8.37855848 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.230543064 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.185587305 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.221071624 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.232956147 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.183111047 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.193359746 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.185718033 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.187504808 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.191026965 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.527448704 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.184248195 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.192790706 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.189248986 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.185234922 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.189834745 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.190578931 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.190738281 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.188421991 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.229152296 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.332944406 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.187558132 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.190339072 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.185491075 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.195235195 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.191955571 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.193462551 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.188205287 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.528006658 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.192541344 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.195985301 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.189341352 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.189488827 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.194643353 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.527640834 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.239951464 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.188038935 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.18765343 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.326707569 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.194214576 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.189048151 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.233607272 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.193016956 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.18349236 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.191168961 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.182093902 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.183744553 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.182873999 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.18709205 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.185820559 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.603674292 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.186829769 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.186940601 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.183385193 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.189646044 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.192745517 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.59637442 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.529217326 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.198879711 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.187878668 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.522981482 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.195483537 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.195757314 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.192648151 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.524839895 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.196443182 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.19448082 seconds)
  done (took 83.076418081 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.192968281 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.239201654 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.19342244 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.530573731 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.193565856 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.195750617 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.203618882 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.193956205 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.197608166 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.247361368 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.335085914 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.192658479 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.197483423 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.19277864 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.192910564 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.200062422 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.192263836 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.193593412 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.242055859 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.601395883 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.191129867 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.18632451 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.18331323 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.185488523 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.525110437 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.184904697 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.191423894 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.183767945 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.190149842 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.183585891 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.180764583 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.184103067 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.183708728 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.220034304 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.192055018 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.184159326 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.184482891 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.190950644 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.190212969 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.191036479 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.182846338 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.330477822 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.18919101 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.190599878 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.520972443 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.18868383 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.190319251 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.252244302 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.199091397 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.248222978 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.530954917 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.528583191 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.531695218 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.194818626 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.193419364 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.193583389 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.191203904 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.192862159 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.192704222 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.195359253 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.198787865 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.203295401 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.614942987 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.198363421 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.19117022 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.196098264 seconds)
  done (took 83.262802418 seconds)
done (took 2480.194237644 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.231829237 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.350755636 seconds)
  done (took 13.756613457 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.189294237 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.199802367 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.347513808 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.209116637 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.193672484 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.305480096 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.275407825 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.19180942 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.192486563 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.277145295 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.189445583 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.311390462 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.297065443 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.190063737 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.196641275 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.203151449 seconds)
  done (took 41.007759656 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.240652257 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.380886216 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.210735294 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.986714253 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.190068298 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.294882204 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.539074613 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.566108532 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.485836931 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.64160255 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.455169205 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.787028085 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 6.112514908 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.332929615 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.782907547 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.869517593 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.974541472 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.028469031 seconds)
  done (took 62.067628907 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.189809236 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.325037219 seconds)
  done (took 8.697620309 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.208400743 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.199392799 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.217720132 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.175582758 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.17590397 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.206524836 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.206646481 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.204955839 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.198423765 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.210421117 seconds)
  done (took 63.187519648 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.179053367 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.83260061 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.601552582 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.799657105 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.788056591 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.5863593 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.33132399 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.550266066 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.267287892 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.174781308 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.074685235 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.682250581 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.950692926 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.165395454 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.685522572 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.514890026 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.764930116 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.708811916 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.502451473 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.564936124 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.414560371 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 4.963497164 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.618453107 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.05479969 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.189753821 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.353924815 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.351214385 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.288297031 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.268907744 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.143596466 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.058323864 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.208158455 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.220588873 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.184995818 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.292072386 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.753688092 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.888912447 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.396790038 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.43024575 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.490324366 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.557165953 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.468283879 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.308469802 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.469053452 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.41884935 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.453259486 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.155839534 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.418930294 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.292692629 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.304067822 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.730106597 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.371120548 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.319580879 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.298561334 seconds)
  done (took 155.040581405 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.171258176 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.410983062 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.353119559 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.178370243 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.459914041 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.397401832 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.975648776 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.695250211 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.187544718 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.389532364 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.357014997 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.307411703 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.178982794 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.176496772 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.186209366 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.192459386 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.371994023 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.710205634 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.19417045 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.172748636 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.402435159 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.432728485 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.324223412 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.183773141 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.353668096 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.434952207 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.664198777 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.310485781 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.582362267 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.17667024 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.66420001 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.194163233 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.190529175 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.088753388 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.606495252 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.515351754 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.651558526 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.177890398 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.99506993 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.182756246 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.847663581 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.37752431 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.504776521 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.339692519 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.442643519 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.418696419 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.782852516 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.179310209 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.936912404 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.358539273 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.410863739 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.409987558 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.469902123 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.195874321 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.66999626 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.183566172 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.178481444 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.4425794 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.342538713 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.307719129 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.193156293 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.172620453 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.180039609 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.429416667 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.179305465 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.285214593 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.182486139 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.175629895 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.295947604 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.315966238 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.348566465 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.432360503 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.447737816 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.43732548 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.185704846 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.419768492 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.62085554 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.419394625 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.182985631 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.178708966 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.624334387 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.627547861 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.342471235 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.429048188 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.495897482 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.487337867 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.748260425 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.180970893 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.409721815 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.353014027 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.411838648 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.458507899 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.533347992 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.106968883 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.182332915 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.187161035 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.367219382 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.323911109 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.179036403 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.699140528 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.450403434 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.706072865 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.361962309 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.490365214 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.297531734 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.183575907 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.741796973 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.17465339 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.402120948 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.470631959 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.177720501 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.175519245 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.335794869 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 1.921089191 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.180047045 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.200933633 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.626786028 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.19175233 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.341981555 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.183083827 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.4286973 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.124869504 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.419679953 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.949301055 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.46354295 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.381514139 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.466177856 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.188389458 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.436149179 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.462668113 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.592129883 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.42061399 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.746972619 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.181771607 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.490613955 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.178678894 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.18061626 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.358485836 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.162633608 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.361767323 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.185527115 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.439144193 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.347402945 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.550058299 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.198512033 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.423592311 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.440164091 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.607501633 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.195174606 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.316881583 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.184131741 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.083776793 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.352484433 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.180512861 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.182253768 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.02175964 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.177860356 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.323565046 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.40976852 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.819003195 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.682375831 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.531584582 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.176653454 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.638654703 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.382477117 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.479142922 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.731298973 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.349740602 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.175025401 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.176453976 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.182994229 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.424046108 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.37802935 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.190567289 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.177749298 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.905337989 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.29185586 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.18254792 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.368274677 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.617079283 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.599309687 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.397646259 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.183875701 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.520712371 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.19580226 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.364146114 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.69915361 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.377515627 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.186302627 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.18807999 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.1838511 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.179921141 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.396292591 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.438545275 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.660811999 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.33496388 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.484599974 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.406828016 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.49866516 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.641850099 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.194492741 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.427061651 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.188965553 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.64160539 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.195389419 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.327693225 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.488711782 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.172119165 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.505228021 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.533247007 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.147966549 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.648962381 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.181495652 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.179829254 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.016019487 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.347934617 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.668980003 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.184772266 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.287800272 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.567991768 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.302717546 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.375953505 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.392132144 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.161512992 seconds)
  done (took 744.580340578 seconds)
done (took 1089.508859712 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.175511432 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.175456192 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.17621675 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.173735754 seconds)
  done (took 25.880366238 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.051875397 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.034566194 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.280827988 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.194707792 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.368740807 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.419252013 seconds)
  done (took 11.525529357 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 4.767452963 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.187130835 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.180483575 seconds)
  done (took 18.316977177 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.499009642 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.659143519 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.357989241 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.282714653 seconds)
  done (took 6.977822512 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.187945054 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.182486501 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.188270328 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.183926014 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.190582644 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.188597706 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.192998808 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.191294774 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.193649391 seconds)
  done (took 11.878133049 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.670979933 seconds)
done (took 80.423989649 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.615421637 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.496774581 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.186516871 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.405791081 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.31868449 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.508380873 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.297053883 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.211616153 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.552910675 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.59984405 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.688971386 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.33029203 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.670012578 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.600715895 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.403961542 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.211999739 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.210910044 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.250169818 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.86980797 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.366995782 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 6.184717026 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.308255031 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.939937343 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.205001612 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.112780142 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.25780619 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.430301462 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.184404623 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 3.80604828 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.207830532 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.285940029 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.733980611 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.357720666 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.495676793 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.280782046 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.109837245 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.659816896 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.190944891 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.429948497 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.694085853 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.471362748 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.308722184 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.180101365 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.483725941 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.608477662 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.199837012 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.14521782 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.345893528 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.801791803 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.367511038 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.569407703 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.193574257 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.81634958 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.254113206 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.274347494 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.179608437 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.258861603 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.658099583 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.413514023 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.499765649 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.21593107 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.179435347 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.200087098 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.216270405 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 6.18752967 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 3.385104721 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.597612236 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.279092309 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.656437563 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.210034622 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.207000621 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.218929269 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.936573881 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.264000206 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.180392648 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.200486362 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.458605091 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.229580088 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.183387889 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 6.270965877 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 3.385030578 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.170809538 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.405443718 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.529926194 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.34081242 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.579292291 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.687913883 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.597819194 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.686596226 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.185051884 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.539327767 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.702690192 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 7.442680502 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.184376988 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.24915029 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.395414439 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.732466663 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.693941178 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.314791377 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.875343308 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.225574462 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.211856893 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.720410782 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.512274059 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 2.033681842 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.22239689 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.318620139 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.179260548 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.354523305 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.179819341 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.738348193 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.628531631 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.193843752 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.247122359 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.667735041 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.187966413 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.470946063 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.649834967 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.264277039 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.188020648 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.408598327 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.194221886 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.367732563 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.732937835 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.57178362 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.377645593 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.183934479 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.577330425 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.17432901 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.435418024 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.189591915 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.820431532 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.764273278 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.219915702 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.450825136 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.320150211 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.185294969 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.358974418 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.248622182 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.321102177 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.497934883 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.464745932 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.321931637 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.183869411 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.501656172 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.491471122 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.420551266 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.491360605 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.340232305 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.4601021 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.269130385 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.20223526 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.20905353 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.675911061 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.760250556 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.908675145 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.397362757 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.31136501 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.756255091 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.496022147 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 2.028232547 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.286531359 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.23803169 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.183119667 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.203770704 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.256348589 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.18122111 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.180711763 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.408935119 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.52821506 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.797038028 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.041966266 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 5.890137139 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.46636747 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.316171387 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.201528456 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.818520073 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.178093331 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.59464188 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.643332529 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.318094073 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.20031315 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.170169689 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.29469852 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 2.0584321 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.224919623 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.527855958 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.848899497 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.633524646 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.634111194 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.362499485 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.233264073 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.541083004 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.425422219 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.467719897 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.446486559 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.698286784 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.265628198 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.50815157 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.264032388 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.466769512 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.18623859 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.444497892 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.425113435 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.671370578 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.537670889 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.410518955 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.416239048 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.531485753 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.191503725 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 6.194540589 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 8.06161005 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.424939991 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.21556936 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 6.183052076 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 7.915067928 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 1.641488267 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.17347707 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.306094527 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.58920891 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.284120406 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.314193323 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.68406191 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.208039996 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.519402925 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.39692222 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.339512391 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.388138307 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.216142128 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.339962658 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.373596188 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.326561413 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.408527572 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.215862245 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.600357783 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 6.272433788 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 3.095930617 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.187623728 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 1.865027247 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.207724218 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.199897921 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.522143494 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.373957343 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.484989507 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.316650023 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.341771022 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.175583994 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.286653524 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.705134062 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.13757544 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.775543031 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.336730792 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.228092856 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.193777607 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.692570374 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.625937763 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.246767632 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.353958632 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.805933687 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.224328045 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.369513558 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.185960649 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.183256257 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 3.760740067 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.330791432 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.433639416 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.787821983 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.185070672 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.562386123 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.271706067 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.727586447 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.711877961 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.229155902 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.31134569 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 6.181426806 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.041899758 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.592577015 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.216118841 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.347648373 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.545932027 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.298612497 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.305966013 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.18202287 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.22173814 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.821683215 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.557101684 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.754590797 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.213574376 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.59996926 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.18206898 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 2.675625795 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.216414739 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.275016416 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.614642385 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.327446613 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.614414604 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.290503741 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.221958836 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.448606202 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.215876741 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.183139976 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.323601673 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 6.187118361 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.938905248 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 2.945350718 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.318078386 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.146908883 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.416561032 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.186918248 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 2.166373836 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.330677882 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.280533202 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.806473497 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.721328018 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.18606771 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.467896799 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.18356132 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.631570137 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.199240807 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.208984461 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.307184425 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.284831145 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.185418026 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.177071406 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.35663627 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.767866105 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.308422568 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.112707787 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.194818439 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 2.598157932 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.314522237 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.536547415 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 6.187131281 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.200681068 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.390348555 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.865385263 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.32247767 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.222232293 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.407397677 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.189645601 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.820392733 seconds)
  done (took 894.547571837 seconds)
done (took 895.930557505 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.221227413 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.565704924 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.390002735 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.06434596 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.007243144 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.839507869 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.411840498 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.426783736 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.275695178 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.419704766 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.140001954 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.993826596 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.286308751 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.304353436 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.282865933 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.284520607 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.407197099 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.428617998 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.314830551 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.134505364 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.559669465 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.140181442 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.62866597 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.48552795 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.568794716 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.289581979 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.252382286 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.547903303 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.549006456 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.38203759 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.368010755 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.382436818 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.026690122 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.414011515 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.269764826 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.260931242 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.03708482 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.276190879 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.223153155 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.271868147 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.57633744 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.318830592 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.924313552 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.104550826 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.977754658 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.608989691 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.074617806 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.301849441 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.299388178 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.373634361 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.228898072 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.214656376 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.553425414 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.406366582 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.030430219 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.099222374 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.553014823 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.053951761 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.918200813 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.371016522 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.561346719 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.294873242 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.364729942 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.421877968 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.319067929 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.486300434 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.608965054 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.221376054 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.390757461 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.420555557 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.444056713 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.4104033 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.304350947 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.334842043 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.308783082 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.414317108 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.06028477 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.402631347 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.978061779 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.284736294 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.152039621 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.076456371 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.15058951 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.281420059 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.242840495 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.981086708 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.27158825 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.158052427 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.321883133 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.395465689 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.143094253 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.400580106 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.657490615 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.262435641 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.232204862 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.395061549 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.278835757 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.227717375 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.36354965 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.390145299 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.978457676 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.257249627 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.193929988 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.26953519 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.290540301 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.218340628 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.254641276 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.620426425 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.413864609 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.366524547 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.564444633 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.317263816 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.412289787 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.303354433 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.262005156 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.973804866 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.483546712 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.052897495 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.222528014 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.864627015 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.443562216 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.272438838 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.568676712 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.484888459 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.239360265 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.292348987 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.300435931 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.134002737 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.292280088 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.295660173 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.36807943 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.635754538 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.368603109 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.069539091 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.414389806 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.871448637 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.425713314 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.411380932 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.26263433 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.084839754 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.29457927 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.338530052 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.485398415 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.573671798 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.429712647 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.480697978 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.302800303 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.481951169 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.217464232 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.314326299 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.419894676 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.31068549 seconds)
done (took 254.931800966 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.536256412 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 3.623977698 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.484178482 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.412314909 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.55640094 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.494419069 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.262835635 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.659582595 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.236034582 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.615339485 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.386707479 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.351579155 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 3.650681394 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.414075222 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.566494324 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.422591444 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.239029208 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.444732494 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.648176545 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.573116801 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.233392762 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.383199853 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.321162317 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.578820995 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.178804478 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.227367445 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.48987902 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.302443904 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.458642441 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.240112753 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.24491609 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.45488936 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.500048567 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 3.372101784 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.633846259 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.213814508 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.498362404 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.290730919 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.454124158 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.561636922 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.404826259 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 4.075070042 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.239447237 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.251880776 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.289164381 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.460036933 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.251169769 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 3.511817722 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.190281922 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.216612436 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.454440893 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.263540685 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.348567237 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.46461122 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.411292501 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 3.365582485 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.579967688 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.566509762 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.574682298 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.490570274 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.44219398 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.614096839 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.557079603 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.304292669 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.245102681 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.484025342 seconds)
  done (took 131.453183768 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.616207037 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.49368326 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.593408507 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.460959992 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.734942785 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.595352699 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.552635014 seconds)
  done (took 14.215614526 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.257115367 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.231945628 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.479361683 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.434910934 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.237561593 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.370277229 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.317009386 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.227939367 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.455030998 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.277331957 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.56136107 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.482287788 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.174631 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.23957605 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.332808504 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.478484539 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.22537382 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.30577101 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.297949544 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.4907963 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.233763196 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.216415164 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.39377867 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.229883044 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.256851914 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.27969742 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.241362313 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.215581981 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.256798266 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.234678432 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.2550093 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.365720927 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.238482491 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.221268652 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.230843958 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.55773299 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.245058073 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.239503484 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.371383708 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.182657189 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.224473094 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.235923704 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.381123009 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.243160107 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.220167928 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.421331937 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.225708638 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.240790097 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.223382487 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.227493132 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.430276794 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.227671103 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.218790504 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.183013415 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.451059767 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.21299256 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.30389801 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.237086855 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.23487992 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.300028357 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.238449861 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.49795297 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.484319256 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.228259669 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.458291108 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.530525535 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.239321512 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.222686495 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.229273757 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.465593352 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.239634969 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.484617274 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.240098726 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.289986641 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.254739543 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.381755126 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.429397361 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.041524717 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.010096162 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.183820863 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.581290271 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.220574523 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.576546337 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.180056979 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.186886135 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.220577525 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.242933822 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.899112339 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.148464355 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.249874502 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.548085818 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.232070904 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.305526733 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.296979797 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.225144904 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.299669916 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.401796614 seconds)
  done (took 152.063384429 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.441875912 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.473572734 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.590801726 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.178723692 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.254620059 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.528724962 seconds)
  done (took 15.651241807 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.662350305 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.040880283 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.270588378 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.261873811 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.298414432 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.198649589 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.203542368 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.400270575 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.375747639 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.250699794 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.192077548 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.200714124 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.196575889 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.381113173 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.200452253 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.241880312 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.19668846 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.26184936 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.243148144 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.311605351 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.402776242 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.296208695 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.300192169 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.920307839 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.254124803 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.251867388 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.961109654 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.245818621 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.252386878 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.617415123 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.39417688 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.200089102 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.922703718 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.339711899 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.964727677 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.92727907 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.388601617 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.212550851 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.245554778 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.20058058 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.199639506 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.311508221 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.255086561 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.203522002 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.568565746 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.839751231 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.249821706 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.51963933 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.198137303 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.198379353 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.199387654 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.270308886 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.201711814 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.204054187 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.559256358 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.75802898 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.17461469 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.21038564 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.295039391 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.917720414 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.342405896 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.203596276 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.605290921 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.169884946 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.227715718 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.197860158 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.920059459 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.396627006 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.308622562 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.261996918 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.191898117 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.262593085 seconds)
  done (took 119.326599246 seconds)
done (took 433.893349926 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.429177364 seconds)
  done (took 7.614527673 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.227173946 seconds)
  done (took 7.50748923 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.182912481 seconds)
  done (took 7.376441738 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.183421654 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.220503588 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.206568945 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.20283822 seconds)
  done (took 26.032066091 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.876173302 seconds)
  done (took 8.069831763 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.188837036 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.180136084 seconds)
  done (took 13.565875524 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.202889978 seconds)
  done (took 7.386004683 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.30414791 seconds)
  done (took 7.510764018 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.1915032 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.20139804 seconds)
  done (took 13.607475589 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.189326089 seconds)
  done (took 7.374723066 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 6.389551832 seconds)
  done (took 7.618375588 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.202533497 seconds)
  done (took 7.514563877 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.218176054 seconds)
  done (took 7.407667468 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.267644793 seconds)
  done (took 7.458295409 seconds)
done (took 137.230076922 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.188708708 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.189276265 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.18069337 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.19064505 seconds)
  done (took 25.928380341 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.514744733 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.519602197 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.503794223 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.577474959 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.471077285 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.472299609 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.524277363 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.524317919 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.4617406 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.577512078 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.521877386 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.676795049 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.571834762 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.504027426 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.501393622 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.567414997 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.571363576 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.523090326 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.469394806 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.497996353 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.564294227 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.570278855 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.931235279 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.93149284 seconds)
  done (took 38.741004213 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.384770342 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.375219052 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.334396135 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.333512917 seconds)
  done (took 6.608253172 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.227561155 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.559874796 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.542377417 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.600466079 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.543412369 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.358668315 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.550966975 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.406304778 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.372880425 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.371797612 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.810392134 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.348220328 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.356677718 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.604486883 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.357200492 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.191632715 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.202899634 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.329742363 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.575064477 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.437133761 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.451160411 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.548822473 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.542307411 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.543610481 seconds)
  done (took 36.013526036 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.941361004 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.115731213 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.551915397 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.102481995 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.896614367 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.995735011 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.473978079 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.695012645 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.461854895 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.438409394 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.919074621 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.954586873 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.33928795 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.082165548 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.956094645 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.38048855 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.37881901 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.05072935 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.620308299 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.501058272 seconds)
  done (took 40.026416219 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.189907495 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 1.427396019 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.417773028 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.364916225 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.180309067 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 4.662636656 seconds)
  done (took 22.430482078 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.399565116 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.311376827 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.474736925 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.449424454 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.336350507 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.307038935 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.641329927 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.395840891 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.921918758 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.778805442 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.532244422 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.603202545 seconds)
  done (took 22.333924921 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.19542211 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.220830577 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.195196367 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.344961915 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.95295813 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.072435247 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.519666181 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.19188565 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.214941392 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.393284115 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.064155002 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.359665709 seconds)
  done (took 40.91345734 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.378496889 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.366446352 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.500038179 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.210209015 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.606119037 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.227853766 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.558631967 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.143385605 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.811023734 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.977794315 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.751766767 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.189961747 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.725997383 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.162714737 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.188123237 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.484417364 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.003993542 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.157493785 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.503224168 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.222142084 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.144908188 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.250283597 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.183909388 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.632160898 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.462205385 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.186705081 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.414308489 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.425522311 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.184546795 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.449740305 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.194115057 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.662407946 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.362672821 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.503119425 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.607329678 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.233831493 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.373097103 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.550946025 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.726358386 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.481023082 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.324643622 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.346904904 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.434864272 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.17806056 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.436857076 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.968538206 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.177218062 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.91845439 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.180040114 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.491676534 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.951893602 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.650492375 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.642379658 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.165429995 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.33043228 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.486278408 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.349662483 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.104849753 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.522430164 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.405199556 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.205382847 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.353778571 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.376460457 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.158615466 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.622535826 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.392761235 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.3709831 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.394141639 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.499931883 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.478860262 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.52456116 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.484116973 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.874672946 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.235082881 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.747071578 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.100126926 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.531100367 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.181858887 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.910197522 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.719175093 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.157895958 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.293823321 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.965799729 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.148936739 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.191439507 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.363847963 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.188625964 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.15296571 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.202669367 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.441024277 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.454253012 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.238351712 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.254177416 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.424604937 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.890028385 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.201861066 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.176785799 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.468949683 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.161466783 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.737493911 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.247790388 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.162558716 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.231409415 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.744815487 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.587250085 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.219765203 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.962620154 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.829865734 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.476865421 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.793982227 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.347641259 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.188160552 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.534913291 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.513088862 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.182114316 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.839484181 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.17876716 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.512464744 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.40797606 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.189542847 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.173593942 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.567403074 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.360972883 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.086171635 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.497718246 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.183357089 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.327861258 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.175199533 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.712453657 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.18813444 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.426876047 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.652544166 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.263539806 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.339716563 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.167068907 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.334486841 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.640482116 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.253450108 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.532730876 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.509138104 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.373972189 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.655965936 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.175831122 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.007958426 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.554635138 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.39847957 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.518477779 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.855055394 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.341213098 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.196273308 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.183749607 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.355489415 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.196352595 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.732795658 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.194310287 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.983148079 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.912727042 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.494937834 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.195515025 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.358601807 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.189867125 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.452986876 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.68493174 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.351877178 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.372194442 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.453143471 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.362807472 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.189206949 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.155450816 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.468622911 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.440919836 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.652297618 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.426339306 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.685422221 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.652650555 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.69860917 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.423604091 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.536195997 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.002028569 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.84562634 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.436172893 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.466587957 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.243181514 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.188056864 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.44031179 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.461326009 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.423089004 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.962348212 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.45031574 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.445420524 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.271421993 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.187829083 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.149167288 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.328562983 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.564668546 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.184380792 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.685138726 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.251229371 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.52588394 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.704776203 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.213161323 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.491866096 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.825436798 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.716352346 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.5446067 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.517090654 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.17084301 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.536792593 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.79720513 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.389409989 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.193413414 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.724576377 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.83713139 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.366034733 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.177330206 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.518906815 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.482316236 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.852313166 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.68811356 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.797488479 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.181377857 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.330652332 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.735565996 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.198325654 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.027403426 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.48767506 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.441728687 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.197285703 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.636650811 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.401703434 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.512734778 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.184662284 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.179451458 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.455033345 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.490823795 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.455495013 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.639249448 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.404386358 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.896909086 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.282956889 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.837015701 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.355684906 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.213765862 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.5789743 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.358681839 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.003877051 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.364917441 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.839238327 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.51738097 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 4.92966442 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.453335505 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.188947587 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.550831255 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.756851635 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.180721361 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.145729664 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.294032987 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.176851513 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.408730295 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.951932434 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.247345445 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.320683644 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.435013943 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.40959532 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.363463859 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.574988989 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.590754438 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.918361816 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.149699393 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.341522585 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.261423125 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.476000556 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.18396959 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.465190316 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.797664766 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.673462159 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.135453938 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.672500196 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.579554882 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.241896323 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.561618552 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.385176063 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.486020741 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.111686666 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.746011743 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.198204795 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.325576104 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.156560162 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.804721117 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.630179592 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.558251472 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.563566069 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.207115644 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.588751895 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.51895535 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.431380496 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.192560843 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.440474425 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.180268652 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.45745807 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.177999406 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.375390327 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.60649961 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.194611292 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.452386161 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.405882098 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.514996611 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.346899021 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.724741921 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.334626007 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.309539866 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.750807041 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.34882826 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.317946626 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.52658373 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.839720218 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.269241173 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.259455169 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.729940206 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.824777811 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.562893788 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.756883544 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.687719811 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.528703334 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.95540461 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.191168766 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.416792161 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.351272411 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.178999264 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.352610626 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.565870497 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.195322938 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.371455089 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.495681045 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.331505553 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.739616934 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.157781019 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.859332592 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.429164039 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.698366513 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.757063874 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.977475609 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.467432379 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.335713469 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.521077933 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.281960168 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.345783425 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.517616169 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.941477108 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.218486777 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.011527249 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.977773663 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.299212738 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.718456727 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.222958084 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.055841983 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.354978476 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.420582575 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.410647725 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.327088211 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.16214904 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.777742926 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.948798259 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.457913679 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.343877495 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.34478243 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.268226952 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.389956684 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.747695728 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.493298303 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.955605079 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.55409462 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.373543272 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.151638507 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.190296637 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.457930795 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.560691629 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.200781192 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.490835328 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.536143664 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.213175027 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.127241496 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.259136783 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.48803251 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.018360667 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.916172904 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.42360773 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.582807038 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.749584513 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.228404188 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.96456635 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.415477432 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.545997716 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.56573441 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.987632846 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.568654571 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.475417667 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.33286845 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.159903746 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.354140144 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.199334125 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.35264481 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.046298423 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.479682478 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.213765719 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.435643226 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.811929167 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.175576015 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.26951089 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.178109716 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.401360554 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.379042434 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.178450006 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.806641584 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.541135279 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.339484074 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.171588396 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.947442068 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.162845068 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.415814612 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.181495207 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.412842462 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.036925144 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.234189239 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.955155046 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.633671972 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.218674442 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.42434431 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.154041101 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.801064925 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.329535992 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.703466269 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.145712549 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.444414774 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.70854688 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.368165134 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.194252624 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.518452813 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.319515793 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.498526335 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.449779876 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.561537039 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.577913865 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.461941469 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.445535702 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.916047541 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.443936813 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.429384456 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.157898624 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.186599226 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.255756637 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.557307838 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.546230915 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.190811195 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.728752333 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.433848054 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.300320584 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.459566211 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.354634541 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.788028052 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.403449042 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.524598041 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.427045075 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.256912662 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.499341465 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.123008018 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.438574159 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.181405728 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.228496006 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.416167239 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.429775511 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.579250069 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.491478217 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.074951388 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.352982552 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.691677393 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.994135592 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.729153627 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.190903581 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.825127277 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.656392747 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.183115665 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.558948112 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.783438414 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.355497867 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.457121712 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.430527905 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.190349549 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.412373301 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.690178425 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.1897888 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.845852805 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.548138475 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.187127914 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.555522829 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.221839759 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.354723884 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.977366005 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.68584585 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.183487113 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.815719987 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.399420932 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.726282592 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.882454742 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.203057738 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.324495268 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.730034034 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.165218403 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.180048336 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.258397879 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.725226624 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.200898843 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.732263247 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.234548492 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.423266954 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.181480018 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.260515347 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.186492041 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.416838608 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.784501725 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.426023461 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.468724615 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.363394879 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.191659918 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.793201348 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.88604112 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.275826546 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.379147059 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.183158807 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.708171034 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.002668213 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.084154525 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.781624308 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.356792905 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.164440969 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.571857227 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.441674743 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.214452617 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.382147302 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.098869627 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.535795934 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.348371252 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.683559706 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.421611573 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.364908675 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.313840108 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.201693613 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.706461687 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.552714167 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.010996604 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.182743602 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.484821215 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.17721815 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.822784424 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.83495976 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.340447675 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.274523396 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.089466295 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.885555105 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.003535225 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.45029434 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.180064035 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.396231869 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.691506786 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.150634783 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.823321108 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.185597519 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.398860974 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.507184308 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.151393968 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.342865413 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.201494099 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.15539684 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.68349965 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.185399145 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.480624837 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.158602457 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.744242762 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.195263344 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.247884609 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.420175912 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.538048194 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.183647247 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.168739646 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.356375345 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.176881481 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.184475359 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.533119418 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.346310161 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.440394284 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.56152701 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.343317093 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.625940896 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.096706005 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.814142456 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.32414752 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.486536124 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.181476396 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.736777919 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.245587409 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.809504756 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.811981499 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.325211319 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.717616704 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.425316367 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.932682129 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.255891747 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.672022329 seconds)
  done (took 2004.210364845 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.271783231 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.281207645 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.276892937 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.220426353 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.240651957 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.267766711 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.305925172 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.229363711 seconds)
  done (took 51.276053843 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.172151677 seconds)
    (2/17) benchmarking "4467"...
    done (took 6.209283309 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.733243713 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.447269456 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.198966627 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.278178645 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.425045715 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.837744617 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.196004979 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.143207385 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.321792799 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.420771056 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.206414761 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.212777495 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.011479556 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.319823128 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.176115616 seconds)
  done (took 94.511808262 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.240066076 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.027741335 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.198219199 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.87535048 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.222183948 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.611977759 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.191875475 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.18957394 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.641259838 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.850797677 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.239211641 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.324707917 seconds)
  done (took 86.825287601 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.226319781 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.215698568 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.219619594 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.214521546 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.216827353 seconds)
  done (took 7.27654472 seconds)
done (took 2478.395861903 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.419028406 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.720212274 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.74356882 seconds)
  done (took 4.653606965 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.258791569 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.32193413 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.393448969 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.337518613 seconds)
  done (took 6.510888023 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.477228379 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.670755696 seconds)
  done (took 4.335604695 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.528810437 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.203894276 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.756401927 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.193675663 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.200151657 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.190319838 seconds)
  done (took 19.77727504 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.221915311 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.220538766 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.225335858 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.208980868 seconds)
  done (took 6.060269864 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.183137586 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.255363002 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.191323404 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.253302733 seconds)
  done (took 19.065671297 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.479892683 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.291985045 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.957510952 seconds)
  done (took 5.935970124 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.020259839 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.330797887 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.989496232 seconds)
  done (took 6.531838433 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.079002628 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.26625456 seconds)
  done (took 6.527889972 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.354777702 seconds)
  done (took 2.528455319 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.664266871 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.666040987 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.853713374 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.918143511 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.091713407 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.464837744 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.606779993 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.424016647 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.714579487 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.732160265 seconds)
  done (took 18.31213036 seconds)
done (took 112.329735534 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.145938675 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.607389401 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.339520425 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.485796932 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.290468132 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.330331977 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.210308116 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.295374751 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.607249077 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.600660448 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.009654696 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.288230056 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.252643949 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.595937248 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.25405596 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.597376955 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.605078684 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.15110435 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.942312364 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.547486025 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.234794605 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.888264841 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.742740602 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.897844227 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.606154895 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.337484394 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.167136866 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.598200235 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.17189523 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.194916198 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.363508798 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.787269599 seconds)
  done (took 155.333057525 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.19954359 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.201968733 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.194750901 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.186817541 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.284468167 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.197501147 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.199271172 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.193498554 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.010365153 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.006412088 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.202535401 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.271913939 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.192459265 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.1776354 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.195452312 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.181291536 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.232892381 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.191570757 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.196314784 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.204568502 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.206215743 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.151772902 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.197201692 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.156963533 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.211497573 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.192824143 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.190472546 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.196380921 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.195307885 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.194118765 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.199199587 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.186740018 seconds)
  done (took 191.20603404 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.17945119 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.19600971 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.206917312 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.192019578 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.213123093 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.216848675 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.195232242 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.191690834 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.205349869 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.206292149 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.206703714 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.203863781 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.201628575 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.189501454 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.20467579 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.192292612 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.20879507 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.196854325 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.196240364 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.19551476 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.201228547 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.177371389 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.196966687 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.201810277 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.210786423 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.208725833 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.192154371 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.199800296 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.197153924 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.190746621 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.19662693 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.179231487 seconds)
  done (took 199.550281318 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.494680145 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.233839369 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.14687587 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.955947485 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.093512575 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.222228364 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.939463404 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.500467303 seconds)
  done (took 14.78568853 seconds)
done (took 562.078620162 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.84368839 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.084941438 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.36400441 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.468604452 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.762220098 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.503142939 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.46334395 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.6371919 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.932380297 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.602503619 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.653199731 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.41346787 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.003628329 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.45455209 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.380436241 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.663661611 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.604169103 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.900452758 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.392846579 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.000319967 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.400856713 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.082552524 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.638087231 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.990557279 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.662747768 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.131819207 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.385674938 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.614533219 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.451918016 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.407144257 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.237351542 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.667606691 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.422424083 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.419277545 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.672415917 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.673391221 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.632928855 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.674630295 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.376978855 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.870875557 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.02739575 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.816838336 seconds)
  done (took 78.573604889 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.221770655 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.240657367 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.385488214 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.29216508 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.882840008 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.288795392 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.448803793 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.43121689 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.295103808 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.421867957 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.469657842 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.900989435 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.468351185 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.894296001 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.453378021 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.474956921 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.295768639 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.902574254 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.468777688 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.437401543 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.267336958 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.396281735 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.262384546 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.412960467 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.25485056 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.273250688 seconds)
  done (took 38.752117795 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.264840861 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.372737371 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.466774809 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.275200701 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.447774927 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.209245784 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.525852483 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.349045796 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.817937679 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.564540009 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.296682533 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.372217701 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.398497083 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.495062871 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.450998014 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.386654458 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.387353451 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.391369653 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.378889889 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.414975162 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.278060334 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.293828563 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.522222557 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.069694758 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.065679315 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.735209834 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.426595867 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.835859966 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.41880049 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.37039602 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.35043316 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.502772681 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.60942163 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.477513003 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.359549173 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.250016094 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.24838163 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.311474247 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.097286166 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.388839132 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.524893877 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.635807224 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.572794685 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.78763465 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.512370969 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.446197423 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.722646321 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.31024895 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.35045273 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.12340017 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.496277286 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.906016876 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.441984329 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.417290255 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.353759608 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.626300455 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.42733846 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.637584172 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.357469167 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.93109209 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.305456965 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.614423074 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.386251984 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.541552942 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.505257807 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.442627557 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.406625809 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.764977276 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.576801926 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.405550762 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.848342 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.309812184 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.264767995 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.301039296 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.368967882 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.748190981 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.119087825 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.531924399 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.608511414 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.508604068 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.461842202 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.843169337 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.223804498 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.559827964 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.412299088 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.237123028 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.310156514 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.569489601 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.514271632 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.770774223 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.806056538 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.65874444 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.629845824 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.383178239 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.853185674 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.717588378 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.218024819 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.233732825 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.454239074 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.802613257 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.306221206 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.415668127 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.84086292 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.713020765 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.556956119 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.343109221 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.572022814 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.524910179 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.629037927 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.225620672 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.424555308 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.346214838 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.443237733 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.504154428 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.217130468 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.786745648 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.310982471 seconds)
  done (took 247.037143207 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.185748029 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.19687383 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.187061487 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.192233638 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.188152449 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.742210721 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.23395955 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.194920568 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.74878329 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.232742189 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.197369677 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.187822134 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.193847129 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.215950614 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.38984271 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.414967111 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.299434106 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.186175472 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.180853066 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.191311439 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.307785017 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.190798869 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.184327354 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.188447012 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.188258534 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.191503479 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.200958658 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.194491933 seconds)
  done (took 154.402472089 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.244243801 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.608449492 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.265700837 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.329348189 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.271325383 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.265311206 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.762455869 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.382595885 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.322162709 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.266603252 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.266919903 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.476068972 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.552525215 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.835522073 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.376736528 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.44547584 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.893307876 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.387905505 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.264201172 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.253140518 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.413710151 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.588553724 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.507771328 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.496103519 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.377924419 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.504455249 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.297093957 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.249093364 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.358698002 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.742036385 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.254028632 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.585781487 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.382417387 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.24412224 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.752687837 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.591636761 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.818054004 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.888865172 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.432657376 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.204974747 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.208024929 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.474255044 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.532581876 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.267912538 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.241783151 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.878658995 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.267704304 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.512702751 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.271299604 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.228737418 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.356013485 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.353196674 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.491989688 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.172226546 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.42020056 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.370555836 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.84574766 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.221558328 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.238857876 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.555491507 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.217777763 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.741494308 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.195902345 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.302639492 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.255691621 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.104883293 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.336928115 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.76200748 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.847350157 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.295159977 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.587609195 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.445182235 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.220022418 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.504625038 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.429727193 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.681893693 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.824355711 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.389749116 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.35028278 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.334008526 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.515484185 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.243156525 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.824541377 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.349771153 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.225362002 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.744734675 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.636523709 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.227791564 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.251506622 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.349366894 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.420679799 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.472767756 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.514803901 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.316755426 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.152268092 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.504446934 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.524385121 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.263685502 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.377170473 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.229297383 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.601741396 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.426113545 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.231705129 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.549333728 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.630517021 seconds)
  done (took 164.657649858 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.927177275 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.293727339 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.479446036 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.788139591 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.572450653 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.65036105 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.454397501 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.30008618 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.495081677 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.441611592 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.441611781 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.337104513 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.198574325 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.992902272 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.285769338 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.40989707 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.314295464 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.862103324 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.520976986 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.169288437 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.676252782 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.995409088 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.564711522 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.641927526 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.679022286 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.728600697 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.90621653 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.358935766 seconds)
  done (took 50.674093699 seconds)
done (took 735.281145486 seconds)
SAVING RESULT...
DONE!
