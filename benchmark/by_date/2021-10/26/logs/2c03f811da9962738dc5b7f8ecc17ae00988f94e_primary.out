cset: moving following pidspec: 2830173
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.35552866 seconds)
loading group "shootout"... done (took 0.916156392 seconds)
loading group "string"... done (took 0.237446225 seconds)
loading group "linalg"... done (took 3.383600583 seconds)
loading group "parallel"... done (took 0.023984048 seconds)
loading group "find"... done (took 1.288179352 seconds)
loading group "tuple"... done (took 0.75735281 seconds)
loading group "union"... done (took 3.341824432 seconds)
loading group "dates"... done (took 0.165979302 seconds)
loading group "micro"... done (took 0.063799378 seconds)
loading group "simd"... done (took 0.410675595 seconds)
loading group "io"... done (took 1.481639804 seconds)
loading group "random"... done (took 2.558062021 seconds)
loading group "problem"... done (took 1.21408741 seconds)
loading group "array"... done (took 4.648132558 seconds)
loading group "misc"... done (took 1.207735324 seconds)
loading group "scalar"... done (took 3.788814635 seconds)
loading group "sort"... done (took 0.333310897 seconds)
loading group "sparse"... done (took 3.730139142 seconds)
loading group "collection"... done (took 6.412311472 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.509277567 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.079502086 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.290521817 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.081320775 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.285958931 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.091169836 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.100215636 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.079787228 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.149537041 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.167721076 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.257119206 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.386151896 seconds)
done (took 5.271484536 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.330682414 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.033785695 seconds)
    (2/2) benchmarking "String"...
    done (took 0.132273353 seconds)
  done (took 0.811801283 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.144075413 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.017971184 seconds)
    (3/3) benchmarking "different"...
    done (took 0.025673168 seconds)
  done (took 0.827785966 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.02312005 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.10450546 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.024867973 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.025086758 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.025178693 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.024348328 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.024116498 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.024247252 seconds)
  done (took 0.899031281 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.030090377 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.024967847 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.02322586 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.02507897 seconds)
  done (took 0.74744212 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.023595129 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.096244611 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.029685835 seconds)
    (4/4) benchmarking "different"...
    done (took 0.030102055 seconds)
  done (took 0.819579638 seconds)
done (took 5.114642859 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.208372405 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.811701256 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.94121467 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.188480549 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.362354006 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.33400237 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.081868926 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.239707104 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.156568516 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.037445863 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.192529909 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.040438102 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.537911314 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.595348318 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.029443246 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.157164203 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.602456336 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.039902233 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.074086863 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.25121519 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.036328536 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.04140169 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.047451852 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.030037593 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.151206093 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.137768105 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.610888743 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.067107073 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.027210511 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.051974286 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.02898129 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.03105506 seconds)
  done (took 9.833076454 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.167673383 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.152960635 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.026923207 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.062777139 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.056478681 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.02764647 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.034097587 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.025958204 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.047425426 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.094351917 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.049033397 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.164647239 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.024125028 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.028001926 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.147388088 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.121013326 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.039300212 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.040630964 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.025059641 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.041142404 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.052848116 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.037355577 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.035688891 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.035317994 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.07221755 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.091062379 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.043269895 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.071081096 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.024142955 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.03662158 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.058150762 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.065132117 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.02473023 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.023700323 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.069744702 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.047036805 seconds)
  done (took 2.883418098 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.886250623 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.124534112 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.14963295 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.191867912 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.073919148 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.053929338 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.183333482 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.079868926 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.059160001 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026886209 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.20553638 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.708075967 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.174596209 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.426068146 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.029122318 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.295197921 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.948580436 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.003992229 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.025205568 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.025323996 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.136470236 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.028760974 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.298581403 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.024056788 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.152318003 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.605610992 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.02935443 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.027677498 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.054993346 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.147369172 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.023940423 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.102590555 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.051232505 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.028634256 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.385402092 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.024082097 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.022372587 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.045442061 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.056446608 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.024986462 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.026061403 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.034243719 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.02368219 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.076184325 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.03571109 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.522379435 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.028321152 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.713186227 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 4.985444453 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.032288386 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.029900321 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066107738 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.023035836 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.026742645 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.57183309 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.096693007 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.025530626 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.311248448 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.026512149 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.027041 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.050604401 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.060146993 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.026455473 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.028032737 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.029686689 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.043836078 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.11091095 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.034422698 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.045676651 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.023602238 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.025722677 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.024149613 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.420946522 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.03044389 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.132436254 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.023207676 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.029314774 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.02534486 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.025441327 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.065136348 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.051868388 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.049060061 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.032675789 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.026449393 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.025366146 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.50186844 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.989479034 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.025818494 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.027259573 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.354736113 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.023195119 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.025842564 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.027485089 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.047382197 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.026664098 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.022687834 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.065137997 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.027374854 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.13622929 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.356377323 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.02806219 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.022857023 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.696890695 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.026810552 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.057582113 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.077010009 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.025268352 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.059292802 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.025549657 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.022917298 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.029634979 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.022845905 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.049073543 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.023987642 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.024571922 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.024436983 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.025374211 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.027151773 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.025793331 seconds)
  done (took 25.00289662 seconds)
done (took 40.251089799 seconds)
(4/20) benchmarking "parallel"...
done (took 0.836702632 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.222690428 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.056085009 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.022865732 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.168408678 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.047939056 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.141971123 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.179978706 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.131439116 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.048585703 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.048800908 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.048975115 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.185411605 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.193992845 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.049325483 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.1227426 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.193054417 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.049751429 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.022875456 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.048359865 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.049459926 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.049195725 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.022862992 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.048807157 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.048922614 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.120838733 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.047616923 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.02218982 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.1215225 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.049163872 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.122303514 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.049645373 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.049705542 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.050712976 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.122055755 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.051069643 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.122474567 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.022572185 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.050868959 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.05107598 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.052212717 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.051744031 seconds)
  done (took 4.148587858 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.04999552 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.043839387 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.061272038 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.020628132 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.032479597 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.044539399 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.020639853 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.043560924 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.063614899 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.044807273 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.044706357 seconds)
  done (took 1.279388313 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.043897679 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.044815729 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.053712568 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.020992502 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.033906929 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.044322395 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.020676827 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.044412351 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.062178665 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.045351853 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.044754427 seconds)
  done (took 1.223532286 seconds)
done (took 7.393795581 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.156657125 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.127853614 seconds)
  done (took 1.037907345 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.607512669 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.220098722 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.134819899 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.24904542 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.127016744 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.158334884 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.813791351 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.160147664 seconds)
  done (took 7.279421372 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.08509915 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.149925123 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.027413936 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.025633461 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.025812244 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.025742219 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.027361451 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.026334785 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.025467901 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.027770579 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.027494038 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.02558192 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.0262213 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.027763671 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.025418539 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.025812575 seconds)
  done (took 1.499070952 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.029558003 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.028693821 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.030094915 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.019139833 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.030191658 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.029177143 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.030148177 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.031606448 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.029419657 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.029361429 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.027588363 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.031034613 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.029384561 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.027831325 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.030636031 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.018969242 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.030555982 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.029565451 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.031916534 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.030040906 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.029066757 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.027675853 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.031517822 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.029150286 seconds)
  done (took 1.468688158 seconds)
done (took 12.040620597 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.141088987 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.032270428 seconds)
  done (took 0.940036008 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.129145187 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.131018621 seconds)
  done (took 1.031978392 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.028408077 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.017821165 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.033568807 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.026216794 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.01829592 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.017988949 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.032649327 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.018309196 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.018249195 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.018337998 seconds)
  done (took 1.005348382 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019777786 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.024481826 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.022847041 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.021249641 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.023099807 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.019450029 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.021726079 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.019667762 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.025068317 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.018440853 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.022393594 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.041363104 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.021824842 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.042227545 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.021941342 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.022391136 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.023722583 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.021270643 seconds)
  done (took 1.203533498 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.018472862 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.018674103 seconds)
  done (took 0.817060078 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020768048 seconds)
    (2/7) benchmarking "second"...
    done (took 0.018456025 seconds)
    (3/7) benchmarking "month"...
    done (took 0.02055552 seconds)
    (4/7) benchmarking "year"...
    done (took 0.02050712 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.01870595 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.018098131 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.01879207 seconds)
  done (took 0.907784354 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.426516172 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.10044943 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.347763499 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.027935573 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.040482722 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.251234892 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.022469071 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.027226936 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.026891417 seconds)
  done (took 2.050780461 seconds)
done (took 8.725126961 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.048283339 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.155453023 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.158793638 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.476266145 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.037763773 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.025554492 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.060625983 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.231452701 seconds)
done (took 1.990580416 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.287113888 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.370870491 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.204250305 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.023656911 seconds)
  done (took 2.385356763 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.330351133 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.149595042 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.034613905 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.02620792 seconds)
  done (took 1.335981635 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.02307821 seconds)
    (2/2) benchmarking "read"...
    done (took 0.030341829 seconds)
  done (took 0.846159579 seconds)
done (took 5.656052662 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.031166235 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.018550607 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.028683012 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.020715433 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.020509008 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.020035453 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.020010174 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.020799345 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.01902934 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.02097023 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.020685387 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020595458 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020499819 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020467926 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.019979488 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020787891 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.018782122 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.020332169 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020197774 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020368638 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.01867141 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020750894 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.01978723 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.020308321 seconds)
  done (took 1.291226886 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.040842495 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.025245962 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.02540144 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.025259143 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.026401832 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.025171188 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.025184653 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.025090753 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.02561587 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.024082066 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.026804131 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.026667699 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.024409113 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.026822941 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.024106427 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.026382599 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.025704053 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.026156842 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024437585 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.02691663 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.025417704 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02538759 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.02677633 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.025245137 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.026653582 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.026646619 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.024675869 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.025736393 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.025709997 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.026501636 seconds)
  done (took 1.579421497 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.024606244 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.017102196 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.017571211 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.028959592 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.017298879 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.017386225 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.017712384 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.016855398 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.017371662 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.018212092 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.018205927 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.01738122 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.017966788 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.017139042 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.017116559 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.0177842 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.023714115 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.041126333 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.017486939 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.016932469 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.022611485 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.017561114 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.017051635 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.016833894 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.017508068 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.017132492 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.01701352 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.017574245 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.017387049 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.017900547 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.017413896 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.022503923 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.024196199 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.017664529 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.028666701 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.022761599 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.017543604 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.022206966 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.018194163 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.016859771 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.016886086 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.016931508 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.017261384 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.017195936 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.028917293 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.017411262 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.018408234 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.017743479 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.017472159 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.017257171 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.017250941 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.018679613 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.0234657 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.018483431 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.017062691 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.018301831 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.017353023 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.018072735 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.01734072 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.017133699 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.017271151 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.022076231 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.018442085 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.017818525 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.040995692 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.018580938 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.02900567 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.017337347 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.017625767 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.022042545 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.017784168 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.039147932 seconds)
  done (took 2.226359944 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.029350492 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.027009796 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.037901355 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.02769538 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.020800209 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.01837366 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.021482716 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018325347 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.028037601 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.021656859 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018277217 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.021175382 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.027915281 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021771509 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.019309347 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.028484218 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.02181714 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021055981 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.018261131 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021497012 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.019186056 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.02124956 seconds)
  done (took 1.30843857 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.111391224 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.025401614 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.074239694 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.02483512 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.023380866 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.024371944 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.025820156 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.02567729 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.025961549 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.026967194 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.026785175 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.025663042 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.023592876 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.026713051 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.026632804 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.026837056 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.025542621 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.026594003 seconds)
  done (took 1.394604343 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.041559467 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.026807325 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.05536847 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.027103329 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.02719423 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.023308354 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.031041 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.02911275 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.022962752 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.027541968 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.029569961 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.023754467 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.023340889 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.027273202 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.023383078 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.027487039 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.023454732 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.027267309 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.029206514 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.030677466 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.030887894 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.029358244 seconds)
  done (took 1.434007562 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.038923352 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.024060108 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.044166832 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.026187388 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.017488196 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.017420231 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.02603416 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.024917475 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.026088305 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.024030009 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.025353154 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.017912756 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.027197503 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.025054664 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.027421245 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.025440978 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.024206756 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.024998187 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.024101064 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.017787349 seconds)
  done (took 1.307889295 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.131675372 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.020090957 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.019661581 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.023935845 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.019557971 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.019601157 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.024289484 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.019725083 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.019823822 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.045783335 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.019996174 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.020007266 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.024310768 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.022795629 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.020267133 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.024359115 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.024344338 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.02437882 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.019755773 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.019694259 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.045971732 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.019781352 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.024189924 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.019910628 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.019955522 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.01989387 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.019934055 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.022889682 seconds)
  done (took 1.552080803 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.040236888 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.016828575 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.017057299 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.021010043 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.021202933 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.027497405 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.021140751 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.021145929 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.017015597 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.017243594 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.019430423 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.01699319 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017017948 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.0269961 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.016824693 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.019273687 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.026826833 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.021062753 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.030407955 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.028101573 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.019602316 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.027205645 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.019371176 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.017176324 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.028097856 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.01940289 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021154375 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.022022921 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019391475 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.017288687 seconds)
  done (took 1.457757658 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.030784 seconds)
    (2/2) benchmarking "in"...
    done (took 0.029131597 seconds)
  done (took 0.857593988 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.021269127 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.038168437 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.016912986 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.03354537 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.030322426 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.022195804 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.028681431 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.030413438 seconds)
  done (took 1.013821341 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.130511924 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.159086603 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.019618266 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.019622702 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.13111571 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.092827469 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.141859344 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.032723265 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.034504849 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.022709765 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.019438784 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.142045422 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.018920519 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.033703389 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.0200998 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.031028383 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.027299299 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.039672436 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.033850525 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.017834249 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.033148337 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019566547 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.018601451 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.019589273 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.019704284 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.026640709 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.036391638 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.032751249 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.028247355 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.017181896 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.039203629 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.018079927 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.018765931 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028321664 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.131740709 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.018117264 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.058836044 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.018191408 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.022016749 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.017914333 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.031284636 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.041072084 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.033740809 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.036969339 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.019125046 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.019729674 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.017995909 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.019760223 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.022617092 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.028213228 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.018318096 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.026830344 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.017789265 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.019464225 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.029974032 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.018175665 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.022745013 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.028494961 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.033504826 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.029835239 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.032341556 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.03541598 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.027966577 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.026481242 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.01901904 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.040006693 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.01967119 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.032693531 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.034562307 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.019370817 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.031760001 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.017928093 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.017200972 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.017829913 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.05511307 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.019446876 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.018871487 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.018138568 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.018246652 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.019451409 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.028572478 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.022540367 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.026138335 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021025765 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.035228807 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.028107903 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.017880601 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.024802114 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.037639951 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.022557183 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.018135603 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.036752082 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.022851009 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.017944911 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.038084008 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.029832322 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.01975825 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.018813923 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.022461893 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.032388289 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.019227957 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.017100783 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.027485915 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.020251419 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.132328605 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.022899989 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02760582 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.018133942 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.029733373 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.024737695 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.019873773 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.017543951 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.023643049 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.019231623 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.017553886 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.028956431 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.018556474 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.033741857 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.026071059 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.034642328 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.035267082 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.030025734 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.035889566 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.018365356 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.017507418 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.03862267 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.028665635 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.019481767 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.038320651 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.018321393 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.029914026 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.018485718 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.01985962 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.028993038 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.01799015 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020432703 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.018703079 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.024582261 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.02006766 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.02032606 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.025194406 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.028058004 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.032067833 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.019779421 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.028439807 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.018954919 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.036231635 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.029432451 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.024010597 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022110637 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.019409395 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.031689604 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.026283402 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.028711523 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.018525089 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.019589207 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.018636968 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.030482986 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.029134459 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.020106926 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.027601108 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.024224738 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.019365948 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.018755632 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.019654085 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.023441785 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.021999097 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.019265466 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02730882 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.028572656 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.034066048 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.02592365 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.028910489 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.017991262 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.018359768 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.020277189 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.018448819 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.023805449 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.028715708 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.035768377 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.031430175 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.042111783 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.018797783 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.029257451 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.020184927 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.036986503 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.033436998 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.019476438 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.023078754 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.017731428 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020228335 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.028469059 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.03054268 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.033453544 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.035474475 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.024328442 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.023981371 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.01826953 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.03560231 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.019080157 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.028069053 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.029023677 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.024677836 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.018520927 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.020425363 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.02885681 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.02407484 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.019640831 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.036145234 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.026203244 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.018402073 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.034405189 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.019131822 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.030668699 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.01852117 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.022964244 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.024963218 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.020630586 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.028706082 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.035523661 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.017596599 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.018858228 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.035363184 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.020291168 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020152813 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.027559817 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.035603404 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.024545096 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.02745823 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.030146506 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.030378033 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.024142069 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.029929789 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.019876949 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.028884078 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.021909975 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.031352109 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.018831384 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.038523524 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.017642299 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.035657821 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.019422865 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.030792844 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.018959249 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.028772251 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.019777193 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.037501425 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.020336938 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.019642817 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.031350645 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.017742059 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.02888942 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.018578752 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.024928481 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.026954678 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.029314932 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020820387 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.029346047 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020646477 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.028637486 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.024471026 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.028657824 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.029211489 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.024147492 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.018329336 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.027668689 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.030541217 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.182395288 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.019568543 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.019515257 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.018684775 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.028753825 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.019546391 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.019360961 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.027813135 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.024292045 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.02536168 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019631738 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.01996872 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.019720501 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.027983311 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.029331267 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.038536007 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.02829247 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.0267443 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.028523647 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.018136556 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.035776447 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.018103813 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.026710457 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.017408511 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.023768559 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.028506389 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.01850472 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.038950317 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.144460384 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.026835606 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.030640524 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.027661731 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.022711916 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.037321966 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.020696454 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.027576157 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.026785525 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.023613513 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.025925711 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.019353156 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.027448737 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.028548981 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.029033854 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.01848251 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.026364644 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.028032995 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.01909801 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.02491581 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.018774647 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.027018652 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.019281694 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.01705591 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.023200337 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.029574496 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.023542742 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.02363895 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.01779888 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.016816211 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.0179767 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.023942932 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.023230621 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.027258481 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.034386278 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.016673417 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.018515618 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.017730513 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.022207195 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.037085558 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.02801797 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.026459372 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.023154265 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.016960917 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.018605383 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.018851424 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.017537327 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.020098112 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.016926117 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.01758994 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.028736725 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.018855843 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.022973864 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017775359 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.018840704 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.028185047 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.021503886 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.0179892 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.025330011 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.017402366 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.024035097 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.016940972 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.018941247 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.023015018 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.017219496 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.022178243 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.02847439 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.034953743 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.025386209 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.027618418 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.018534204 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.026400102 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.03424998 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.025081894 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018658149 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.028069147 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.017734927 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.038009193 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.028269964 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.02745593 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.028649625 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.018925854 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.036617761 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.023813607 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.02911701 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.035124535 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.018937481 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.025264782 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.017836398 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.035269392 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.02349519 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.017907194 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.027380589 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.026547477 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.025245807 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.030503553 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.018765707 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.027136354 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022591541 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.023235937 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.019673377 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.019482088 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.027634163 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.03578733 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.018901093 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.023076843 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.02689072 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.027630397 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.023574026 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.031719448 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.027151734 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019271435 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.019796915 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.02290406 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.019090622 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.031291875 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018599258 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.023532864 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.023777474 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.018085124 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.026222895 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.036426522 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.028557783 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.028780537 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.018300834 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.017556658 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.037791842 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.022796312 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.02152391 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.027458353 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.029073309 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031585668 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.028906174 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.0369708 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.018933015 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.025596698 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031933378 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.01940892 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.018266117 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.023007571 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.020187238 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.028403335 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.029108612 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.026574071 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019964952 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.026146725 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.033253195 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.019656611 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.0240924 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.024344978 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.019311167 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.029938259 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.027248456 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.028395704 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.019997476 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.018119018 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.022565629 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.028282684 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.026747809 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.028309521 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019615715 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.026853098 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.033450712 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.026890892 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021878343 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.018109105 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021657384 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.028160879 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.024565044 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.018145319 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.024071874 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.022626953 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.026816626 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.02859106 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.02397549 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.018064232 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.03718224 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.028022971 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.028673407 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.020024784 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.02030308 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.018729782 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.018282222 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.030036655 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.017870855 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.019995976 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.023826405 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.02029944 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.038025066 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.027487399 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.035593227 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019425207 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.024013695 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.018486657 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.028576787 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.023980873 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.018731485 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.030340499 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.017780773 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.035116384 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.031378606 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.025584988 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.018505514 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.024516048 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.027738094 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.035024813 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.028817104 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.028164872 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.022007271 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.02942584 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.020271943 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.030224503 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.018234888 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.017607561 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.029845337 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.028051357 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.032382785 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.018626361 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.029922842 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020379173 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.027890213 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.027940237 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.02026624 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020234925 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.020037936 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028936937 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.024042615 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.028677255 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.024332304 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.037139821 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.019377111 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.030823476 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.028664493 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.030817478 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.034106515 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.0321095 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.028166536 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.019040685 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.027462521 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.028401004 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.019743037 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.024718062 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.022223391 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.043548043 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.020521422 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.020211848 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.034758307 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.027142634 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.018625839 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.026786838 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.02423316 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.030027482 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.01993759 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.03035753 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.024507597 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.019690639 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.024413505 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.024597523 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.01766408 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.018488489 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.019098531 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.029672245 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.024630125 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.019289209 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.039593921 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.020091967 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.027976931 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.030482124 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.026403142 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.020184106 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.01766401 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.019205644 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.033301985 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.035568653 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.023727137 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.028078257 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.175966202 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.028520818 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.017193299 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.027828929 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.027157016 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.02788007 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.017955251 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.018306747 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.035162054 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.035985401 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.024036113 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.037456854 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.028117215 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.019580506 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.041444442 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.028119771 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.018679618 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.02982162 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019703046 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.017598559 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.017346058 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.019284737 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.03057606 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.017814075 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.0198082 seconds)
  done (took 17.112016889 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.063703401 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.019030482 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.018035749 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017665574 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.024802558 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.019006184 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.01776596 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.018823824 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.018838862 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.019951277 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.017891983 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.018138623 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.023250362 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.033213216 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.02542839 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.021521498 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017931346 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.019083034 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017711516 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018851543 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.02345155 seconds)
  done (took 1.326691606 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020330002 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.021371939 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.02113035 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021347874 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.020783949 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.01806142 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.021195126 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018009504 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021791576 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018229581 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.021513266 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017975173 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.018536656 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.018402802 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018431521 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.019628674 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.02207951 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021182356 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.018192834 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.021493927 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.01950104 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.021516693 seconds)
  done (took 1.278626829 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.01863535 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.017652613 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.026809878 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.017210326 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.017248818 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.019801527 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.017107954 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.022651811 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.022467545 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.022595782 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.027298552 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.018160766 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.017129504 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.023960685 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.017297116 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.018019312 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.074772854 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.017973145 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.018028894 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.017287296 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.019456095 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.027306668 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.017604975 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.017533693 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.022536617 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.019892369 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.017177832 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.019517823 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.017752255 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.022352518 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.018135827 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.017213015 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.027304957 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.02632928 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.022583383 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.022638548 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.018474358 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.018045868 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.017206293 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.017323278 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.02665289 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.018674221 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.017861721 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.018553754 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.026903227 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.017653782 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.017306101 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.027291736 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.017114556 seconds)
  done (took 1.885471318 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.027648787 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.075665538 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.026054526 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.055550043 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.030551835 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.022451373 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.024761733 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.058715675 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.018272955 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.018614117 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.03126245 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.032048219 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.019887237 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.020875362 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.025848476 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.019560771 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.02001745 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.019026859 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.022070695 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.019295928 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.02195269 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.025798244 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.030911683 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.031726418 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.020778444 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.019116387 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.01929244 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.020686609 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.03151153 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.022642508 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.021226222 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.021730595 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.031050508 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.026973017 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.019534676 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.019539339 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.031684312 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.019946378 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.020069291 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.018321909 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.019615223 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.021067396 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.026320496 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.031949094 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.020025646 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.027074192 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.019863158 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.01791447 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.031732204 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.019567488 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.022786271 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.032765621 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.020751911 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.020105881 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.021044622 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.031224047 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.019922777 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.018682811 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.020055989 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.031672937 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.01841062 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.020905469 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.032434235 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.019399199 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.022820433 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.032850093 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.027329011 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.020602112 seconds)
  done (took 2.704296373 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.027156242 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.024042299 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.028264719 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.028588124 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.024657831 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.024898183 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.024725044 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.024707025 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.024386727 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.027096857 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.024550816 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.140057104 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.022129107 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.025658116 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.024863021 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.025013838 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.024763495 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.025069929 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.024734332 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.024654361 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.024983161 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.028932722 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.02493299 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.029205414 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.06097746 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.021803108 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.024526346 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.024710045 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.029178747 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.024671541 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.031570247 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.024825439 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.024790355 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.029205219 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.031465547 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.024600424 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.017882862 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.024610469 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.025337133 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.025144913 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.02176289 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.029553999 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.02489431 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.021783173 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.025054478 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.024828182 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.029481863 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.032012633 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.025578453 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.027727895 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.025126704 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.029346976 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.024688454 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.025837446 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.031426439 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.070063715 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.031729721 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.031679951 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.026385228 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.031145019 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.031315513 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.040568105 seconds)
  done (took 2.687070681 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030566685 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.022396448 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.028334044 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.017245035 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.017184234 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.023249531 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017289885 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.017382756 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.0231789 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.02287604 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.024321749 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.023234397 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025225839 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024314029 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.022842404 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024879329 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023113322 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.023183451 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.023026124 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.023509206 seconds)
  done (took 1.319997012 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.019198492 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.021747299 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.017712326 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.021963295 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.017881779 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.021300985 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.017748189 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017912545 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017861918 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017713255 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.022237169 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.022303883 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017861666 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.02409283 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.02120522 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.021261871 seconds)
  done (took 1.163964507 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.020443773 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.027097563 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.128242722 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.018545429 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.020283774 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.01777489 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.018803607 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.017050328 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.019878162 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.034697671 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.018248755 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.020732655 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.018948434 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.017379214 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.017726292 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.020646484 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.019682061 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.018433996 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.018566432 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.128742624 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.031315029 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.019252425 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.020795691 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.019076691 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.020209644 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.030993488 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.019616456 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.020458207 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.017611042 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.02077019 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.020449218 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.029139477 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.020145592 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.018519501 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.017567846 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.018348899 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.018865136 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.02061986 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.020835987 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.018808567 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.017182335 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.020371396 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.01884157 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.018972579 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.019924774 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.020836076 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.019982971 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.028049722 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.018326073 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.020357747 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.018706542 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.019900802 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.01877503 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.025934033 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.020152036 seconds)
  done (took 2.199025616 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.037732049 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.02419796 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.017011963 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.017318152 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.024350892 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.025608617 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.024480124 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.024655827 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.02538558 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.017217696 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.025687599 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.023867491 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.025660143 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.024784391 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.025624264 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.024659546 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.016928699 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.025271747 seconds)
  done (took 1.290424496 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.0241494 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.022025906 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.022815082 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.018966176 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.018939637 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.022607087 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.017247395 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.018702713 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018865707 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.019379622 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019434598 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.018866888 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018653218 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.018614486 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.02259517 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019163469 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.018886243 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017881799 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.019069262 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.017388156 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.023194846 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017743776 seconds)
  done (took 1.283689602 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.193118208 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.153823504 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.043596033 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.038699994 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.0287841 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.058141268 seconds)
  done (took 1.366886391 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.056936078 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026867616 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.024672476 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.053129603 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023230273 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022107484 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022260406 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022246655 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025127532 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.031374261 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022646896 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025035208 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025050806 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027099406 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023879902 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023100943 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022294949 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022425018 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024816425 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.03574226 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022842434 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024629451 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0223156 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022045381 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022273456 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026979067 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025263344 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030929765 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022413802 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024825187 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023237782 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022344664 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024721851 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.031385097 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024848145 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025165097 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022203184 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.035973684 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023600847 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026810046 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.024246011 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024256502 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02526662 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024810382 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024636198 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022818742 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.025313974 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022569858 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022832025 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.038065397 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023877975 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027012835 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023838887 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025096418 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025403774 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.038325386 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.032405327 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027410133 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024746251 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.033125932 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028900997 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024969966 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028772 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.033784968 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025895488 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029177975 seconds)
  done (took 2.628629266 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.03060037 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.053918435 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022072814 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.030915614 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026566532 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022444398 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022221373 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022065466 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022115981 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024884205 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06677326 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022541546 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026401557 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026759097 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022335081 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022199865 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022188544 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026569093 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025132726 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.037464375 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022515554 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027041796 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027073187 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027087357 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.031466251 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023391258 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022196316 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022441668 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022346268 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022568538 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025188397 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022547362 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026946668 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.025269892 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026797648 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022486685 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022331074 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025239317 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022658281 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023533881 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026960857 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.035307859 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022499783 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022888981 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031858966 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022746611 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022659254 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025543544 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022773931 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025604115 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.03206094 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.03199202 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.031854765 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027276794 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0230466 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023061968 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022913969 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022744702 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022906268 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024634657 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028437781 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023521158 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.040443326 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023745429 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023669826 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028784787 seconds)
  done (took 2.627644473 seconds)
done (took 57.086872398 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.220293895 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.172026863 seconds)
  done (took 1.238606912 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.138814759 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.139691642 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.1709534 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.026788687 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.085963666 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.183813513 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.131133756 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.027233943 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.026858891 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.028212877 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.026642359 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.027738154 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.027717485 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.026161568 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.093152572 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.027575784 seconds)
  done (took 2.045879903 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.095042842 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.297289492 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.073602492 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.025593047 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.082081519 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.036024844 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.026443382 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.032890417 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.036071138 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.02660388 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.093902288 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.049592288 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.030744738 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.035589281 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.026681909 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.03037083 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.032483049 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.03663322 seconds)
  done (took 1.924283263 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.092378471 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.035024909 seconds)
  done (took 0.986264264 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.145622871 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.065662727 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.111590509 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.357044199 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.098607155 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.309540203 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.105502966 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.100060611 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.07019253 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.097241093 seconds)
  done (took 2.307618363 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.063456544 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.060637649 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.298248089 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.059755475 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.038318952 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.032527558 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.033756244 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.032877855 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.034312992 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.032443069 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.079400529 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.031825947 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.027418331 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.074211983 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.050524629 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.064299684 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.026218907 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.031982115 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.036417474 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.026149472 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.030450969 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.032154186 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.142122887 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.032092694 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.051727532 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.029785784 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.03142253 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.032550199 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.032475738 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.033308083 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.033818929 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.053959359 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.031853492 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.040558154 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.031260745 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.050994337 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.027411811 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.05085178 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.030035166 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.027068174 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.029800448 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.033674449 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.028079688 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.033808676 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.034338538 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.032882262 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.03295572 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.026486204 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.034519261 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.030311476 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.028152093 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.031554544 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.031653805 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.032260617 seconds)
  done (took 3.271019749 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.079532677 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.071079802 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.02658202 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.076816761 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070755875 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.028944294 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.084159246 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066064731 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.083111731 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.026872647 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.026410081 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.026491287 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.033500827 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.037342703 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.081199113 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.073433508 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.028170015 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.027125062 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.073663617 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.073119723 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.026073343 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.084936593 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.074628787 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.072120792 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.025480695 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.026580043 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.025754037 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.026384782 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.032876918 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.033701705 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.025920721 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.035486764 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.037475509 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.032933849 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.025267848 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.025477361 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025500587 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.033818844 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034506251 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.034276195 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.032230787 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025158038 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.025623937 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.025946565 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.026562392 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.025086676 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.034273066 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.032902306 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.034173582 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.026064779 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.026115563 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.025440156 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.026246894 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.032611633 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.031563006 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.033103847 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.035283454 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.025622189 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.025719396 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.026896066 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.035676536 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.033341283 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.033688023 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.026766122 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.033610579 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.025829205 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034943078 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.038748609 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.025606057 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.026099684 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.025453813 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.025619982 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.026350091 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.032363405 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.031864861 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.026580617 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.026535677 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025462864 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.033588221 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.032723823 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025588626 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.033458119 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.025640328 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.026002349 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.026119731 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.027013974 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.034216463 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.033554465 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.026495823 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.025673541 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.025682195 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025802211 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.025496152 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.034486736 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.034339027 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.034844422 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.03580765 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.026937028 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.03668835 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.034899033 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.027122117 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.034084522 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.026553977 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.027050365 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.027238107 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.034036072 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.033247587 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.035109941 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.026563821 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.026142386 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.035229758 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.036938499 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.026476733 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.033366807 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.035637593 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.034069029 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.025655694 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.03654363 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026568086 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.035919525 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.026664847 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.035655946 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026015747 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.033536724 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.026057025 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.025457602 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.026420071 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.036269354 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.026741637 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.026285933 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.026572636 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.026144185 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.033900593 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.037472773 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.027247429 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.034837986 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.034463707 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.026884134 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.0357311 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.026880545 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.035506375 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.026540503 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.026854913 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.025733335 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.038152165 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.026180393 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.027045402 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.026563726 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.035837036 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.026320298 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035610382 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.033578852 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.025962197 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.036261024 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.035366447 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.03342834 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.036224674 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.027547432 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.027036267 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.026504867 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.026870726 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.035473032 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.037306876 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.0277219 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.026881461 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.033570397 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.035999857 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.026348985 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.033537433 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.033563254 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.034178462 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.027104738 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.027095764 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.036823443 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.037472489 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.034035936 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.035966367 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.034776054 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.026357974 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.033651504 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.036146241 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.026331795 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.040773136 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026795769 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.037707427 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.036904831 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.033465793 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.036176448 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.03779271 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.03572469 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.036276784 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.038294257 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.026281 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.02642057 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.034084663 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.175332291 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.02647446 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.032087358 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.027108084 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.026799061 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.037768768 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.026679604 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.034018141 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.025882796 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.032696421 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.026079532 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02672092 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.036935827 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.026487188 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.027000577 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.032251013 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.025935789 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.031659819 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034633058 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.031843648 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.026207271 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.02673225 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.034483904 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.033519901 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.026149284 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.026559287 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.026897268 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.033874412 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.033218079 seconds)
  done (took 8.488328149 seconds)
done (took 21.130805552 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.139287676 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.076261774 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.1369618 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.083634852 seconds)
  done (took 1.295010522 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.058613815 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.021921012 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.145727192 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.157122417 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.022550393 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.139962742 seconds)
  done (took 1.421619618 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.254011054 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.153214546 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.153819619 seconds)
  done (took 1.444498433 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.159635196 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.297606536 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.582811022 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.151686702 seconds)
  done (took 2.078310742 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.175614628 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.165536108 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.032995705 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.182930495 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.040308591 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.018397633 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.102753377 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.018960843 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.052651018 seconds)
  done (took 1.732290948 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.097858548 seconds)
done (took 8.940294454 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.210487812 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.142358907 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.036775987 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.031181521 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.13107566 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.134289527 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.153956937 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.033814099 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.144579073 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.31927847 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.192707282 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.053067436 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.158255118 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.045231447 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.273568843 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.034012011 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.032685504 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.027840253 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.157004663 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.142428773 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.251832652 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.031416282 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.106478647 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.033591564 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.1089516 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.085679339 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.196515601 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.323116832 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.282308841 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.033999739 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.127003175 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.045050878 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.124054077 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.130777965 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.137060921 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.052688576 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.022591798 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.254267803 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.109951487 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.332103145 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.172867238 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.030068787 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.147553095 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.02877773 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.021904465 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.149363247 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.035510148 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.029402468 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.046645688 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.03030003 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.042666544 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.031708226 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.138054107 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.026686147 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.100098315 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.14127947 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.192511651 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.111219276 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.02929959 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.041688362 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.033756138 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.169350974 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.041698984 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.028862596 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.034918469 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.022708328 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.138620386 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.043734503 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.022781777 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.034336316 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.03251677 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.105670114 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.156437068 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.069366086 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.035140428 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.113941777 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.105208106 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.049793488 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.051625507 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.032728976 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.022097361 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.200529435 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.028533183 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.04187714 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.030413255 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.05699463 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.022649843 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.038412445 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.176492039 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.155493921 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.093819002 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.023505149 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.253111477 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.024562157 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.049201926 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.023906236 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.023026436 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.197187639 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.023062656 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.023252405 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.03422863 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.032916822 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.02514492 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.175595456 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.111057337 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.032202637 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.031168845 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.023756622 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.029813979 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.024115773 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.023874118 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.023225085 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.102864535 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.040989356 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.022485235 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.111038396 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.127555739 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.034865549 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.041064138 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.261009573 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.02780632 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.034160389 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.031908344 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.150944153 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.030704453 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.145303663 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.025254359 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.045066409 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.124874128 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.105603378 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.110259257 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.022351137 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.149847745 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.033134895 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.021523257 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.030850048 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.052323369 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.033105379 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.040711773 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.031821576 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.147597326 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.03324265 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.028466914 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.124391624 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.021247848 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.114565713 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.107912744 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.140066085 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.027970645 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.033584459 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.102181493 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.046900534 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.053516568 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.044863205 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.027265307 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.022773432 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.02249943 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.036731152 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.021571808 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.02212916 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.035820668 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.029183161 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.039277265 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.248642393 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.033079273 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.026943608 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.25895618 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.035026056 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.099451612 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.043446984 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.022264443 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.109437385 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.024550182 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.044575299 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.09058985 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.022852938 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.1059272 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.023208027 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.022812594 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.02946061 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.024634163 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.033561771 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.037666828 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.022956776 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.037393258 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.031087884 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.022377121 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.109251225 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.025158917 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.197941779 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.108114665 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.103284647 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.023125022 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.042890329 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.022438876 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.142843051 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.022934143 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.075446662 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.120612103 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.038350184 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.044738054 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.024099038 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.107196931 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.037926297 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.028309816 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.107974445 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.141399044 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.100399855 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.029533176 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.256155052 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.03287802 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.022844366 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.028967407 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.032371342 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.023072402 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.108002461 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.028282027 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.022077591 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.022711264 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.025031904 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.021730027 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.048404132 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.022235649 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.031454637 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.029012252 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.026113641 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.024672934 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.021593003 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.031771503 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.108809668 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.127056633 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.02940456 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.043895977 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.036083868 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.033875943 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.072828573 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.03143576 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.168175259 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.021533236 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.033339695 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.044672441 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.02208162 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.027742058 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.028485285 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.040125783 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.026016146 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.023586719 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.032184161 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.022504013 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.02321287 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.022854762 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.022868538 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.032469591 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.024383357 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.022448295 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.022399129 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.040003393 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.028277031 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.028405272 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.034546942 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.044063389 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.499537637 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.024426702 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.025197027 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.036351693 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.028534812 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.022901661 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.024446288 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.022400229 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.024881563 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.022960458 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.022317889 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.052119859 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.028058343 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.023249364 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.044232471 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.029392565 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.033887958 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.125964461 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.040305999 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.028343912 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.022029824 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.26684165 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.101511664 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.045238813 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.042997319 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.02317508 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.034502956 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.023106865 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.023550812 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.022167243 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.051952637 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.028879129 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.023300122 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.021993176 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.022481093 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.073261063 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.031796788 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.022108129 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.031955655 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.022687343 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.023108168 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.052334478 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.02366218 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.022437036 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.041267958 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.036341904 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.114924433 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.035854987 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.026624475 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.078632402 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.022417513 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.023259404 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.023497641 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.115966997 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.036579399 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.024603321 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.023099863 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.031228182 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.032954898 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.07980906 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.029777414 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.026539986 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.031406139 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.021943241 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.023360942 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.051395415 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.053379617 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.024296253 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.026991515 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.02251912 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.023239364 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.106980431 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.031855793 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.028746406 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.119374889 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.025630901 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.032240422 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.022410219 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.702793677 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.035866528 seconds)
  done (took 24.038002749 seconds)
done (took 24.931263983 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.157937416 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.037794289 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.046150781 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.033183811 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.036977129 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.036652721 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.048426068 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.034386005 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.037649194 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.045526057 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.15447252 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.023106197 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.031832208 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.038706061 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.032487891 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.037119932 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.035788169 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.036849915 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.023863084 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.037029364 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.035420249 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.035550353 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.033189252 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.03656122 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.023836529 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.032811393 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.157360064 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.039060369 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.034655172 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.033937982 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.031925713 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.047500477 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.032161894 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.031647041 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.033571639 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.029259844 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.034517513 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.030542565 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.156352221 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.02945775 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.023376433 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.036028278 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.031158064 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.031959398 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.032621099 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.035307943 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.028974423 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.036769772 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.032275851 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.04447996 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.15458667 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.032663148 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.033902943 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.032509083 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.029311166 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.033090326 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.03411701 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.034782736 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.028977599 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.044103977 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.032550666 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.031983375 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.022747041 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.032670809 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.030985996 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.031374339 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.021538566 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.032104467 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.022768611 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.028488222 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.031855725 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.031863253 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.030628755 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.028542508 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.032150954 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.022691566 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.031386571 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.043049812 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.030297311 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.031697788 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.022917277 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.028687899 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.028601924 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.02357892 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.03263322 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.034957461 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.032762027 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.02324714 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.032058955 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.044130692 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.030135646 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.02248732 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.034566516 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.03254529 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.032757598 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.022633033 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.031722049 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.032385736 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.031628529 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.022638969 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.021561633 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.032453777 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.028698145 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.031997204 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.02286523 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.032108692 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.031966271 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.021759843 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.031548756 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.030574733 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.032142635 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.034240928 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.032016477 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.035131354 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.0230044 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.021875972 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.032847087 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.02290258 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.032278802 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.031878693 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.028835117 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.030967416 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.023005028 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.031232635 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.032258248 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.029434343 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.023112742 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.02317089 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.023550094 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.032237301 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.030774164 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.021609552 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.02235971 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.032036628 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.031923887 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.031278035 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.032166975 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.032008069 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.022952745 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.029480639 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.028668604 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.032133648 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.031973142 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.022845434 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.031721674 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.03154334 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.032754774 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.028875116 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.032104593 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.023535861 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.031923515 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.030165628 seconds)
done (took 6.389415645 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.081893768 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.069570487 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.185212397 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.151899283 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.037486139 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.038264247 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.028530009 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.044371969 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.030486125 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.050835703 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.051926992 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.048838929 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.168972648 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.046015503 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.023085435 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.03658876 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.023882849 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.05261498 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.15180098 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.051385202 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.068590757 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.021923044 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.039633378 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.043471683 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.036662731 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.043806102 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.051352509 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.024790069 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.043590419 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.041961845 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.053575772 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.026214183 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.023993019 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.043579627 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.040912389 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.032849871 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.023035194 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.030757094 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.035858856 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.023126268 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069211847 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.04304249 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.030229695 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.030483745 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.024002913 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.039068767 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.024246477 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.031099935 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.038011452 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.030250121 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.036678526 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.040358645 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.025471489 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.04283002 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.022308014 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.03107399 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.030841403 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.023239624 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.024135927 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.023307956 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.02312441 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.02634733 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.036434855 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.042231201 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.027337815 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.030848907 seconds)
  done (took 3.946589464 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.049641263 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.07291885 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.038771592 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.039353837 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.022660661 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.023484402 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.023627921 seconds)
  done (took 1.288017565 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.099662082 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.146293673 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.151179404 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.152708479 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.165488768 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.148887721 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.037567816 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.055392631 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.061206001 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.168678446 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.159540349 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.153896771 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.027686038 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.037139297 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.058475934 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.1554659 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.037745413 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.031804161 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.146745948 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.154325915 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.028843668 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.0579722 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.037934839 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.026958047 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.155758512 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.148252567 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.027339161 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.069066911 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.02655179 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.023860975 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.02365413 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.04810323 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.148092963 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.0406922 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.02440341 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.023137646 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.146808607 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.024887658 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.149372963 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.031906536 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.145669262 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.026535066 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.026976769 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.024368689 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.025210488 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.144835513 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.025315044 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.024128398 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.023447346 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.150369767 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.036025192 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.148597661 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.025549997 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.029503859 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.031822994 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.031168391 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.031444577 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.024470903 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.150491346 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.034701941 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.025745171 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.15348122 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.154013371 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.149287777 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.155318986 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.034057569 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.150414319 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.147056367 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.024071473 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.032659779 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.024781592 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.156580803 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.028202882 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.026662888 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.022458102 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.032329443 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.160956383 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.160896987 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.16176193 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.039045315 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.025923419 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.02484586 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.160775204 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.161873309 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.030153307 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.024210834 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.024782122 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.041043775 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.050693845 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.026799219 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.029889915 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.024464667 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.035689607 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.027178256 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.026445549 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.154256937 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.023200205 seconds)
  done (took 8.301225777 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.041655879 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.024425918 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.024242294 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.02465519 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.025055525 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.024506617 seconds)
  done (took 1.256894053 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.064609065 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.024937284 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.024954968 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.024759681 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.048754565 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.139304231 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.140768307 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.02660789 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.043647954 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.038335018 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.139422984 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.143058025 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.141688999 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.026122675 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.138658938 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.037105351 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.13902785 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.029453112 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.036343524 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.025976303 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.035667563 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.025770003 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.02567133 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.159206397 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.019136386 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.03695191 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.034711687 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.037263605 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.036905907 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.025951798 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.025733915 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.018931484 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.035828621 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.025838764 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.139688202 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.035763279 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.024934497 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.020071558 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.029238704 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.018952845 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.142001792 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.026231877 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.029285917 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.019881451 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.025802346 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.035793304 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.020542368 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.035334547 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.139917216 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.020208998 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.020008319 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.025044444 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.018893775 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.020071099 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.035964589 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.025816806 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.020134333 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.140194594 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.02609642 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.036042496 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.024863052 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.018971753 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.025555516 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.018933548 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.030112801 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.020073064 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.035708233 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.026201092 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.02575078 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.024572984 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.02016989 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.024477085 seconds)
  done (took 4.413282517 seconds)
done (took 20.213436925 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.459972397 seconds)
  done (took 1.46871709 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.02026039 seconds)
  done (took 2.042485721 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.052270389 seconds)
  done (took 1.08725123 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.310430168 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.484554364 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.789613253 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.09486712 seconds)
  done (took 2.706207586 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.864488458 seconds)
  done (took 1.914780352 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.220046009 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.182301783 seconds)
  done (took 1.46684663 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.515100708 seconds)
  done (took 1.551046138 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.476966152 seconds)
  done (took 2.525243162 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.206227449 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.141089484 seconds)
  done (took 1.396441798 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.654918674 seconds)
  done (took 1.695803263 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 6.789421461 seconds)
  done (took 7.832669317 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.209370702 seconds)
  done (took 1.305548485 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.255852773 seconds)
  done (took 1.295972039 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.723671455 seconds)
  done (took 1.76114347 seconds)
done (took 31.098022662 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.046597805 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.041086054 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.041309371 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.038716916 seconds)
  done (took 1.208917203 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.032127778 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.028391171 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.030734484 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.030845285 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.028504734 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.030054324 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.031138047 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.027323107 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.028462438 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.027560919 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.026149631 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.027411022 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.03023848 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.02695761 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.029985875 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.031482706 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.02764333 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.028567898 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.029484777 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.027354137 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.030055296 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.027454219 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.027622448 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.029269586 seconds)
  done (took 1.738240957 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.041517748 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.037951625 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.036207022 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.035637867 seconds)
  done (took 1.2019769 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.034354624 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.033790921 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.042336955 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.042135196 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.034098719 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.034650922 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.040726865 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.041023366 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.048251282 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.043895077 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.024883419 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.024792708 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.023665427 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.037942368 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.040771688 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.017960269 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.019377881 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.034659667 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.033371669 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.036436206 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.026882309 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.022145307 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.03411964 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.034615332 seconds)
  done (took 1.856033522 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.038810845 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.022196019 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.039407196 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.048565063 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.049282756 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.02213648 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.036758693 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.049545632 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.198300367 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.022286699 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.029085668 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.022227285 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.062875267 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.022309584 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.038083073 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.174307896 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.177714784 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.026893851 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.05511253 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.021929472 seconds)
  done (took 2.212051719 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.030358775 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.030481228 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.028097305 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.021870164 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.034465179 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.037462558 seconds)
  done (took 1.23222667 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.025252193 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.024212122 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.023895242 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.028884876 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.024094963 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.023968693 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.023894365 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.022705105 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.022740854 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.023544511 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.023647739 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.023758041 seconds)
  done (took 1.336986483 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.169652668 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.02941798 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.027588131 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.022453924 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.024409883 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.023399598 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.037758026 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.02549906 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.041306102 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.023285114 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.023809705 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.026472803 seconds)
  done (took 1.524498329 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.062512823 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068268933 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102684716 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07850123 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084945969 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053681558 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.208480087 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.036602185 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.122463637 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.096223304 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082523263 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051083628 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044131279 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.027272819 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058150112 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075691913 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097053728 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030171003 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079172132 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.248035987 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091206134 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.09010749 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105963405 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083040791 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.04908361 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105041093 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055072803 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060226407 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082412834 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.085407933 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080760739 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.062981158 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.028886465 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.028391549 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123622189 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.062976379 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080253251 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.053090424 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.065923998 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.048989901 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.085193451 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.027811823 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.042609627 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.071293841 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.045374317 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096499213 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.05433083 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076809362 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040033244 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102010221 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090768437 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.192791075 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.046311472 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065450536 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106016551 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074405817 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094524025 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069496439 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040019362 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.082383904 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.072279541 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062856736 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070152145 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040297362 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143033674 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.207776164 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.084742259 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072427811 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.04852285 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.054021558 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.070353242 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096103633 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084317986 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.076454827 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089834604 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.050893433 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086980508 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.05824272 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.08444729 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060248567 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.030216025 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079644513 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087325409 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055509091 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058517226 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086246064 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.062799642 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034036574 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.047845653 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.077993214 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.038064647 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.067151785 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.0431867 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.0872966 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093703491 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055628591 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073659704 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081088349 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.035650325 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122927333 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.06812863 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030853629 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077960931 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072008722 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112341676 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054117996 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.032965563 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058891857 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060845253 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.12086314 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062020482 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.038563527 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076269598 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10157997 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054524355 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.287928077 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055478443 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104681948 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076214539 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.045501186 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.033119422 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.054583474 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074168716 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071615397 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08479742 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055139352 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.042294213 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.045942566 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.081396046 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066777284 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038001058 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082009137 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.06500235 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.033037854 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048882354 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.035914666 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116116939 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.045609713 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.26480157 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092826225 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.033504561 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06574901 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.055634932 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064918363 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.060306975 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079705258 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097350334 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.159822785 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.04816108 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.040600657 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066818971 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103245395 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084359287 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.048984749 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.042925306 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057383025 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069788025 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.059104491 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08153325 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.052252783 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068750768 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.062155814 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099643488 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101787135 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059303389 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.064490904 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064413365 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.073528653 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033117183 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11929811 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0621675 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084363466 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045927857 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101684329 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.075298949 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064697309 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.044991306 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.063064831 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.061340431 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065735531 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105090318 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.05306947 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.030277878 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051655494 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107966299 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035392656 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078366588 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.050618196 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.052093302 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.337399832 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.052090777 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04000513 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.025685532 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082905759 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119128342 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.028202978 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078473445 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.075119229 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.062467644 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.082723772 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.027059924 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087989047 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099773988 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087643924 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110859348 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161775893 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08322562 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080851722 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.249165344 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072820397 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.038094674 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.085760601 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093727672 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050134371 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050064475 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092954584 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106922084 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.092849216 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.07064962 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079758702 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.06218653 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066638777 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059854902 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.058397079 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101754405 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081673856 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.083714917 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.041801929 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069559836 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.07876136 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094151433 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.039201919 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099530141 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.042806589 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101264923 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.035621403 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.085139647 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.034025763 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.133981813 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.037632079 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.058279609 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.027535094 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.029985507 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103187018 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.082462495 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063292486 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057005233 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.094890971 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097436726 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.03546449 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071783313 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.07502753 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.063502026 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074086694 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.068607569 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.047323224 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053442404 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.068995548 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.043464081 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.039138425 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087163803 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054682593 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095849891 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.042449531 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.033228483 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099934689 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072022859 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052561468 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034951364 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068470032 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.089363363 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.052706839 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045788157 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083358932 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065927359 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105742715 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.050594667 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.063364895 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08699866 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040320708 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.056918249 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.027814529 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.049367112 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.035844129 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092195034 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.034956609 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.239467425 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.026659571 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089245727 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042803123 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.056203436 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062918937 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067033799 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095788876 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.053548355 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098561113 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046368802 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.078829608 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066153768 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070209054 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044364331 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061661405 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.061958908 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079168909 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.052600897 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078707549 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099890425 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060360365 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.101770808 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048688684 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.082865321 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065281681 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.084945012 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.071446051 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15494519 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098384397 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072818513 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071934943 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.032768788 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05456484 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070510999 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.069782364 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136024979 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084371815 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.02997507 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.062701941 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.053062444 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065506918 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066008069 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03754665 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102666553 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059514567 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.046485157 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066859567 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.046461221 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.064275845 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033810333 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061330515 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.054603383 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053976123 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057528942 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.077814864 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089747548 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071210555 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107971781 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.063996168 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.051609877 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.080573776 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.080142752 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076724373 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042701339 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.043208183 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104781506 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083770319 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.087501305 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.058954372 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072658685 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.238432114 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057588212 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087195783 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064570144 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.081691893 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03690213 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.033531743 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.02529131 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.029377935 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.0805401 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068226082 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067459619 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063217208 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.029566431 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.063530638 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06537557 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.02900443 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043352929 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050578247 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.056559225 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.039493554 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062924505 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.073605027 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.053009668 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.059819084 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061904517 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098666828 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.056693025 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046051662 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105416674 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107951252 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045599402 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05105896 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.029259751 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.037202282 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082367309 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103779517 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107487789 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.036804718 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.045050799 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.042174057 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045032397 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.028928279 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.046740275 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.047347756 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063376568 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057472109 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.072898895 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064577612 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032849042 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.06786446 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059423176 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.064617496 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.067455889 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079701458 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.086161406 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.097434919 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074524489 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07454177 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033760374 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.038209099 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.034780278 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.038278438 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.066634347 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.037228276 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034540652 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108684456 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.051245582 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071648343 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073667818 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.048010298 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033397481 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095531575 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.02730858 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097384449 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.02881397 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038862744 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.040910355 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036962661 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054268495 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104943283 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071256463 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070517599 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.22881747 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068718283 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148595473 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117228909 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042630446 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100657259 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032505103 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.033415374 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.033630938 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065801301 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046174845 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.076570192 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098961101 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045137713 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057966509 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035191607 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099467482 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.054375738 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059214943 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.042614801 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.037217691 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100378608 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037367613 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.041653792 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046939824 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.069652281 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.029756951 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.061307984 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.04158312 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037640268 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150547173 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.672105027 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055231401 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.031879877 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055296688 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102958982 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093451896 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054421718 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069011293 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.078689956 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.063425092 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.053095344 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074015914 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.165331403 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.031549262 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05264714 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.056001013 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.060217686 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066238809 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.054991767 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.045454528 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.054477845 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.044865088 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.0374032 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072962468 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044557637 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.055420409 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.06772804 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.042018642 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.048010947 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091669602 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.061294261 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.042161616 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047175223 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.071583774 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045149211 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066419637 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.026837662 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.071093942 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047856125 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080462468 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.059712004 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.070867093 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085787002 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053549384 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099902243 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.069501575 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084045385 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046243897 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.036432572 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.243488654 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.046403772 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034816771 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100400517 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.049542256 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.063609883 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063822581 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.054667696 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067414811 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071338963 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071050257 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057894018 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035841457 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055533445 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.06210483 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.043303837 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036391829 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.030594872 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.033203474 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065621653 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041165505 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.044222781 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074470798 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046298954 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.060944325 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.055426323 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079616163 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047582501 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.063168288 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.069195433 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049846563 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090052686 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059779271 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.087960374 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136134079 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.090019631 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08923254 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094069333 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.035634485 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.036761215 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.02653059 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.076449314 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.03851153 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.045632919 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.036899172 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092415097 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.042465949 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069653394 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.220298544 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.037944372 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.05118745 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054269771 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.027116301 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.041534999 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067687799 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044611065 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037738607 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070873056 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039614494 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087420756 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067963554 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057350415 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.054031567 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038290523 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066487914 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.063819049 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.091018355 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.057547296 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.033267733 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085450604 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.066499954 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102879601 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.032675058 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039442877 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09195103 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064390721 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096374775 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039630939 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124437576 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.106640725 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.065801366 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.252925483 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028294241 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047681512 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.046274923 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.082256788 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041247355 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063296163 seconds)
  done (took 43.96836323 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.142245393 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.26009515 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.139652647 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.112909036 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.078838174 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.081571703 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.250167602 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.091480162 seconds)
  done (took 2.334694763 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.025888402 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.060485988 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.039199998 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.325584065 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.058395649 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.024303382 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.030625729 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.040635903 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.026596812 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.023510724 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.064708169 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.024231693 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.028104033 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.47337884 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.02267253 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.027736579 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.027644325 seconds)
  done (took 2.522343352 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.322116829 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.769550484 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.312634311 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.496031454 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.106902375 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.564520211 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.031295631 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.038141773 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.641096752 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.36715336 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.1006735 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.184190089 seconds)
  done (took 18.120375306 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.032758438 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.160585758 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.160239048 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.03200789 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.031707878 seconds)
  done (took 1.66891018 seconds)
done (took 82.04513894 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.043528944 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.138518957 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.024159757 seconds)
  done (took 1.376217731 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.159647958 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.159266375 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.159008379 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.160302103 seconds)
  done (took 1.813871734 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.033039745 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.034707069 seconds)
  done (took 1.254522072 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.183639077 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.307847853 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.057224007 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.041542199 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.038890437 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.038926196 seconds)
  done (took 1.30976298 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.028069463 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.027739998 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.028253399 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.028480439 seconds)
  done (took 1.295383758 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.136609525 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.022212386 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.024698944 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.026633285 seconds)
  done (took 1.391267579 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.042083774 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.043348231 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.075593768 seconds)
  done (took 1.345456888 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.041442817 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.043172548 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.037335281 seconds)
  done (took 1.306802095 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.058875575 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.052343596 seconds)
  done (took 1.283435592 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.038197547 seconds)
  done (took 1.220938545 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.046682347 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.055652982 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.220100816 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.187185844 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.224622339 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.205311244 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.035781395 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.033218829 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.035744708 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.037673405 seconds)
  done (took 2.26007942 seconds)
done (took 17.632568033 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.038029082 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.156509952 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.396969407 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.045435655 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.614411644 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.394018287 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.700882193 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.049528547 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.061414968 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.025171338 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.043041452 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.590337262 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.69921975 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.109371079 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.682585926 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.099992948 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.519344808 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.026133158 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.024723566 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.025072393 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.669866436 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.025303974 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.025065624 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.025690846 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.516884006 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.291905872 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.026450015 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.096853617 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.025605228 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.028991318 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.272787258 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.02660895 seconds)
  done (took 12.504106363 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.027208526 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.084128561 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.029625219 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.041569298 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.027190893 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.026785994 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.045355257 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.025587326 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.072091902 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.024949272 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.042745319 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.024467158 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.029314839 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.026278746 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.046208351 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.025230824 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.02761719 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.025673539 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.025493034 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.02588716 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.04533628 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.025049243 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.025662131 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.025976077 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.02535536 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.040378207 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.026464116 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.025198368 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.025390492 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.029492778 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.030717591 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.026618869 seconds)
  done (took 2.244464594 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.082350734 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.085763816 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.030683089 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.068188586 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.080964622 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.027796758 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.115628201 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.049414444 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.074831248 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.025700459 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.043408738 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.025193495 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.064876595 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.027015712 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.046777791 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.025093763 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.02774996 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.026137234 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.025231255 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.025654265 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.045285167 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.025089251 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.026181521 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.026176854 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.026014542 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.043040335 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.02686505 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.025085265 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.025329289 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.029548141 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.031577782 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.026706384 seconds)
  done (took 2.526614136 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.027225451 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.029240852 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.036049227 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.039577545 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.023080213 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.026147125 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.027027715 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.023318839 seconds)
  done (took 1.4234093 seconds)
done (took 19.890032254 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.03839143 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.024931975 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.028919337 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.051410839 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.032505726 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.146364321 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.028408943 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.031162324 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.029574155 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.029299168 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.031220334 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.022618402 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.028321816 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.027952654 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.029948111 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.02337018 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.15043645 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.02851785 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.148388657 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.151218093 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.026338619 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.029247565 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.033242286 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.149909935 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.150930772 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.150768055 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.033398609 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.03045106 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.029835487 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.0275625 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.146245459 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.14939173 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.026398942 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.143804143 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.023469309 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.023364814 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.028495447 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.024824982 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.150621087 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.033100086 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.025556085 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.032530683 seconds)
  done (took 3.741656865 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.150299179 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.160390559 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.151679074 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.036558594 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.032414687 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.036032095 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.157045405 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.032910091 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.03172795 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.156158843 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.027341319 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.031704379 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.033888579 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.02412878 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.031131453 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.02782184 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.033438811 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.025617588 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.031443987 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.031697169 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.156251121 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.024390842 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.032497481 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.032898651 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.026684146 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.0332509 seconds)
  done (took 2.76660186 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.03293596 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.047424034 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.051469696 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.120744907 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.068359767 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.048963661 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.041402966 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.052378138 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.05883944 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.024105267 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.04862424 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.053851335 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.056335018 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.032386964 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.065703725 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.044919235 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.039018226 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.026297093 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.031107762 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.063553498 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.04993422 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.045333294 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.059799911 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.047244568 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.024661756 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.034839375 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.029262225 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.043127986 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.03694281 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.037982513 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.028141053 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.028099358 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.025204452 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.036633994 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.027972648 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.022196024 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.049701548 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.037680475 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.040805059 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.065485338 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.035800011 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.025993807 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.054459786 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.091156821 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.022992013 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.027436971 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.029208798 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.037830298 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.025695895 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.070503229 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.041806524 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.023486677 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.045192506 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.025813455 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.025935968 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.048244278 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.026050144 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.027100108 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.047433214 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.031517452 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.048126567 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.030606025 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.046850499 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.023084187 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.036930578 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.026072243 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.026658024 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.022958571 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.062170361 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.032695799 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.076720454 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.025568455 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.022551422 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.037347606 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.037192559 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.032583317 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.022858354 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.045438538 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.038919112 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.028731278 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.044608096 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.027476814 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.028030982 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.072088144 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.02356122 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.02255356 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.022444256 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.026903902 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.028114201 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.025220628 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.038393311 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.023840021 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.028087018 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.055040383 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.02434344 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.024866289 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.027151027 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.02585847 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.023521287 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.035102609 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.027585203 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.02656289 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.03837232 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.025120488 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.028153553 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.042063718 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.035145227 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.022848152 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.026133815 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.027131842 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.026832854 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.026224329 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.028463051 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.026620275 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.030758637 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.032864338 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.030819651 seconds)
  done (took 5.614728781 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.249118867 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.240666429 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.02542845 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.235571988 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.033586044 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.163428067 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.240695864 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.240326613 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.025279706 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.026212038 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.024311935 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.179210614 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.17403451 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.185400098 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.165158825 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.027210371 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.060393531 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.184712411 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.242840119 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.238263746 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.063431693 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.032731984 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.028029408 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.026321092 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.026026577 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.03397219 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.043139976 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.034307672 seconds)
  done (took 4.484459906 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.03123206 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.071991931 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.029065929 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.051922691 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.042079288 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.025831559 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.026977295 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.025492616 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.043478461 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.030867456 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.02523916 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.029030402 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.028647301 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.027662504 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.025429676 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.032157861 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.032542546 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.023935446 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.028941154 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.030149479 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.03738405 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.049228581 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.028881949 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.024898214 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.028814229 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.025026641 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.029975082 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.033920026 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.02481121 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.024845279 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.022203402 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.034982078 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.041534946 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.026467716 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.024723189 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.025706596 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.025676252 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.025496087 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.025513405 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.023522766 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.023394702 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.030635384 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.023947792 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.029901746 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.039900815 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.028033984 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.027119835 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.028587583 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.028898596 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.022405292 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.029150208 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.029535717 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.028362589 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.034700489 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.02813649 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.0288729 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.026994563 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.04203815 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.031665859 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.024312271 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.024234486 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.023419832 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.027747148 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.031852841 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.042981433 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.027244194 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.023858158 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.025943124 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.026900376 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.039612187 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.024506402 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.03266333 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.022350236 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.025456751 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.027801545 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.028280637 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.026821715 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.023383314 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.024959973 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.024712909 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.025340856 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.025197875 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.02463186 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.028266739 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.023107307 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.023897615 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.026056575 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.027098586 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.030512766 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.024134096 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.029219136 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.026957375 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.023608798 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.027897069 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.031305993 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.02812863 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.044594137 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.032786864 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.025916905 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.023120495 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.043079483 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.028376738 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.024756657 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.027278165 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.034378345 seconds)
  done (took 4.354051666 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.055539088 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.027600448 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.045507289 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.063772095 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.036713858 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.031790378 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.040478135 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.027241458 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.049365989 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.024530001 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.035575505 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.023531596 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.039578313 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.035267202 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.027630221 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.036100375 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.027960189 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.047089474 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.041508158 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.023585972 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.034829427 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.038702851 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.039092165 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.043839804 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.04354173 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.045125579 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.039044609 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.028351655 seconds)
  done (took 2.292163443 seconds)
done (took 24.442791623 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.255804454 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.412118714 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.224900227 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.840421172 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.271212283 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.238636361 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.424507002 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.207344798 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.1120307 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.309459119 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.891000713 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.426028409 seconds)
done (took 60.915903026 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.204930075 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.364108337 seconds)
    (2/2) benchmarking "String"...
    done (took 1.46519089 seconds)
  done (took 4.039809508 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.649353128 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.218260182 seconds)
    (3/3) benchmarking "different"...
    done (took 1.25812395 seconds)
  done (took 5.328141955 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.550788378 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.773653714 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.489460633 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.214659346 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.229116993 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.670025614 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.389592197 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.914127708 seconds)
  done (took 27.886944864 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.340160971 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.486032429 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.645497351 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.752457261 seconds)
  done (took 18.521089004 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.673281597 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.75919818 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.757064529 seconds)
    (4/4) benchmarking "different"...
    done (took 1.866769576 seconds)
  done (took 8.391113605 seconds)
done (took 74.221579854 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.208642678 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.688418003 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.251814779 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.402399192 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.234021012 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.291635889 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.218716432 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.239374816 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.206941912 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.211312428 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.204806152 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.213082739 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.219860857 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.277199574 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.216593977 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.210364265 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.670986523 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.208515742 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.205230136 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.199650642 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.385550904 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.209778146 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.2172947 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.293520349 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.681317229 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.25043123 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.27709505 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.211627391 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.833621816 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.217786015 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.217058535 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.214388631 seconds)
  done (took 185.79615173 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.207178594 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.219165632 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.175732969 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.240138023 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.669943114 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.571900876 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.072527082 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.686128808 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.216703214 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.22961936 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.293093717 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.204816783 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.295542063 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.761386847 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.239968448 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.229450395 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.15256204 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.061972033 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.258712211 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.126633598 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.22983693 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.810024302 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.749364642 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.092374353 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.238161822 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.234892737 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.235290652 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.227959784 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.71467809 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.201590547 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.228654347 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.231400955 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.398676732 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.450440342 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.215661373 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.213784061 seconds)
  done (took 157.596992252 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.369912303 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.208489228 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.244210962 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.317263359 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.221366168 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.076179331 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.20311732 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.207643583 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.199876319 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.206433572 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.205884208 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.267861164 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.203148682 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.763431852 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.231024245 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.212228741 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.204266471 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.77257379 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.211619002 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.199966752 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.199621164 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.312981927 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.540788728 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.317024596 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.204412114 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.216346033 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.32086505 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.211324037 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.211631785 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.211905511 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.322135945 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.214324113 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.338849544 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.322677607 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.218130899 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.271839051 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.219401044 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.546379566 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.217149069 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.214128296 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.213709644 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.261934455 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.204247883 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.426013993 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.314500289 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.229923169 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.230610499 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.789103988 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.815488521 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.204376791 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.211644886 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.20820112 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.216468232 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.206118253 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.517591861 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.207078557 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.247737159 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.144891674 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.226397204 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.216047323 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.213797631 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.204724705 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.205701602 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.217962545 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.243234471 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.858223969 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.850698426 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.55849829 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.003900326 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.20466266 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.206954255 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.199554711 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.707263615 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.276006177 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.21682756 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.220299676 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.397383952 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.216614358 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.220484691 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.160896251 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.147668662 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.217422995 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.329068669 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.211595219 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.208377204 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.602610237 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.810458756 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.225986767 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.238982863 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.265356624 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.217347676 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.208643128 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.219236218 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.14103334 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.209504546 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.228878601 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.624235058 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.219842705 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.216036582 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.493482101 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.581118618 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.208679706 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.296074415 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.618621425 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.180716858 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.219534579 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.210152397 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.236787636 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.222499129 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.228647554 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.225880181 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.219462941 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.220824197 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.227216423 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.214607065 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.218550494 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.218905911 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.239020496 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.222292311 seconds)
  done (took 342.530131895 seconds)
done (took 688.604191366 seconds)
(4/20) benchmarking "parallel"...
done (took 1.206816145 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.465405268 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.23138195 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.323107247 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.647512616 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.422273063 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.406347116 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.421999307 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.510692477 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.444658795 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.387523348 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.443686476 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.398648362 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.507546752 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.468620057 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.474280886 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.511623311 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.417903441 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.967599224 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.432785292 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.385141482 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.416459444 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.388299299 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.371465213 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.449682717 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.474050458 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.413475828 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.619560345 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.467268682 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.435638865 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.469153571 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.497046828 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.499475233 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.428875491 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.4702111 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.484087336 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.481981266 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.439103833 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.488686936 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.39235737 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.424539356 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.43701682 seconds)
  done (took 68.032182056 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.661712294 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.408210616 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.52179746 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.526516671 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.124533659 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.515160076 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.622552522 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.391813968 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.415858536 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.506191958 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.517406394 seconds)
  done (took 19.440868854 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.476223653 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.394488251 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.521037836 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.536763862 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.628289181 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.517216969 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.566501113 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.393910297 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.404602038 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.514093851 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.529699678 seconds)
  done (took 18.711600256 seconds)
done (took 107.39675266 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.806931149 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.287506439 seconds)
  done (took 4.302888725 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.244708702 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.231609468 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.228028625 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.22473342 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.225921845 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.231653859 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.274348732 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.233105323 seconds)
  done (took 11.104635094 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.220187451 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.220771122 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.227412575 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.22331037 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.229790596 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.227910389 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.228015417 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.222328133 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.226271597 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.227465185 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.231840293 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.228446611 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.227086103 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.232264873 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.222202682 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.226103802 seconds)
  done (took 20.830775329 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.224872705 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.227659997 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.223319069 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.227606956 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.226351141 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.219079124 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.220850309 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.23241193 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.225916881 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.219592434 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.222925218 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.222235287 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.224289496 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.219636426 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.222416248 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.218336979 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.22803567 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.221430945 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.224565988 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.237942558 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.231605063 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.23995763 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.236322703 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.233571719 seconds)
  done (took 30.636968186 seconds)
done (took 68.100835804 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.818005269 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.024918959 seconds)
  done (took 7.062893389 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.223639854 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.223810562 seconds)
  done (took 3.720683818 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.222589199 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.226033098 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.219077431 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.224921455 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.225891658 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.220446068 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.218857086 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.216655496 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.224210498 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.224830642 seconds)
  done (took 13.438651288 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.216403491 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.222993995 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.217436155 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.217160965 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.216156712 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.215078789 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.220708052 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.213620995 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.219828955 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.22114205 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.224363124 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.416019861 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.225609636 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.4456132 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.226071564 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.222518046 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.225207625 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.219315088 seconds)
  done (took 23.602088919 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.218522671 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.223530202 seconds)
  done (took 3.649445214 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.22194065 seconds)
    (2/7) benchmarking "second"...
    done (took 1.227794295 seconds)
    (3/7) benchmarking "month"...
    done (took 1.229832113 seconds)
    (4/7) benchmarking "year"...
    done (took 1.232279006 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.230688667 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.226287874 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.230750602 seconds)
  done (took 9.806118265 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.669756885 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.389839696 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.43538302 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.665550309 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.872628094 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.144464827 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.870342765 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.154443963 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.977301856 seconds)
  done (took 17.393711807 seconds)
done (took 79.890839996 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.95330047 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.210961926 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.644730994 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.299186079 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.275107014 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.57171515 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.2298813 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.812267865 seconds)
done (took 38.211393221 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.351989034 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.215323407 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.238768954 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.244252161 seconds)
  done (took 19.912035405 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.209774349 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.786202858 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.243684432 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.272599061 seconds)
  done (took 19.799191879 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.610389103 seconds)
    (2/2) benchmarking "read"...
    done (took 1.617671691 seconds)
  done (took 4.444187519 seconds)
done (took 51.73346992 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.227663681 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.232440218 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.231463692 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.237032683 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.227880657 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.229882879 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.225735883 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.233792766 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.230135094 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.23300565 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.227492419 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.227270047 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.223643933 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.22263394 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.221147119 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.219054079 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.223267219 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.217271454 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.229390669 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.217955382 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.224972762 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.227312998 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.221896914 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.221314515 seconds)
  done (took 30.640114043 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.375736666 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.328773136 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.36099704 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.351767028 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.337958759 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.357913988 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.361272982 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.290454764 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.364045785 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.367151974 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.266788863 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.329031785 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.357989198 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.34691518 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.362530892 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.340436156 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.373950448 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.295396143 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.365756972 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.350933447 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.363192437 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.302666041 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.337277415 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.321584671 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.342215324 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.273607817 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.377250617 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.334478754 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.329693054 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.341112409 seconds)
  done (took 41.424179792 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.271841578 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.235820004 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.238236539 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.329209544 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.236536674 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.232699293 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.232451974 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.229005485 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.229397651 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.234338307 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.23559648 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.236484607 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.234615617 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.22819754 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.230955929 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.231860066 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.264444991 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.408516583 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.220311984 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.224905881 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.271767011 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.223238119 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.228191534 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.225386223 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.228119279 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.228212315 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.225953973 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.226400314 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.228917171 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.227017864 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.230371118 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.276223243 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.264521358 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.226369254 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.347301175 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.284471681 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.230591403 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.254590238 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.229781211 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.223828151 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.235643317 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.233792424 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.230346764 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.232511607 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.297101583 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.233391196 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.228893644 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.231585444 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.230483888 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.229375746 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.226277115 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.233512031 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.238890617 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.231733732 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.23366282 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.234643378 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.228875203 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.221530315 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.222363094 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.220572796 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.217376407 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.302330941 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.227108058 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.224364773 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.596617759 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.227474625 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.290701854 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.234601426 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.229674303 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.441827693 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.225104243 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.423618014 seconds)
  done (took 91.406997586 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.216954408 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.222553476 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.296141075 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.302858068 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.222380228 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.224702457 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.226468611 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.221603726 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.878385446 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.225862715 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.21871755 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.2280807 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.892218737 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.225659605 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.222046203 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.304947098 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.225768149 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.229756321 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.235357755 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.224972918 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.222115312 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.228827345 seconds)
  done (took 29.700358581 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.268663711 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.245588385 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.265694864 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.223954103 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.218440145 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.225996464 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.256805474 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.240276078 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.264110193 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.269563422 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.272832685 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.274576298 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.229479991 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.261693338 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.262396852 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.248175401 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.261999304 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.242227523 seconds)
  done (took 23.74985343 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.405513272 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.399053226 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.363812311 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.274330074 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.493710729 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.491791527 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.327429836 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.453514191 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.324643751 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.39687271 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.452298092 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.329472405 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.484420795 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.262104951 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.313451016 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.479294625 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.354979177 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.268039967 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.397056478 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.337107535 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.406892686 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.399852938 seconds)
  done (took 31.627664291 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.300194963 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.316361575 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.301580171 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.308786354 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.222322085 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.221253609 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.280477917 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.251144339 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.239400389 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.299342891 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.254741666 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.219909515 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.239091493 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.276715547 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.3109054 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.269063467 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.309569098 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.277957673 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.304837603 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.225437976 seconds)
  done (took 26.639224209 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.226253508 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.225445477 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.218045796 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.226284778 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.217889076 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.224242661 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.222902861 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.221830596 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.220684071 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.51684038 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.228260631 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.228634173 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.227504392 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.227455243 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.222385083 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.229569848 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.221830402 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.223418321 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.228852253 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.222620214 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.51685359 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.228035308 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.234221869 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.233954605 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.228554111 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.231814789 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.231723461 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.230801872 seconds)
  done (took 36.134821221 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.297062693 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.229981403 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.230647771 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.226955947 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.227602712 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.293310293 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.228363085 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.225163114 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.221947205 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.222812383 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.223300869 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.22297528 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.228710744 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.282569448 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.220580843 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.218476066 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.342142446 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.217163702 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.286775232 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.203875664 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.225223469 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.334978967 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.223004558 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.225079505 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.215697302 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.232636103 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.228234197 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.235404275 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.229887132 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.229984893 seconds)
  done (took 56.448049648 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.248858495 seconds)
    (2/2) benchmarking "in"...
    done (took 1.249701421 seconds)
  done (took 3.713998909 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.225492156 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.382777103 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.217097163 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.422599632 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.383404773 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.408963377 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.443339237 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.318478572 seconds)
  done (took 12.01657984 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.225726528 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.325581875 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.344929947 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.22661158 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.223341676 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.566344392 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.237125332 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.983081322 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.898971922 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.109725255 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.335846901 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.902282327 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.299575971 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.50839635 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.327485101 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.029377366 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.36445219 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.579706359 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.13770975 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.319180464 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.831683639 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.278848117 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.220405533 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.227713757 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.229413985 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.146337071 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.907221344 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.819580361 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.267053502 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.329784415 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.909458123 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.256795384 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.220910436 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.386793518 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.317742088 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.222820303 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.376236768 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.311858176 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.233324145 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.224561244 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.679642183 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.823825915 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.41341173 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.377306387 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.279739724 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.224397127 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.229521057 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.225655924 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.449140852 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.869999696 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.303713662 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.131942131 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.35595889 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.225334775 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.662169387 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.327772307 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.225836347 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.144829807 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.603315477 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.397589977 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.567739214 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.450222299 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.138218968 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.318679478 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.225374632 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.436764453 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.147832752 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.910839017 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.7994067 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.298455467 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.509680222 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.360726777 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.225816739 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.21769695 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.150418511 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.521578774 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.235016829 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.221225864 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.227100076 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.222643023 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.36800882 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.312133949 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.994256849 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.343936946 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.418188891 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.682558705 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.316953604 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.219998942 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.78792868 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.062237791 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.267167141 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.583117326 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.496742112 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.353700234 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.115736219 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.46735704 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.253123303 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.227102264 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.008854901 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.60532061 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.352094716 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.22108279 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.590239564 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.361136375 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.236499527 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.226167334 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.805896988 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.321630581 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.291930616 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.237950853 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.224802436 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.223361869 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.844642708 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.279738269 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.246476893 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.731635316 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.314589004 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.542184303 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.556390568 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.381468704 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.525301881 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.050332109 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.451903711 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 3.152396581 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.235063377 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.563200033 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.211371194 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.9394393 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.430595719 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.315162255 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.784805558 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.399086481 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.224811016 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.283071089 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.255300799 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.227705867 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.228320461 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.227045564 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.227073784 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.227627607 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.344007022 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.570942361 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.776023116 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.332865111 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.443113689 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.340733945 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.767819637 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.597368519 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.854543105 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.353247358 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.231242018 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.718487674 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.420012628 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.974410482 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.327191863 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.219867462 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.22666647 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.147499476 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.321912403 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.284817003 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.222615613 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.850946478 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.272564692 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.239985976 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.227033272 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.722129627 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.353629058 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.22973418 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.253690924 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.883266187 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.901995776 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.324178068 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.504723093 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.333422042 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.229674492 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.231709548 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.231544939 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.970642522 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.882071577 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.420112663 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.802384682 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.947496054 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.253601791 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.396850188 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.277203802 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.388953988 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.349499915 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.346568841 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.227774569 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.226313204 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.221877407 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.738017756 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.18221204 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.060519001 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.089483645 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.220699859 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.171467613 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.265306291 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.864460715 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.385648625 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.812296208 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.073049206 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.297627214 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.21768181 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.225664691 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.365007241 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.336956165 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.36378221 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.601454478 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.35877081 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.228138644 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.7971329 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.31769367 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.800605059 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.29879985 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.995198181 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.183414787 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.31477585 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.311691627 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.667772536 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.266923375 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.222338405 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.744194494 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.293570545 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.223298649 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.181328996 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.706672808 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.094292871 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.92577208 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.699073265 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.225881379 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.769969164 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.398272789 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.360226828 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.954751849 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.286045533 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.488084964 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.37891765 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.440033329 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.348178585 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.799730779 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.396402044 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.774507899 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.320108818 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.105274263 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.318879328 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.603670653 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.315517043 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.229428711 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.413045741 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.286284758 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.794331052 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.318084323 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.341470067 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.530622014 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.004557714 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.289339652 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.487531793 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.382470677 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.100828514 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.159540301 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.527248931 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.068706424 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.214816995 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.265718576 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.909079594 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.332528447 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.481673091 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.346624617 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.220402185 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.224035116 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.326178719 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.278885279 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.221157848 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.560913662 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.103475584 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.272037436 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.263885817 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.236618622 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.22350666 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.416030026 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.223607187 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.601696926 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.955248104 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.782385278 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.947605087 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.326539951 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.709942834 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.270099536 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.941259965 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.273746007 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.243956909 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.810818848 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.318479475 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.458766044 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.33673534 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.297446149 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.73265846 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.40549865 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.416906281 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.251829966 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.308783817 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.903940412 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.740083309 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.409549159 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.464144094 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.390250881 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.776819141 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.299657875 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.774864743 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.321027065 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.953338456 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.19158884 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.245580628 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.223916149 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.22254402 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.776648318 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.298391673 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.242545805 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.954372905 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.699832414 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.268923596 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.979539973 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.281003273 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.244738292 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.231760457 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.218195178 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.16562301 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.16694866 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.426237682 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.293000436 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.225336019 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.230221413 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.150112485 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.487217979 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.859674724 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.971667045 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.096893138 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.349342311 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.221481432 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.22324127 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.218819993 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.220656937 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.224063324 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.222939625 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.568638118 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.355835613 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.855245803 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.278241763 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.23758899 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.420589342 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.241827565 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.218549363 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.255902371 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.243534506 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.330442843 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.279873658 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.220514309 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.642683633 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.358924921 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.207256418 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.402016608 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.538894436 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.415513779 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.469974835 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.373648659 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.652886864 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.540849338 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 3.092650927 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.238140967 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.148095408 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.262282358 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.9772407 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.169113918 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.682474314 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.809637574 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.316413103 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.395075534 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.035696362 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.620065155 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.383508852 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.249684169 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.218315943 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.226536479 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.218963313 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.443029405 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.271615207 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.463086972 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.361755688 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.223731754 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.407612015 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.292556899 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.32574505 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.391467527 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.243426684 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.231941537 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.233161706 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.579460606 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.932965034 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.248166776 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.231943408 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.152776012 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.958746498 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.041272625 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.874186877 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.314656063 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.350520694 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.22533592 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.431319182 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.26925899 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.716672516 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.342439174 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.968672465 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.557268648 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.267456071 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.282481016 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.581581825 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.976382341 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.472431359 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.303971577 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.223859812 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.550668471 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.130035365 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.350607557 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.126212058 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.550882553 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.753690318 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.79147987 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.49033021 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.316122459 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.16067855 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.78639813 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.328424984 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.246781801 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.020976032 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.36036506 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.488833854 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.075912651 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.387470604 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.351879151 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.884464927 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.836051615 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.353603755 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.776591517 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.356766917 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.226268916 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.745718362 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.236577527 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.25650986 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.3114303 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.229824526 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.245762835 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.812300974 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.799864352 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.366472593 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.268042924 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.232324094 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.69655011 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.044068831 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.271587867 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.242176344 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.219210616 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.389730383 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.370045074 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.229505619 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.653798427 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.17974015 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.34275121 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.743799866 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.379810084 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.360684647 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.40851873 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.617995312 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.382656262 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.280819986 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.228652287 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.232667031 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.227155573 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.538011523 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.35155021 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.234602641 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.770972157 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.354092631 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.801313155 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.307370024 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.384474057 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.257123965 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.654560775 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.35825207 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.718896322 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.222075972 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.257016261 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.510095078 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.376583004 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.266734089 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.857686141 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.288019454 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.223051873 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.052205964 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.389233491 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.510706039 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.486770164 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.453692378 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.26644832 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.812684201 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.286847396 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.699644942 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.325087574 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.230192224 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.737797545 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.38907005 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.58029343 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.335516552 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.569531361 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.295470646 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.57088493 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.553065216 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.304219144 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.224430586 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.221267572 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.14571307 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.227322218 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.767015353 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.225488261 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.627777326 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.321806035 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.09646543 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.910207639 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 5.155829629 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.501250831 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.397107747 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.475853949 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.37857392 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.13366716 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.448323693 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.239661582 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.3637481 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.302640661 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.963529024 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.235362374 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.21908453 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.542765938 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.344490295 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.230749118 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.23295721 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.166464075 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.894261356 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.29378515 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.491509857 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.28365051 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.234766147 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.770962414 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.508637781 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.259597721 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.225796827 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.233723968 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.022687012 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.300110418 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.233796689 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.516399254 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.337990559 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.584786574 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.001988487 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.647522772 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.300723413 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.229244769 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.229151571 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.746498792 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.656327736 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.349967582 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.584404475 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.374242537 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.754293633 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.31455256 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.587015986 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.72127025 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.105118479 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.307346638 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.228125219 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.257885732 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.851177661 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.235363803 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.994954165 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.547298577 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.28511759 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 4.132821616 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.196008537 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.246631217 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.331732967 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.244503863 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.235805614 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.226261961 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.230016029 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.73943384 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.330572439 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.250268588 seconds)
  done (took 1484.7431175 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.513364517 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.233026353 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.234588437 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.229970117 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.234082904 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.229363289 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.23112152 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.235114201 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.227078966 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.224335957 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.228702001 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.220922045 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.227290187 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.504815909 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.220275266 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.224057 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.22242106 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.228549343 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.229219968 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.230423202 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.226840223 seconds)
  done (took 27.582279391 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.226226243 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.226516483 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.224342967 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.222703857 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.229908762 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.221129195 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.219307335 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.226070045 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.223147613 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.22834834 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.226541229 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.227902869 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.229490691 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.234025197 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.230133722 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.229293602 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.236755777 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.233018925 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.230870305 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.227217197 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.239028106 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.233716507 seconds)
  done (took 28.240002614 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.23764165 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.235176171 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.85157407 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.310244872 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.232851011 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.223869577 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.231491903 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.428479201 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.189569684 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.129618829 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.630058557 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.365516223 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.242751692 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.394459124 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.312888494 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.227750654 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.356713998 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.221847545 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.223084 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.222960926 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.217010182 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.369925915 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.313332537 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.22273137 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.999935492 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.358376585 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.224800533 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.226463968 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.227407411 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.214852743 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.257801471 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.229897122 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.963123084 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.894280626 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.460117163 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.135501466 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.277194447 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.239830687 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.232778908 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.228910655 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.447090271 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 3.101027005 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.246334324 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.22759691 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.538842191 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.304142755 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.229502094 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.599524659 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.353800235 seconds)
  done (took 93.837451334 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.238404982 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.420498169 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.306397118 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.228073653 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.41689495 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.221726299 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.381086698 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.224873356 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.231431616 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.2307691 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.42977009 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.400777084 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.228833383 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.228650592 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.384874982 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.228252844 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.235289574 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.236459289 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.235810635 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.236698758 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.245041475 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.353134923 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.416405562 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.403796248 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.230329599 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.226966698 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.230640822 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.230158051 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.395701609 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.227138778 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.224491418 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.23176119 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.421082412 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.36737208 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.230664127 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.230451093 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.417665324 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.230757996 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.234738565 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.234984581 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.232243874 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.240397002 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.354409663 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.435002027 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.237834764 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.359897666 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.230943876 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.226631386 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.395532001 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.226790635 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.231172743 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.411818285 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.227307817 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.227522779 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.227905701 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.415862349 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.226746888 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.221894169 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.218919598 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.378520962 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.221081889 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.220037973 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.398448612 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.226819889 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.22718955 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.413865614 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.369573927 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.240242661 seconds)
  done (took 88.7886339 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.236433748 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.230878509 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.231528184 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.233209072 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.227286082 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.23517191 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.223898023 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.229021819 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.224236425 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.227227547 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.236320559 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.220625801 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.224993682 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.223680937 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.231437566 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.230375799 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.229668621 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.226252352 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.228871449 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.223845106 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.223878591 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.229531333 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.225275911 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.227162986 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.617659031 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.229309456 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.224791193 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.224334763 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.232509973 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.228561105 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.623330964 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.228389866 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.231075413 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.234234091 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.611552169 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.224146595 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.226767952 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.216451357 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.229039208 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.224286276 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.23030086 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.232695774 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.218169415 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.230476537 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.231189738 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.234691213 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.240648243 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.624518831 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.233255309 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.232074992 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.232057733 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.234824037 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.230954651 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.234950403 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.229976102 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.385512412 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.22834417 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.225680796 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.231634459 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.231730096 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.237286268 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.384050079 seconds)
  done (took 79.302631792 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.236170176 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.23415502 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.23380979 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.233648537 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.236017985 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.230360804 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.231620205 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.234362795 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.231543229 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.236408891 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.230452807 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.227952682 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.228863764 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.225902102 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.230793677 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.227532194 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.225644503 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.223380707 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.234103555 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.231542651 seconds)
  done (took 25.849160855 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.2263237 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.232672038 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.221703443 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.231307376 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.228562617 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.224884807 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.224143719 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.225186196 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.237369162 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.244162331 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.241961076 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.244174025 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.242643753 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.243557148 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.236055991 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.239410832 seconds)
  done (took 20.958681981 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.230774751 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.235240976 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.225729302 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.235492303 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.238401465 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.234899129 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.230486924 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.240554667 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.233822414 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.770572155 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.233844566 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.238615903 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.236483472 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.236996994 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.233375585 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.223242892 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.233043877 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.225079138 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.227841117 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.228656453 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.8044573 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.232250556 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.230708339 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.228178854 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.226566643 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.807667442 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.232930158 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.229002985 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.229137329 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.235030893 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.227237444 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.714272366 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.227023506 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.237204623 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.235464519 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.244397343 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.241366606 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.246122878 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.253871485 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.245369781 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.248666456 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.24914378 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.250420198 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.243765787 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.249080886 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.239922719 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.244403778 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.710077339 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.245518005 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.241708359 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.242450355 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.238337726 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.242644063 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.78895125 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.244462381 seconds)
  done (took 72.426275518 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.322991519 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.340745321 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.236692692 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.235394324 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.294287625 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.28195759 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.335256024 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.24550131 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.285778545 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.23710876 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.310237101 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.243011035 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.284106583 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.327166695 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.308489381 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.328514177 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.233878924 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.313480106 seconds)
  done (took 24.394254424 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.233033085 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.234229544 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.233946711 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.228203613 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.233499479 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.231299856 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.232812224 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.230296122 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.228526928 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.236823643 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.231869031 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.242528651 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.230181761 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.243618014 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.237389272 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.24464415 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.237168775 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.234615524 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.232879704 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.230349744 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.229946767 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.228895156 seconds)
  done (took 28.368028473 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.265313372 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.279345162 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.234384296 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.235620084 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.222238825 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.258734445 seconds)
  done (took 8.710861162 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.283984852 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.227698747 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.25778282 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.274400267 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.227544073 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.229632205 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.226421538 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.220007252 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.223646027 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.533132751 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.228850218 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.2252062 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.22167565 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.222139789 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.225818637 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.218101817 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.219701685 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.219360677 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.268811564 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.361576247 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.220982071 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.220459786 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.22144153 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.223780825 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.226194897 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.226343806 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.233384145 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.542302012 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.238711929 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.245627793 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.238124008 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.240928809 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.236420542 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.54012555 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.282388594 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.234968798 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.234784551 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.365507168 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.231201217 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.227564423 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.267593333 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.234384969 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.227918897 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.235082795 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.228023364 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.230484969 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.228691961 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.226182417 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.234461999 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.587971087 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.226781704 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.232942224 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.23517072 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.231192324 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.227590368 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.586635929 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.54015017 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.227917196 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.230635956 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.539472089 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.23030823 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.219622126 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.22796201 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.537088332 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.232152368 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.232077433 seconds)
  done (took 85.43674344 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.233379859 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.263386964 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.231014675 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.545762361 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.225240045 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.229632028 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.227424402 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.238005829 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.236381184 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.291317673 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.371227447 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.232433019 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.23607385 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.240874283 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.237121328 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.235320107 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.230648728 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.23088189 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.28644346 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.581765518 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.229130274 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.226576404 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.229161421 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.236642698 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.537464755 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.236356979 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.229916082 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.230568968 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.2282243 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.238972473 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.23239399 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.238643335 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.235010945 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.270217937 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.2252117 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.228519789 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.229448109 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.224577564 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.224769921 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.222910038 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.235890689 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.360611607 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.232735914 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.228846848 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.525051302 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.228057935 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.220454161 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.280033456 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.226372206 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.280759008 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.535989712 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.528621114 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.539455765 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.226127172 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.237717269 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.235006133 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.242868968 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.229702358 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.230267403 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.232609778 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.230660767 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.227239947 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.584383795 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.219970821 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.228240029 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.224819863 seconds)
  done (took 85.55445436 seconds)
done (took 2538.913923778 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.351035418 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.388668361 seconds)
  done (took 13.947077738 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.227322743 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.226062516 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.374805161 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.222339654 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.246644253 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.301669212 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.306381533 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.216002504 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.223290647 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.305413131 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.226107425 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.362748077 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.338281496 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.231677604 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.229160276 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.228817536 seconds)
  done (took 41.529086534 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.21465958 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.38973792 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.230696541 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 3.027993617 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.22666857 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.2510016 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.563287757 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.510518129 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.52043314 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.666956058 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.479889284 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.730145625 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 6.078261566 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.337457486 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.711559442 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.743434595 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.797281534 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.90827733 seconds)
  done (took 61.60781396 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.222763503 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.368179881 seconds)
  done (took 8.818246001 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.254046753 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.236753168 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.253755629 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.217898952 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.212064374 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.246168388 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.229443686 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.218418793 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.244902242 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.232701822 seconds)
  done (took 63.575863055 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.212408406 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.890044616 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.638022703 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.824101605 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.815703387 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.623268638 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.370128705 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.581455909 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.307144746 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.217459935 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.082626642 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.737263343 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.989325733 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.20750948 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.738637235 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.543535885 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.838948831 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.763671417 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.542438433 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.588799887 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.477982335 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 4.979370891 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.687577561 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.102811024 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.234251707 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.339159104 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.333163656 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.323075225 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.31154861 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.14539824 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.078103027 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.238254467 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.243355843 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.233523284 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.181938091 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.86563958 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.924865893 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.435341046 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.52063684 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.523015704 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.619975148 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.513186316 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.349637883 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.485801862 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.455844947 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.480426406 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.186167992 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.457570539 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.31455402 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.333097997 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.655015815 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.409309685 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.362457822 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.359301343 seconds)
  done (took 156.888909332 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.221079696 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.595403197 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.366905721 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.213160963 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.47589785 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.433785636 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.066159014 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.724832189 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.230377156 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.434169661 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.399900591 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.358012454 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.221409013 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.224027935 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.229246603 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.234739941 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.418138321 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.767538787 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.246282998 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.218390655 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.437525952 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.466421777 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.361199298 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.221785262 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.386963493 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.462430758 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.683054522 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.349673392 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.611666231 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.217297278 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.706231847 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.226559265 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.216803123 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.126203639 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.646612091 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.533489296 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.719492492 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.222620304 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.985646129 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.210795231 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.880373461 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.428821865 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.535243944 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.368359002 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.385081932 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.464034658 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.827597116 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.218529464 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.972032143 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.392268712 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.43563619 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.432425005 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.498754152 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.21806737 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.748401694 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.215237798 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.21647138 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.47983514 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.371907154 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.342896684 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.22537624 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.220834851 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.214579044 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.455647164 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.215587447 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.338606764 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.217457801 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.219333061 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.345903202 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.348863619 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.37500023 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.474936481 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.47296016 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.144329447 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.562736814 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.451286206 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.659003552 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.463482744 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.219760177 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.224716644 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.641929506 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.674351141 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.387668247 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.46526498 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.524172143 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.519500903 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.807225235 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.219005801 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.441203672 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.390013252 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.601633174 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.373543428 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.569324123 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.149871605 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.229080172 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.233450263 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.171169122 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.355524292 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.227968996 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.741909022 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.488591801 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.808602816 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.389722377 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.523547169 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.322873098 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.216725253 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.787078526 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.221958441 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.444272045 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.512630882 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.221312987 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.222471468 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.378486125 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.197326203 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.222689061 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.543157216 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.660580612 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.223003302 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.376911223 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.216768092 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.474439338 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.130437414 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.44642224 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.574344336 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.498186983 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.414816184 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.369543525 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.224807998 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.577690923 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.503000176 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.636152096 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.560098003 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.225434343 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.21612956 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.533453086 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.225506296 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.218228319 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.393136382 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.155243084 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.394191952 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.221378226 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.64206692 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.380009453 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.581536527 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.231437186 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.473110696 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.474670558 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.646545123 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.237331675 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.360161415 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.22438726 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.202910851 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.394711759 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.23046034 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.224733651 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.052615989 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.218894098 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.377718532 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.460756977 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.862023766 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.722768523 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.580156916 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.212460275 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.707597306 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.430798077 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.663369889 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.770321148 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.393271274 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.973370523 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.47088771 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.214889419 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.464244183 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.530797436 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.225123806 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.220881173 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.938641363 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.315636045 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.217571994 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.386519823 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.135457553 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.636177647 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.436417963 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.231149083 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.561582757 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.234135914 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.419862848 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.731169076 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.561083995 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.205287278 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.203407228 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.208203917 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.215062107 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.432889584 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.487979342 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.771426536 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.376260846 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.525062535 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.445670848 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.534041413 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.68279133 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.236025519 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.550690366 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.21789579 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.684127317 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.229105093 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.370608681 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.52127229 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.221977017 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.438983823 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.572034225 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.380113516 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.681084113 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.220639192 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.206897746 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.812265651 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.402133336 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.685672172 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.228734767 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.340496851 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.60420027 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.352894509 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.406292197 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.450252354 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.22779676 seconds)
  done (took 751.874249239 seconds)
done (took 1099.453830929 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.214808386 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.21589943 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.212497738 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.214880131 seconds)
  done (took 26.06329218 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.067174085 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.057865285 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.323292088 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.230160373 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.350887308 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.456664101 seconds)
  done (took 11.713030179 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 4.813792873 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.216785375 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.215290613 seconds)
  done (took 18.450721002 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.536660085 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.700191911 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.396958292 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.309466134 seconds)
  done (took 7.157483824 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.22376317 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.233378736 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.221141302 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.232046315 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.227874346 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.222971595 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.230257376 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.221272291 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.226082101 seconds)
  done (took 12.249687778 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.655342853 seconds)
done (took 81.500915465 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.647192528 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.517837967 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.228754594 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.429901247 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.397985165 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.551064874 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.332106971 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.247637806 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.506857761 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.638157122 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.71895156 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.277923071 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.535246106 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.731428576 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.456010272 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.250212263 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.244157857 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.290052867 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.720727317 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.430251321 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.963426544 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.348982375 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 6.218067607 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.244939681 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.094917056 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.29164318 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.47238057 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.209014733 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 3.611718882 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.246147264 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.327107197 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.776573242 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.356680431 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.524237343 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.314117571 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.064494784 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.702274026 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.224558755 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.456155701 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.7193007 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.500298961 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.339769252 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.209494647 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.516528154 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.629316092 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.229376515 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.124412199 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.376353134 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.704451564 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.401337215 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.560571427 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.226776798 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.87362707 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.291969029 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.303086639 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.2146627 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.316834391 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.697611496 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.433011986 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.535063166 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.237557921 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.208851331 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.230434741 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.237086012 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 6.209300796 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 3.483510625 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.663211146 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.307394411 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.690639483 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.245063185 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.227602596 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.250400071 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.876136112 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.279099236 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.215266073 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.254608333 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.517025809 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.287207672 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.224389975 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 6.312725305 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 3.493222777 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.228210543 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.450713951 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.529169666 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.389755242 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.544102159 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.708191142 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.633562848 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.75891104 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.231176519 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.390315065 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.834756857 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 7.306733812 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.22855701 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.302605456 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.214614855 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.552028625 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.729649686 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.34538247 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.923634639 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.254082596 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.238845132 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.558865403 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.548901934 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.97893076 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.252245624 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.351560262 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.217070379 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.402940066 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.209645219 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.503232105 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.770613075 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.230461698 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.287783186 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.740125178 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.219417801 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.506263582 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.661597631 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.274050846 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.220593506 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.464572818 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.232745473 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.353240812 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.750562741 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.626162954 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.419001816 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.218183157 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.522667083 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.219808128 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.46879595 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.221734002 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.87045267 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.81798913 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.257981454 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.490245359 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.366273766 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.227523531 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.405715933 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.28694776 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.354996448 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.53557329 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.49647506 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.35015445 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.222185534 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.535651449 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.496707735 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.462253405 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.522190559 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.378398977 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.486939038 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.308223612 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.238184093 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.165326692 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.714482918 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.845842712 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.925868249 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.488214125 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.356192011 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.79940933 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.546746648 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 2.034830006 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.331074789 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.287168741 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.227265551 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.238755491 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.291490817 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.220203244 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.218628375 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.465588146 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.418773734 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.855933918 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.017467051 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 6.228091267 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.506322832 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.340339145 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.235211479 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.853615076 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.212777826 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.666512035 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.679770187 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.308022935 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.254219095 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.225917476 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.354667804 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.996769472 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.266088813 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.568864424 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.729032217 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.486805512 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.663576971 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.366683657 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.263809718 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.661828519 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.466574798 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.49772481 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.476457152 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.75825885 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.290262139 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.538935789 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.304990719 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.497251929 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.225530718 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.268816439 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.390247714 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.701399453 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.575401001 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.439465106 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.460937564 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.578896131 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.231225893 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 6.225194155 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 8.047620415 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.4724791 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.25218115 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 6.223014215 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 7.99705061 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 1.668945431 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.252014925 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.34449492 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.486162828 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.318942166 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.282183907 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.700350256 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.240079093 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.550639509 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.443149505 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.337156973 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.448294507 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.253694801 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.379658374 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.407098929 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.367564477 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.489657114 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.226380608 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.620802179 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 6.320283046 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 3.153116623 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.214021762 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 1.895569735 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.25602975 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.242446318 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.555426476 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.396825426 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.526356869 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.313154807 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.383541913 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.220327711 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.311030099 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.730558758 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.160797173 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.77022721 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.336686241 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.248851208 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.222386584 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.745250452 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.648672935 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.295639715 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.366300107 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.85370939 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.261217541 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.41106639 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.226242789 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.222601337 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 3.664695741 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.362562769 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.473631089 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.807711282 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.214808977 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.370079603 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.22799111 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.75686151 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.746450158 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.264977589 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.348308582 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 6.214884516 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.122224928 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.618963132 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.251221422 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.385006466 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.590661502 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.336844927 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.345416225 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.229894658 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.25576413 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.673387444 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.422790184 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.787683153 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.252790252 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.640543191 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.216833233 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 2.732075214 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.238671628 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.306482106 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.644396691 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.385121952 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.648274333 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.216887097 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.260813076 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.481299103 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.257471726 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.208553074 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.377300975 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 6.309313033 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.880949866 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 3.030135713 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.324554658 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.108638811 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.460760997 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.23161661 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 2.205312657 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.358774979 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.308320446 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.835188865 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.758721902 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.217736662 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.588319673 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.210619573 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.651033728 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.24900485 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.251634371 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.349239943 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.325907991 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.220599592 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.231622796 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.396544264 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.813077501 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.386219627 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.057680178 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.230683212 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 2.645105918 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.35208521 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.577250069 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 6.015266218 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.235881935 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.393002955 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.821571766 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.332337723 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.246050632 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.45607443 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.223981901 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.867143649 seconds)
  done (took 902.659094764 seconds)
done (took 904.079405945 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.279032581 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.608686801 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.427387909 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.1062693 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.028406611 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.868438545 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.451134546 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.465815958 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.303004631 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.450487929 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.179414478 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.027720545 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.321245202 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.341544962 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.312966633 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.33870546 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.441300081 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.463152756 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.337166193 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.084283455 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.58641556 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.081442204 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.63958625 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.517050988 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.592668673 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.344213902 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.283914127 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.574650714 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.569970273 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.21312391 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.402662188 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.418750023 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.053327604 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.462782821 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.321101251 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.316766465 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.110348257 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.322906446 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.244419601 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.306959593 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.596570194 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.350763208 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.934633264 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.160962973 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.997347448 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.635475782 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.100516109 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.323169664 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.322046292 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.39621241 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.250858155 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.245383938 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.577158367 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.232747447 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.119785805 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.156329887 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.575479906 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.103675972 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.962114234 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.400047674 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.590592984 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.323738819 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.397871582 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.457429838 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.354100062 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.523255186 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.634961697 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.249193509 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.420689036 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.455979843 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.482097104 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.458369902 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.358908377 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.428724373 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.341236884 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.446383477 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.951719214 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.423100331 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.013940115 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.351185576 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.180125949 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.125445063 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.177065174 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.295725098 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.276072544 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.000823806 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.051409435 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.177734661 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.339954643 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.413703433 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.161872711 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.425955339 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.668116319 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.281833444 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.265342502 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.420825074 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.047134895 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.241249237 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.386675399 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.420373402 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.008242373 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.289654336 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.211981621 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.332501283 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.324366217 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.252535595 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.284941556 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.646472882 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.458878049 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.376137958 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.585792007 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.340129501 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.454449309 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.348307461 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.305645528 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.005139382 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.509979239 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.105044674 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.253258022 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.901576896 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.525880115 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.332307372 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.600464918 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.522509286 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.279277224 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.322303392 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.333555559 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.177051649 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.322226324 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.324608496 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.405731685 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.677689464 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.397176734 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.11074622 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.448167182 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.901809365 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.459780274 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.446718261 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.299613219 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.108328181 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.31827608 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.370575719 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.52553986 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.610337213 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.474459564 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.532346486 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.350442156 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.517639869 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.250362591 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.343263108 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.454632313 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.354550326 seconds)
done (took 258.990670324 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.572798042 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 3.584753393 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.518317551 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.453344316 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.627519517 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.521758456 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.298479016 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.674069332 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.27870673 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.641250406 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.445366897 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.357690031 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 3.581966212 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.450574883 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.585779358 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.466551655 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.288226034 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.48597372 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.681518647 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.633371584 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.237774932 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.439789644 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.388042321 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.633014998 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.236853186 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.25770047 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.543254491 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.361552331 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.500221239 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.243097525 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.257983981 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.489088557 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.532210892 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 3.342827986 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.618673184 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.224894492 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.557707854 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.284588391 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.490438195 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.564986349 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.419401754 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 4.023952767 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.23971114 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.265862822 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.331920889 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.494849032 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.306642649 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 3.462242579 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.226157582 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.238389554 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.49805359 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.27573923 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.372043841 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.494017462 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.479769703 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 3.35776679 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.618481694 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.630120481 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.637481403 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.534587777 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.486271663 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.642636968 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.609237897 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.34556491 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.259202621 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.521482861 seconds)
  done (took 133.349161931 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.626927655 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.529911338 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.673806941 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.535348663 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.758278412 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.694691837 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.616229255 seconds)
  done (took 14.65066562 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.287751021 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.276512347 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.474110639 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.529260552 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.276614877 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.399960395 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.364214169 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.244576424 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.49944795 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.323284247 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.599877232 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.496637837 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.192114069 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.236059541 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.3624811 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.515481276 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.253338293 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.349392173 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.339669047 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.540216573 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.236107065 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.219024463 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.423562693 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.256830484 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.279801817 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.317268334 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.27299774 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.24137316 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.273083408 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.270339636 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.287196608 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.395473667 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.27169895 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.222163335 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.263291288 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.597874267 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.278352393 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.276711678 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.416787517 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.218746219 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.261734383 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.287243377 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.425990414 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.298145815 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.272830373 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.468752376 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.275653522 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.29015822 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.265857814 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.287592024 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.473934082 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.288087942 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.267315971 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.187274757 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.488448071 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.229402674 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.347596669 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.273752771 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.27222692 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.338385218 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.273502733 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.542069876 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.497663999 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.261016423 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.525168901 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.583334258 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.275767269 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.263129826 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.259740606 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.519711558 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.271262328 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.464158312 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.279646876 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.323355271 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.279091744 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.404799307 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.46910535 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.063347224 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.04399873 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.187346489 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.627656084 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.264581307 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.592781613 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.217067497 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.201871605 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.264894942 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.280780336 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.92818244 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.188199873 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.272788563 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.582965702 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.263897993 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.33065737 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.325551421 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.25688908 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.333969683 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.500955071 seconds)
  done (took 155.458256261 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.377276745 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.460825337 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.615428993 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.162106504 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.238243358 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.465644725 seconds)
  done (took 15.534585556 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.711420393 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.104246953 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.294314819 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.292179934 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.331038078 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.233243156 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.232665742 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.42361763 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.441086155 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.27524565 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.231955135 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.227629259 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.233778996 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.42796423 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.242482679 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.290108518 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.237928824 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.302608297 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.28267297 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.340907808 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.424860948 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.32880854 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.335853652 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.947361175 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.306500837 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.28168116 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.994326559 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.283323921 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.284557203 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.676003792 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.42583673 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.226688235 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.958027624 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.40834606 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.003173778 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.943490933 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.435696529 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.229844372 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.269464172 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.230881469 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.224694925 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.343387904 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.299427743 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.240233718 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.645065394 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.892984729 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.309440087 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.584683047 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.237011941 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.235338302 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.237389305 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.301947902 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.23346435 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.235383372 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.599497568 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.833869336 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.209900174 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.232884173 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.328122453 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.958549015 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.377115697 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.255547581 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.717954184 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.187083082 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.226063164 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.227971261 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.958891002 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.428261582 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.352566642 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.286817924 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.229387948 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.301871983 seconds)
  done (took 122.14523346 seconds)
done (took 442.356841447 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.466234901 seconds)
  done (took 7.686829591 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.248699912 seconds)
  done (took 7.564530232 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.224905763 seconds)
  done (took 7.457740859 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.237190039 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.262860247 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.2420184 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.256077902 seconds)
  done (took 26.261983937 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.892016975 seconds)
  done (took 8.115483589 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.226111007 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.242774388 seconds)
  done (took 13.694954935 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.275662158 seconds)
  done (took 7.516852512 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.26636372 seconds)
  done (took 7.522377276 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.229853174 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.244540234 seconds)
  done (took 13.719891973 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.220333971 seconds)
  done (took 7.443547699 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 6.464284022 seconds)
  done (took 7.733515799 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.241098882 seconds)
  done (took 7.581732004 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.254339811 seconds)
  done (took 7.477633415 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.300655654 seconds)
  done (took 7.517122378 seconds)
done (took 138.515369331 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.234082591 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.221810098 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.219173542 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.223482881 seconds)
  done (took 26.129172809 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.55527813 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.560137467 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.541986674 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.682628944 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.501274143 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.506842486 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.558395983 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.558929949 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.501584364 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.60277096 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.555244314 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.598640511 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.705371486 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.534599108 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.532108804 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.709738711 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.66869111 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.562413721 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.50879214 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.537434396 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.721034447 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.717370927 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.998435429 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.984496516 seconds)
  done (took 40.124313546 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.427050117 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.417668993 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.381628388 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.350918745 seconds)
  done (took 6.801894266 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.265176017 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.606813894 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.589043097 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.650473997 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.595131547 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.406744464 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.59264643 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.444673052 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.390037896 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.378966479 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.859201406 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.385155335 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.390932498 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.649076552 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.393203426 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.235017857 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.226569102 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.410914313 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.6021178 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.428358819 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.502692192 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.595348606 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.588460928 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.586582451 seconds)
  done (took 36.991885123 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.983960193 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.158798253 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.58498215 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.140989457 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.945491175 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.041277049 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.515427447 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.73397603 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.501723908 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.475034045 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.954997087 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.014084056 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.377705824 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.142249386 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.994150235 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.41096545 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.405259667 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.109553118 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.649333689 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.534801092 seconds)
  done (took 40.892086658 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.222350007 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 1.454655472 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.446344252 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.390380083 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.219717461 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 4.727304615 seconds)
  done (took 22.678786259 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.695905808 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.368239805 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.519714185 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.488274181 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.385797943 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.358766948 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.797552103 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.44519094 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.970145743 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.935482676 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.724101547 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.658552004 seconds)
  done (took 23.572534908 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.22664476 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.267811373 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.220809912 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.402223231 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.114677944 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.108761843 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.548508718 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.214573388 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.370469638 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.436523912 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.095508335 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.404120358 seconds)
  done (took 41.634518793 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.459711767 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.397703925 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.556169054 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.271823102 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.702354267 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.26904493 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.587123363 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.19445336 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.85957079 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.032532147 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.785071513 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.232106215 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.763648628 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.199649457 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.225423007 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.52461719 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.040200485 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.264249015 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.548905727 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.262814461 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.18980536 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.329007632 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.230228906 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.707929249 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.502601933 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.223783117 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.416074714 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.467912932 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.22330905 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.462591912 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.21654056 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.734752308 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.410745027 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.520023442 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.629519582 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.263135594 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.406475222 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.259421769 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.758370596 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.527028985 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.38581661 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.399440659 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.485437209 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.25127299 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.493166407 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.013973703 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.236696628 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.966937458 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.221890081 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.556208346 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.989197136 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.691229028 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.554769552 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.954935025 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.371876989 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.528340376 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.394048733 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.232601439 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.509189351 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.456494966 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.250601361 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.409665253 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.448924757 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.199906788 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.661981049 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.434562543 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.385684662 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.435778585 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.537390683 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.522970124 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.579486622 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.532334004 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.910761476 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.286752025 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.792733899 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.156203122 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.602225449 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.22071088 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.950880216 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.774694439 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.21418834 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.34144849 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.921970737 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.183688011 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.222474288 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.396502333 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.215457834 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.196368039 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.236042053 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.469410775 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.492268021 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.283717235 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.302848434 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.433848118 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.939578736 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.230218218 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.224697658 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.556210222 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.192697765 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.777087504 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.219487551 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.22652286 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.221315091 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.784566734 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.615513262 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.019082708 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.007346608 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.878640449 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.53064402 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.827372691 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.393039514 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.064770854 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.589203755 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.549599524 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.214206089 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.166681769 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.220923609 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.491174851 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.447117871 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.228396714 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.193723007 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.648737722 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.417919867 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.223259247 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.465286511 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.231443411 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.380172822 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.224696136 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.789543154 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.22381133 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.460106273 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.687960545 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.308807191 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.367527131 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.198061172 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.368191783 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.672629683 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.284409055 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.590186552 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.543410388 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.407873263 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.017158593 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.206675058 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.057657164 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.604016374 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.444637631 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.561750801 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.903239207 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.389561925 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.238890194 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.221628025 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.438495351 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.235623925 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.764776746 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.223198598 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.994789031 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.20714178 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.479653137 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.227527213 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.382509839 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.224966699 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.457232466 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.735364964 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.393892122 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.406225872 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.499594605 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.379249898 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.22837636 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.198347191 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.50834514 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.439828307 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.691253566 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.461104305 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.722663455 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.703543371 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.703506541 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.42104866 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.579517001 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.081286345 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.481494813 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.471220171 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.238324715 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.299685869 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.259059386 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.497204249 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.504742565 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.461710026 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.010565704 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.224724747 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.32144144 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.299156615 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.688740822 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.187168871 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.357510127 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.594474202 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.224399826 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.737734503 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.30440359 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.586188605 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.719739284 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.247932304 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.529793981 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.871786993 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.768983166 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.576521211 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.557335558 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.217589681 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.222573057 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.795187073 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.453401544 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.222135376 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.723104231 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.90617249 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.419586135 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.233917207 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.578267998 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.093827676 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.095725611 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.750065777 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.812810235 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.292299228 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.39879413 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.611876243 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.24176 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.076129576 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.507267793 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.476506093 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.938809074 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.700353782 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.437379047 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.551912743 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.224455041 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.233653978 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.496111515 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.529739652 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.490045665 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.680733623 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.444004452 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.921889293 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.322325499 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.85549017 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.389411093 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.253139984 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.774400685 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.432309278 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.029060455 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.411725666 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.057215735 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.581069853 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 4.784184418 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.514191541 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.228244667 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.60194152 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.807351956 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.275988252 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.149434553 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.339559354 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.213742572 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.375464706 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.117019787 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.284721947 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.780069278 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.882975934 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.453877733 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.409478762 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.615033505 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.63754845 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.537713003 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.198495862 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.392401262 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.311621916 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.518044115 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.214558196 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.507031953 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.892240262 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.711604312 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.182829498 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.718718058 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.611662438 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.272741039 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.593323726 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.418642302 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.50401031 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.158255856 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.804274113 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.231396142 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.354525088 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.184969291 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.843812319 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.673481818 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.61789979 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.607169886 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.258742711 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.645766858 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.561758984 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.479743959 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.238231089 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.486854038 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.224532082 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.520495254 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.217921258 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.22439246 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.670939895 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.231500644 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.224440935 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.451437038 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.571183779 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.402806639 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.779568702 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.384782543 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.36076772 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.813703821 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.399463951 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.363978109 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.572631177 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.886764707 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.496202553 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.300633433 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.284233407 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.861544273 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.600028029 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.77098486 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.727484175 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.514859659 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.008727666 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.232012949 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.43738051 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.389478382 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.224730729 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.430289129 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.612303428 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.259705403 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.443804868 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.556866169 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.558595052 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.746563607 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.220911327 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.903262637 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.659399951 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.744992015 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.739542709 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.008006825 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.519683969 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.387009398 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.50814519 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.329311576 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.378712634 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.487762864 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.022057809 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.253824951 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.061850169 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.007161888 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.32709071 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.759579438 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.262353987 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.077088461 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.386105438 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.447824769 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.414112211 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.34966172 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.197032079 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.005975546 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.00582457 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.496880002 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.39134976 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.427668153 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.339696063 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.489670939 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.828819001 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.533739665 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.009192468 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.601120807 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.415915079 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.195663066 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.220782474 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.497311342 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.586744683 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.233067495 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.513839608 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.56309438 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.244027215 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.287517962 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.317744402 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.55546504 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.101558558 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.967493498 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.476251433 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.631852307 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.79998845 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.26246151 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.008797768 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.423629839 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.606173685 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.606726967 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.049505483 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.660243382 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.519796931 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.374881614 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.196744721 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.415489708 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.219344329 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.431105529 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.004997242 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.548344426 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.271246184 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.465950934 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.863094993 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.224142161 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.332321314 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.220058896 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.489605803 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.430794462 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.222702676 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.024942345 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.612658527 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.363744458 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.205538699 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.980581601 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.198063006 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.429804692 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.236710258 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.388031169 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.078124307 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.2568571 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.999298228 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.699647721 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.256420688 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.4048714 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.194159807 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.842029867 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.365207066 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.719322506 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.180532593 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.476043564 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.743558484 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.417592748 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.228884888 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.563831155 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.377640304 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.544162533 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.514331444 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.61461428 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.610281039 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.498758605 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.488538361 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.95856612 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.485585397 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.468381846 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.198586988 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.330137442 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.23357018 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.596810012 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.578061117 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.215151276 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.728003263 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.468914937 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.32926026 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.490621954 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.387799566 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.830856062 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.432891512 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.343684968 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.480850251 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.285180255 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.546030458 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.223414034 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.513626139 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.302597948 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.234136022 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.422944112 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.474254685 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.607791652 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.538937814 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.127716838 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.395848962 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.655664292 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.013771614 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.77071594 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.220113773 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.897640082 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.69191088 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.211528437 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.602704025 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.822906943 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.410412429 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.489014176 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.683381983 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.255226999 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.472584412 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.724219417 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.24039248 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.888333596 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.590100923 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.221483326 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.59426141 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.25271173 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.380307079 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.003460197 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.721667753 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.217849418 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.856399277 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.651245351 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.780513606 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.497630734 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.233134712 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.372763779 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.818344831 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.213513458 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.218054092 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.329843077 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.771431534 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.229554674 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.760645244 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.27068155 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.468404633 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.217647162 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.296529228 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.226131319 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.423355307 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.414427081 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.475500456 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.509112996 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.417503414 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.229719305 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.051939052 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.934024693 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.323796612 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.481732884 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.231343246 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.6116226 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.022396025 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.224531859 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.810643976 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.386909581 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.216736611 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.603386987 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.479472854 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.248967552 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.429897318 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.217285994 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.584675497 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.399981216 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.741312378 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.458661754 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.22473315 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.316879931 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.23053659 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.761423137 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.586609172 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.051201845 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.212617912 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.525891837 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.220362271 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.845582199 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.878107573 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.376072749 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.322761503 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.128243384 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.957103367 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.076112734 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.501686531 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.229285145 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.429980468 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.734216919 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.192242943 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.850158197 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.22754581 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.42618112 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.547748215 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.196617663 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.415754445 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.241596852 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.20036956 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.726746175 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.238340706 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.536519399 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.216611098 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.792083662 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.246482081 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.300858872 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.468420239 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.580467785 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.221954966 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.949534238 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.389777525 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.214789861 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.221245095 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.566475645 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.362733777 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.46744424 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.598721632 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.374084736 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.667871874 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.149538479 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.885076134 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.365753694 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.533710072 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.063735745 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.795077809 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.330349363 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.867008366 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.874686146 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.375951424 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.772457433 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.46903895 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.963188119 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.294937283 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.722710752 seconds)
  done (took 2029.706126747 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.222617224 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.349689702 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.276038223 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.249834396 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.303376868 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.250844104 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.368402762 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.242392145 seconds)
  done (took 51.479333075 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.218536142 seconds)
    (2/17) benchmarking "4467"...
    done (took 6.248865367 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.747165857 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.492282789 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.245456271 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.310245122 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.473133077 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.876882543 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.244106684 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.163900098 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.364301036 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.415052232 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.235027008 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.251722681 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.018209319 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.357890142 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.22653908 seconds)
  done (took 95.153757215 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.289516948 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.293466227 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.22826093 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.009380834 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.243037301 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.652010977 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.232623413 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.227185409 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.687770514 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.916105506 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.226424051 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.36866167 seconds)
  done (took 82.622944068 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.260489618 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.251998098 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.248540283 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.25780056 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.256807288 seconds)
  done (took 7.490047138 seconds)
done (took 2506.621748413 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.436976359 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.695333559 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.770997914 seconds)
  done (took 4.682133089 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.284470807 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.357960574 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.433431572 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.372951461 seconds)
  done (took 6.678924736 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.537453672 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.712135344 seconds)
  done (took 4.479463305 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.549827794 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.24177077 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.845417296 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.222734624 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.230083829 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.229232604 seconds)
  done (took 19.906356688 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.248400853 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.248778163 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.24340822 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.249455575 seconds)
  done (took 6.201617304 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.214493127 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.262172684 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.214883665 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.275613116 seconds)
  done (took 19.174115949 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.534104871 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.494476636 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.005019037 seconds)
  done (took 6.265013463 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.043047615 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.35622381 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.020043306 seconds)
  done (took 6.64535715 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.16720943 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.943119279 seconds)
  done (took 6.32979022 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.398916267 seconds)
  done (took 2.610315236 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.704930594 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.706430477 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.895058861 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.9525948 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.13007541 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.507339642 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.643484629 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.439622787 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.753111542 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.795349217 seconds)
  done (took 18.740777958 seconds)
done (took 114.002390103 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.338561376 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.648928452 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.382237221 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.51970692 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.325456176 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.384845165 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.295189899 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.334084496 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.92528829 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.923877732 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.402519595 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.321557431 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.334118326 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.63247657 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.333066844 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.598300417 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.632283273 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.347654305 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.876295599 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.989464256 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.31022141 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.912741759 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.145600411 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.932496703 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.63434151 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.358687165 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.216452013 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.600940857 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.113736457 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.238315752 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.387583546 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.216973258 seconds)
  done (took 158.825858887 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.223128826 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.231503078 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.23014823 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.222039095 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.426058882 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.243190354 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.223324852 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.233804526 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.266372164 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.26768209 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.237215309 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.410441773 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.23110551 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.211608972 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.238750517 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.211676463 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.389411194 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.255266835 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.237386673 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.236330221 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.229238877 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.197602936 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.232634992 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.204002671 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.383417415 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.242579336 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.22044335 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.252162332 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.242657075 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.239276037 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.237955092 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.220631929 seconds)
  done (took 193.371436633 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.22258947 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.232983437 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.236790783 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.217508085 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.246807251 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.249127156 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.23262631 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.219488498 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.241732073 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.23740156 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.236540365 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.233033446 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.237605239 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.223969931 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.246249723 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.229271989 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.243642021 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.238892821 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.234927237 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.234175284 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.24373178 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.230184604 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.246598586 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.239523593 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.255376187 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.246237889 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.224098378 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.248233429 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.249058553 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.245131979 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.236987545 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.221508827 seconds)
  done (took 200.819454079 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.538540345 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.271060308 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.176911612 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.990087141 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.141607853 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.262961033 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.977246055 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.537711556 seconds)
  done (took 15.133936748 seconds)
done (took 569.376675349 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.845989459 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.111046847 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.409434373 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.457120371 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.746263117 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.524419207 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.462845285 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.658029724 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.97523883 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.632774471 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.726168311 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.435953052 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.123939364 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.443822354 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.394739641 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.662210072 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.615896285 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.919105768 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.406712576 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.039280349 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.427266144 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.152666396 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.675053064 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.019094183 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.720047433 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.188090192 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.423482507 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.638467687 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.443832546 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.417430196 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.233236244 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.663334586 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.475478395 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.477793257 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.709497907 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.678868033 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.640165624 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.781286337 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.410256183 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.952637464 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.058021274 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.836920883 seconds)
  done (took 79.830151015 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.249142712 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.266417842 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.42063987 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.318970479 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.909737518 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.330731264 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.487514474 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.46063346 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.334090576 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.449702354 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.505319521 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.958734332 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.49731 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.90806091 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.484090793 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.502908014 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.327404276 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.877318971 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.489505369 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.465744726 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.303144123 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.425782998 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.296156367 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.454185195 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.290455344 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.302475643 seconds)
  done (took 39.556781376 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.306426456 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.437922417 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.481064207 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.365098537 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.482365371 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.257894029 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.558757294 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.437234796 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.958100313 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.85605958 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.353048202 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.390305764 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.440805236 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.512229421 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.489981245 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.419455887 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.421816911 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.422945183 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.44466114 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.481913401 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.341327694 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.336616143 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.555784172 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.193312531 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.115032468 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.843699376 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.585359118 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.829537626 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.451816188 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.438507887 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.398839531 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.539932265 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.654978086 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.490791636 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.398001152 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.280665779 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.289498775 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.366020504 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.324525471 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.417208471 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.555959426 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.693524311 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.59029573 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.774152678 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.551981186 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.480591076 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.710207383 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.365936872 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.39046109 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.115789786 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.521514259 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.887790288 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.489466841 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.459012683 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.398747296 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.675407334 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.440664691 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.622971405 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.369920136 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.968744275 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.33225542 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.648421513 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.448657557 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.566301497 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.559289307 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.460630747 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.460941056 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.825914992 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.589611766 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.43852187 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.828976166 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.325672132 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.290494174 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.352087952 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.42846831 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.733349477 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.133677295 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.595964124 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.650217598 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.536152847 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.512063766 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.842065254 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.265006287 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.551139956 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.441837208 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.263623014 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.347971218 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.611535041 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.541360613 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.754920237 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.794638268 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.637536208 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.850942734 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.418049717 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.867997117 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.712360803 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.262219142 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.27841028 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.468075404 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.787468404 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.335583025 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.510512681 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.825907084 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.899129719 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.65356286 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.363554608 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.597273339 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.580045701 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.684089546 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.274063447 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.494755321 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.354053056 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.528193915 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.595724418 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.254763941 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.773005488 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.383568953 seconds)
  done (took 252.184079478 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.22628071 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.227225647 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.225179659 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.226363026 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.225074238 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.782976997 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.269124853 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.24287069 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.789659687 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.280450973 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.225713048 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.22846133 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.225012407 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.229400138 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.399296072 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.432500664 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.34341394 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.229018152 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.229057631 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.229686072 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.341523881 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.232262894 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.229578732 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.233090311 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.226726555 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.218809299 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.23425379 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.227090193 seconds)
  done (took 155.431071003 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.293839437 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.662976272 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.312456534 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.390972718 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.330509882 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.311999411 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.798308341 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.421872933 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.355066987 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.303337155 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.307690489 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.513158806 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.583410996 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.872969086 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.411702053 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.431882904 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.919025547 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.420253799 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.294429342 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.294614113 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.437487905 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.610059834 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.544647882 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.542036059 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.423514247 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.55225302 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.348067685 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.276514889 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.399503123 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.750462004 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.300375666 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.640352958 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.426822964 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.284182953 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.761567707 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.634423257 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.850010482 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.923456433 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.465955735 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.249880969 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.260643515 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.530355726 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.577222912 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.32989381 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.296546154 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.910939477 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.305657651 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.551717386 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.305551946 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.246046627 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.382057702 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.389794054 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.520447195 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.140072702 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.467309869 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.45191236 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.87642729 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.271150704 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.295417034 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.588491052 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.25536165 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.759747163 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.953600753 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.326525503 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.306275588 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.141297337 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.374995027 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.810543501 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.904221462 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.331369735 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.641215113 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.482589511 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.268101757 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.542752536 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.464334083 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.72622722 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.869963266 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.423798146 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.383708501 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.361312083 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.550622604 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.280184645 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.827907618 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.387394531 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.265355838 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.76634418 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.676794532 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.262502312 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.28971779 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.386552371 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.456767575 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.485787599 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.537825502 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.351076347 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.18296234 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.529406372 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.558146508 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.284098763 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.404209638 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.270417685 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.677505682 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.467619125 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.274732337 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.587122642 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.658988656 seconds)
  done (took 168.32538064 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.932711902 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.332160085 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.522982376 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.809465481 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.605599129 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.684484097 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.506909504 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.353903561 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.569821272 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.502431027 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.491737059 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.38118993 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.247747355 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.030049561 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.346317448 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.450324593 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.35500054 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.897306964 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.542115678 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.207030897 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.715756432 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.045093898 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.598403534 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.681619419 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.676749151 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.753320521 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.935932963 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.38457764 seconds)
  done (took 51.792064808 seconds)
done (took 748.343024814 seconds)
SAVING RESULT...
DONE!
