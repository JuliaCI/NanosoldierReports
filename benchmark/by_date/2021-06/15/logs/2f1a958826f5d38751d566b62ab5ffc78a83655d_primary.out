cset: moving following pidspec: 531123
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.453460936 seconds)
loading group "shootout"... done (took 0.948013651 seconds)
loading group "string"... done (took 0.252723263 seconds)
loading group "linalg"... done (took 3.603831041 seconds)
loading group "parallel"... done (took 0.02482076 seconds)
loading group "find"... done (took 1.347833798 seconds)
loading group "tuple"... done (took 0.826872311 seconds)
loading group "union"... done (took 3.510268024 seconds)
loading group "dates"... done (took 0.16873986 seconds)
loading group "micro"... done (took 0.065111197 seconds)
loading group "simd"... done (took 0.388929041 seconds)
loading group "io"... done (took 1.527292326 seconds)
loading group "random"... done (took 2.784683041 seconds)
loading group "problem"... done (took 1.284779279 seconds)
loading group "array"... done (took 5.183429725 seconds)
loading group "misc"... done (took 1.107553365 seconds)
loading group "scalar"... done (took 3.783368397 seconds)
loading group "sort"... done (took 0.335664146 seconds)
loading group "sparse"... done (took 3.893843339 seconds)
loading group "collection"... done (took 6.687346479 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.605148947 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.086890168 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.286529729 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.088438578 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.306831537 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.093826731 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.098641487 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.082000642 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.18448153 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.183214723 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.240777556 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.428600551 seconds)
done (took 5.506782033 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.330876495 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.03571155 seconds)
    (2/2) benchmarking "String"...
    done (took 0.14210457 seconds)
  done (took 0.844632449 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.154673098 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.018697322 seconds)
    (3/3) benchmarking "different"...
    done (took 0.026996705 seconds)
  done (took 0.865276754 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.0246563 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.106514815 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.025273593 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.026382432 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.026157738 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.025369618 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.025539687 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.025528006 seconds)
  done (took 0.928747572 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.031621963 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.02677596 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.024772872 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.02675411 seconds)
  done (took 0.773120349 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.024686544 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.092845534 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.0244089 seconds)
    (4/4) benchmarking "different"...
    done (took 0.02383176 seconds)
  done (took 0.830438346 seconds)
done (took 5.279274312 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.225789387 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.837679739 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 1.099764845 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.204089609 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.385125752 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.325807617 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.085135721 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.263240552 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.166456753 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.036279023 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.204520535 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.045872499 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.57300072 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.512062863 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.033088209 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.163206347 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.612919688 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.041834447 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.076842322 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.298012584 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.043132039 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.043886225 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.050245617 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.030229627 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.175247794 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.144380056 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.715580962 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.072129944 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.029757207 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.052395471 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.031436871 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.03502473 seconds)
  done (took 10.332595145 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.167708738 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.166361547 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.028530339 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.065658757 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.056542174 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.029244105 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.035394082 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.027206781 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.049599594 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.098058651 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.051483834 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.177451092 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.025168358 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.029640699 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.156224048 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.126410986 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.041120965 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.042524625 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.026571673 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.042397351 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.056299961 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.038892559 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.037707867 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.037430182 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.077707105 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.094610207 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.045284733 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.069960582 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.025351259 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.039139285 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.060029267 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.068793375 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.02593237 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.025194423 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.072362019 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.044312295 seconds)
  done (took 2.966569604 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.884288152 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.060523739 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.158885139 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.148600773 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070708565 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.054351039 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.202435506 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.087888285 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.062941667 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.028735375 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.233497677 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.741428861 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.192548784 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.224218081 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.03023345 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.203229478 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.014980153 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.993290263 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.027392927 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.028005598 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.150326585 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.030128237 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.193554845 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.025125695 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.267653713 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.760419421 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.030553298 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.029125459 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.060862463 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.163012344 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.024841259 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.110680828 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.058623074 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.029694257 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.603284169 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.025355964 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.023408388 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.047050808 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.058973934 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.026355013 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.027325183 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.039621141 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.025433677 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.08250774 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.040031511 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.565015641 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.029685834 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.771240689 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.922038877 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.035525304 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.032558357 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.065067018 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.023922668 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.027763592 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.613248332 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.121399118 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.026605828 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.323671904 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.027728057 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.028359873 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.028869052 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.062850632 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.027779291 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.029123452 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.031109529 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.046374824 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.041696169 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.034770574 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.049145884 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.024221132 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.026479791 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.024970207 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.578457231 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.036123418 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.029027749 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.024592674 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.031023815 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.027136123 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.026707888 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.067065428 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.053270007 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.0525073 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.030238229 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.027590604 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.026192729 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.55609903 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.968970561 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.026744057 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.027733627 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.534792163 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.023912832 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.026333293 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.028427577 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.047921653 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.026564582 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.023243191 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.062737301 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.027571225 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.142982629 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.535175003 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.02745118 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.023663234 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.654638753 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.028274122 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.063283602 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.08545673 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.027242812 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.06944669 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.027278658 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.024056214 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.030829392 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.024071747 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.028747395 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.02505455 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.026335993 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.025305541 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.027054023 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.028352619 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.027229566 seconds)
  done (took 21.785676171 seconds)
done (took 37.636437967 seconds)
(4/20) benchmarking "parallel"...
done (took 0.863240475 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.241634884 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.057474854 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.023386358 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.185458088 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.050037865 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.154400407 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.199366021 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.14431969 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.05133658 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.051240034 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.051136933 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.206352347 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.216059336 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.052458267 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.13657584 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.217809182 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.052509001 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.023463986 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.052079584 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.053208303 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.052980706 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.0237423 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.052666942 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.054207198 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.136119027 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.052496257 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.023418542 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.135698058 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.053470444 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.13995631 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.054374701 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.053824098 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.0542077 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.137197537 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.054770344 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.13696591 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.023824611 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.054280157 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.054203036 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.055072077 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.054333143 seconds)
  done (took 4.479474524 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.052517402 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.046809743 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.049665263 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.022631482 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.033901262 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.046156541 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.02198267 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.046896678 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.050398548 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.047411841 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.0462832 seconds)
  done (took 1.304652505 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.045540291 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.047012464 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.048634344 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.021841269 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.035428117 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.046788118 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.021826628 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.046906113 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.049899268 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.047405853 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.047002737 seconds)
  done (took 1.233285256 seconds)
done (took 7.767776098 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.170978193 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.139792582 seconds)
  done (took 1.082218345 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.630810385 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.246903662 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.147408108 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.270699741 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.141351413 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.173434337 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.490456307 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.313177898 seconds)
  done (took 7.239181538 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.088389023 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.160151882 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.028496371 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.027303876 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.02780019 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.027524649 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.029437994 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.028236398 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.026949491 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.029732341 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.029111968 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.027115793 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.028152445 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.029206693 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.027402085 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.027871683 seconds)
  done (took 1.49681035 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.031478414 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.030438886 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.031825041 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.020368828 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.032327571 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.030514175 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.032366018 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.033546775 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.03143351 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.031340965 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.029254925 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.032638815 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.031275437 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.029691777 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.032729636 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.02033228 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.03275919 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.032284333 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.034197859 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.032560944 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.031786748 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.029266375 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.034116623 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.030956025 seconds)
  done (took 1.531711059 seconds)
done (took 12.129658704 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.153941597 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.034195449 seconds)
  done (took 0.973416502 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.141647146 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.14447246 seconds)
  done (took 1.070990002 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.030321659 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.018458842 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.036000194 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.028269798 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.019339043 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.019036833 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.035021678 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.01918396 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.018966057 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.019430285 seconds)
  done (took 1.035643843 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.020645204 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.026098806 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.024370351 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.022314967 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.024217945 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.020369417 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.022995151 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.020637134 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.026706879 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.019602238 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.023383157 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.044458349 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.023002685 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.044383568 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.023011294 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.023411791 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.025006719 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.022783907 seconds)
  done (took 1.244351023 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.018806796 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.019385623 seconds)
  done (took 0.823493502 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.021990057 seconds)
    (2/7) benchmarking "second"...
    done (took 0.019705007 seconds)
    (3/7) benchmarking "month"...
    done (took 0.021857506 seconds)
    (4/7) benchmarking "year"...
    done (took 0.021736057 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.019737712 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.01918871 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.019668944 seconds)
  done (took 0.928505911 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.438285624 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.102763122 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.366016636 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.029389174 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.043241978 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.258259198 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.024258655 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.028868506 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.028468436 seconds)
  done (took 2.10249965 seconds)
done (took 8.968766991 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.049525329 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.156622098 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.169099116 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.504165382 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.039231059 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.027146446 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.0628583 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.252875807 seconds)
done (took 2.057719053 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.50167588 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.416125828 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.220149361 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.028655616 seconds)
  done (took 2.458695834 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.344722723 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.160460877 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.035424447 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.027271871 seconds)
  done (took 1.37742989 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.024196413 seconds)
    (2/2) benchmarking "read"...
    done (took 0.032892397 seconds)
  done (took 0.864203932 seconds)
done (took 6.006153964 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.031899761 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.019422889 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.026610612 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.021421273 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.021247444 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.020755258 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.020979919 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.022008425 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.0195439 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.022024366 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.022129404 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021878084 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021364139 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021400506 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.021018969 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021717233 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.019627376 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.021612022 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021636144 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021435024 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.019429913 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021944432 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.021314406 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.021742782 seconds)
  done (took 1.326064746 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.039312298 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.025198819 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.025557288 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.02561516 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.026155529 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.02585046 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.026047098 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.025006234 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.025930789 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.024523577 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.02655751 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.026432319 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.024461783 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.026367877 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.024320926 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.026402905 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.025921322 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025279911 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024723215 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.026846891 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.025808587 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025198443 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.026887666 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.026115987 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.026948089 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.026453189 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.024968529 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.025531297 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.026024332 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.026579923 seconds)
  done (took 1.593819632 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.025092906 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.017702931 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.018184453 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.02992585 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.01792916 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.017919543 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.018523659 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.01777328 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.018248758 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.019241554 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.018567902 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.017802694 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.01876508 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.017986303 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.018210115 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.018766477 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.024497766 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.042029312 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.018200357 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.018052337 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.023677815 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.018414945 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.018039574 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.018095077 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.018714152 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.018154601 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.017829154 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.018460934 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.01807487 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.018589531 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.018064556 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.023811962 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.02545507 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.018896285 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.030521495 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.024491617 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.018686445 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.02346965 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.019304769 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.018155813 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.018097568 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.018208388 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.018367375 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.0182252 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.031173988 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.018642096 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.019637933 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.018895105 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.018586542 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.018123076 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.018229935 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.019937152 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.025159829 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.019560041 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.018224455 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.019631724 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.018005388 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.018961741 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.018096433 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.017912552 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.018192797 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.023102273 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.019720727 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.01901887 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.043671752 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.019679176 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.030683559 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.018396004 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.01873931 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.023362243 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.018965238 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.041694638 seconds)
  done (took 2.314259908 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.02960038 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.028957817 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.039690402 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.029554531 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.021974385 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.019348005 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.02265247 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019104834 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.029815882 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.022956894 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01909213 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.022595895 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02986149 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.023133305 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.020591498 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.029884846 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.022994806 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.022225434 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.019351751 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.023293115 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.020524624 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.022882083 seconds)
  done (took 1.354336517 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.112658338 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.025124919 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.073864822 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.029109497 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.028059235 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.028756695 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.025419708 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.025657452 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.025498388 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.026453742 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.026603798 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.025955796 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.027973986 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.026255615 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.026289389 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.026103216 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.026169427 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.026875593 seconds)
  done (took 1.418486929 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.03748678 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.025343445 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.056269254 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.02506344 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.025322617 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.024575931 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.02934312 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.029502364 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.024904736 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.025612178 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.029523429 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.025118184 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.024723213 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025505675 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024896511 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.025224587 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.024633875 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025438572 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.029154536 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.029081737 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.029233561 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.029084238 seconds)
  done (took 1.434167131 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.038515816 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.024204387 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.043271155 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.025811774 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.018369499 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018592842 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.025691926 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.024822054 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.02591869 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.02429643 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.024861475 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.018919998 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.026776845 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.025043251 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.027519424 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.025488332 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.024417853 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.024974495 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.024536492 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.018773429 seconds)
  done (took 1.318029317 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.145248073 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.020677792 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.020617399 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.025268789 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.020791937 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.020759528 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.025710846 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.020741619 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.020762356 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.04766088 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.020686359 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.020580595 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.02553177 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.023788865 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.020593922 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.025698736 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.025705957 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.025935678 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.021158122 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.020985298 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.048221072 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.02127225 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.02617875 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.021212396 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.021092643 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.021059293 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.021183016 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.024216305 seconds)
  done (took 1.610335055 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.042587379 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.01785005 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.018096953 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.022554303 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.022471995 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.029284122 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.022343959 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.022394282 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.017868114 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.018165758 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.020260643 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.017926096 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.01770612 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.02882144 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.017698411 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.020237266 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.029036413 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.022490584 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.02968908 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.029626698 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.020262213 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.028606235 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.020310915 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.018146225 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.030332029 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.020419676 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022848295 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.023863456 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020690088 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.018605749 seconds)
  done (took 1.50741361 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.032194648 seconds)
    (2/2) benchmarking "in"...
    done (took 0.030616025 seconds)
  done (took 0.870311343 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.019732593 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.038691138 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.017766505 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.033548411 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.028306766 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.022996423 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.027925382 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.028419718 seconds)
  done (took 1.023640516 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.139680826 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.170043299 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.020189887 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.020312126 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.139606632 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.096253885 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.151928942 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.033869239 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.0359561 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.023856261 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.020223886 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.153275692 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.019633146 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.035518833 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021583785 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.030962087 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.028237242 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.040479182 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.035454029 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.018486744 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.03424085 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020700502 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.019527824 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.020424117 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.020851656 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.027757366 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.037953664 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.034604787 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.029613895 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.017921329 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.041079133 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.018708476 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.019519214 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.029295655 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.140143039 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.019019372 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.062314876 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.018875392 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.023531843 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.018408195 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.032919303 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.042187611 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.035512958 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.039404958 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.020512013 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.020602902 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.018465732 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020408248 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.02370251 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.029114924 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.018906633 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.027688926 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.01831489 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.020363211 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.03092498 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.018993328 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.023958863 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.029694848 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.034617051 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.030856029 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.033153437 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.036567631 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.029043999 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.027754984 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.019573331 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.041424075 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.020466099 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.034019853 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.036325889 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.020224352 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.033419192 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.018604806 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.017781201 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.018841872 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.057231882 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.020280969 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.019760152 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.018824862 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.018989412 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.02031823 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.029616511 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.024067976 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.027282204 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.02223196 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.036831409 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.029448101 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.018712343 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.026591095 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.039557788 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.023473376 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.018983578 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.03828403 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.02358156 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.01863366 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.039559424 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.031066968 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.020514445 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.019694805 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.023683862 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.034810951 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.021097893 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.018369791 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.029257286 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.021197373 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.143085148 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.024301632 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.028568488 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.019034245 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.031148411 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.026353053 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.020994738 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.018483069 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.025024 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.020329074 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.018467747 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.030150693 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.019365178 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.036166787 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.027374869 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.036411275 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.036639722 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.031582849 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.037773953 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.019092908 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.018082085 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.040727612 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.030380726 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.02079976 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.040212891 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.019532788 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.031574686 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.0196124 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.021128773 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.030130453 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.018634611 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021542144 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.019704941 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.026910537 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.021394833 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021368806 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.026258978 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.029190268 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.033763218 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.020835974 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.02957216 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.019970611 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.038093635 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.030914255 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.025314811 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.023224889 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.020486529 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.03360858 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.027671464 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.030541344 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.01924783 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.020396621 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.0194326 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.0325946 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.030765871 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.021657198 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.030058263 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.025356982 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.020577842 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.019771972 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.020830245 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.02441108 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.023567356 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.0205686 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.028898368 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.029875486 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.036307511 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.028246916 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.030196872 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.018947364 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.01948873 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.021708719 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.019372441 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.025393443 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.030258093 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.0375352 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.033388616 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.045003244 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.020078511 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.030954752 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.021648972 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.039914978 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.035311948 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.020901213 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.025044471 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.018752012 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021718895 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.030573304 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.032563002 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.036045505 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.037468912 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.025753574 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.025587876 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.019466026 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.037561367 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.020100947 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.029732413 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.030412832 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.026647572 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.019425582 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.021639903 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.029927042 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.02547531 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.020846434 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.037662721 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.028329149 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.019379729 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.035917944 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.1718564 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.031129103 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.01872354 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.023841705 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.025842033 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.020559881 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.03012715 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.036787165 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.018112898 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.019162307 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.037370776 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.020619605 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.02015602 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.028636257 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.037358387 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.024784497 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.028252544 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.03172365 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.032394307 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.02530606 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.031671218 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.019970124 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.030209316 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.02195045 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.032283733 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.018850368 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.039546034 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.017803962 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.036958017 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.01955015 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.031735577 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.019066766 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.029747536 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.019537959 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.038408254 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.020175226 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.019702181 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.03149867 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.01754506 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.02903128 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.018267398 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.025145936 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.026918492 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.029374135 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020523858 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.029623899 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.019964922 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.028628805 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.024206371 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.02866594 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.02911265 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.024228413 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.018450166 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.028157696 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.030344043 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.028124381 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.020193105 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.020039786 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.018844753 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.029054605 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.019990449 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.019486803 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.027923302 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.024516862 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.025659425 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019879701 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.020127203 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.019943211 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.02833555 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.029655874 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.038901512 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.028078887 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.027047985 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.028692116 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.018200549 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.036230576 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.018360928 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.027797368 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.017790887 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.025712998 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.029103108 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.019160553 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.040007456 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.020431706 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.027790006 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.032639523 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.028607615 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.023445562 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.039651594 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.022444499 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.028734882 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.028175484 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.024985617 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.027376886 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.020690878 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.028995837 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.030158826 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.031462447 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.020044395 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.027731937 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02931154 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.02067513 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.028162302 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.020825242 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.028934801 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.020960844 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.018391192 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.025016656 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031934304 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.025173181 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.02545586 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.019192733 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.017985665 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.019177111 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.026774598 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.024824665 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.028897103 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.036861304 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.018143099 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.019900817 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.018722595 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.023639634 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.039680789 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.030076855 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.028120397 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.024965435 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.018268777 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.020402462 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.020699161 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.01901206 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.022289516 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.01830427 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.018953114 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.031034457 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.020540762 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.0245669 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019155857 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.020140612 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.029998957 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.024472765 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.01979487 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.027779667 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.019115014 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.025906551 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.018684304 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.021332393 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.025362118 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.018946835 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.024099397 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.031111919 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.038682156 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.027745473 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.029635093 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.020551791 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.028693079 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.03738743 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.02926162 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020609513 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.030259261 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.018874372 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.041417678 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.030510666 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029313736 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.030785628 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.020828446 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.039892423 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.025446245 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.030998684 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.037383566 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020564144 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.029108573 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.019502522 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.037690982 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.025497446 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.019372903 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.029827811 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.028612102 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.027290371 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.03327193 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.020684235 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.029724582 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.025391341 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.024514745 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.021475138 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.021579575 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.029617093 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.038733261 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.020678119 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.026339664 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.028894773 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.029277022 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.0253212 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.033645898 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.028925165 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.02069141 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.02151052 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.024147088 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.020517189 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.033644685 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019949324 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.025049812 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.025308262 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.019294623 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.02785566 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.038548422 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.030407792 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.030581618 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.019374247 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.018775085 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.040381191 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.024133713 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.023413755 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.0291238 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.031211615 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.03395246 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.030403252 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.039314923 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.020093548 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.027065185 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.033924151 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.02077363 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.019494026 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.024637615 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.021584428 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.030285697 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.031033749 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.028261815 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021815766 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.028221733 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.03572358 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.021362203 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.025674378 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.026625992 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.020744813 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.032020426 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.029262754 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.029951625 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.02157693 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.019706446 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.024180452 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.029856039 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.028514199 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.03023096 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020880859 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.029343757 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.036319707 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.028526101 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.023847726 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.019562539 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.023509795 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.030077071 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.027109808 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.019520201 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.025602307 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.024378359 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.029754991 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.030415655 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.025398378 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.019551007 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.194363254 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.0290324 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.029775825 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.020635528 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.020575497 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019115867 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.01880694 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.032355114 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.019130008 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.020394999 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.025050187 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.020467135 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.039620061 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.028617975 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.037629391 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019892527 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.025147699 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.018717662 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.030003227 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.02499688 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.018735849 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.030815498 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.018294916 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.036537015 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.032296055 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.024923359 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.018511252 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.025746021 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.029007297 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.036732333 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030164371 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.029301004 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.021964577 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.030044892 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.020315827 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.031191836 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.018476085 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.017723401 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.030114111 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.028629501 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.032252685 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.018335755 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.030012607 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020157077 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.027733447 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.028210248 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.019976681 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019916346 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.019978446 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028988825 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.024390085 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.028954821 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.024476052 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.037769925 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.019322294 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.030972892 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.028802853 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.030939218 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.034596791 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.031538589 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.028091025 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.018671507 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.026994896 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.027783957 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.019519216 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.024948464 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.021538438 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.042879171 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.019944858 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.019935871 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.034158646 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.025855442 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.01874661 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.026174808 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.024760004 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.030586936 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.019909952 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.030678404 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.024144254 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.019535743 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.024565158 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.024930664 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.018121016 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.018914655 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.019232136 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.030214515 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.025182568 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.018923818 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.040793698 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.020503274 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.028929761 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.031095157 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.027474564 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.02031402 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.017928458 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.019848351 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.034737328 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.036922798 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.024358444 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.028818831 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.020542243 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.029444355 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.018402365 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.029189127 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.028500499 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.028973003 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.01878769 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019229359 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.036761073 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.03671999 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.024927126 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.038701669 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.029055397 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.020481135 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.044114901 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.029344879 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019847 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.031265778 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.021104926 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.018252597 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.01798459 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.02056135 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.032128522 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.018806213 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.021020479 seconds)
  done (took 17.771041851 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.066720343 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.020017273 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.018568675 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.018350616 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.025687178 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.019638988 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.018397834 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.019827821 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.019914805 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.020966596 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.018503358 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.018585464 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.024322934 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.035363787 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.026930103 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.022500244 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.018470836 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.019750124 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.018223479 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.019601203 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.024896902 seconds)
  done (took 1.375239871 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.021012646 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.022526993 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.022366148 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.022659859 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.02189345 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.018624969 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.022276049 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018412984 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.023084205 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019199619 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.022899458 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018739848 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.0193476 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.019223389 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019224428 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.020087385 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.022838473 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.022184857 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.018718607 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.022319012 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.019995013 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.022441043 seconds)
  done (took 1.308893991 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.019303637 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.018517765 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.027875177 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.017772134 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.017609602 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.020766098 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.017747046 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.023225484 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.023275339 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.023337912 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.028133324 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.01853005 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.017490939 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.024856766 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.017948146 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.01864351 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.066851692 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.018349326 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.01863897 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.017960447 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.020474193 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.028486447 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.018255226 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.018292188 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.023640139 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.021103322 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.018001387 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.020507357 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.018729596 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.023510556 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.019082715 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.01804805 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.028613471 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.027769425 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.023427077 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.023878988 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.019637743 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.019233161 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.018508595 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.018290605 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.028015669 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.019604845 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.018461626 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.019313771 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.02822489 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.01825777 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.018015986 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.028571562 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.01820703 seconds)
  done (took 1.928926908 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.029908379 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.077246806 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.025356461 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.058537047 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.031642843 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.023846452 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.025358416 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.061047776 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.019576731 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.020025425 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.032503512 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.032663586 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.020839084 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.022258291 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.025258396 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.021066933 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.021899777 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.020377969 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.02369185 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.020720356 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.023580463 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.026680676 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.03190562 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.032570918 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.022077488 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.020398934 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.020760509 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.022550799 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.032595361 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.024128017 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.022644043 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.023022011 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.032172306 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.025893849 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.020848276 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.021115847 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.033226738 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.021549696 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.021229159 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.019856133 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.020988518 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.02250005 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.026755617 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.0332753 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.021466559 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.027574808 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.021351354 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.019338291 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.032706396 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.021027223 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.024668645 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.033404209 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.022052645 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.021243315 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.022357599 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.032394121 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.021299888 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.019959021 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.021459106 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.032425149 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.01941941 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.022107886 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.03315392 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.020647572 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.024364554 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.033559796 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.027574218 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.022240481 seconds)
  done (took 2.80904675 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.026847664 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.058546641 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.033626354 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.033930805 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.028768841 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.029259981 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.029447626 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.029531713 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.029497604 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.032373538 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.029960642 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.185707156 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.026414283 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.031578813 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.029802326 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.029863746 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.029968084 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.03000914 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.030066926 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.03012517 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.029996643 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.034719482 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.029853981 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.034774439 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.034569027 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.026509113 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.02975672 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.029959873 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.034857999 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.030298775 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.0345034 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.029784797 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.029876988 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.035097125 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.0347439 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.029920631 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.019105834 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.029764273 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.029812733 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.030045252 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.026353557 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.035168299 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.029990843 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.02646538 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.030041998 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.029746359 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.035012769 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.034578777 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.031940267 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.033084477 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.029993354 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.035122701 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.030153393 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.030146788 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.035390053 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.038176718 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.035015295 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.035486665 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.030542411 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.035589452 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.035410788 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.038632483 seconds)
  done (took 2.99543428 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.032302309 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.024266079 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.039477451 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.017916621 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.017878032 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.028364836 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.018157871 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.018231103 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.024457326 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.024585232 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.02611216 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.029002075 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.03109452 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.026245616 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.029090366 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.030718579 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.028689574 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.028896442 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.024860714 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.029132672 seconds)
  done (took 1.408233731 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.020139485 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.023371249 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.018782187 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.037512021 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.018871623 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.027577419 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.018949623 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018920983 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019084154 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018962717 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.023810424 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.0236599 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018821037 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.028146459 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.022648548 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.027629883 seconds)
  done (took 1.224535079 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.021553247 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.027183017 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.140737899 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.019286824 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.021609561 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.018685571 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.019742038 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.018682239 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.021200245 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.034582419 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.020056138 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.022222627 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.019821227 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.01830952 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.01896673 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.022037987 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.021016221 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.020011788 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.019808844 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.143547053 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.029508537 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.020556867 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.022390344 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.020759019 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.021924829 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.029328913 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.021349175 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.021803042 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.019835348 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.022204475 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.021858821 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.032473576 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.021908142 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.020587488 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.018505232 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.019365196 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.019838861 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.022294539 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.022399514 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.019987435 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.018985 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.021876 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.020209033 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.020165893 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.021293885 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.022341007 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.021161427 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.031862358 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.019842101 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.02212705 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.020172553 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.021394574 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.020568776 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.032908056 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.022267657 seconds)
  done (took 2.30806449 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.038349908 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.024664282 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.017693249 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.017673835 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.024210737 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.024989386 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.024329844 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.024391266 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.025104325 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.017777449 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.025185 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.023846707 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.025034512 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.0246214 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.025196532 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.024836278 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.018144059 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.025198006 seconds)
  done (took 1.301171105 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.0255501 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.023657755 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.024117189 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.019949167 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.019901588 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.023931644 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018215788 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.019697232 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019844767 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.020156119 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020382936 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.019685639 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019765505 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.019992338 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.023760637 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020047921 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.019671788 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.018280037 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.020300915 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018236656 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.024272173 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.018365626 seconds)
  done (took 1.316440523 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.211385693 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.167647221 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.045185856 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.039918728 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.030030302 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.060065971 seconds)
  done (took 1.411388372 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.057843242 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.061175553 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.02451279 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02457292 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.028651174 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027171414 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026837719 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027861605 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030495395 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.033231708 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027918563 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030481997 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030572354 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.032634449 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02911584 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.028879412 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027681678 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027935842 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.025137983 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.035770856 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028156815 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.031160213 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028191936 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027909385 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028186536 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.033284718 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.03107806 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.034165416 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028103278 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.031283574 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029587071 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028210778 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031450167 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.034203775 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024955297 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.031101004 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028163906 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.035653478 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029801785 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.033189258 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.024831184 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029837305 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031541407 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.03110666 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.031404354 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028080614 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.03103932 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028206079 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02830921 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.039487888 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02991984 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.032887414 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029560123 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.031373567 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.031027824 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.039582531 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.034257173 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.032960833 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029526108 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.035050199 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.033867413 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030052937 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.033362477 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.035548922 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.031041857 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.03548927 seconds)
  done (took 2.944826306 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067125009 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.024973121 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02755141 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.03323148 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.032224081 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02754952 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027535232 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027402796 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027600464 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024986749 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066818736 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027747437 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.032294523 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.032555304 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027896101 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027581257 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027961166 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.032748823 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025584926 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.038781773 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027573851 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.032676434 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.03274722 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.032722029 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.033835887 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.157053581 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028058109 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.028005824 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027909107 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028042021 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.031068482 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028165966 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.032999572 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.025453608 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.032994629 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028257156 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028371579 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.031113541 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028282369 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029707338 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.033250622 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.035964503 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027990747 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027934443 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.034342262 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028540391 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027998937 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025383649 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028276056 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025373102 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.033890227 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.034157971 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.034309664 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.03294034 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02816546 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028123363 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02797393 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028076713 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.028365085 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.029522804 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.033104128 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.028158436 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.040229444 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028376027 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028811225 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.034038403 seconds)
  done (took 3.057548288 seconds)
done (took 59.733823537 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.214045503 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.180433629 seconds)
  done (took 1.251715914 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.152777799 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.152338301 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.184253025 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.027808693 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.089058067 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.187555835 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.132354274 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.028005777 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.027684597 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.029494171 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.02744757 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.029011751 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.029721615 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.027795042 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.094843596 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.028152479 seconds)
  done (took 2.122058649 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.077974723 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.308387313 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.066839378 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.027090575 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.115147403 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.033243757 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.028662865 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.0333249 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.033585714 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.027423033 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.078393115 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.052283371 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.033071041 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.03356882 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.028538893 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.032985433 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.033106292 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.033587434 seconds)
  done (took 1.947953791 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.094093165 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.038305445 seconds)
  done (took 1.00336731 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.155437121 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.067406859 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.11376896 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.339463711 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.103831641 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.322660199 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.108041941 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.103704079 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.074277742 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.099624626 seconds)
  done (took 2.3504906 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.068508514 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.065610221 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.314688141 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.063235011 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.04089963 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.035221515 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.035491511 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.035406992 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.035665753 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.03455209 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.086377646 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.032946707 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.028875391 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.081769753 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.055227156 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.067671317 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.028304574 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.034840199 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.038787406 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.027878468 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.033104141 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.035186707 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.148688129 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.034995891 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.057222175 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.032587116 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.03441303 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.034376294 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.034413092 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.03521909 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.037782941 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.059661345 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.035102559 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.042210808 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.033559264 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.056549943 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.029189335 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.05623827 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.031746901 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.028844814 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.032569072 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.036198659 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.029672252 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.035763449 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.035866629 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.035902034 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.035699765 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.027987325 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.035590488 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.032008348 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.028596428 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.033659049 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.033488102 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.034715421 seconds)
  done (took 3.454029589 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.08370299 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.073648566 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.028295794 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.07914402 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072916108 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.028581382 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.087792773 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067824876 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.086444115 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.027859025 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.02755623 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.027788286 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.036011948 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.039575734 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.083915608 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.077304024 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.030402992 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.028640783 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077430755 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.077183311 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.027248505 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.089961667 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.078458954 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.074611376 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.026978725 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.028286929 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.027058282 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.027978241 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.036499788 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.035696886 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.027386754 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.038894628 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.0402599 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.035086302 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.026975784 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.027234994 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.027021239 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.036466108 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.037732605 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.037649501 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.034719753 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02650349 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.027252419 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.027817029 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.02871177 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.026994397 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.038003461 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.036053939 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.038362784 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.027972923 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.027973883 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.027085741 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.027887964 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.035229853 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.034224549 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.035758362 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.039302187 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.027487127 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.027470889 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.02934163 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.039584871 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.036400762 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.036310528 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.028359546 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.037480117 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.027248994 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.038388358 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.040978863 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.027514364 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.027680601 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.027339962 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.027667434 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.027918718 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.034610547 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.034622993 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.027652262 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.027538207 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.027153555 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.036094974 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.034745078 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.027026545 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.03701393 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.02651068 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.027416507 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.027922329 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.028118302 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.038959147 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.037364054 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.028541939 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.027702951 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.028419118 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02799803 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.027300757 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.03870593 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.037296468 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.037520274 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.039632806 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.028526907 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.04037552 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.037660755 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.028459384 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.036488649 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.027962556 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.028732246 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.028597652 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.036493613 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.036392685 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.038320398 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.028193769 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.028110618 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.038233355 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.04104705 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.028144313 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.036458853 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.038433523 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.037093854 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.027751422 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.040233065 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.028331309 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.040128038 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.0284516 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.039677496 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.028389541 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.037358218 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.028448144 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.027583165 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.028333808 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.040910623 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.028674965 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.028280065 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.028474909 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.028360201 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.037101003 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.041466727 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.028858323 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.037385085 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.037381446 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.02869022 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.039469977 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.028592076 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.039877836 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.028485209 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.028696567 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.027600778 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.041967141 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.028331874 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.028975636 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.028545923 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.038903356 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.027809002 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.038626796 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.036171397 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.027384897 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.040367078 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.038515642 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.036095865 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.038836245 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.02874302 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.028353951 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.027946147 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.02815456 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.039354578 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.041399737 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.178028806 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.027908652 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.033715609 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.037213871 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.027168633 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.034206551 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.033941283 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.034402189 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.02824402 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.028155597 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.037817586 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.03847272 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.034273154 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.036859681 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.035248575 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.027320401 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.033912329 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.036901971 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02728606 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.04069192 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.027502096 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.037497571 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.03689462 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.033518869 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.036730722 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.037713621 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.035693042 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.035737829 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.037993563 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.026716963 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.026674718 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.033884075 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.026561395 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.027187854 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.033531319 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.027365714 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.028170587 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.040046624 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.02711512 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.036673776 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.026398942 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.034385463 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.026428507 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.027418821 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.039071095 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.02707162 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.027970867 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.034376677 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.02705127 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.033514184 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.036422364 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.033810427 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.027124136 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.02791813 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.038580262 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.037546926 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.027369527 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.027363171 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.028240753 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.037228637 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.036549095 seconds)
  done (took 8.96146189 seconds)
done (took 21.964592653 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.156860889 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.080938762 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.162422419 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.094778843 seconds)
  done (took 1.363184714 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.06286042 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.022822254 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.157180035 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.170908107 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.02327106 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.151721861 seconds)
  done (took 1.471067986 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.280263053 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.16804316 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.179496456 seconds)
  done (took 1.512927565 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.16786106 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.308607932 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.599139371 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.160586643 seconds)
  done (took 2.131023781 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.192025087 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.183728873 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.035287554 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.203346426 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.043555859 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.019405155 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.116094901 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.020191883 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.05820886 seconds)
  done (took 1.832475454 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.110971085 seconds)
done (took 9.308283092 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.217932295 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.156551285 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.039121581 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.032940978 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.13885145 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.149797026 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.160933788 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.034722973 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.150658814 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.34514014 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.202458517 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.054782167 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.181186939 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.049299172 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.294133816 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.036178526 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.033844153 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.029079553 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.158077944 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.148154218 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.271328398 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.033370158 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.112474018 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.035494789 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.114458023 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.09177319 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.20733486 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.348157622 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.307327474 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.035346309 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.132274868 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.048851651 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.130948098 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.137527863 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.152970794 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.055017635 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.024035589 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.273372673 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.124948466 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.357792501 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.181691052 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.032027704 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.1581551 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.030516513 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.023456171 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.165972109 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.038578864 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.031700276 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.049843155 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.03171477 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.048582694 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.03220283 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.146175889 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.028563596 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.105218253 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.16013678 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.202189423 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.11478503 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.030574869 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.045202179 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.034106442 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.174962106 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.044297269 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.030231134 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.037547173 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.023862075 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.155343087 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.045466287 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.024086704 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.03551503 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.033420634 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.12432996 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.174945131 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.07492984 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.037290739 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.132500882 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.105555352 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.05264833 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.055563028 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.034531593 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.023298466 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.209815187 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.029518608 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.044047358 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.031609317 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.058512657 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.023357765 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.040816827 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.348259925 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.162565301 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.096841689 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.023572329 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.25641598 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.024648068 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.049901262 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.023755247 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.023383789 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.201312201 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.02294921 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.023382699 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.033889372 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.032264234 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.024931488 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.178928595 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.114197012 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.032356378 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.03149572 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.023504398 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.030584802 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.024644447 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.023849048 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.023694494 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.105184771 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.041712717 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.022567613 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.119219873 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.129051804 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.036060134 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.041483471 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.096594322 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.02721241 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.033993107 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.031450444 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.149853993 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.030688798 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.145691194 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.024760848 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.048147504 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.133178816 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.10838533 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.11933484 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.023260628 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.150620972 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.034147399 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.02256714 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.031520581 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.054659799 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.034129543 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.04190519 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.033062555 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.152592996 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.035889319 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.030077703 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.13414472 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.023029117 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.130435897 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.111498705 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.146778585 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.030172828 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.035569558 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.1048287 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.051167331 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.05506794 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.049393302 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.028440026 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.024033857 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.023556301 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.037776128 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.022688118 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.023898861 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.039131584 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.031320012 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.040974565 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.271589534 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.034657056 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.028459411 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.286266692 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.037103455 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.110624885 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.046680598 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.023768826 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.114140005 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.025769546 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.046349384 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.095633843 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.024102317 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.105095128 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.024255651 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.023838962 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.030796923 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.025896885 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.033637314 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.039105174 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.024035328 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.038513325 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.032386179 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.023833105 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.11392509 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.025759749 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.207720094 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.111851332 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.125838457 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.024197271 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.044221068 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.023795134 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.147757963 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.024007737 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.080945947 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.12482063 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.041300572 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.046359427 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.025492285 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.11120038 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.040706882 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.029905102 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.111941323 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.147241122 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.110873023 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.031098616 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.279092118 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.034424562 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.025015017 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.03099767 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.033479705 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.024581139 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.112862011 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.02954171 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.023339569 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.023434007 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.026005009 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.022943754 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.051046303 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.022980441 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.032407793 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.030521465 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.027490957 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.026094083 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.02301844 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.032628924 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.113462469 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.134843618 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.030983922 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.046217334 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.039046462 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.037155825 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.077010451 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.032222662 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.176715333 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.023423941 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.034653404 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.04956977 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.023617942 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.029335849 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.030742503 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.044241509 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.028287737 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.025918533 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.033522189 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.024586245 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.024661533 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.024207669 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.024623573 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.03368802 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.025712651 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.023497919 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.023839171 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.041587073 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.029501863 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.029466731 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.036033636 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.045931339 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.69616102 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.027997685 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.025983543 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.038398551 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.030731699 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.024200773 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.027014907 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.023845924 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.026381392 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.024366515 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.023413507 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.056534229 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.028656263 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.025249534 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.046611359 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.030687209 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.034276865 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.131654649 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.041810705 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.028489535 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.022998822 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.292681102 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.118077257 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.046395758 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.045050863 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.023538846 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.034327726 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.023654605 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.02409707 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.022491598 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.053783667 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.027857993 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.023674516 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.022398805 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.022722617 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.075046753 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.032222718 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.022594361 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.032133459 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.022663259 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.023052284 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.053820896 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.023902055 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.022790714 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.042605512 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.036565 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.114619111 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.035931212 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.026958462 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.081001537 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.022412229 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.023228524 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.023773618 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.130310611 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.038317238 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.024419182 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.023343422 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.031914629 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.032953392 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.083859081 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.030551453 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.026721873 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.03206399 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.022601999 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.023989976 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.050542561 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.053427224 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.024675385 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.02827672 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.023487462 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.024108622 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.110697113 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.032122726 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.029092727 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.121055294 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.025488706 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.03203125 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.022639622 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.534292478 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.02921608 seconds)
  done (took 25.290112636 seconds)
done (took 26.204173622 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.179297613 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.04000869 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.047114599 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.033584961 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.03782092 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.038570161 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.049700606 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.035135634 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.038587003 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.04651356 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.163458166 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.024052106 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.032776446 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.041195834 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.033896125 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.042566166 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.038047971 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.041493369 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.030458487 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.042152287 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.035752073 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.036560449 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.034146097 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.041308711 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.024148358 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.033955595 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.173311693 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.046707945 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.028305967 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.034730331 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.032741084 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.04881187 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.033361232 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.032501972 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.034426436 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.030104788 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.035629112 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.031237628 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.169978826 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.029850604 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.024211495 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.03787745 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.032014469 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.032549333 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.03363557 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.036395937 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.029987245 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.039072887 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.024392667 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.046192902 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.171045625 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.034013473 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.027872346 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.033143207 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.030280584 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.034697953 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.027845973 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.03698223 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.029817914 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.045251219 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.032849716 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.032745206 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.023757031 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.033106219 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.031932378 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.031907643 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.022710495 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.033648785 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.023301494 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.023209735 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.022915544 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.032805258 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.031515394 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.029329351 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.023286076 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.023597187 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.02327021 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.044967139 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.031511739 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.033344924 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.024033821 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.029844827 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.02951096 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.024023751 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.033801411 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.036307971 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.033912794 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.023869887 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.022862773 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.044856166 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.030956319 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.023220807 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.036416429 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.033736383 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.033813574 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.023632508 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.023101841 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.033617424 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.032050535 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.023276547 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.022340086 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.033835728 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.0296379 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.033408395 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.023581703 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.033853837 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.033598392 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.023223953 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.032955411 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.032096664 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.033821741 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.035823227 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.033685472 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.036001566 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.023908967 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.022345306 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.034638691 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.023728133 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.03358074 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.032444077 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.029723544 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.032470048 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.024137177 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.023226122 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.033333685 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.030408558 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.023767783 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.02391757 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.023952013 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.033106024 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.031759978 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.022323003 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.023209358 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.033423874 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.033012513 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.023023081 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.023171397 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.032941045 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.02393954 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.030213688 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.029728527 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.033218282 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.023461794 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.023794475 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.0229017 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.023406639 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.033321011 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.029885785 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.033458778 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.024030922 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.033362026 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.032005497 seconds)
done (took 6.548489793 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.086261777 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.072756083 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.200649926 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.162739307 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.039214882 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.040281696 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.029812699 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.046865107 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.031865763 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.053129346 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.053016743 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.049839503 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.185589159 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.047181263 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.023792565 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.037949154 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.024289494 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.054636493 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.164674125 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.052004677 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.071791971 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.022315437 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.042065063 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.045090153 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.03831727 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.045366124 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.050942292 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.025102879 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.044533444 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.044339954 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.054927375 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.027544564 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.024913748 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.046765478 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.043385624 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.034974427 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.024088898 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.032665456 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.03845667 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.024137227 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.074205805 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.04600882 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.032431037 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.032839863 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.025321431 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.04176912 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.025297121 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.033619381 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.040570043 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.032197124 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.03858773 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.043420597 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.026390333 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.044604337 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.022612984 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.0331681 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.032788185 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.02391609 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.025252012 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.024235161 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.023739892 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.027320381 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.038775566 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.045363763 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.02865511 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.032811062 seconds)
  done (took 4.109013022 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.052266162 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.076556516 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.040804412 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.041023069 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.023717098 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.024324858 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.024430037 seconds)
  done (took 1.302877316 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.103983423 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.155238849 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.165852433 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.167845988 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.17763631 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.1636768 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.038471487 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.057554407 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064487787 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.180304257 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.176766247 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.169971923 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.028981176 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.039394761 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.061809194 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.173622797 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.039441709 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.033463334 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.163271333 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.171230158 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.030335466 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.06015557 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.03941202 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.028210871 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.168173822 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.15972592 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.028917671 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.071507725 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.027316418 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.024827501 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.02475728 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.050392784 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.158499362 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.042352155 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.025427844 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.023983428 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.156118493 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.025330285 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.159898658 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.033178015 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.158323973 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.027569276 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.028158622 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.025845746 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.026422732 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.161951132 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.026348562 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.024806438 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.024583663 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.160546605 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.037414203 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.159103613 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.02670633 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.030633484 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.032903502 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.032754564 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.033169919 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.025505583 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.162069191 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.036799621 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.027424365 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.172294515 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.170945263 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.160915396 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.174742136 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.035659589 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.164590097 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.162156187 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.025344343 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.034963497 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.02639005 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.176721122 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.02912852 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.027744562 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.023614188 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.03383137 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.180318252 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.180477767 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.181376708 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.041565976 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.027386122 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.026012263 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.17751009 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.181294441 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.031634039 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.025613215 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.025882383 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.043763046 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.053641584 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.028403606 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.031411194 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.02611039 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.037599848 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.028496854 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.027960243 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.324706305 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.024438568 seconds)
  done (took 9.06047374 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.039772131 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.025572443 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.025423232 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.025890033 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.025983388 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.026104299 seconds)
  done (took 1.220494196 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.054111652 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.026365065 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.040719113 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.026237109 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.050917859 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.153097519 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.154786213 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.027614598 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.044736034 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.040050303 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.153609352 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.158492925 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.15813904 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.027812809 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.155064543 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.039653271 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.155291688 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.031737753 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.038884639 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.02767116 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.038290055 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.027268325 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.027615843 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.171022121 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.020065254 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.03869974 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.036772992 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.039143877 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.038550983 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.027377914 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.027159453 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.019923879 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.033190664 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.027129458 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.155378661 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.033284497 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.026287854 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.02133976 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.030971065 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.019968804 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.159020281 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.027918154 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.031649633 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.021263353 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.027251011 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.033031451 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.02158518 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.037651253 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.156054639 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.02137753 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.021216648 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.02635843 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.019916683 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.020963823 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.033006968 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.027163735 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.021181877 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.156087732 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.027388756 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.032971907 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.026415238 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.020117567 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.026789813 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.019840909 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.031868292 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.021317599 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.032910265 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.027839558 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.027324387 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.026345209 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.021239484 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.026182206 seconds)
  done (took 4.688097352 seconds)
done (took 21.397626698 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.54031064 seconds)
  done (took 1.578946527 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.122411409 seconds)
  done (took 2.190049351 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.055365028 seconds)
  done (took 1.123837041 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.335206113 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.555584457 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.82644681 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.099648625 seconds)
  done (took 2.874263804 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.894893296 seconds)
  done (took 1.972631458 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.239802062 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.197305424 seconds)
  done (took 1.537565643 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.5286839 seconds)
  done (took 1.582153084 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.610434921 seconds)
  done (took 2.675532257 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.22057066 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.144345165 seconds)
  done (took 1.423910838 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.68627595 seconds)
  done (took 1.747244852 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 5.000315788 seconds)
  done (took 6.059799138 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.212549585 seconds)
  done (took 1.343134784 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.201638729 seconds)
  done (took 1.265993527 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.741048425 seconds)
  done (took 1.803311212 seconds)
done (took 30.25503443 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.047809898 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.042731188 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.042947351 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.040243046 seconds)
  done (took 1.234605489 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.033525113 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.029379024 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.032460983 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.032803215 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.029924938 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.031846216 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.032717853 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.028487263 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.030046315 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.028708031 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.02705137 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.028818242 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.031738433 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.028459535 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.031473491 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.032710095 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.028515945 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.029586993 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.0310114 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.028780708 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.031883345 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.029007387 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.028933784 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.03050966 seconds)
  done (took 1.794674371 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.037896758 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.030310683 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.032401333 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.02922694 seconds)
  done (took 1.202175207 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.036427389 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.036343708 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.045494773 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.051254971 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.036198232 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.036516973 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.043699515 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.044250412 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.051470882 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.047109679 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.026061463 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.025883866 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.025072256 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.046209664 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.043799435 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.019082058 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.020811243 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.036909571 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.035760962 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.038947282 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.028023269 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.022919253 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.035936391 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.036784681 seconds)
  done (took 1.940283592 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.041196769 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.023483431 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.041787045 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.052917882 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.052803596 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.023546692 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.039177469 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.053574037 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.094185375 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.023531776 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.030575043 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.023536328 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.067084943 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.023248694 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.040319016 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.07360035 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.077705033 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.0284516 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.058337934 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.023528467 seconds)
  done (took 1.972920557 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.030880247 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.028532953 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.029835412 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.023133978 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.035839077 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.031395934 seconds)
  done (took 1.256586418 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.026280441 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.025081247 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.025087465 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.030307481 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.025136791 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.025098784 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.025013589 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.024094797 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.023913812 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.02473303 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.02455894 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.025234904 seconds)
  done (took 1.378402509 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.18405832 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.030673272 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.028439224 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.023845054 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.025635676 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.024675127 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.041561234 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.026586828 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.045074866 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.024826563 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.025154992 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.027470295 seconds)
  done (took 1.582980937 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.06672638 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074880681 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115037315 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086322583 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092068496 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05784051 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.223793389 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.038235734 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.137487233 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105091124 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089757601 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053446129 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047197335 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.028349075 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063854767 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.082171467 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10456749 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.031953507 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087477577 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.274007849 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101735653 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.105528027 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118415228 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092673805 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.054617031 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117779902 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.058768412 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066263595 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.090544426 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093210259 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087043951 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.067110346 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.030381394 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.030412594 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132538465 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.072306522 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087895192 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.056436858 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.069993962 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.050920762 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09244903 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.029032945 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.043747718 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.079445933 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.049324445 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106190716 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.054754395 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083334257 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042853512 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.111501869 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100807964 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.200665577 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.048378032 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070790676 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114885425 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.231352418 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099988618 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072994112 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042952013 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.0852042 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.068724327 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06350047 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069687343 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040970794 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.149417589 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.049676215 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.089797705 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077860354 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.056647249 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.056114694 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073855046 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102127042 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090667047 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.093093315 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10595022 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.054471374 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097647758 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.063504603 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.091154572 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066566106 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.031494655 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090726992 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09645428 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063025255 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06501531 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103982816 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.055801858 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.036219552 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.064999793 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.084944717 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.039883094 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.079309613 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.040624263 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.095059635 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107100555 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060674914 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08181281 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084712271 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03793548 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141610481 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.073164032 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.032338813 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085387153 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.080584172 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128820902 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062483675 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.035135186 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.065218069 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070997238 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.126794628 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077423283 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042344174 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.244155202 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105579587 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056357532 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.278062477 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.05710551 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106222448 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075809548 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.046282188 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.034102761 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.055124509 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07680915 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069879759 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084210794 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055810199 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.044297625 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.047313731 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.080563471 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05361895 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040523291 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082253943 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.066294601 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.033700095 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048529633 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.036470844 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123029553 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.039037773 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105140477 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102314018 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.034767908 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07099724 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.059230391 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069867473 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.065593314 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084307667 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106633119 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.159162258 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.051673163 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.056805619 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071209302 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.114469125 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092619258 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.052825439 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.046000662 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.062808327 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075487723 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.06401082 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092003469 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.055785007 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078583695 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.067385771 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113014043 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117912399 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067389947 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07081481 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076103784 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.093140373 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034874533 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134943006 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070751218 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092648307 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.049643651 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.283137445 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.080664088 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067724865 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.046972513 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.066358714 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.066484956 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069181762 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110781346 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.057888143 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.030820023 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05288681 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112529467 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036612669 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081340137 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.05185963 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.054736823 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081962116 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.053859337 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041669387 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.026560678 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090061148 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123359256 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.028676556 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.07984942 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.068760478 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064581067 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.086997752 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.028619227 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092991651 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107409503 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092871478 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113695587 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.163087018 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085645018 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085022326 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.089264167 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080522319 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.039968733 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.094390252 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104051751 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058972383 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054026115 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102500207 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084482235 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.108805643 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.087986783 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093784485 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.07411957 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073612177 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070259787 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.072325148 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120586474 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.090806016 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.09612502 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.045850807 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082787921 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.248694891 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100352343 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041355823 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105728182 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.045020747 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10561507 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.037488176 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093690114 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.0349143 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.140238136 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.039303084 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.06103569 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.0282149 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.032902654 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108852679 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.090012237 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067841936 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06177335 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.10503205 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102995243 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.036931014 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07568738 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.078285559 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068190641 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082206047 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073778304 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.052041708 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058005575 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.073834893 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.046673709 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.042224961 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092549575 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057303503 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102112921 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.043943833 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.034351572 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107925062 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07655748 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057749287 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.036660562 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072296705 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.090575947 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.055416886 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.048347235 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086189523 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069084356 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113614882 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.052495924 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.067221052 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09215314 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041910337 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.059711839 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.029013734 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.051404443 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.036797822 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.097592809 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.036012682 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086446489 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.027770185 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101994873 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.052470199 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.062021167 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.072353003 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079661664 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109413706 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058649727 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118256919 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054793119 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.248933803 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071784037 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.076487406 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047550518 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066647917 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.067077958 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086008624 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.059256071 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086334091 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108285394 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065344493 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10951336 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05120877 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08720443 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069224993 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08889878 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.073575838 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159745581 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10537245 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077004338 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074242869 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.03496987 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058077673 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078802146 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079724671 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150486291 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092846687 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.031678837 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068802489 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.056819132 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075084065 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073141115 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.043021931 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114698717 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0659132 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.04895794 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07635665 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.053071273 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.068542721 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036161955 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065169968 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.065582863 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.057431228 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.061224069 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.080266177 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096256702 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0791885 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11492824 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.065543348 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.054858768 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.087785663 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08720449 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084559177 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.048169171 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.048959083 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116072947 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.090741211 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.095026483 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.062762638 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.236548159 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.076154542 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06211459 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095014418 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069751015 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.090413821 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039754616 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.036124435 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.027266236 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.030863219 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086583037 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075815242 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072996852 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066757033 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.030851047 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.068643302 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069263938 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030877926 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045821615 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053366855 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059361713 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.051946713 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066941088 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.080160714 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.058318037 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065870361 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066572955 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114668447 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.060535255 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050319128 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115662817 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11952964 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049467936 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055279287 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.030354312 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.039325804 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089692168 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116227968 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126738006 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.038995706 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.047200134 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.047413021 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048106241 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.030200265 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.05317156 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.050542062 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068956713 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060046467 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.078823021 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069104336 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035404367 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.073258731 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06339751 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.055062052 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.070840543 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087662343 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095447633 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.114417165 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079259651 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084689211 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037184217 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.043115486 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036767212 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040236266 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.073622208 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.04006569 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037319145 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123002689 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.055607588 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.23635004 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078177114 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04935657 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03511849 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100875051 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.028496837 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101607615 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.029733818 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.04228931 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.041841488 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037837454 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053912852 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102052736 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071557412 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.074179109 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068541547 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073797057 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152812926 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126200002 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039984711 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108433808 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034786876 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03529051 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.035110104 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073286223 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050292314 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082578224 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111842398 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050520457 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065515263 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038727591 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114159589 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.064234383 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.067756992 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04657667 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.039924968 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113379751 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039521731 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.047245755 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051074296 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076658989 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.031654845 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.065855745 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.044109666 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039819568 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159308292 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.676224411 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058214345 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.035046629 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.059194536 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111689519 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10788125 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059506726 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073060654 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.085780925 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.068253569 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.056155584 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.083590816 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.167453425 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.033239863 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058866296 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.069515284 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.069228829 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07763236 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.06469178 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.054742788 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.061456075 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.206418482 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.039888959 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.078628108 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046896131 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058987268 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.068629059 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.043283236 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.047673568 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09506556 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.064558924 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.042313439 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047667076 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.065362225 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045695515 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06694583 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.028024123 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.073810475 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.049549598 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081255323 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.055029058 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.073198725 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088693998 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054371796 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10017619 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.069430002 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086597272 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047593633 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.037140819 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088824477 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.050504816 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037113409 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113407799 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.058779928 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.066995165 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072904073 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.057684094 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.078411012 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082244249 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.076186882 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.065037991 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038349219 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064297598 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.07582322 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.048581104 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.040156006 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.034453003 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.035215083 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073000674 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.047911995 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047889977 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083586243 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.050822153 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.336685182 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.064204928 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089062433 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049941504 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071560154 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077061674 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055645376 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103933649 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.066207053 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09971871 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155155487 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106433649 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101273612 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.259028078 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.037288281 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.038905418 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.02751131 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.079330147 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.03956128 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.049407381 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03891845 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099927917 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.044413934 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072403861 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.226776842 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.040051318 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.054845542 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056988707 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.028480635 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.043648121 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069406494 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046806414 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039395779 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.078522546 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.041335965 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.091825994 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073888464 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059430894 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.055873509 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040189164 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074100095 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.066048915 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.097826077 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.060471429 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.03453605 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086730711 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.069703971 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109185786 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.033643705 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040554765 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097358237 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066282617 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099308432 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040966415 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128480256 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112728439 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067019661 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104289474 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030446646 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050137471 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.050933077 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.089126581 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.045752385 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075394473 seconds)
  done (took 47.33135131 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.141263202 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.132335759 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.080271222 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.093882647 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.251052558 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.259721702 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.115359825 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.081922368 seconds)
  done (took 2.38873542 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.030014177 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.062614268 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.040979782 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.336168231 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.065172824 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.025001061 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.032301587 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.041862179 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.028667934 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.024402103 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.067060578 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.024826335 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.029063886 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.520774509 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.023891994 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.029321387 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.029236547 seconds)
  done (took 2.667990742 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.335425941 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.840917527 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.511864715 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.58642007 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.107929506 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.573104544 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.032635567 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.040445322 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.652627159 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.399847826 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.102317414 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.185684454 seconds)
  done (took 18.580760893 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.033871985 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.177231552 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.178184519 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.033705995 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.033644627 seconds)
  done (took 1.673412759 seconds)
done (took 86.148639153 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.045148466 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.146544133 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.0253508 seconds)
  done (took 1.430002515 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.176487616 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.174534031 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.176070355 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.178610125 seconds)
  done (took 1.916118285 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.033561783 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.036184427 seconds)
  done (took 1.29303489 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.213677264 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.290374657 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.051188611 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.042778658 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.039754072 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.040524356 seconds)
  done (took 1.349409186 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.029594753 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.029715661 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.029691934 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.03052188 seconds)
  done (took 1.336600739 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.152042949 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.023446998 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.026014793 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.028226261 seconds)
  done (took 1.452133604 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.044384129 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.046293442 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.081239356 seconds)
  done (took 1.402141717 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.043392511 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.044956402 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.039441 seconds)
  done (took 1.360651338 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.07062105 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.057454502 seconds)
  done (took 1.347148861 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.04095881 seconds)
  done (took 1.263151298 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.053713348 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.060375268 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.245742571 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.21164401 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.257120363 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.233331571 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.039137939 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.036481275 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.031425843 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.040917775 seconds)
  done (took 2.428546618 seconds)
done (took 18.402486428 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.040256418 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.154839683 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.397727764 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.048032778 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.616880559 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.394453124 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.688794861 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.050948377 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.063061034 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.026501241 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.046617882 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.591063274 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.692472068 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.10548464 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.674958338 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.107181852 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.520229172 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.026543414 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.025277146 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.026327787 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.668661257 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.025771537 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.026395083 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.026434269 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.518066206 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.294180435 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.027316055 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.10039176 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.025837659 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.0299499 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.273891224 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.027156147 seconds)
  done (took 12.560501458 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.028101504 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.087100421 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.030944986 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.044613256 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.028074947 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.027850006 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.029625436 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.026594972 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.075611057 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.026366355 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.046439159 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.02582057 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.030707851 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.02750552 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.049146391 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.026149336 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.028744666 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.026912109 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.02617221 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.026962146 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.048158797 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.026282664 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.026948956 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.026797389 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.026534064 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.042553738 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.027228284 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.026051639 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.026651735 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.030618867 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.031974218 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.028001365 seconds)
  done (took 2.313311267 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.086794836 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.08960721 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.032154561 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.071739949 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.084527793 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.029305887 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.12102169 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.051421852 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.078422103 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.026845279 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.046830236 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.02617803 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.068701712 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.027720882 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.050554444 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.026222505 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.028989917 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.027088642 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.026097864 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.026490677 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.048867238 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.026176114 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.026846212 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.027206247 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.02723486 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.04465098 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.027541399 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.026296554 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.026408596 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.030538705 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.032541189 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.027927031 seconds)
  done (took 2.623099297 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.028428828 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.031052026 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.038595097 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.042985599 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.024856574 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.027405095 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.02901842 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.024914398 seconds)
  done (took 1.482735062 seconds)
done (took 20.217545557 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.040525362 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.026386408 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.029845797 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.053144201 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.033955613 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.162387447 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.029141873 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.032378338 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.030695155 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.030266823 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.032001674 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.023527842 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.029215296 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.029100913 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.031163709 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.024430535 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.16696734 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.029581451 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.165457384 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.16719698 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.027340537 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.030915664 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.034786815 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.165259987 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.165629783 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.165808663 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.034836093 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.031550441 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.030433126 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.027897302 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.161428945 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.165380362 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.027515491 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.16129991 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.024696335 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.024492284 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.029340872 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.026061379 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.168618458 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.034196064 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.02730648 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.034602695 seconds)
  done (took 3.986120719 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.165924989 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.175318286 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.167603376 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.037749697 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.033959473 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.03758705 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.174532267 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.034322251 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.03318371 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.173194173 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.02821222 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.032601824 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.035152897 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.024948955 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.032020901 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.028364685 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.034741338 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.026301983 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.032231358 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.032808566 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.171722991 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.025312155 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.033940338 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.034137354 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.027940993 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.034814333 seconds)
  done (took 2.914493406 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.033540298 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.049871953 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.054046141 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.127587762 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.07119295 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.051076896 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.043892479 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.054581172 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.06087618 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.025443863 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.050830077 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.056944635 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.058228858 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.034180511 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.067470327 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.046845849 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.040208218 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.027026093 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.03271445 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.064454741 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.051453647 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.046472412 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.061893413 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.04787798 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.02440839 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.035861145 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.030550378 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.044918539 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.038156607 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.03946097 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.029215581 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.02921783 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.026171875 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.038184852 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.029206722 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.02347181 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.051115726 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.039697532 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.042266207 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.067910178 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.037268147 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.02688723 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.057122817 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.09603722 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.024109712 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.028827484 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.030933122 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.040215733 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.026823801 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.072826692 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.043753013 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.024807143 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.046522709 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.026823034 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.02705285 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.050468644 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.026989572 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.027419132 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.048749969 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.032195604 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.049742042 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.031963335 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.047624961 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.024421957 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.038604815 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.026961682 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.027606651 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.023975872 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.065893921 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.0343437 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.0808408 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.026895567 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.023756501 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.039700485 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.038502625 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.033587078 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.024231531 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.047661758 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.040694725 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.029531142 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.046888443 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.028746064 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.029346308 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.073351078 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.024485235 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.023566806 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.023814855 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.028400604 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.029332806 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.026182195 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.040294641 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.024871123 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.029393966 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.05732061 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.025143872 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.026208954 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.028788959 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.027174982 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.024666074 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037340165 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.02905125 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.027568285 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.040177971 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.026312787 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.029230146 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.04269063 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.036856163 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.0239005 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.027288867 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.028254689 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.027075607 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.027075581 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.028962183 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.02766037 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.031644379 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.034391905 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.032464495 seconds)
  done (took 5.828152791 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.271091936 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.261870181 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.026416012 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.258486198 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.035741838 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.181998771 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.263435139 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.260033927 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.026409649 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.027333592 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.025087981 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.197475507 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.192019479 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.205652979 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.183247428 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.028897211 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.063867123 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.204745818 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.265226677 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.260718885 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.061419161 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.034343711 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.028782018 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.027951701 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.027031415 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.036377691 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.044276543 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.035876 seconds)
  done (took 4.804618955 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.033507762 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.075919174 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.030451474 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.054319118 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.045638697 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.026611301 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.028349109 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.026833891 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.045267399 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.032494779 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.026347966 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.030739765 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.030722818 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.028672067 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.026591324 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.033796626 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.033525524 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.025420067 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.030381642 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.031901335 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.03877499 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.053069834 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.030327143 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.025576162 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.030021228 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.025618682 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.031363815 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.035565636 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.025669791 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.025511435 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.022805347 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.035830107 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.04315584 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.027242247 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.025477213 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.026816597 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.026084938 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.026446819 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.026578041 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.024096706 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.024090474 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.031661711 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.024737591 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.03139316 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.040702529 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.028425677 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.028473659 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.029251685 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.02902693 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.022560448 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.029541576 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.030008516 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.029098511 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.035819524 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.028915039 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.029232951 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.027485928 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.042915083 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.03278842 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.025616812 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.025291122 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.024682086 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.028744324 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.033548161 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.043903922 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.028643576 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.024570891 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.02662601 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.028070675 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.041037525 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.025735073 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.034112677 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.023156272 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.02673445 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.02896102 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.029541314 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.0278458 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.024499502 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.025911733 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.025302588 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.025930469 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.026090415 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.025252002 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.028969797 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.02443447 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.024838678 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.02670731 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.028437331 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.031970338 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.025164818 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.029232434 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.027729474 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.024949709 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.029151359 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.031597351 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.02889806 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.046393577 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.034693197 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.02697575 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.023655789 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.045939746 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.028525924 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.025577783 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.027784114 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.036104738 seconds)
  done (took 4.505433822 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.058147245 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.028597907 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.048090776 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.06706825 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.038142195 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.033565816 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.041774061 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.02796417 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.050820067 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.02545507 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.036770108 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.024356118 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.040675071 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.036467554 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.028880852 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.03768231 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.02945611 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.049391748 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.043219006 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.025113882 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.036610507 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.04063172 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.041040947 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.04610374 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.045779095 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.047232142 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.040492168 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.029741745 seconds)
  done (took 2.367003514 seconds)
done (took 25.632872471 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.288164974 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.47852333 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.259212597 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.010721269 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.32390297 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.363686989 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.453128409 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.242583395 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.289592834 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.335894493 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.900404102 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.931044513 seconds)
done (took 62.208384025 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.365836857 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.432348643 seconds)
    (2/2) benchmarking "String"...
    done (took 1.517091423 seconds)
  done (took 4.19659603 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.696778082 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.259128658 seconds)
    (3/3) benchmarking "different"...
    done (took 1.289051893 seconds)
  done (took 5.494278362 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.668566125 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.833956752 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.506636869 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.233348997 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.249861607 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.646537168 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.502157703 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.068420402 seconds)
  done (took 28.28565713 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.326709368 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.515223982 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.635318106 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.74541949 seconds)
  done (took 18.564048584 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.706436328 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.653674337 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.65081073 seconds)
    (4/4) benchmarking "different"...
    done (took 1.975967488 seconds)
  done (took 8.35285717 seconds)
done (took 75.177414328 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.238817695 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.790039873 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.263414459 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.426315593 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.24966282 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.339932156 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.243998309 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.256326556 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.240212733 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.244255528 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.24159353 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.229412915 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.244274241 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.314823429 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.251464679 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.258672829 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.773196117 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.255212003 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.281825573 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.33408916 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.587345221 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.235115692 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.243848345 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.306633251 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.861187477 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.246036247 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.370047024 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.241414202 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.88318824 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.247887712 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.248507476 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.237533809 seconds)
  done (took 187.423808372 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.238995262 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.094387575 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.119684032 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.233194552 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.751109358 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.591589767 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.104826696 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.778718714 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.237564564 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.270165805 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.284301172 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.228262344 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.338020345 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.796597688 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.281289935 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.22904409 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.154279495 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.197494971 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.285276674 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.154384593 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.237612368 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.750648916 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.713392005 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.227454994 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.266171482 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.245705377 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.254748976 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.266858459 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.72534695 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.123203255 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.264410528 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.245591722 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.42529778 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.47059315 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.242502392 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.244080704 seconds)
  done (took 158.308643064 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.491986149 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.251867395 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.281268447 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.35120676 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.301575913 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.165759289 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.239580167 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.23180696 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.236822241 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.236734783 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.22633219 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.3007365 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.228537755 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.345742064 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.263630618 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.238791076 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.242869313 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.354205582 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.244728392 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.239737338 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.23572978 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.34142856 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.57721699 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.35632718 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.243836169 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.246728322 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.354370677 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.248480436 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.242001207 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.231679178 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.357483729 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.246038957 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.368805278 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.357539247 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.238184726 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.290170717 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.234811608 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.595380837 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.232619639 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.239247475 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.237516259 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.284963911 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.232231601 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.549200216 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.335002488 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.238140967 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.251740614 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.741300677 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.843245603 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.244351618 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.244600311 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.239000817 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.24475697 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.234914404 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.597802124 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.236647264 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.273767806 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.368361764 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.233277759 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.239151741 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.232654917 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.236172447 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.237796284 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.238062496 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.26817579 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.948386692 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.586055176 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.587297676 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.072519846 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.22992768 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.238835527 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.232217932 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.772746904 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.296979119 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.235834518 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.231519573 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.409720221 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.240403434 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.233182146 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.194884099 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.190320668 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.237472241 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.355492533 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.235936488 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.228707471 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.300406214 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.323889945 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.248206369 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.255038447 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.288217509 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.23937457 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.23129049 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.244448415 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.197217678 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.232551577 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.235921466 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.733854979 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.232212144 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.232189303 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.347619747 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.599472789 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.231999558 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.308795586 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.648541315 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.258394115 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.239532133 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.240885731 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.253265066 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.236245446 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.245704635 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.241132924 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.226621556 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.228323416 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.23650944 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.231448979 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.224615791 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.223072863 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.248505874 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.224353729 seconds)
  done (took 344.015087562 seconds)
done (took 692.611513116 seconds)
(4/20) benchmarking "parallel"...
done (took 1.225327718 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.492526297 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.243894108 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.408635332 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.502412876 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.445868406 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.413741284 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.441877567 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.537026942 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.470326117 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.412520156 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.470343699 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.418797707 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.533581151 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.498180985 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.54088918 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.513441931 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.441780078 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 3.011675269 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.46289823 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.422468592 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.445702337 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.405391486 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.412161285 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.48626728 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.549198976 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.420083498 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.637322581 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.494036262 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.458766662 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.499948043 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.509960403 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.526840094 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.460012168 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.540231397 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.503639856 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.545141399 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.401966332 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.510200065 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.431560582 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.453154931 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.472057389 seconds)
  done (took 69.080633321 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.628808151 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.435241937 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.548615402 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.537761047 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.196614664 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.547816538 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.62761727 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.449803454 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.449431723 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.54936842 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.552182263 seconds)
  done (took 19.788505215 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.481893026 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.426685662 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.54093839 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.558017136 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.657082002 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.538916238 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.601112479 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.434445844 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.426193434 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.543669202 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.560869586 seconds)
  done (took 19.021124324 seconds)
done (took 109.124749784 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.815869529 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.302879515 seconds)
  done (took 4.350826471 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.267424159 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.251800632 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.251146964 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.257896316 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.246821828 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.245127901 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.298700613 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.254311952 seconds)
  done (took 11.306794489 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.242221598 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.241758566 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.248788416 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.25223326 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.250081636 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.257805368 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.254314114 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.249366949 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.252078545 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.256037905 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.25505689 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.251929428 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.257482182 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.252562982 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.253016049 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.248902411 seconds)
  done (took 21.252706321 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.239653195 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.252695211 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.245000492 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.242943061 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.245273945 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.246396881 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.246639847 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.256962177 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.239418376 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.247583465 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.249233327 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.248336542 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.247577431 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.246974095 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.246773782 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.241936399 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.247614004 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.246911025 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.245088027 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.239992598 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.244706808 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.232648269 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.240570586 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.241615805 seconds)
  done (took 31.114584274 seconds)
done (took 69.273813071 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.097214073 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.375017827 seconds)
  done (took 7.696533083 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.249487264 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.253052611 seconds)
  done (took 3.847234743 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.25892917 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.254574786 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.2529555 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.25054551 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.251617855 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.241121616 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.246036531 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.23894989 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.242171636 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.246078576 seconds)
  done (took 13.729688526 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.246800303 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.241616717 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.243323124 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.237328489 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.241374654 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.25074071 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.242675733 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.24378291 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.250931892 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.245459524 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.240091374 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.437769002 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.244203249 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.473170941 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.247365836 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.248770433 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.244296428 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.242182012 seconds)
  done (took 24.048985891 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.241592048 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.239381979 seconds)
  done (took 3.707142997 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.239114509 seconds)
    (2/7) benchmarking "second"...
    done (took 1.243800838 seconds)
    (3/7) benchmarking "month"...
    done (took 1.246486832 seconds)
    (4/7) benchmarking "year"...
    done (took 1.24282071 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.243640674 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.245354794 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.246827168 seconds)
  done (took 9.932051671 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.68754434 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.41379571 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.460648434 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.711940222 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.891776543 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.189771391 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.902524653 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.193894316 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.072685954 seconds)
  done (took 17.756467335 seconds)
done (took 81.946327246 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.018354192 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.23965464 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.900335645 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.344824692 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.325963805 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.607218903 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.256667206 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.772444387 seconds)
done (took 38.72560131 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.526959695 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.244632451 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.290457116 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.277877976 seconds)
  done (took 20.055657735 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.228329209 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.850021807 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.271213177 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.239183003 seconds)
  done (took 19.91338157 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.746627044 seconds)
    (2/2) benchmarking "read"...
    done (took 1.776535932 seconds)
  done (took 4.761508385 seconds)
done (took 52.494805044 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.243451437 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.245036158 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.254160423 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.250887695 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.245200465 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.25314346 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.248317944 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.248993831 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.253892798 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.252330548 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.251360198 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.258426131 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.251867149 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.256631007 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.263935381 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.260915225 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.2604197 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.258457088 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.262294875 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.251699596 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.255873925 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.252235022 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.252733575 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.251394252 seconds)
  done (took 31.320066071 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.317914949 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.309001408 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.320057041 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.313658818 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.350441514 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.311923635 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.314993132 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.291216508 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.317835062 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.300451341 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.289087257 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.339570724 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.286689342 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.340080347 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.287162377 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.340006523 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.322026539 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.29238058 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.288128747 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.340733442 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.30119599 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.288959209 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.3462506 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.283882309 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.337809981 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.285590271 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.301512698 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.310751564 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.27666115 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.331135762 seconds)
  done (took 40.571008613 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.283763367 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.251675108 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.246135313 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.334222553 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.248388445 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.249501111 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.251149212 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.244508087 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.249059838 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.253210258 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.244199806 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.239522794 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.243836239 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.244208444 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.247954916 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.243552314 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.282083111 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.421120148 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.242540027 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.249504553 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.295401162 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.245767905 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.249382777 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.252958674 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.247982829 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.247136098 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.249948208 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.241366107 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.252076954 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.249402803 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.240868275 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.292494323 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.285094604 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.246318702 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.368944863 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.300443745 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.2408253 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.277428987 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.244108706 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.241456056 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.23988141 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.237133465 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.244632447 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.244965802 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.309995023 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.246070114 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.243489387 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.243817418 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.240817154 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.243094279 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.245130834 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.24905496 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.265229879 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.253116952 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.256631864 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.256647579 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.247084544 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.249940072 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.249031679 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.243355195 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.248481824 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.321085209 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.24161654 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.243848896 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.617462254 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.247925723 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.309980682 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.247913855 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.244295866 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.462397616 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.24619371 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.45157339 seconds)
  done (took 92.665406955 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.242804378 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.251436043 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.322135162 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.325403018 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.239661047 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.242561908 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.244888187 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.239541085 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.902300058 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.24478169 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.251202241 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.247595015 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.920473026 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.244805375 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.246738938 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.325932222 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.2433895 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.244849822 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.245626848 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.248589509 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.243736255 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.249154764 seconds)
  done (took 30.203126448 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.285855481 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.262788775 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.301547578 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.276000654 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.268927672 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.266647331 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.289028561 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.265819075 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.291601204 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.282050506 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.290349165 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.293255607 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.271861497 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.289918497 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.284297543 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.328064091 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.289750932 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.328984011 seconds)
  done (took 24.398335233 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.422137742 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.410621342 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.332096116 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.293095788 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.51086134 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.483756978 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.345792177 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.421975879 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.286487957 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.409489592 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.41529625 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.287300653 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.477716007 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.291073025 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.282012927 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.501383449 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.3273316 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.285544746 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.350183582 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.343958997 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.422965252 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.355790543 seconds)
  done (took 31.484387583 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.280260447 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.300683962 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.32875441 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.329311611 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.248854301 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.258198235 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.322574697 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.291271469 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.271487126 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.299535836 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.291427435 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.250622494 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.346799061 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.314251708 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.335074881 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.285908587 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.30144618 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.307661281 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.284097461 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.248749191 seconds)
  done (took 27.129894828 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.244141258 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.246991201 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.247227258 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.243409889 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.250839654 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.248676993 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.249717775 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.244249593 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.246692727 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.513072239 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.242542869 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.242480476 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.241905471 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.244889783 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.243186245 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.243115389 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.245027496 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.24936399 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.238715076 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.247235483 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.517576426 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.24256418 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.243707888 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.243257691 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.245463694 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.252082262 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.242556969 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.248280885 seconds)
  done (took 36.637262915 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.315843534 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.258661868 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.260165142 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.260831174 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.256463753 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.331233962 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.250803472 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.254972967 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.246967152 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.252858726 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.250082866 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.248245502 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.245984437 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.314730914 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.252083523 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.254338136 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.342265343 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.247415443 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.31509383 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.232514842 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.245151616 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.347512619 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.240959221 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.249515473 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.238124602 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.245759567 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.243630455 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.245233293 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.24615792 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.247824362 seconds)
  done (took 57.180957945 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.27293895 seconds)
    (2/2) benchmarking "in"...
    done (took 1.268916592 seconds)
  done (took 3.773483875 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.255525898 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.359106923 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.259947768 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.459935386 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.424151634 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.432389309 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.419982758 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.342388956 seconds)
  done (took 12.191767731 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.245771698 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.684564717 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.259946309 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.247578406 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.24744383 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.760531306 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.216684164 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.143170872 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.050294838 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.268406019 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.350425833 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.818595455 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.217861975 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.573875796 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.368498496 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.102419066 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.501050434 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.85397019 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.356072063 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.379994453 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 4.019202951 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.352961964 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.245339805 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.250141383 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.250738055 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.180775842 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 4.17335026 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.679844234 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.441768274 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.380241405 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 4.064168826 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.328384077 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.242129144 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.503357297 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.358984229 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.243518985 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.453269291 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.35718096 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.241823311 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.246642185 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 5.095515017 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.998416373 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.53658852 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.529848477 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.338160433 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.24873627 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.238292528 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.250988489 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.527177098 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.916913929 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.231018889 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.247589186 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.387576353 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.239418282 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 5.041812824 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.262094105 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.256270166 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.194990067 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.921656441 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.564175195 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.665809892 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.41991119 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.318510818 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.387052303 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.25682151 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.477561596 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.084375385 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 4.10999925 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.031081559 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.370496772 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.848508432 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.26732979 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.254598003 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.252929376 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.230550074 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.565151418 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.250144016 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.246647298 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.246947799 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.251348806 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.513218653 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.37197811 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.108731373 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.391697448 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.460602633 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.743065325 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.378079531 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.245244912 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.950198028 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.137256225 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.360862127 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.991419426 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.483723341 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.403302422 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.328173986 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.538498765 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.29358842 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.255313991 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.121126197 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.929203679 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.25347914 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.25517142 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.634472768 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.297464541 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.255953796 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.250681774 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.984642282 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.382288031 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.411800895 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.293072185 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.248446577 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.24326718 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.879661184 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.364338363 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.264155662 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.78358724 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.238443849 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.827431586 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.56778033 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.487633971 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.656912959 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.321432178 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.552429715 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 3.09369418 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.252404626 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.827101454 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.148866036 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.84841285 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.53820181 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.374958633 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 5.184528288 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.31047427 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.239480087 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.422055057 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.324412796 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.244954219 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.249095984 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.255401379 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.24997538 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.24919465 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.399156741 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.656178054 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 5.129721805 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.249978187 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.507649225 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.373368334 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 5.190427015 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.524881659 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.973625403 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.396213469 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.249659019 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 5.044024626 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.569213506 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.004430546 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.371880802 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.250909729 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.241485544 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.12428007 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.29720846 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.347934922 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.244909737 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.892462579 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.370002708 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.257412474 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.249218995 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.738651419 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.395926367 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.26450126 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.38475223 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.085362832 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.211600262 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.259291804 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.583080296 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.37118902 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.248170236 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.249919286 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.252120812 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.063541851 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.93699328 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.455194461 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.924246724 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 6.067990086 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.346948263 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.446251881 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.34357504 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.543008546 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.513008916 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.394321139 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.254280124 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.247947444 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.249768987 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.791763802 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.142031638 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.343179977 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.145308043 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.287385087 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.243932287 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.348989512 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.079758291 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.250689175 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.98538174 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.266139695 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.355236673 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.247373147 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.246791302 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.415939287 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.450781423 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.38163769 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.846554664 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.255094204 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.248098415 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.944517157 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.383474834 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.958466649 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.371379333 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.098999027 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.372944642 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.37747673 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.436540939 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.982522984 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.374607204 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.250129487 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 5.023275536 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.399510681 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.245857262 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.355445789 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.984874235 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.066760918 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.016609273 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.937640031 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.227401535 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.816355734 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.539784147 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.388877801 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.12743245 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.355525741 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.536204966 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.316870068 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.803486606 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.268982874 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.030956592 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.265534989 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 5.075555717 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.25092732 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.276563182 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.374001402 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.749784324 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.371545275 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.249785446 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.488774544 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.350406526 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.955589279 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.383896582 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.401425059 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.624585633 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.197748718 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.356897761 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.533036071 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.318196563 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.242332617 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.241642544 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.629126243 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.213437391 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.285185527 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.364901299 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.077137631 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.45537878 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.547145293 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.396402 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.255929088 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.25249207 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.443701227 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.337381812 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.253041496 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.654908809 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.241830008 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.321560226 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.349883997 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.24550467 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.238556094 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.510414115 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.454437744 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.613714172 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.759995424 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.857393697 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.098858256 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.388119399 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.983693572 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.389658764 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.972835738 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.370902532 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.260130395 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.957884152 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.379966243 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.555170725 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.391709778 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.381076248 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.964168289 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.379756396 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.557188526 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.442504398 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.381091065 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.076270166 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.822651879 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.534465299 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.730642338 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.297098907 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.823626857 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.370981126 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.867906184 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.252940155 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.985092672 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.388912626 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.316911824 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.260631173 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.252024209 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.824341492 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.236946617 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.259044828 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.068719269 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.002736523 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.179931332 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.019534294 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.367302095 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.259631667 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.251768853 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.255207589 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.195178595 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.412089267 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.658808255 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.394055224 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.24451455 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.248332735 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.245744608 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.663557109 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.136394416 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.186547817 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.255972698 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.395715398 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.250101213 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.248043653 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.253487646 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.255456821 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.251627569 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.249088926 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.801441966 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.257106393 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.896548413 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.373002086 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.264742621 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.510917866 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.323998905 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.261926244 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.499418167 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.356290892 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.407485376 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.33187167 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.249525128 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.676611498 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.396073815 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.248715554 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.598992932 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.588631946 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.521166326 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.877139094 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.31008354 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.700973252 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.59879027 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 3.037682025 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.255717476 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.183256209 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.35891115 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 4.103138479 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.266690685 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.739708672 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.915109743 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.263095844 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.555010035 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.181592362 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.676384987 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.434860399 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.321908585 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.252443147 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.247187851 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.348961722 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.513414382 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.29888456 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.537911811 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.48016283 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.259819356 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.623673621 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.352106136 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.516859357 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.282033566 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.263324287 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.249616725 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.249683159 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.758241698 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.189418598 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.349718408 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.259124281 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.19225723 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 4.18847248 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.192990394 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.952037236 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.184623803 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.395602604 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.245714152 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.464987968 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.308737581 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 5.12401588 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.272395703 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.060182021 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.599200947 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.307773148 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.496012248 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.67589208 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 5.009175467 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.67777257 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.370143141 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.253856745 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.65507954 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.275467177 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.40363671 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.184766723 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.637641378 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.86352669 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.748645701 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.533421069 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.36866696 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.174175636 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.86276979 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.253396216 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.251171752 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.112010837 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.395484121 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.611663504 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.240115298 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.54042951 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.389008859 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.907684302 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.986186819 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.396372647 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.914466097 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.403852424 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.24831223 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 5.1035637 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.189331591 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.469537739 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.372527562 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.254529401 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.263439648 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.965743089 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.866180642 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.507389558 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.330826978 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.25806865 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 5.164371034 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.980478341 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.367312073 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.260105806 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.253936304 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.787585698 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.303498237 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.24779063 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.675793399 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.868260496 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.403788447 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.808352473 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.414380376 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.400678893 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.545025776 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.699187764 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.481431056 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.318897292 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.257444824 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.251187123 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.256697738 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.873294697 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.266823386 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.255166111 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.87430868 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.397022532 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.041129636 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.204679269 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.538027336 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.331212116 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.675952717 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.402233664 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.79827483 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.162729431 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.358719061 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.56526466 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.320865638 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.401082629 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.049109684 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.364706618 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.256602248 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.235170117 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.642676157 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.648339218 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.685492552 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.606992859 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.34603971 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.982407695 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.369723978 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 5.074078296 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.264090692 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.251884357 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.785447929 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.42805835 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.724530874 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.417098254 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.740761347 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.378601465 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.621212221 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.541553175 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.353334642 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.251922856 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.253256779 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.287492736 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.316033492 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.854643578 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.170208867 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.754564384 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.388121348 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.133630146 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.840436138 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.990459561 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.62348994 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.646503194 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.60042789 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.288987817 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.250688573 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.684163924 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.339701691 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.445634352 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.349446194 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 4.091733796 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.330430006 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.24821457 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.887766338 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.266510005 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.258001529 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.250724944 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.183441749 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 5.06968288 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.358147414 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.499654648 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.357910336 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.254627465 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.875966829 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.553581951 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.281616302 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.251662621 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.250778159 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.171574664 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.375220507 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.259636075 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.634145279 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.4118638 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.580773484 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.120972184 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.728292095 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.343033329 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.254194287 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.245605691 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.977474113 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.883927791 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.278669986 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.619722346 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.288060353 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.799615789 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.228141865 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.7343748 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.809860584 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.298986891 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.387700068 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.2510019 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.341528965 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.236589695 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.187440293 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.036411163 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.739027492 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.35012596 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 4.106863925 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.300137153 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.318103286 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.475102202 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.325318109 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.245750021 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.25125215 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.252997761 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.789447201 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.248764273 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.257309695 seconds)
  done (took 1531.557871107 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.543285679 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.25266559 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.251477731 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.24496875 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.251862842 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.255952931 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.252973973 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.250891746 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.25107252 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.254819112 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.255027146 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.251038144 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.246918607 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.550374307 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.259984699 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.261620253 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.260324994 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.264907196 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.256710721 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.257534008 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.25991426 seconds)
  done (took 28.175253683 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.258678171 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.26192377 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.257183521 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.254801967 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.255034766 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.252386849 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.24955425 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.252404241 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.25069232 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.249392384 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.252377024 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.248014775 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.248510997 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.248390976 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.244581375 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.249728945 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.2486409 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.249763716 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.249743499 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.249671062 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.245922873 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.24809929 seconds)
  done (took 28.771535722 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.256411328 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.250907288 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.997616607 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.380863418 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.250625412 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.247470755 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.240669973 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.469854309 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.293978257 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.166033383 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.706449506 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.312472066 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.271828437 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.463156915 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.352198353 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.254768172 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.382635997 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.258359397 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.252888454 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.260253288 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.255873796 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.555581377 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.405228154 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.256135713 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.093667202 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.403862653 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.258336486 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.249404622 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.251316031 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.240864927 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.3517935 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.258116057 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.144059923 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 4.064442388 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.608203365 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.175183518 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.365707239 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.254596506 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.255418792 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.25154183 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.496372653 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 3.04127625 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.279668575 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.272787089 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.636175409 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.377854406 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.252360057 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.641701874 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.301491991 seconds)
  done (took 96.3083378 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.258894176 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.372952095 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.300932889 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.24740694 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.378898461 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.261016636 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.318710768 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.251914994 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.258302786 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.260353754 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.393713032 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.419207898 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.257694275 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.256886308 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.317984911 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.240338228 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.247367601 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.248901828 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.25223027 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.250074951 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.253593614 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.300097683 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.366218026 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.411964495 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.253179488 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.251295305 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.248161149 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.250535809 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.405801357 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.253902438 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.255019435 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.251726017 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.390246811 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.330224758 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.26549806 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.261185157 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.391669093 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.259676703 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.255872762 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.255954263 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.253488524 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.256879851 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.303620278 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.388641009 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.254880491 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.361822686 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.250996853 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.257658863 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.407409927 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.251522346 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.251389805 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.415407558 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.257528369 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.252133793 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.255820712 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.380530657 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.255738377 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.257673313 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.260653542 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.407198566 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.259357263 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.250425846 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.407240311 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.252867215 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.250947522 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.425210843 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.357479471 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.253642111 seconds)
  done (took 89.378149138 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.259251076 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.392475572 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.433321898 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.428163658 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.398962408 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.370079423 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.398595927 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.392084673 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.394298172 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.394441092 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.394222058 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.358726392 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.368738831 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.359771609 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.401957411 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.375236256 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.380811747 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.378346727 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.3960992 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.396346666 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.369028214 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.429716492 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.383909834 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.436638037 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.629091934 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.361244319 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.385084472 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.386993653 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.432667252 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.38980982 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.627332855 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.398306902 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.391559841 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.432349689 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.625206056 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.382039342 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.245444884 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.377879405 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.388031805 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.38564217 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.354437222 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.423176157 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.384065636 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.359941196 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.376328072 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.38305484 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.428002051 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.616108358 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.347097968 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.393786364 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.388045011 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.433095043 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.386325473 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.372371828 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.439083518 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.36065315 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.430350258 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.429092622 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.389347183 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.426639858 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.425263976 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.345552433 seconds)
  done (took 88.264804463 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.250471945 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.249891165 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.33907545 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.257337219 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.244265686 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.338552572 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.25522281 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.253557548 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.247583803 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.248898108 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.249969796 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.334777988 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.612088506 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.251206768 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.341227108 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.606854683 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.333113841 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.32945932 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.249155962 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.335081184 seconds)
  done (took 29.566615546 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.249996423 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.250389391 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.256551198 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.409761168 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.256259054 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.395649276 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.257937644 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.258079076 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.260371924 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.255510945 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.254876298 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.263545246 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.258801659 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.416983249 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.261499051 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.405884399 seconds)
  done (took 21.946681368 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.263044067 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.262828159 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.258129024 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.251950126 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.257352909 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.262163672 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.255473235 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.263071257 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.259402092 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.711071434 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.252715681 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.255359331 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.260962305 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.261564629 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.2589045 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.258221053 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.260337366 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.259777608 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.266241393 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.261783249 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.840806158 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.262793395 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.259833751 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.255741966 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.253293869 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.842172084 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.257900912 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.258833744 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.253164384 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.263418072 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.258506217 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.738374477 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.263172715 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.264732439 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.264414871 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.264019152 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.255738851 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.255490106 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.254517645 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.253832131 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.261648459 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.260856893 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.258677029 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.263456887 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.269350712 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.272747005 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.272410555 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.72631821 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.269819595 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.26246162 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.266431493 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.270432936 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.261366748 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.748239653 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.258004829 seconds)
  done (took 73.641284311 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.302488574 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.324435003 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.259521472 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.256928835 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.318737064 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.299496311 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.30419013 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.280858822 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.310848659 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.259712808 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.317468908 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.277898352 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.29977052 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.308379838 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.32521061 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.30540969 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.25385461 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.335983309 seconds)
  done (took 24.593209464 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.255868189 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.255716152 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.261791302 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.26098379 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.268985872 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.260261744 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.263878977 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.25255525 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.254425628 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.25488716 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.25176658 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.252010461 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.261673354 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.26885372 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.276426514 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.268516735 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.267060903 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.261449438 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.258353686 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.261156937 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.258832241 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.262361229 seconds)
  done (took 28.978911896 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.294412066 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.298850742 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.25365628 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.255674072 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.254192754 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.283343876 seconds)
  done (took 8.882862134 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.313240584 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.315201842 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.293578869 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.305738245 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.315538306 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.335272515 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.33046104 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.337766125 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.314028643 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.56596271 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.337745377 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.332784021 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.324996892 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.383955739 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.312565744 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.32579089 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.343143387 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.337899995 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.297616196 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.336111253 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.345407505 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.31869369 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.350811512 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.336571983 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.34735107 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.378541679 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.316517974 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.571676709 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.335578232 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.326993606 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.326896018 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.362393528 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.33378389 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.572127134 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.298871262 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.324863022 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.338443918 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.338215466 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.317533046 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.379991524 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.293420819 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.313044216 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.326104035 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.347630046 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.318060052 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.336883164 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.34860746 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.349319901 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.35220023 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.564400828 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.326536602 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.377433347 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.321131533 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.329338376 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.319980841 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.550785497 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.569246913 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.374471058 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.316764508 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.561175965 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.386008782 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.313168566 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.376110655 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.567236562 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.311284986 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.37999802 seconds)
  done (took 91.172588245 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.382277727 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.298521121 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.339351262 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.570637 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.378565571 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.343029785 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.357405585 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.347800524 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.340810977 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.322671294 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.342559881 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.338916086 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.383759331 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.388369505 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.346431311 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.331829481 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.344832391 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.385073594 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.311835241 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.563940706 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.344340227 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.37967841 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.387673828 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.381517609 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.557319274 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.320763074 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.346992252 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.347113086 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.337118078 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.340535923 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.344799903 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.346720988 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.37668667 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.288255827 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.378669701 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.334976719 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.331792711 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.337675832 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.333904519 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.312852142 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.372525341 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.328772458 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.329989348 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.325990918 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.56778937 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.326732032 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.329852574 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.309903121 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.337040572 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.316380246 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.577506021 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.566393269 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.57841132 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.383692806 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.336521882 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.330230715 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.338618103 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.335589357 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.332767745 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.320315438 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.373846445 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.328978369 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.635010112 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.338568178 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.342102305 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.376101652 seconds)
  done (took 91.826832788 seconds)
done (took 2621.859986913 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.254369431 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.268782809 seconds)
  done (took 13.76078738 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.252832755 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.251819325 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.40454686 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.257662566 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.242984245 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.383221808 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.262492376 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.259323406 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.263226014 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.349480286 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.257474053 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.391262561 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.367325831 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.260232045 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.277896536 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.255473346 seconds)
  done (took 41.975683969 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.412451418 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.788840657 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.200976602 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 3.02667185 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.280638898 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.119494344 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.599474691 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 6.02352187 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.558798183 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.706309187 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.515220867 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 5.153927036 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 6.19052032 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.479833462 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.779463245 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.841789839 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.94421559 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.008456604 seconds)
  done (took 63.877128193 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.232923421 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.395868442 seconds)
  done (took 8.883454554 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.2669013 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.282702483 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.264852048 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.257557077 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.244136286 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.252686056 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.275877505 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.273637336 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.287705251 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.277031014 seconds)
  done (took 63.930194298 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.400037544 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.862706417 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.69460249 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.844651665 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.933962411 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.733083902 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.426894046 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.63626838 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.347759838 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.248751137 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.466796425 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.738635909 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.100950547 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.607981287 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.879096995 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.687526571 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.88608691 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.648708081 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.564996893 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.769411699 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.448815309 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.367239475 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.671336873 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.133170393 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.245588108 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.91677943 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.370916466 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.383499346 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.344224796 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.434004774 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.579884115 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.262530573 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.592865424 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.248838931 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.439820163 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.76484601 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.903912466 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.443788923 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.609859542 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.582910373 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.638723607 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.937066608 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.314331483 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.922144302 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.418760411 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.644647517 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.310573199 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.472476095 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.333084193 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.373001058 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.907579487 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.429330363 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.382594219 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.369101218 seconds)
  done (took 162.916243944 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.239214717 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.642225357 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.422721362 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.241193398 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.630209116 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.450198698 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.012903483 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.775306252 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.255800249 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.450433284 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.423764243 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.374957504 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.23609518 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.251453637 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.243866506 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.23511502 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.430571597 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.794512749 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.249334069 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.237767644 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.45668951 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.49124562 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.377717127 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.242123732 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.417184606 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.500197778 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.664834113 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.372515087 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.643977747 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.245547887 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.711489822 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.258284837 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.24522176 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.147118865 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.648780667 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.597512869 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.679908161 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.24860676 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.055979778 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.242545332 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.905046064 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.445621632 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.583329143 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.395291744 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.402959176 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.48260233 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.841422355 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.243436609 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.015216393 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.427463018 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.467072314 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.470637714 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.524321205 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.247992866 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.816786724 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.238721738 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.250266826 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.530748315 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.398515549 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.372232175 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.240990705 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.231588636 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.232593347 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.490560212 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.253439251 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.355939325 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.246934906 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.240473156 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.365702706 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.380183051 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.392448835 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.494998456 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.50052552 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.198645741 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.614213566 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.491045327 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.675504377 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.508677452 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.237934645 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.243502675 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.699421433 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.690493844 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.410852489 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.492335249 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.563038203 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.554160061 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.825747668 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.252823473 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.477866838 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.419482515 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.587461557 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.398407305 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.622618388 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.16175301 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.228353994 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.241032077 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.541752871 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.377400928 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.235280808 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.773940508 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.517626351 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.855816712 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.414333316 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.701553471 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.348804493 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.238188395 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.804514647 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.244047502 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.470394822 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.538241848 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.251051109 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.235073917 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.389938128 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.190041955 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.237688967 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.308029711 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.671297304 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.247154871 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.400287368 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.245616991 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.503181216 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.13651483 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.488273482 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.247689667 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.529704608 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.432866379 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.405354922 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.244798705 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.584290135 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.511109759 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.651120228 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.483656048 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.019831648 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.240619668 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.56239191 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.245990037 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.245438485 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.424681466 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.155908941 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.426575711 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.258041702 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.612769881 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.414635496 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.651679535 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.244220453 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.489591603 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.494903158 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.662153297 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.234259314 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.377511637 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.243705957 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.198467229 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.403709451 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.224493475 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.234779837 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.138790907 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.229487914 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.397687299 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.476768813 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.960373361 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.678712893 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.599765396 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.235909079 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.707451808 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.438465606 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.686806067 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.78519014 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.421695449 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.240507702 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.231578846 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.236839882 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.480805359 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.423724164 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.234324089 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.248666479 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.984759256 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.355525492 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.237689091 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.427636726 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.92428285 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.658946759 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.459946369 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.245893795 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.613334975 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.23718636 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.428965903 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.761293647 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.487996568 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.244771392 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.24818043 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.245224555 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.246738622 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.460755623 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.490201429 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.810689258 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.389843707 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.55241092 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.471127257 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.566952854 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.714444105 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.244280192 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.504271279 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.237950411 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.688127595 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.24571758 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.461717565 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.509537045 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.250310375 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.560259058 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.606909487 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.328060029 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.65788632 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.251765843 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.238879764 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.245535965 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.420282195 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.704865179 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.236823491 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.424964189 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.615974976 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.368643298 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.435548485 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.466095754 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.243933705 seconds)
  done (took 759.76602568 seconds)
done (took 1116.350405628 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.241114695 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.239638262 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.228836929 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.240717369 seconds)
  done (took 26.190130488 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.219273632 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.311504584 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.420136183 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.250219119 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.596224567 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.29084084 seconds)
  done (took 12.324175712 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 4.835015586 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.22968376 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.230482363 seconds)
  done (took 18.521088517 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.525240758 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.720407826 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.435669508 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.356390538 seconds)
  done (took 7.270165482 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.255257287 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.255269677 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.255996231 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.253690845 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.252509041 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.250760708 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.25594823 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.248276343 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.251107867 seconds)
  done (took 12.530985537 seconds)
  (6/6) benchmarking "26942"...
  done (took 5.007129691 seconds)
done (took 83.088004017 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.654792874 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.550454095 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.241947788 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.557977179 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.378308664 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.564400601 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.360660473 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.259426771 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.553413627 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.662934073 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.787884296 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.305713103 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.586178127 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.702574504 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.483970791 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.279262734 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.267501344 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.314466318 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.764876255 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.459246231 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 6.254682352 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.379598694 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.992435979 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.273280642 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.126173373 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.361032435 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.494541436 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.319605867 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.446246284 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.258787047 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.33944175 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.762680397 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.363461543 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.534669991 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.334468656 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.06887164 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.695568055 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.242741924 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.538365881 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.809221222 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.531465944 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.379073336 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.238590467 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.416221986 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.665349595 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.260050003 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.153775806 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.402794073 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.741631294 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.431078271 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.580240171 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.250296367 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.873247804 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.313089533 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.331490965 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.233849575 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.28149618 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.705109052 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.400289617 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.552146052 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.250779539 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.229899461 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.289361505 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.27998437 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.628055683 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.556508326 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.685143985 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.340494824 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.749877478 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.276947738 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.276750876 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.287715617 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.941290098 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.379862638 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.245011492 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.386240308 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.496671084 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.354821611 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.242513508 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.604024785 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.469836293 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.235624791 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.374657369 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.554737533 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.397765542 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.589788857 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.761168255 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.625123928 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.769407031 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.3412662 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 8.015142079 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.346597127 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.343211213 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.255066642 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.239905877 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 8.020758443 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.290726303 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.752671614 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.372290376 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.970703231 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.262557343 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.272556153 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.648593115 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.612072934 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 2.036213981 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.284315049 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.382639809 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.236735185 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.530636171 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.184563987 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.34285698 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.843228378 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.246512006 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.296926985 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.792251219 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.243105398 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.543888986 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.66140654 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.375903207 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.233442739 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.533647265 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.262610633 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.375132878 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.788849573 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.62648947 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.471505257 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.247626167 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.41061531 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.244716066 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.459345077 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.246887927 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.811330728 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.768789044 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.273591188 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.499185045 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.372256914 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.233106767 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.537103752 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.295105334 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.367513015 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.537658509 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.552583 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.373674116 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.235661593 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.601932271 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.248154673 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.483960629 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.574116264 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.409109275 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.547486001 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.339577658 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.26679015 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.182324395 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.68588938 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.824424822 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.987375549 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.510485281 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.379284992 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.772695055 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.567636623 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 2.055806536 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.348637879 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.298090935 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.239228402 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.256377054 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.306309379 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.231486895 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.235316482 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.544423673 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.477783526 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.924659218 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.03868751 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 5.835778847 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.50304932 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.403825503 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.164453237 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.838157441 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.246352911 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.606663044 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.731033745 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.365741444 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.265204744 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.241253091 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.284984178 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.948489569 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.277969331 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.614773256 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.689207206 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.534309612 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.688197523 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.387926372 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.278267992 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.633284997 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.513617866 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.51026739 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.476753813 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.84616676 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.366990167 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.608813173 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.295859015 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.500662723 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.24153336 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.160755806 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.471410009 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.721590527 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.572219921 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.480972838 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.410662122 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.586605119 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.240742681 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.729199697 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.340624737 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.625166541 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.28234256 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.747846443 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.34814978 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.550820457 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.270494627 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.37045149 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.52257045 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.366977997 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.321563307 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.753566943 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.263805191 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.583291263 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.405597449 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.412892627 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.449792064 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.279828925 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.426703776 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.419856502 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.375837744 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.513035137 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.125047448 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.673942879 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 8.085324486 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.376341749 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.242567987 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.590728271 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.278245645 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.265548142 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.591297188 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.455379033 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.563062199 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.351032754 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.403888975 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.320458467 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.27809561 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.827216617 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.09791487 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.820917542 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.381735858 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.276264688 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.240726255 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.657654566 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.654168876 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.303337618 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.368000482 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.830796831 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.265672107 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.45489712 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.232516176 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.240642713 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.960755524 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.382123333 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.493721812 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.8869781 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.253083943 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.300147805 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.252715424 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.771160776 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.767749469 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.293077161 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.381395593 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.773047786 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.244264877 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.637338145 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.265213392 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.398907564 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.567720902 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.355224855 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.356638199 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.2351422 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.277415969 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.758642742 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.477065786 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.774569713 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.28084207 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.623289931 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.501286355 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.477324459 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.273282318 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.337084081 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.703683089 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.378541578 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.694202518 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.254886925 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.392766734 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.499987156 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.264323793 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.269630623 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.373277405 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 8.085143988 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.866050652 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.585602011 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.442982027 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.169231142 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.482642467 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.244313577 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.541823148 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.373963827 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.329485284 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.825963561 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.758752992 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.238640095 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.468080157 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.242771976 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.607991334 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.268271511 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.268891308 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.405102858 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.344451164 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.23992647 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.547293279 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.39362097 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.769017051 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.334977332 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.083194063 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.256370044 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.178930735 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.367440308 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.558320828 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 6.019308889 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.251058093 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.389738768 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.929249245 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.363419793 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.273811948 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.493613927 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.246575042 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.838648295 seconds)
  done (took 916.878707564 seconds)
done (took 918.279650126 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.280891423 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.622351241 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.437664297 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.104716196 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.064382171 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.889849296 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.469149385 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.480593098 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.317510868 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.469010646 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.165471156 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.059511489 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.355149258 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.374275155 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.331875603 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.360909837 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.439401731 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.482084468 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.354882277 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.07060294 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.609442503 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.072002761 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.669560551 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.541533214 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.618259503 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.349313717 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.305350455 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.600584517 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.604653591 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.434720269 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.465574129 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.446677784 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.09277405 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.489219232 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.32232658 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.328771513 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.091391077 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.344121886 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.270350441 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.321733342 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.616369585 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.36303763 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.956031182 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.120414662 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.025545207 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.664675411 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.092662823 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.350702715 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.351635136 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.425109874 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.277157236 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.275449621 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.61111027 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.461951227 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.092886114 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.091696482 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.597330495 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.084656114 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.968871983 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.418560623 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.621296948 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.34446819 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.419905798 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.478261992 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.365012152 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.541341001 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.66244547 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.276973714 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.439163678 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.467227438 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.489917371 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.467531461 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.362069419 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.387299705 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.367817558 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.460659317 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.869365847 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.449243283 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.032831439 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.346181842 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.207326084 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.166830863 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.206102806 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.329238984 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.291531808 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.029631196 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.06945669 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.203800055 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.369334055 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.455820698 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.164124625 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.446784771 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.701397067 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.303250862 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.293902262 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.445215576 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.078194265 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.269253026 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.428904876 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.453853645 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.035651119 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.312084168 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.282565876 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.320553733 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.34388425 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.265865439 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.295004143 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.66140433 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.469941669 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.408624044 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.615593853 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.363175513 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.473045812 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.36342482 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.32916844 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.023852363 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.538738649 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.101403289 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.272065636 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.930753996 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.515775624 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.324721694 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.626320116 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.543632795 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.291751555 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.345419694 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.352171592 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.194584566 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.345497191 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.342022508 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.439187923 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.692122175 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.420771857 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.146033216 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.469968536 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.927510513 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.477995392 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.468118615 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.322775812 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.125893917 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.344980655 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.403211522 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.541082416 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.616750028 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.491330458 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.542138629 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.363350304 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.510937602 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.261767376 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.371727298 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.469816528 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.379749045 seconds)
done (took 262.043371743 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.601358087 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.359847031 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.529736524 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.476930895 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.629806778 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.527190681 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.326456372 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.697603046 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.301973491 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.668649112 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.440751467 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.137644164 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.377938479 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.477213965 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.597056936 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.471414802 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.305108197 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.494944596 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.719055997 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.645707926 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.000862808 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.452969689 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.398692137 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.638462484 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.238820076 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.988119195 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.564253355 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.37992445 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.527752312 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.00743674 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.038739104 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.513815892 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.552030118 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.970742787 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.654341902 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.964499809 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.561598344 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 3.039419496 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.503166716 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.596025813 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.4452791 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.071971131 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.012011698 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.006742464 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.35198948 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.517420893 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.312700052 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 5.118682848 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.237072142 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.987479414 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.514329953 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 3.062566954 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.146983766 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.518388286 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.471924433 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.879432966 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.639588643 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.613050067 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.638502525 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.546146506 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.518807915 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.673622602 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.613084988 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.372238329 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.005002673 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.53112835 seconds)
  done (took 155.433351375 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.689445483 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.543735031 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.656867615 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.661862722 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.813971874 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.650157662 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.74365461 seconds)
  done (took 14.995319908 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.308864157 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.298214375 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.538692545 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.546724334 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.309709889 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.437900793 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.393481981 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 3.011361473 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.514560038 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.34058873 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.62417873 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.539177015 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.925084755 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.02072076 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.375398619 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.526490665 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.271628831 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.364614532 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.357947585 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.559126735 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 3.004044785 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.976484861 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.452066573 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.275823772 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.300264079 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.332198761 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.29528553 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.265981777 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.29402949 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.288122263 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.298115588 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.417508841 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.294315394 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.001055699 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.283941223 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.631016093 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.303815929 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.314503409 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.439574209 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.249202408 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.284092845 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.299174966 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.438955495 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.309525884 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.275699102 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.481687107 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.28546074 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.315059191 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.284403618 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.300160078 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.48472777 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.290241379 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.277198172 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.923321283 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.501941357 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.985198719 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.364564187 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.292172982 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.28515562 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.349331966 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.295928916 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.554891288 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.538977755 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.278276506 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.539227993 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.587098756 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.298191324 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.284125619 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.285726916 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.519681059 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.293849126 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.538224532 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.293540123 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.345793606 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.300152651 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.436987889 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.504846934 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.112330264 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.07732385 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.953516585 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.624651943 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.283375816 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.627077003 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.242357921 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.938646845 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.282480376 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.30312285 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.951658954 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.209190327 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.305731348 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.61562196 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.287470338 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.357658191 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.348238072 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.277799485 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.355844533 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.516496376 seconds)
  done (took 164.990149131 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.528667294 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.860871295 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.506835274 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.328276668 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.434673009 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.641369546 seconds)
  done (took 16.542489103 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.680752232 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.059521058 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.327627196 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.325716467 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.358960734 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.262609749 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.253786593 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.521164447 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.492874839 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.290773115 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.243551562 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.242391971 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.247884431 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.453722605 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.250738496 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.304065171 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.252286788 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.321008081 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.304388814 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.362446767 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.591393775 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.351240523 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.361311719 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.168963339 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.329107829 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.293103778 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.008019634 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.30096033 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.301962292 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.637775099 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.474686186 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.246490223 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.120154617 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.699087858 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.963739258 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.166089292 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.460100894 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.259551484 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.310593648 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.260461711 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.264568748 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.369279669 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.324525815 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.249096749 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.693701177 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 3.118557297 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.33008794 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.562601982 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.253082671 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.257300732 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.248313437 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.318754692 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.244689789 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.251018509 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.911033832 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.769933354 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.226549551 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.245842898 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.349584676 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.175904715 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.391388172 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.239104667 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.641370077 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.216048697 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.94907713 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.247922738 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.186983606 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.459797279 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.368674464 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.325491257 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.266092829 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.335188468 seconds)
  done (took 126.945008644 seconds)
done (took 480.154171094 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.283239996 seconds)
  done (took 7.529041752 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.444817827 seconds)
  done (took 7.820616136 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.245304197 seconds)
  done (took 7.488155029 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.24413275 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.297173903 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.246099922 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.259198714 seconds)
  done (took 26.317542008 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.39425955 seconds)
  done (took 7.640084003 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.248788946 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.248977654 seconds)
  done (took 13.846590705 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.291823845 seconds)
  done (took 7.544968108 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.432044805 seconds)
  done (took 7.673051139 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.253484571 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.250894171 seconds)
  done (took 13.768206047 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.236608959 seconds)
  done (took 7.473631085 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.244550711 seconds)
  done (took 9.560489103 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.260068766 seconds)
  done (took 7.539122121 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.296051088 seconds)
  done (took 7.539878838 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.430693239 seconds)
  done (took 7.672065548 seconds)
done (took 140.668368109 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.230946855 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.240635911 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.241750188 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.237701647 seconds)
  done (took 26.185125562 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.569864698 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.578270544 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.548509002 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.626993892 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.519455578 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.525930274 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.58890554 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.590525852 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.536291819 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.628786335 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.580296494 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.619306475 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.734863456 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.567128136 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.558833872 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.732954805 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.654807163 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.592236451 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.528934108 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.562963646 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.733314003 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.723440968 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.013247841 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.001906224 seconds)
  done (took 40.551749628 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.457305943 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.611838641 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.409294986 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.564191109 seconds)
  done (took 7.288053016 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.278149699 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.624186262 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.602215179 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.668866818 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.603254372 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.421237815 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.607902675 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.429246791 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.424971402 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.421771271 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.8681817 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.398763362 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.413095132 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.670689744 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.427581369 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.263892375 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.259061331 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.439097983 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.634980031 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.460820278 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.518824157 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.612967097 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.612196403 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.607331428 seconds)
  done (took 37.498359516 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.022033199 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.173912872 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.603531162 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.164033766 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.961238045 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.046979713 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.532923713 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.749934963 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.517393007 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.492401977 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.990382392 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.993353607 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.396430977 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.145063935 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.026660394 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.435942287 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.433804631 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.101710534 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.673530277 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.556052473 seconds)
  done (took 41.258873338 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.247275369 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 6.251842448 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.501809497 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.423545939 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.247738467 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.245407632 seconds)
  done (took 29.166023387 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.590803509 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.373847042 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.526212197 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.49599075 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.398894527 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.360677723 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.791659212 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.455661631 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.004987595 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.949534157 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.796165471 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.659845635 seconds)
  done (took 23.643938257 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.241171284 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.277906348 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.248525161 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.468811397 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.615859993 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 4.021352266 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.261780462 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.247765244 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.817936651 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.512927958 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 3.400824327 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.482618228 seconds)
  done (took 46.844123779 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.45797212 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.417266819 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.594801692 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.287539752 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.756661944 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.338473056 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.608981781 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.687338163 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.099579473 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.149271861 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.776369738 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.303928263 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.803211133 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.219397144 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.239752722 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.551571895 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.081443565 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.752569583 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.692901374 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.324054757 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.211454423 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.407064885 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.24924416 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.908705686 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.572860629 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.244222936 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.478655386 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.502268965 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.251723371 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.517627926 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.248939426 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.808199811 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.442254387 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.550229098 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.767079812 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.322677508 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.334513049 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.244210268 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.800345339 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.539076732 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.392585902 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.409404181 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.498151823 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.256849119 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.521163036 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.045090638 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.254711522 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.907010084 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.251395892 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.371310892 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.144912433 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.495207104 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.579006837 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.965866155 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.388586229 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.543187848 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.410163257 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.23177748 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.532248237 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.286996866 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.425463659 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.309897358 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.47611425 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.238066164 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.492906048 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.581889091 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.498422685 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.567698088 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.546906379 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.540844866 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.592917489 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.369996201 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.073025797 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.379733759 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.790559586 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.159322239 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.64221164 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.24164516 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.968854792 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.818969916 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.240214142 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.358417954 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.964019364 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.205556454 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.240017912 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.418238587 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.115732759 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.213204291 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.335035865 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.304294541 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.639425237 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.382256561 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.402123036 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.438943587 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.9466443 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.269140521 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.234231059 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.546727465 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.219706223 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.812545105 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.24978545 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.2663274 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.240999653 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.845431639 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.667714474 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.283313773 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.024871518 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.899796984 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.542716004 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.847512432 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.411093945 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.092245023 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.592044558 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.571619755 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.235103015 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.943944529 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.250876898 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.313776098 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.604077991 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.254227378 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.215701387 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.65058818 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.441075327 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.237270412 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.507004584 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.234719529 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.383237906 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.233794586 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.84742025 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.223466543 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.481450191 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.771469074 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.352632652 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.338617436 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.239719336 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.390785758 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.774229457 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.33012866 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.553885519 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.688528676 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.483677178 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.842686721 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.247287995 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.073506118 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.7223856 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.505635989 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.581365581 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.925797207 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.413961546 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.338501895 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.23914185 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.443476522 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.250446388 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.824152972 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.281617083 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.973697626 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.976866716 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.492978509 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.232809973 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.407191737 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.241148593 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.501917971 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.960271063 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.278692088 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.400960268 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.507735704 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.406916493 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.234768957 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.225338745 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.630611151 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.518222705 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.763702101 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.502120529 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.953210115 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.563546212 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.730763596 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.459873925 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.604601347 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.000425164 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.680536005 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.598810066 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.29328602 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.20995002 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.795000817 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.31420718 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.659973532 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.466535679 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.024682586 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.661445458 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.604754546 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.288191936 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.248578201 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.223347591 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.393394547 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.738484361 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.299384717 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.832687783 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.339982915 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.425886449 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.528408179 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.275741646 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.928600068 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.090518322 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.630957544 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.592069207 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.576251407 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.253370324 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.061362736 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.67881613 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.683318966 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.379598578 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.53367677 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.284722075 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.301959067 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.233691697 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.590255842 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.178118328 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.920555679 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.539901301 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.831748989 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.167212212 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.407735459 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.252581248 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.261425674 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.215355533 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.39073507 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.29243388 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.417303688 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.901502283 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.49837107 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.567024433 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.24261501 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.240317864 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.513311334 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.555753438 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.517262569 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.777221729 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.497568495 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.941756014 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.343233054 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.888559193 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.410708003 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.285765677 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.830903372 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.486288899 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.183021052 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.432904617 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.90876734 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.384375131 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 4.937381236 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.49756348 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.231925563 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.721253072 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.876939493 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.236670763 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.360954439 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.380203118 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.233469636 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.416414164 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.004802073 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.436575248 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.997340316 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.545917283 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.483619233 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.425075752 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.657892624 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.764996716 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.589722001 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.204870572 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.394664775 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.346495356 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.54845445 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.2393805 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.526150728 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.881948683 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.983027528 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.075778341 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.809283161 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.471616486 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.425667396 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.714151582 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.485571055 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.533198443 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.271933278 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.857612353 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.234802526 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.390050569 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.228473185 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.091215939 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.561886269 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.62632968 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.731002916 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.32091783 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.771598157 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.630537608 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.305045389 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.411483332 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.506192143 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.238933654 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.504316726 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.24186203 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.73387076 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.631966053 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.24391279 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.854889428 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.431951689 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.578239815 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.405831353 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.989725477 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.267012957 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.377817351 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.833615308 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.434049324 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.387436038 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.595480459 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.127681965 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.27380281 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.255284838 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.805440893 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.890209324 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.734369668 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.867211897 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.853235772 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.565466447 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.02308495 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.236501373 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.462380154 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.405777171 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.243305083 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.436551364 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.675911446 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.298813148 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.456254276 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.588028494 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.411233809 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.803039452 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.234367874 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.923793866 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.379082717 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.755549958 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.810540772 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.031642528 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.722900221 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.265186361 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.800233119 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.215410273 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.402578951 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.550023612 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.093732909 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.317490387 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.108561765 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.066616072 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.397451052 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.672386697 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.338756535 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.984031883 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.409167751 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.480197325 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.458980503 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.379302269 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.226167102 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.819433902 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.013393724 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.520548859 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.407543571 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.428719485 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.379707448 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.406061074 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.782823993 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.557820041 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.034084631 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.739278993 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.486279995 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.227681081 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.241677188 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.526289921 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.609047625 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.334617561 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.539095613 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.686988135 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.29421764 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.272292939 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.268375251 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.534259286 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.978457401 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.982290853 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.595479529 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.801297878 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.861995882 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.290955271 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.021608497 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.464446259 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.648807401 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.666953838 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.170098421 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.673790903 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.547816133 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.401907387 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.224356771 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.4338121 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.259604311 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.282815387 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.067463339 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.541263084 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.315348322 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.072414863 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.896350529 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.25345582 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.321102647 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.666721779 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.465616588 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.43853258 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.241400884 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.817743206 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.605650808 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.385760208 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.243858117 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.995765026 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.215641515 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.463066616 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.237362655 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.434741405 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.105039604 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.321527974 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.910608112 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.94125183 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.320009213 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.427627293 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.230833654 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.102555638 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.267697357 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.981661948 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.07716942 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.496878018 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.763383029 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.43234227 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.251289494 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.563794778 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.38271774 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.590132659 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.535334183 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.725571465 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.673393301 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.622756305 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.537487785 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.010741553 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.407217824 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.487059298 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.217006306 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.242598198 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.296056372 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.610021642 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.600575429 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.237001604 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.802949476 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.488031463 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.390796184 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.416461368 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.323516844 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.81246958 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.457594205 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.404979686 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.415065915 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.440918123 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.601554601 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.240525362 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.469928867 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.275030492 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.268215261 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.464082232 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.488237063 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.624891667 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.552271023 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.843669642 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.400386382 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.729111778 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.958835538 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.808050077 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.249437714 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.149912393 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.579221242 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.241549787 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.739714741 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.898701847 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.442058809 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.956664448 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.314921628 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.251595611 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.403898458 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.751834864 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.260946542 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.899383512 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.63498301 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.236761694 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.725382166 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.31891459 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.41397485 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.031965473 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.741749799 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.235384308 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.087130132 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.345856796 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.72838348 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.944147401 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.258826296 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.250026863 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.867399955 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.235468663 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.275042465 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.308668652 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.826849784 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.266370153 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.815107064 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.390571958 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.408782402 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.249578473 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.387249797 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.240273152 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.457780886 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.850571735 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.493240124 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.529737564 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.446886607 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.253135237 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.837452358 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.951828559 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.352796473 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.489843153 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.245958089 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.613446522 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.068034305 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.237676767 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.879161627 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.415595801 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.371558895 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.671184057 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.501380763 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.287750666 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.45936298 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.247736807 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.532638024 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.404800711 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.817001276 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.504851179 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.580035372 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.355394985 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.252381057 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.792553935 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.723525911 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.124598984 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.243623989 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.552691247 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.239291866 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.091559887 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.890277839 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.441620279 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.387926326 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.25989547 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.834691266 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.49732797 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.384593154 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.239574869 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.476529735 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.778999269 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.233646416 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.108155588 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.126186945 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.4737271 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.57395907 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.218457651 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.439602374 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.291698758 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.235057195 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.74628221 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.241330412 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.607531827 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.223931365 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.794753258 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.267942822 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.354949167 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.413574289 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.57956176 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.245034433 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.243839984 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.422188911 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.243219291 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.245442429 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.614864572 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.33285067 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.497791231 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.720610612 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.49713017 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.585730685 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.184156756 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.099342632 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.279958188 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.554246098 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.103585093 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.814308727 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.355896405 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.76136766 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.088942158 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.270049306 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.794769022 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.498450611 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.990876605 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.387757996 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.757773519 seconds)
  done (took 2035.761152527 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.304508044 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.323327021 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.315245882 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.33616317 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.299200284 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.326856999 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.267670473 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.311489048 seconds)
  done (took 51.726611243 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.240766647 seconds)
    (2/17) benchmarking "4467"...
    done (took 6.27408728 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.771791204 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.439286499 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.261689565 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.465844452 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.420342228 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.787625598 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.449711291 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.276886467 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.292403659 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.314731465 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.247273954 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.256502231 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.140749456 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.324155045 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.247805867 seconds)
  done (took 95.46000229 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.31307805 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.432091461 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.25817843 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.344485008 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.320745607 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.67178596 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.250890406 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.240085129 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.652350015 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.98773413 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.250939324 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.393627493 seconds)
  done (took 83.385928648 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.285254612 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.279469246 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.280801173 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.28116611 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.290846137 seconds)
  done (took 7.662651903 seconds)
done (took 2527.68676122 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.470418535 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.766250809 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.794069016 seconds)
  done (took 4.800672709 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.309256729 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.390285416 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.467998949 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.395456238 seconds)
  done (took 6.820933866 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.553760743 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.718383039 seconds)
  done (took 4.51666157 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.754020837 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.249707957 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.795188081 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.259787861 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.259883455 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.247617023 seconds)
  done (took 20.030102071 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.309143508 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.24115626 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.253380205 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.244899953 seconds)
  done (took 6.291114366 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.227951505 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.266221927 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.23386149 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.270343497 seconds)
  done (took 19.217734334 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.527539791 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.497596078 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.001339387 seconds)
  done (took 6.267262801 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.053950907 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.381861776 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.037002693 seconds)
  done (took 6.707294934 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.189555571 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.187961767 seconds)
  done (took 5.611872718 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.430152782 seconds)
  done (took 2.677498104 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.741187756 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.738272799 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.119954584 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.130597019 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.253756213 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.554611606 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.623916181 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.530629137 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.944242948 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.830400456 seconds)
  done (took 19.7242363 seconds)
done (took 115.181122716 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.199110508 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.644660974 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.406555242 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.44450061 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.331307608 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.405967843 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.252640833 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.231389889 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.547891659 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.545980231 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.31063208 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.327422784 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.27211381 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.635595805 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.264178545 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.596883409 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.648212237 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.215012962 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.043195845 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.282723353 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.253617209 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.538326221 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.0332561 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.548146556 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.64790508 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.384796287 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.085752046 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.610994235 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.260581729 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.094769993 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.389417255 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.508557905 seconds)
  done (took 157.212481499 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.244898425 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.244230926 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.249191227 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.241285547 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 4.947826919 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.238857692 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.243623842 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.235825555 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.97005173 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.983760565 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.256865511 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 4.944609998 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.256333726 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.248289482 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.250243623 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.245493014 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.103491424 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.245352584 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.242489494 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.245075953 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.255473612 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.821763232 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.248834382 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.826132083 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.099828168 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.258107769 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.234240541 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.243602122 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.24510034 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.24640612 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.263425079 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.238547955 seconds)
  done (took 190.867366794 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.237220814 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.240874083 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.253007767 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.242525671 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.259019742 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.252931698 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.251598086 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.258312982 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.251829249 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.258072063 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.250818934 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.254796117 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.258696957 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.240453039 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.255004937 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.252541066 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.252904529 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.264968655 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.249506144 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.254821552 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.251601507 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.247894165 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.254368175 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.254129889 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.247038452 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.257772568 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.248973463 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.254494336 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.247711675 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.247667126 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.250634403 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.251265107 seconds)
  done (took 201.298273913 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.547460242 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.281422426 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.189244037 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.808903025 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.137573167 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.272354385 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.809660392 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.549045056 seconds)
  done (took 14.838886126 seconds)
done (took 565.470179826 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.919138562 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.135982063 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.420058681 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.47737611 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.837932496 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.546835038 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.473195305 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.686190312 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.989763796 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.653702955 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.733307036 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.455123745 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.118235492 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.454648294 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.423423972 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.722335983 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.654786658 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.951472499 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.43997614 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.090923103 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.461255256 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.141374775 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.714211411 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.027663448 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.745386866 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.188638102 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.409011032 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.656082449 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.440769596 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.426069724 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.317571737 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.706493315 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.486945152 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.479902327 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.743484106 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.715570718 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.667450275 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.69006397 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.428892622 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.921481165 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.097066926 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.871473706 seconds)
  done (took 80.770920907 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.269409671 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.293189232 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.437831982 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.339713278 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.922163822 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.333123339 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.518099561 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.484324202 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.359034999 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.487974647 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.524442571 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.981347283 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.511685 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.901798483 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.500290401 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.516057269 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.327295401 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.872717238 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.491155325 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.481297143 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.313882779 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.438464635 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.30530558 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.471102045 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.300496401 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.325407089 seconds)
  done (took 39.964170394 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.332931499 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.436880939 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.525646676 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.480083669 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.513557808 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.301705988 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.640089601 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.448608226 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.097798855 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.636005967 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.368957485 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.410051345 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.469957796 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.553873462 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.558285297 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.398175879 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.448452859 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.457999422 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.451771355 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.511581603 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.446046734 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.354286097 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.627547056 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.460217704 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.947313561 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.846187627 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.478291124 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.900332969 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.541177994 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.375494948 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.432053623 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.623018473 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.726323553 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.534721151 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.421140302 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.304492996 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.298598934 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.375504876 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.254408331 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.453817328 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.631512969 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.690401062 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.5703364 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.82253463 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.567767217 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.441945215 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.800707204 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.37932536 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.408564287 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.067793962 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.569799861 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.998611543 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.392020442 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.468577893 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.409427946 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.594901913 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.464218698 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.605051325 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.360736025 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.857103174 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.362501839 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.679966608 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.458186414 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.577913134 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.493838309 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.483027504 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.4592591 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.904121251 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.559775655 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.31122274 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.959167243 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.357147192 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.317337071 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.36386064 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.43399245 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.820706761 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.218700455 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.485514002 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.737869052 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.618797626 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.502162663 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.928393144 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.271974911 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.82022691 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.304739569 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.290501617 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.386382689 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.619345019 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.610356787 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.790011987 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.848558777 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.635618256 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.780457562 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.420637752 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.924949346 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.637931881 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.292085116 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.29665419 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.513917429 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.833546458 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.368624924 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.556659408 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.957926343 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.692304097 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.643862384 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.409075913 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.629361254 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.574107122 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.639082334 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.27839915 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.518270197 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.372164785 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.61725418 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.568335033 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.295266207 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.815802984 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.384379598 seconds)
  done (took 254.428335866 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.242839388 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.255629002 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.245580431 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.250865077 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.239625987 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.849880572 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.310635711 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.24367446 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.852816019 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.30743544 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.258314632 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.248703037 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.252191854 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.242806665 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.801284699 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.789058223 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.063849871 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.240276159 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.243583888 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.239606655 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.079866265 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.256578132 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.243114025 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.246224726 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.240651994 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.242198144 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.255886968 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.273801745 seconds)
  done (took 156.268332847 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.305488884 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.684577712 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.321355352 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.396251031 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.331497384 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.313412834 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.848719319 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.42280736 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.363733122 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.313657136 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.318523253 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.546359906 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.617731101 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.917250938 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.436274433 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.698193449 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.968008472 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.459259691 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.322263577 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.317688178 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.467249578 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.653440632 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.562758247 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.575177933 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.454022219 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.582140083 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.370710222 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.311438338 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.431897787 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.801666039 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.321417449 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.665232057 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.453847394 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.312608557 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.803934808 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.65003684 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.894723714 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.951685815 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.491824571 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.273877384 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.272273121 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.539352421 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.604379966 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.350190455 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.306000853 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.944953653 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.321975056 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.706071173 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.346010641 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.283463199 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.428786599 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.422242675 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.5543493 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.234992513 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.487512397 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.45672288 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.908713214 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.286112146 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.372233345 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.612985959 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.28195346 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.816841864 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.795466095 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.370303514 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.333433519 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.1912254 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.397601828 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.857794776 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.926543019 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.343064013 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.643306354 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.494595473 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.277704636 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.565407427 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.475803573 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.744020066 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.890001141 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.431394121 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.398871256 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.373973819 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.578454337 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.296433657 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.857809729 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.423003791 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.295097219 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.825059802 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.696959392 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.281585865 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.318593068 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.440851447 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.47374094 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.514706163 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.589123901 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.383670098 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.21796398 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.56539446 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.592702377 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.326433641 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.441087081 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.301110405 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.705844076 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.492735925 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.310314537 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.627865259 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.755030812 seconds)
  done (took 171.541081644 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.014640375 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.365220627 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.552803217 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.865882466 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.648246401 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.712573492 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.519013488 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.376372238 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.565704676 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.523921795 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.502115242 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.405073538 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.996580582 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.0692619 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.373192365 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.522004669 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.387255044 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.906979541 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.649460572 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.261941717 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.63147378 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.07879152 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.61988378 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.724312993 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.764213749 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.82744147 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.965499144 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.430572582 seconds)
  done (took 52.515365034 seconds)
done (took 756.724094632 seconds)
SAVING RESULT...
DONE!
