cset: moving following pidspec: 398386
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.35501216 seconds)
loading group "shootout"... done (took 0.845229465 seconds)
loading group "string"... done (took 0.224280377 seconds)
loading group "linalg"... done (took 3.237435322 seconds)
loading group "parallel"... done (took 0.021965275 seconds)
loading group "find"... done (took 1.203820336 seconds)
loading group "tuple"... done (took 0.711778313 seconds)
loading group "union"... done (took 3.171591365 seconds)
loading group "dates"... done (took 0.155735925 seconds)
loading group "micro"... done (took 0.057002899 seconds)
loading group "simd"... done (took 0.365784126 seconds)
loading group "io"... done (took 1.423915708 seconds)
loading group "random"... done (took 2.402913704 seconds)
loading group "problem"... done (took 1.206756806 seconds)
loading group "array"... done (took 4.648979404 seconds)
loading group "misc"... done (took 0.980788175 seconds)
loading group "scalar"... done (took 3.464672795 seconds)
loading group "sort"... done (took 0.308947573 seconds)
loading group "sparse"... done (took 3.654754262 seconds)
loading group "collection"... done (took 6.074716367 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.547029622 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.074974361 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.256776118 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.078556328 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.287635384 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.084610615 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.088650212 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.071142464 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.162333433 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.168760533 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.219687364 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.400304795 seconds)
done (took 5.171712777 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.31691949 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.034050519 seconds)
    (2/2) benchmarking "String"...
    done (took 0.12913942 seconds)
  done (took 0.762684679 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.143111415 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.016050156 seconds)
    (3/3) benchmarking "different"...
    done (took 0.02304489 seconds)
  done (took 0.776465198 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020677014 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.09726014 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.02187721 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.02242254 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.022285577 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.021785708 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.021572421 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.021540464 seconds)
  done (took 0.825267885 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.029714598 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.023321763 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.021394138 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.022754652 seconds)
  done (took 0.691567027 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.02316157 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.085740078 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.020548949 seconds)
    (4/4) benchmarking "different"...
    done (took 0.020380187 seconds)
  done (took 0.744988877 seconds)
done (took 4.748348584 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.202107617 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.777554958 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.989003974 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.185001843 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.360524112 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.307233425 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.077272985 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.245511227 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.152531595 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.032322022 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.186491597 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.040173186 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.525714101 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.473758053 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.029333829 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.145399896 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.578236412 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.040021483 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.071161406 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.235283215 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.040863483 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.039562642 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.044547266 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.027024207 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.139048105 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.137895646 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.676578265 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.063608178 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.025292631 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.046474677 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.028097953 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.03069964 seconds)
  done (took 9.58877858 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.154580663 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.149347921 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.024031451 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.059681676 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.050954563 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.025133687 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.030416526 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.023203501 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.043335437 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.089253833 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.046754896 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.162567944 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.021588004 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.025015869 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.143540488 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.11681679 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.038430416 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.037647813 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.022856389 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.03668013 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.049380862 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.03520745 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.033357567 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.032980605 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.069428452 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.090391762 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.044298823 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.064291845 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.023057195 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.035301776 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.051630386 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.064260266 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.023328418 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.021939572 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.066085931 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.04055871 seconds)
  done (took 2.675188141 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.721389079 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.051460639 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.143200854 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.133930399 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.064514181 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.050860121 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.186080855 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.078882404 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.056355894 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024325911 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.213727926 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.66691031 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.174874495 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.078019071 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.028976069 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.188758312 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.919204188 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.94930589 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.023950498 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.02422968 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.13964775 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026627389 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.180369533 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.021982133 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.251496252 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.701259198 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026113839 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024602896 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.053226217 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.146780542 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.021230169 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.097640514 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.050511334 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.025478566 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.555864988 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.022051865 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.020166553 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.042091461 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.051430834 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022492002 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.023440508 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.034541403 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021489546 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074999419 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.036367609 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.528552221 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.025971291 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.714941832 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.844942977 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.032005655 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.028710961 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.058214446 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.020494668 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.024097846 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.56694955 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.117117488 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.023298363 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.297112952 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.026089912 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.024757147 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024869734 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.056991456 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023707559 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.025567962 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.027225656 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.041911121 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.966956657 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.033247593 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.043630584 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.0220345 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.023188142 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.021612836 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.411783725 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.029991928 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.152043394 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.02072323 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026330657 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022731044 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022167456 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.063201344 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.050049202 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.04668313 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.025991602 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.023031858 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022188631 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.538156369 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.925562837 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.025358344 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.024365401 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.491675322 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020755196 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022689929 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024272634 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.04446978 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023016125 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.019936505 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.05822507 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024726042 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.130813273 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.490871686 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.025068698 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.020356445 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.474854832 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.024558461 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.054619398 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.077433935 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022751008 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.061776129 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.023023235 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.02031088 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.026452006 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.020178015 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024403318 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.022121685 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.022777014 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.022326796 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.023626605 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024400793 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023105181 seconds)
  done (took 19.980805114 seconds)
done (took 34.561502682 seconds)
(4/20) benchmarking "parallel"...
done (took 0.761628904 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.2189073 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.049778147 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019730059 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.167904559 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.044833546 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.140556561 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.18296031 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.13153538 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.0467053 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.046327276 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.046417405 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.188217228 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.200723148 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.047737245 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.124029097 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.199408897 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.048620784 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.020334389 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.047745638 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.048401561 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.048646789 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.020322101 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.047645235 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.048466895 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.12451248 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.047997718 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.020176151 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.12549301 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.050753356 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.128562081 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.050491586 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.050502231 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.050946384 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.126962269 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.05106942 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.127019864 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.020553685 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.050721075 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.050524983 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.051175583 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.050407181 seconds)
  done (took 4.072021828 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.047170744 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.038620422 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.040745361 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018487184 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028465635 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.038650294 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018406014 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.038168315 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.041469862 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.038642257 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.038690008 seconds)
  done (took 1.140501263 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.041279231 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039462463 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.040725736 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018343688 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.030116736 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039060731 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018277253 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.038780458 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.041461063 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039126103 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039378004 seconds)
  done (took 1.073565332 seconds)
done (took 6.951170666 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.157102737 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.126358379 seconds)
  done (took 0.960793885 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.564448715 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.222239251 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.135187444 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.259409263 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.12866053 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.162773807 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.311900896 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.303747756 seconds)
  done (took 6.826633199 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.076273714 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.146408244 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.024677878 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.0233009 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.023496234 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.023446261 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.024942997 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.023701481 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.022968667 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.025429028 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.025027371 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.023148367 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.023907734 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.025077453 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.023181537 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.023363468 seconds)
  done (took 1.31160465 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.029323668 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.02623621 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.027038036 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.017533565 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.028030749 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.026992148 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.028285106 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.028467267 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.027444616 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.026980783 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.024952068 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.028151788 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.026566831 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.025421746 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.027812361 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.017430925 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.028143855 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.027213546 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.029506688 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.028362414 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.02743446 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.025218817 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.0294039 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.026572424 seconds)
  done (took 1.339516546 seconds)
done (took 11.127484813 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.14264521 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.029967825 seconds)
  done (took 0.864476418 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.131711164 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.130459247 seconds)
  done (took 0.959721367 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.029523233 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.016346078 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.032960592 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.02496727 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.016526685 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.016275261 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.032078366 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.016484306 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.01635462 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.016445623 seconds)
  done (took 0.919167345 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019823991 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.02357998 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.021462239 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.019657394 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.021291467 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.017524417 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.019792012 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.017700089 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.023311811 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.01672614 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.020541032 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.03868166 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019968143 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.039104032 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.019896711 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.020456678 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.022071723 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.019924383 seconds)
  done (took 1.100641846 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.018108339 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.017310743 seconds)
  done (took 0.736702838 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.021104525 seconds)
    (2/7) benchmarking "second"...
    done (took 0.01739849 seconds)
    (3/7) benchmarking "month"...
    done (took 0.01918746 seconds)
    (4/7) benchmarking "year"...
    done (took 0.019035877 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.016969314 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.017078138 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.017554381 seconds)
  done (took 0.8225693 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.393436066 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.09029575 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.322361367 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.024870253 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.038712962 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.236110924 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.02008614 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.024415275 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.024272969 seconds)
  done (took 1.874289821 seconds)
done (took 7.976769573 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.045503033 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.144867252 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.152878085 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.458160003 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.034670379 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.022784856 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.05736918 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.236685923 seconds)
done (took 1.864262585 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.478957568 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.280637254 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.19314591 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.024227754 seconds)
  done (took 2.20554599 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.315168892 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.145796424 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.03127254 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.023491064 seconds)
  done (took 1.233345532 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.022373998 seconds)
    (2/2) benchmarking "read"...
    done (took 0.028007165 seconds)
  done (took 0.763093157 seconds)
done (took 5.397514098 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030829665 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.017172377 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.023589561 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018668294 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.018299044 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.017812359 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.017949796 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.01874831 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.016766918 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.018778386 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.018776601 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018804735 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018451893 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.01845845 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.017988599 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018781108 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.016764625 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.018434721 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018425112 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018412692 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.016696235 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018788042 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.018111054 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.018674421 seconds)
  done (took 1.157688191 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.036733606 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.021328925 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.021887536 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.021710561 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.022336162 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.021771525 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.021706209 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.021138403 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.021996013 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.020698649 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.022373059 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.02238767 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.020657381 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.022570613 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020794969 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.022555483 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.022084166 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021171054 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020754169 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.022565107 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.021907499 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021223933 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.022465498 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.021949824 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.02236919 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.022491684 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.020812037 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.021259163 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.022084814 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.022659129 seconds)
  done (took 1.382030981 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.023441867 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015430978 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.015689992 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.025904294 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.01534573 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.01552849 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.016131039 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015103779 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015528988 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.016291285 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.015821268 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.015211493 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.016021427 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.015300198 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015368867 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.015929336 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.020632461 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.036522202 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015608557 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015397017 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.020106689 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.015607627 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015423342 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.01533895 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.015853699 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.015385282 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015225759 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.015633716 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.015366446 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.015999095 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.015324717 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.020037006 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.021611084 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.015852412 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.02581355 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.020645384 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.015860815 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.019944775 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.016257593 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015284906 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015388893 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015322939 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.015549508 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015546456 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.026163718 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.015778992 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.016771472 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.016025949 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015746807 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.015387581 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.01553673 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.01717325 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.021377599 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.016757184 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.015374955 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.016730934 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015361805 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.016150494 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.015547697 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015331032 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.01550479 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.01953843 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.016887696 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.016172218 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.037375459 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.016898069 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.026183322 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015543697 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.015987122 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.019686446 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.01606653 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.035465211 seconds)
  done (took 2.00245316 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.028442896 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.026188356 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.034852337 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.025423076 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018963056 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.016307976 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.019524986 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016290202 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025777634 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019832348 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016315338 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019456068 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025736528 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.01990913 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017316709 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.025639431 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019910278 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019123621 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.016234822 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019840498 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017549532 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.019779183 seconds)
  done (took 1.193065794 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.10512886 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.021664762 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.065984211 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.025252502 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.024011653 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.02513283 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.021666888 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.021684835 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021800746 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022541728 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.022444725 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021899912 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.023939965 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.022432547 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022420995 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.022250175 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021881841 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.022569901 seconds)
  done (took 1.249950647 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.034590919 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.021534364 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.049074539 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.021243157 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.021431495 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.020906888 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.024959781 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.02518914 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.021055088 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.021589847 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.025210146 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021178069 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.021158516 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021586676 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021080621 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.021571205 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.021180509 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021549071 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.025203415 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.025115458 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.025130072 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.025170155 seconds)
  done (took 1.252705959 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.035485401 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020554208 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.037130337 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.022099292 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015711581 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015752813 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.022187292 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.020799749 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.022068911 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.02046769 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021031393 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015945057 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.023019583 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.021046723 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.02320902 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.02098801 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020529082 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.021051544 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.02048833 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.01597481 seconds)
  done (took 1.151448537 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.135924243 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.018075019 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017839437 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.02231748 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017803803 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.017739961 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.022479182 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.017891539 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.017837748 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.042470508 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.01790457 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.01785915 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.022530374 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020660453 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017746243 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022485082 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.022456472 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.022767651 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.018087065 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.01807178 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.043171325 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.018112092 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.022908051 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.018089209 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.018020381 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.018118318 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018056143 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.021125657 seconds)
  done (took 1.42500099 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.04024292 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.015224039 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.015431634 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.019477127 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.01936876 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.025279644 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.019452499 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.019389004 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.015079603 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.015514909 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.017415953 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.015184042 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.015195481 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.024848713 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.015029619 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.017413511 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.024973942 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.019486074 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.025624458 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025494934 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.01750007 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024778867 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.017459348 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.01547909 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025866463 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.017840107 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019852839 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.020789733 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.017722148 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.015685147 seconds)
  done (took 1.319526983 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.030322539 seconds)
    (2/2) benchmarking "in"...
    done (took 0.026937998 seconds)
  done (took 0.775823181 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.018864317 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.033855035 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.015223193 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.028805242 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.024264461 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.019541154 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.024231116 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.024278551 seconds)
  done (took 0.90212169 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.130166533 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.154021699 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.017484902 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.01763954 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.127464651 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.085241983 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.140099746 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.029365253 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031153373 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.020102426 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.017382621 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.14013511 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.017125162 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.03078939 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.018745128 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.026907171 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.024291812 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.035435423 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.030225298 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.01599028 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.029834359 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017760933 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.016923489 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.017934589 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.018130941 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.023850432 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.033018871 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.02962473 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.025445405 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.015308863 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.035939862 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.016193526 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.016877469 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025434542 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.130398458 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.016511269 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.054472495 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.016427869 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.020828341 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.01599839 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.02839281 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.037337473 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.030824941 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.034374191 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.017667166 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.01811074 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.01603114 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.017784856 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.020129155 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.025387444 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.016207551 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023577358 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.015880102 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.017585875 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.026775412 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.016348395 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.021029218 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.025450522 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029755439 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.026659976 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.028625081 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.031683422 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.024936122 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.024913166 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.016842054 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.036166764 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.017801714 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.029620363 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.031190818 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.017504411 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.02938505 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.01611311 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.015398796 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.016243942 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.050450045 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.017709919 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.017179637 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.016416656 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.016477471 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.017659936 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025881584 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021405951 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023726624 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019534477 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032380276 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.025505002 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.01608762 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.024016863 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.034863032 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.020383204 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.016431769 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.033874477 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020296761 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.016147774 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.034631001 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.027061065 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.018570383 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.017552977 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.02057154 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030797131 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.018464715 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.015806427 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.025225375 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.018505611 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.133496352 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.022067997 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02501543 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.016564734 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.027204307 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.023764911 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.018431609 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.015796881 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.021583204 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.017617148 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.015774983 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026371035 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.016859673 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.03229476 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.023828208 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.031600097 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.031954153 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.027686364 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.033209592 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.016626563 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.015801202 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.035853151 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.026291675 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.018121747 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.035449089 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.01663933 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.027515848 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.017042048 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.018597385 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.026445733 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.016300969 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018896801 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.017170307 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.024262379 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.018668708 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.018850214 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.022992187 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.025451921 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.029652092 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.018192832 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.025784963 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.017393269 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.03329063 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.02682501 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.021909811 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020709893 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.017847913 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.029429685 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.023947513 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.026179662 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.01682171 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.017767733 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.01696738 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.02821865 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.02670806 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.018822357 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.027448314 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.021898492 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.017815511 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.017030401 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.018074216 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020797066 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020744628 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.017769143 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024758831 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.025872667 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.031961121 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.025218495 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.026087044 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.016243907 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.016879416 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.018923957 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.016863868 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.021745 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.026357814 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.032834015 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.029091831 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.038887314 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.017235571 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.02674899 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.018895925 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.034673433 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.030522913 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.018067768 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022305587 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.016058769 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019005196 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.026525931 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028723137 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.03178672 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.032338271 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.021972299 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.021848623 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.016858799 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.032575333 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.017457713 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.025468447 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.026561396 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.024390968 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.017859186 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.019619825 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.026551311 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.022022615 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.018192039 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.033135509 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.025811331 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.016958107 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.031748152 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.017409841 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.177277652 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.015995012 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020159502 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.021661092 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.017603536 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.025603598 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.03123026 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.015164645 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.016236166 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.031464938 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.017386718 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.017254975 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.023958274 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.031007299 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.020867099 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.023692244 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.026194973 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.026620462 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.020801736 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.026282161 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.016643714 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.025008225 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.018637371 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.027362504 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.015835621 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033790824 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.015044056 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.030938979 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.016444951 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.026681995 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.016152707 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025077038 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.016514344 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.032817638 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.017188502 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.016583663 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.02724324 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.015062624 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.024875733 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.015713194 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021315959 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.0228389 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.024957639 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.017326683 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.024998888 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.017218843 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.024636084 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020829856 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.024430462 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.024778234 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020676857 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.015602002 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.023879373 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026344122 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.023708918 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.017020417 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.017058436 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.016095987 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.024895665 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.017074887 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.016580781 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023819547 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020789214 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021886429 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.017029309 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.017186843 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.017074645 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024049243 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024997079 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033538243 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024147881 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.023077722 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.02475563 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.015614245 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.031133898 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.015619905 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.023148458 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.01502524 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022481801 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.025169256 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.016242509 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.034998264 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.017553833 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.023905943 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.027997094 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024496014 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.02011169 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.034079637 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.019274192 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.024276807 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.023954016 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.021006865 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.023186149 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.017687736 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.024386461 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.025470439 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.026670398 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.016854746 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.023511455 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024934837 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017721067 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.025038644 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.017724233 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.02453275 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.017935601 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.015579874 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.021209103 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.027554049 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.021407856 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.021615597 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.016521553 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.015366623 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.016414144 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.023792162 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.021315156 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.024900491 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031950661 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.015535267 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.017102042 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.016162455 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.02025383 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.034762602 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025946258 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.02412296 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.02136956 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.015686018 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.017726004 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.017889794 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.016367218 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.019440811 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.015686997 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.016153107 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.026913315 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.0179004 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.021125964 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016514316 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.017917464 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.026791308 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.021807041 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.017212935 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.0238391 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.016478272 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.022143406 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.016036413 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.018469919 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.021630786 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.016425147 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.020631843 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.02710054 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.033678427 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.02391124 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.025548727 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.017761142 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.024667654 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.032452387 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.026643083 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017795527 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.026193375 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.016290067 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.035996997 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.026195476 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.025262157 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.026648814 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.017668396 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.034063015 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.021572097 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.026837199 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.032431606 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017764933 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.025944327 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.016643379 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.032793477 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.021730326 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.016725896 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.02570743 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.024656001 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.023243141 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.028992831 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.017948629 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.025747155 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022803093 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.021045684 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.018893138 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.018832528 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.025729841 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.033443151 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.017914643 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.023665544 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.025024505 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.025234473 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.021802469 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.029508469 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.025092531 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017955915 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.018804058 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020788957 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.017755767 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.029332926 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017309006 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.021764512 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.021771948 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.016794575 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.023997232 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.033982194 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.026343671 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026566563 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.017791804 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.016772787 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.035885114 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020914218 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.020727262 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.025082593 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.026851402 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.029545461 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.026372414 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.034368261 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.01729193 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.023130174 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.029397627 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.017871013 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.016709076 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020837428 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.018672841 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.026219425 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026890932 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.024291431 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.01898617 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.02410928 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.030565353 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.018547776 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021874101 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.02394808 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.018037878 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.027486874 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.024911152 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.025445374 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.018587343 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.016759453 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.020534171 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.025698708 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.024266281 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.026041759 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017938484 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.026808912 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.031837863 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.024481422 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020859653 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.016897451 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020805528 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.0261795 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.024381291 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.016986272 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.022076353 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020824799 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.027081823 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.026608149 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.02193318 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.016917538 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.184488972 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.024520412 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.025013092 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.017483944 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.017427879 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.01616263 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.015817481 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.026867043 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.01576873 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.017240789 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021060437 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.017365648 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.033484175 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.023934869 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.031564579 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.016537829 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.020758226 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.015658857 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025148529 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.020839675 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.015718436 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.026313212 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.015267045 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031133827 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.02725715 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.021654598 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.015897566 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021313431 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.024160568 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.030792394 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.025189429 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.024553828 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.018644996 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025154832 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.017127108 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.026535175 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.015702909 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.014969937 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.025554065 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.0241367 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027595314 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.015608019 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.025486559 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.017275404 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.023878891 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.02411772 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.017084332 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017097916 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.017047715 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024961194 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.020652116 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.024769524 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020832853 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.032451862 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.016492323 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.026573109 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.024626957 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.026368193 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.029391671 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.027311565 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.023967994 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.016047575 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023038895 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.023931075 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.016573943 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021011691 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.018437791 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.037140931 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.017141754 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.017069392 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.029474263 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.022763674 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.015786388 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.022963569 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.02097348 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.025939496 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.016862868 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.026227762 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.021035339 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.016761712 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.021005601 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.021031816 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.015188199 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.015837554 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.016149114 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.025564002 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.021120833 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.016138685 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.035154832 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.017503635 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.024676653 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026804845 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.023081858 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.017453825 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.015280394 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.016815265 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.029487163 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031509782 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.020366714 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024589334 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.01776712 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.025249017 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.0153997 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.024736966 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.024046534 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024627811 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.016151407 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016419494 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.031130741 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.031661334 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.021186047 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.033029293 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.025138202 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.017709098 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.038442512 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.025092675 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017160072 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.02714414 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018380968 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.015737588 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.015548264 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.017892035 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.027705432 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.016071481 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.018278667 seconds)
  done (took 15.434627749 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.061947309 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017163666 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.016365957 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.016111183 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.022997452 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016932929 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.015642134 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.016939788 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.017032441 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017883604 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.015690404 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.01570323 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.021312424 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.031116763 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.023719822 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.019432231 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015696887 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.016967566 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.015668283 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016935541 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.021827889 seconds)
  done (took 1.209158606 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020257255 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.020084929 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.019466108 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019641976 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018855817 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015827563 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.019196729 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015817892 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019863227 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016204213 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019738731 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015902329 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.016199537 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.016242367 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016219761 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017295218 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019889626 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019045132 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.015899552 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019391512 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017340207 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.01938123 seconds)
  done (took 1.151643133 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.018525432 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.016409656 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.024322218 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.015258987 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.015186102 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.018017823 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.015212409 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.019958783 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.019920723 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.019929703 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.024159925 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.016048339 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.015210913 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.021467788 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.015234405 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.016057024 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.060709244 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.016101673 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.016207935 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.015442928 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.017638592 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.024455086 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.015478123 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.015687875 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020092706 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.018252731 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.015417181 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.017699111 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.015962599 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.020093319 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.016189658 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.015411652 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.024403695 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.023693867 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.020270795 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.020211531 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.016844646 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.016286004 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.015614143 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.015675466 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.023859875 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.016861959 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.01585886 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.016614585 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.024335282 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.015655157 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.015333183 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.024443159 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.015403637 seconds)
  done (took 1.686449889 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.029101769 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.068380259 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.021795918 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.051036403 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.027807699 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.021113246 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.021662301 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.053834781 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.01682763 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.01713047 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.02859763 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.028643545 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.018140284 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.019390733 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.022675276 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018081808 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.019008497 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017680674 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.02080528 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018047749 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.020787467 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.023033738 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.028095605 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.028615538 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019347618 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017718688 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017915187 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.019672109 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.028350822 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.021271328 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.019820499 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.02031465 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.028656504 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.022189092 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018254507 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.019002701 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.029775242 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.018814792 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.018566025 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.017362113 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.01912034 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.020350243 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.024393295 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.031071582 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.019587333 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.025531961 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.020025723 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.017282882 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.029503147 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.018804671 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.022595409 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.03048659 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.01989773 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.01906027 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.020232582 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.029577709 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.019205833 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.018091648 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.019513838 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.030396158 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.017941743 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.020513801 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.031367158 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.019484418 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.023410991 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.032526188 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.02675122 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.020884405 seconds)
  done (took 2.504286277 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.026895198 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.058477603 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.034132135 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.034019258 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.029252839 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.029503164 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.029444795 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.029531897 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.029455405 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.03245874 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.029548655 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.18530133 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.026173164 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.030902584 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.029717409 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.02963601 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.0296645 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.029511687 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.029302898 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.029011237 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.029343777 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.034224638 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.029480534 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.034976257 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.034711444 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.026157342 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.029625032 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.029316693 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.034410483 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.02965828 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.034401864 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.029682725 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.02977651 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.035095893 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.034610856 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.02936633 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.018673794 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.029441109 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.029954896 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.029726296 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.025890578 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.034574251 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.029217979 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.025634656 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.029614682 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.029309277 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.03488767 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.034497315 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.031405931 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.032379714 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.029097126 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.034270324 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.028645662 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.029275476 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.034776909 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.037828267 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.034229774 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.034230619 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.029077684 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.034381796 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.034399976 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.039221062 seconds)
  done (took 2.975158385 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.031739997 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.023206204 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.037765171 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.017574215 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.017872166 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.028864523 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.018139244 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.018228737 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.024590928 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.024264834 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.025688777 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.028112566 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.030130003 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.025784303 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.028015675 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.029969407 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.028540939 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.028310924 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.024802089 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.02869337 seconds)
  done (took 1.36560494 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.019616902 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.022440678 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.017929762 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.034639422 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.017705473 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.025651682 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.01761494 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017605602 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017635302 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017631015 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.02251342 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.022464689 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017579996 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.026638582 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.021959629 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.026219248 seconds)
  done (took 1.180506262 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.020943692 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.025939523 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.135754614 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.018633834 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.020411455 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.01758362 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.018467894 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.01725756 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.019687054 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.03219959 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.01847769 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.020805448 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.018879191 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.017548551 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.018082669 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.020815761 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.019941856 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.018595129 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.018618753 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.137093001 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.028800319 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.019827421 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.021282415 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.01962642 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.020851919 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.02772018 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.020335694 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.020745489 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.018718813 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.021147712 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.020948255 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.031306668 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.021368169 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.019541279 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.017374154 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.018371359 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.018881618 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.021308369 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.021162614 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.018959518 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.017805839 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.020906082 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.018988268 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.019682622 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.02062399 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.021524428 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.020260688 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.029926291 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.018914952 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.020963159 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.019039739 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.020201128 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.01945705 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.03140426 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.021563423 seconds)
  done (took 2.197229344 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.036668896 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.023343622 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.017429995 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.017567219 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.024072196 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.025209978 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.023929268 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.024066235 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.024419539 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.017215221 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.024242596 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.023129163 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.02415687 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.023788376 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.024299775 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.023767019 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.017321243 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.024340341 seconds)
  done (took 1.264032335 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.025127105 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.022894514 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.023244496 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.019122042 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.019182296 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.023344301 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.017665994 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.019224625 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.01939696 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.019550869 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019574575 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.018914992 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018981806 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.018984437 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.023194034 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019357874 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.018937407 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017659215 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.019319567 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.017727735 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.023828474 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.018014853 seconds)
  done (took 1.27615234 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.203078625 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.162225023 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.045047026 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.038961695 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.029880837 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.056775072 seconds)
  done (took 1.366968737 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.057125841 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.058717999 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.023023452 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022914182 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027296118 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.025639701 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025697053 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026299902 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029723167 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.032293108 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026224993 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029382267 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029133417 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.031061085 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027438483 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027704948 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026694209 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026836652 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023449759 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.034593255 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026604851 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029695861 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026689589 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02625736 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026496787 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.032180848 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030417514 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.032708772 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026350783 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.029734249 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028004359 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026327635 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029787232 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0330537 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02383393 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029756472 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026475499 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.034484709 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028099905 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.031644608 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.023130509 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028300428 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030555491 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.030050717 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.030102572 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026650929 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029567291 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026609015 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026690717 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.038361994 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.028600996 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.032463755 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028636046 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030221658 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029904168 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.038334199 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.032954644 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.03188328 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028742079 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.034026921 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.032725996 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029620241 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.033279557 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.036210883 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.03125187 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.034888611 seconds)
  done (took 2.834517015 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064632725 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.023591586 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025931352 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.03162905 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.031083089 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026800789 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026562821 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026295034 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026176162 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023828831 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064983086 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026471916 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031713186 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.031874276 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0265769 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026335737 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026651806 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.031893292 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024045614 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.038368261 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026645036 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.032224887 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.032080988 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.031821166 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.032842239 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028437713 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026575338 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026598812 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026748083 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026725855 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.03016215 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027051834 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.031779243 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.023938917 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.031764039 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026625919 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026659908 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.030178292 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027108872 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029244657 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.155145421 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.03513462 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027665534 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027911514 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.034143255 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027864271 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026868168 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023903961 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026669703 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024089799 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.03296204 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.033285126 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.03325002 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.03237083 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02700495 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027075676 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026759928 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026691638 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026871944 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.028633926 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.032688178 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02752913 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.039515317 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02715353 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027369375 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.034571923 seconds)
  done (took 2.950528088 seconds)
done (took 53.916744405 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.219718321 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.180121222 seconds)
  done (took 1.230801701 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.147109348 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.147786622 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.178786162 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.026551789 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.085139113 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.181517766 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.127423719 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.027513176 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.026441548 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.027915506 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.026020329 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.027640235 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.027867772 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.025929202 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.090329014 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.027127838 seconds)
  done (took 2.044649969 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.076258571 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.29669378 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.063407209 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.025047067 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.110398542 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.032602344 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.027420649 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.032054229 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.032421192 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.026041706 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.076040821 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.040044975 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.031737256 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.033269749 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.028046926 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.031686634 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.032702155 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.033066519 seconds)
  done (took 1.868163183 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.076925045 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.036997572 seconds)
  done (took 0.966299007 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.146081288 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.065517481 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.110811473 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.325160373 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.100639205 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.314286839 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.109597165 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.10294344 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.070869294 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.099153975 seconds)
  done (took 2.276137043 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.0678128 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.062970802 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.305177877 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.06011634 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.039654602 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.033353265 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.033518182 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.033942738 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.0337891 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.032596955 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.082848767 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.03127333 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.027030324 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.078396128 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.053927825 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.065573341 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.026472142 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.03305459 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.036336277 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.027994709 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.031730093 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.034137531 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.144961849 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.033592708 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.055979136 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.03194534 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.033542385 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.032847139 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.032719069 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.033936888 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.035370638 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.060300689 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.034713936 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.041273642 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.033075699 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.055356562 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.027251185 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.055136593 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.030976922 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.027431874 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.031270277 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.034829817 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.027912135 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.034294119 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.034112371 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.03420518 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.03540478 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.026464051 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.033974685 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.030803122 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.02730024 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.032387217 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.032143528 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.033357417 seconds)
  done (took 3.335126388 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.082055881 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.073506715 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.028094935 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079417742 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070333973 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02718733 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.08605042 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.065095325 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.083618615 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.026366216 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.026020906 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.026014175 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.034482759 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.038144494 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080802323 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.074286166 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.029156755 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.026814199 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.07349237 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.074082465 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.025543967 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.086853606 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.076107187 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.072908621 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.025628643 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.027717423 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.026455445 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.026536654 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.035329693 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.034535747 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.026196817 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.039053442 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.03987133 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.035158215 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.025788306 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.025942561 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.02554847 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.035237209 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.036883447 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.03695978 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.034124664 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025572911 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.026183874 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.026564111 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.026926224 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.025262598 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.037105052 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.034653062 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.037107183 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.026587516 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.026873877 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.025418551 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.026782744 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.034100022 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.033093993 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.034600251 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.038383505 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.026149557 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026260608 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.027880232 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.038823851 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.035025333 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.035055333 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.026916294 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.036189413 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.0260649 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.037517985 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.040170289 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.025464403 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.026312231 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.026571602 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.026778731 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.027168223 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.03421723 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.034506683 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.027235638 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.02637729 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025451629 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.034437354 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.033512825 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025655179 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.035968908 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.025726304 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.02677846 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.027684116 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.027672203 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.038583381 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.036666937 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.02728698 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.026705821 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.02713486 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.027510382 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.026328927 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.038100352 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.036097637 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.036425117 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.038646454 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.027462641 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.039722769 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.037213999 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.027614093 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.03540754 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.02663271 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.027225993 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.027002151 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.03592119 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.035369814 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.036606406 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.026839644 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.026176586 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.036619791 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.039833956 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.027774631 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.036631992 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.038276098 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.036594521 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.026031937 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.038743909 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026949444 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.039024452 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.027254427 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.038787223 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.027306175 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.036165363 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.026997611 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.026010752 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.02671891 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.039956396 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.027923945 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.027428448 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.027579567 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.026844442 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.036198728 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.040602999 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.027683346 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.036715104 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.036714204 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.027494743 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.0385865 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.026766273 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.038737488 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.027027024 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.027306999 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.025722473 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.041073477 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.026875692 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.027011884 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.026729776 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.037933344 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.026751185 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.03762679 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.035179773 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.026803694 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.039744405 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.037637149 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.034815749 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.037623352 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.027345419 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.02675614 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.026260961 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.02691941 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.038568739 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.04050666 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.176708765 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.027425257 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.033037102 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.035841086 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.025675193 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.032773694 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.032724898 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.033669695 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.027075365 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.02659684 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.036199999 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.03788256 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.033142477 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.035670415 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.034249966 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.026394176 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.033330044 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.035864741 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025839419 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.039612337 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026141991 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.036338911 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.036167561 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.032656315 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.035489419 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.036766666 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.034716236 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.034902176 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.037073933 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.025312278 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.026154416 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.033420091 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.025719952 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.025816516 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.032746204 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.026654423 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.027487537 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.039722696 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.02721141 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.03618061 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.025250485 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.033441134 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.025047534 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025722699 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.037477896 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.025577724 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025795899 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.033089179 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.026186402 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.032631507 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.03522354 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.033114781 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.025690877 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.026556467 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.037355189 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.036850644 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.02654703 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.026144352 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.026759657 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.036401122 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.035792125 seconds)
  done (took 8.675096966 seconds)
done (took 21.242519683 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.153754354 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.078312149 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.155520802 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.091209342 seconds)
  done (took 1.325056113 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.06086482 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.022113417 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.154357977 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.168376549 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.022258966 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.149101746 seconds)
  done (took 1.441137109 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.271972935 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.1628353 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.173689714 seconds)
  done (took 1.471820648 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.163057489 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.299177471 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.583335738 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.155475096 seconds)
  done (took 2.077135098 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.185336547 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.179275978 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.034484979 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.197469243 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.043013829 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.018350689 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.115292868 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.019191879 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.057180082 seconds)
  done (took 1.779018378 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.108590298 seconds)
done (took 9.070823626 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.196928008 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.152850784 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.03738136 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.031104258 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.145698349 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.146127304 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.15870703 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.032656293 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.143692392 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.316819813 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.177413577 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.052439544 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.170244933 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.048319858 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.28736718 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.035277718 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.032452191 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.027671493 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.15331068 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.142368348 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.26360137 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.032745644 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.104666157 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.033554488 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.110267362 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.090209843 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.185825379 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.323599453 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.301092897 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.034266529 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.139315275 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.047640997 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.125863533 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.147736418 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.14935134 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.053235075 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.022978397 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.265297804 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.120654555 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.333021139 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.163179628 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.030933111 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.154247425 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.028823872 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.02238748 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.160344381 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.036777904 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.030669326 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.048682995 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.03065665 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.046868331 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.030845306 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.153210088 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.026861362 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.100712771 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.154662591 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.18082972 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.107317758 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.029022162 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.043372371 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.032851223 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.168145645 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.042326797 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.028726863 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.036233009 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.023001101 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.15220665 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.044617579 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.023940543 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.034537275 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.03263706 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.122375507 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.170788492 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.074154206 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.037064289 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.127296753 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.100190391 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.050823705 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.053516698 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.03292384 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.021822947 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.183041584 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.028833968 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.042012816 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.029704762 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.056296183 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.022050654 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.039251748 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.165706844 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.321677137 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.096485314 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.022813599 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.247758567 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.023273868 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.048178002 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.022813605 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.022163353 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.178035195 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.021784006 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.02191934 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.032102811 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.031317231 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.023969447 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.15823713 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.10766676 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.029885198 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.029153991 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.021788901 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.028254437 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.023932544 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.023292803 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.022804228 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.103045842 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.041496764 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.020949443 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.114209318 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.13495347 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.033804768 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.038957821 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.092576776 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.025436842 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.031673923 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.02972501 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.133265087 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.030924656 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.143987932 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.023600245 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.047160225 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.127111248 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.101145697 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.118035263 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.022083396 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.166350045 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.032870366 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.021364874 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.029744854 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.051858898 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.032263203 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.042161586 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.03123986 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.164998099 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.033866148 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.028482261 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.126337328 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.02117402 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.125876969 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.10001533 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.138954836 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.027913819 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.034325057 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.100610186 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.047833881 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.052991022 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.046752436 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.027061218 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.02223423 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.021720567 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.037090801 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.021190926 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.022521767 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.037465122 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.029317255 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.021667562 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.260234744 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.032752011 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.02651008 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.275348726 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.035124968 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.105494698 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.044206358 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.022487947 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.109946492 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.025533941 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.046036479 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.094284178 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.023003328 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.102651987 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.024204207 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.02334517 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.030719969 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.024095365 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.031844688 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.037076516 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.0231056 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.037183286 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.03082677 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.022366912 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.107781128 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.024082312 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.183569797 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.106692868 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.121619348 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.02258156 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.04201552 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.02183377 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.145310846 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.022240316 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.076069053 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.120042176 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.038177553 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.043864386 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.023792228 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.101937817 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.038940106 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.022539143 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.107130728 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.14631903 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.106523151 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.031128618 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.269519738 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.033178887 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.023485715 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.030483181 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.03153279 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.023264673 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.103603252 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.028560911 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.022486151 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.022587129 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.024509104 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.021568064 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.048287939 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.021647897 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.03014715 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.022772699 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.026212483 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.025077773 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.022206814 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.030644714 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.1019856 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.139860322 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.030668339 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.045725356 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.037645687 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.035243586 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.074987968 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.030228042 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.153260626 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.02260789 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.032717526 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.046416673 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.021786331 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.027565704 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.022094382 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.041420125 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.026355418 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.024209018 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.031964947 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.02290482 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.022555349 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.022325456 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.022691527 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.031191325 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.023940064 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.021956705 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.022001219 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.023119676 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.028372387 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.028212478 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.033865857 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.043933138 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.51034329 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.025293764 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.025650378 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.023536377 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.023644922 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.19813697 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.02663871 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.022975184 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.024923059 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.023366228 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.023038726 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.054852871 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.027493405 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.023651434 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.044326434 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.02253174 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.032878891 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.137425744 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.039523609 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.026747346 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.021622279 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.285182768 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.114392771 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.043819541 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.042329778 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.023031196 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.033404612 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.022129097 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.022429931 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.02114407 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.050739168 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.026583477 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.021851851 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.020837189 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.021493545 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.072387468 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.030499528 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.021367965 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.030257147 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.021454104 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.022161167 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.051532919 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.022784288 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.022051694 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.041164192 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.034913445 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.110903171 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.03495378 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.025868309 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.079607577 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.022356601 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.022874447 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.023190553 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.125840115 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.035966095 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.02293717 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.021697851 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.029708652 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.03093579 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.080518509 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.028823334 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.024807151 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.030009757 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.020929259 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.021984611 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.047532489 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.051193549 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.023075772 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.025695461 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.02148714 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.021973359 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.101424776 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.030000199 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.026988084 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.115255105 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.023755078 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.03009787 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.021150376 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.514490883 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.027883113 seconds)
  done (took 24.139380359 seconds)
done (took 25.022522821 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.176764267 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.037630305 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.037088123 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.032562875 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.037045626 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.037677387 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.038328992 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.033352246 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.037506084 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.037578946 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.162565308 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.023171279 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.031864107 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.039666035 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.032578486 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.041265761 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.036549964 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.039713048 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.029097619 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.040055038 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.034609906 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.037698659 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.032611748 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.039153499 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.022850216 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.031272802 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.17239239 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.044917912 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.027092017 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.034806587 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.032948488 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.039203731 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.032526303 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.032220166 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.034334054 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.029279522 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.034291033 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.030242763 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.173677542 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.029437286 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.023298849 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.037752094 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.031464221 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.031399853 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.032444906 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.035366153 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.028700332 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.038110545 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.022877009 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.036830892 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.17434925 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.028548914 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.027300657 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.032521965 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.029337205 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.033310535 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.026269543 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.035327175 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.027893554 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.035588455 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.031256006 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.030868267 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.022315962 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.031708985 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.030092464 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.030152004 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.020993092 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.026576881 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.021766179 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.021661726 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.021311562 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.031268878 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.030363496 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.027844897 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.021443838 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.021704724 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.021354689 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.035172399 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.029638467 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.031374847 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.022476412 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.028522122 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.027710384 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.022273921 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.026859305 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.034185468 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.021424049 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.022241859 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.021354105 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.034245032 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.029405114 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.02251643 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.034419896 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.026703933 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.026280552 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.021563645 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.021178635 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.026385988 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.030230093 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.022134479 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.02136377 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.027460005 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.027900669 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.031434708 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.022125534 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.026597899 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.026535326 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.022124709 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.033035124 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.03132061 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.032146807 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.035936056 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.031025036 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.033488534 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.021757605 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.020392261 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.031874654 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.022173942 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.02721512 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.030593087 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.027383228 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.029841087 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.021990829 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.020912365 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.026152088 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.027777247 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.021770502 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.022261017 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.022561669 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.031512502 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.029570241 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.020885395 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.02124295 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.030858666 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.030761772 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.021326903 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.021093484 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.031406708 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.022859374 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.028658052 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.027596399 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.030888343 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.021425752 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.021821284 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.021013017 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.021493611 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.020982868 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.027404174 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.026901272 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.022627442 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.031387986 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.029450641 seconds)
done (took 6.11429296 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.082649874 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.069628436 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.196226516 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.158118229 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.037452068 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.037973831 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.027891509 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.044652844 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.030363041 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.051072367 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.049231449 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.046397012 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.177736031 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.045774172 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.02387389 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.038008997 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.023279194 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.052735183 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.158936423 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.048738658 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.06991443 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.021096852 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.040756001 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.042474255 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.036353623 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.042803345 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.048909306 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.024098832 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.042542121 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.041747955 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.050891437 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.02517048 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.022815885 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.044761295 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.041198586 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.032713674 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.021799467 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.030049512 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.035273828 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.021847995 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.0706579 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.0426833 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.029904742 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.029956221 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.022683628 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.038479557 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.022599709 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.031690208 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.038981352 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.029762785 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.036320656 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.041573255 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.024764051 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.042364791 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.020916571 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.031249094 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.031613658 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.022465104 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.023017831 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.021874585 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.021726371 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.02490882 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.036536817 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.043855297 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.027010153 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.031864349 seconds)
  done (took 3.929481395 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.051900067 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.071667417 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.037440393 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.038158675 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.022085256 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.023472792 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.023386298 seconds)
  done (took 1.256445044 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.102699462 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.152413091 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.159798389 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.161364419 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.170898441 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.156927743 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.036211044 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.054787589 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.061380882 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.172187747 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.16986858 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.163739201 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.027317456 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.036217203 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.058049095 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.170131837 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.03676974 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.030366398 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.156709 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.16336702 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.02893606 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.057125408 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.036500462 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.026024085 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.162137071 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.15408835 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.02778713 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.069796343 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.026199904 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.02379637 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023755685 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.048659552 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.15428581 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.040518785 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023869057 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.02245892 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.154629617 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.024609821 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.152921584 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.03172984 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.151146914 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.025800548 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.025973004 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.024387335 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.024906536 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.153685753 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.024620822 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.023249439 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.023090076 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.154369851 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.035447088 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.152729205 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.026768365 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.028608443 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.029803957 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.02985162 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.030210905 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.023921357 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.15587395 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.034549288 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.025809372 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.166066262 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.169713083 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.155855894 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.170183831 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.034602817 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.158347039 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.156173807 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.024570031 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.032758973 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.024285134 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.168433749 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.028523939 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.026484886 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.022113216 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.031229098 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.173245993 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.177363287 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.173898047 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.039261032 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.025268847 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.024071956 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.171071813 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.174622398 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.030308724 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023920268 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.023964162 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.04136073 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.051134556 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.026591147 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.029849583 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.024364748 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.035262802 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.0265366 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.02615155 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.322892429 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.023812969 seconds)
  done (took 8.709087781 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.037894514 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.023473373 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.0230088 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.023357874 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.023545671 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.023669819 seconds)
  done (took 1.161217242 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.051597966 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.024107206 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.0381953 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.024868669 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.04925994 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.14759799 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.148727315 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.025766988 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.04229239 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.037719036 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.148937525 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.154041051 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.157125736 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.027068799 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.150821935 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.037301547 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.149937917 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.029904498 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.036155754 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.025583785 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.039025431 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.025209184 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.025786612 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.165617472 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.019425154 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.036603288 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.038037959 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.037308413 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.0365661 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.025282542 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.024928335 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.018741436 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.030659227 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.025338459 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.150476704 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.031807081 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.024659386 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.020421633 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.029690232 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.019286148 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.156050534 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.027697969 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.031510887 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.021081422 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.026586511 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.032485546 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.020865466 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.03899201 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.151581175 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.020991422 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.020657975 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.025308203 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.019085416 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.019942613 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.031068928 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.025550208 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.020155258 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.151359794 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.025736732 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.030970539 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.024443897 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.018809822 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.025111844 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.018742888 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.030297308 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.020436751 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.031700996 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.026607276 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.025607172 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.024379813 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.019866592 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.02421959 seconds)
  done (took 4.506969177 seconds)
done (took 20.563605259 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.535381812 seconds)
  done (took 1.515307639 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.087632757 seconds)
  done (took 2.10836789 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.054622898 seconds)
  done (took 1.073795643 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.323661962 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.554559654 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.790496018 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.096398603 seconds)
  done (took 2.756902814 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.877655571 seconds)
  done (took 1.937831751 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.227285894 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.189907427 seconds)
  done (took 1.459592747 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.515553746 seconds)
  done (took 1.543068717 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.463447074 seconds)
  done (took 2.48881801 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.213443188 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.142301573 seconds)
  done (took 1.37917131 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.642978215 seconds)
  done (took 1.65167109 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.809235308 seconds)
  done (took 5.84262544 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.199950908 seconds)
  done (took 1.304925114 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.195841319 seconds)
  done (took 1.232687281 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.721266019 seconds)
  done (took 1.727302707 seconds)
done (took 29.040829217 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.045632797 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.043111568 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.043448601 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.038463976 seconds)
  done (took 1.20367836 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.032429689 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.027725169 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.030319976 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.030468405 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.027443546 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.029518792 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.030275787 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.026762255 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.028535331 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.026988585 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.025097154 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.026449896 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.029344616 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.026042234 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.029003404 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.030673437 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.02725546 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.02775372 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.028763178 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.026066051 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.029118876 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.026482217 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.026434719 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.027751787 seconds)
  done (took 1.703832995 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.035965503 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.028646714 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.031970313 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.027212395 seconds)
  done (took 1.136343544 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.034635342 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.032998465 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.043626272 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.048908334 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.033912534 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.033576742 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.040261794 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.041360469 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.049276584 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.04572484 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.024626338 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.023987449 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.023312244 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.043993087 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.041131391 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.018144677 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.019501328 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.034447719 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.033890192 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.037637234 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.027866106 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.022831898 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.034837508 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.035174233 seconds)
  done (took 1.853755361 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.04001198 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.02236196 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.039889877 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.049330787 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.049224044 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.021309777 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.037323368 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.050778819 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.09015553 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.02195762 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.028706423 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.022098877 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.063712465 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.02239845 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.0387964 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.070857529 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.07384977 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.026882835 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.056249515 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.0229365 seconds)
  done (took 1.890851401 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.029867466 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.026728284 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.027580985 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.021160689 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.034514715 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.030098136 seconds)
  done (took 1.205725431 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.025610075 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.023761181 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.023650779 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.028438087 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.023555287 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.023597359 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.023820774 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.022424212 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.022547872 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.023543489 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.023437521 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.023789008 seconds)
  done (took 1.320605831 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.183200793 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.029786514 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.027705186 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.02249632 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.02423463 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.023089037 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.039914362 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.026057972 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.044000164 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.023147919 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.023443506 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.026179569 seconds)
  done (took 1.539590773 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.064024524 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072560618 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108177754 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080674283 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079053251 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056306601 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.21454514 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.036425007 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.13080811 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.100472552 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077904882 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051284582 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045158954 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.026562291 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061412504 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08019901 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101355332 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030631701 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.075275967 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.26568089 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098647219 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.100271125 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111582883 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078671632 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.05198941 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111419198 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05583457 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063311599 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085161179 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090284317 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081082204 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.058518518 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.028308951 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.028265468 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118418602 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.071260678 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084813053 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.054206685 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.066383419 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.04825535 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087958926 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.026307546 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.039764764 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.07210387 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.047335856 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100914342 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.052296205 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078836419 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040119653 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107682872 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095141018 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.194808085 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.047335892 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069521705 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112683847 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.080405917 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.257381944 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068573484 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041677939 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.081945695 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.065732194 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059916839 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067368102 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038433224 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143165823 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047728193 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.077499071 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074824086 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.054879629 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.054310516 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.066750216 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097830201 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087099099 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.086778474 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099932445 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.051426484 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083698781 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.060813944 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.088429175 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064616744 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.029528335 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.0863113 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093651521 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.06245977 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.062898974 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098642991 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.052387237 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033222617 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.060898975 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.081536598 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.038035595 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.075308892 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039495128 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.092269429 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101606194 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058137452 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071988165 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080821371 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.036182894 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131616729 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.070351274 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030456972 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079423034 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077880933 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124036797 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058811872 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.032803521 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.062635411 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067168186 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.12250855 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074739044 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041221601 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07533772 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112596958 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.215642694 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.278123514 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057021093 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104377098 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074322231 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.045962617 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.033376083 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.049961045 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07429725 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067631073 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074053823 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052944842 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.041847553 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044123738 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077605732 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05106008 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038114811 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07349968 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.063115 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.032030424 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045903937 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.033783729 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108478444 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.037133741 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101444904 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090130669 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.033902236 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06793521 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.056236163 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066972045 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.059539502 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080990521 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103569308 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.153440788 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.050118346 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.054837504 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06910191 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.109285963 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088847695 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.051971547 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.035589231 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.059786299 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071940501 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.060925931 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08686268 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.05315851 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069203129 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.065539356 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107428881 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110096877 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062359744 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.062320739 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072838716 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.090038457 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032879354 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127877811 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067783493 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083004307 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.048121579 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118607259 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.074928571 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072345775 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.046516291 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.0629654 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.070204453 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070422606 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116837009 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.057520925 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.030273162 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056932831 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121257204 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.037461786 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078469078 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.051931412 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.055243852 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085281427 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.058577494 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.042973764 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.026380323 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100399947 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134194832 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.029430421 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081149523 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.080712644 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.069491715 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.092283612 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.027606877 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08576123 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107595735 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083049187 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116773513 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.165814048 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08844367 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08405979 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.081472538 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.069710427 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.038875371 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.093409196 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104600575 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060816737 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054540966 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104521094 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083779773 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.106893646 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.086307342 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092578721 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.071662445 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070658069 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07068283 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.072456197 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116316121 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087968605 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.091082234 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.043299422 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070144465 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082998828 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104885231 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040301692 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113528328 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.047248593 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.444764402 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.036352547 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084987914 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.034391576 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.140120354 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.038182949 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.060561601 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.028046334 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.032879846 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108622091 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.081278738 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068425854 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062052619 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.103713594 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.106262606 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.037946554 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072845398 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.078762183 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.063455935 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080670759 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.071738669 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.051129307 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057219343 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.071620455 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.045003987 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.041589637 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080917992 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055318642 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089745451 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.042547341 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.03319667 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104652343 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066770825 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057373411 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034949341 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069481585 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.089339442 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.053519169 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045941605 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081889188 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069466274 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111832173 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.050534778 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.059295829 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090817637 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040545636 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.053054569 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.027430292 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.04521251 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.035339054 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.094873033 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.034339328 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079722014 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.025688913 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097342346 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.047217365 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.052579396 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.06211104 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072538413 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091615223 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05360147 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108148826 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049652245 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08327969 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069346876 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.076501191 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046320142 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065161597 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.063139465 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088054989 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.05686037 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091351317 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.271388948 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062377061 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10481289 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049086417 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08418536 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06727941 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085355625 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.073087291 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157348834 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104375878 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073265812 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071383256 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.033009793 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.055257994 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066611706 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075031908 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145020071 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08849791 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.030656333 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068188189 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.056700122 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073990868 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066973052 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041671881 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110860878 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064639695 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.046613171 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07509552 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.052007562 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.065055756 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03443906 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063315816 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.063528739 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.055009016 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057756039 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.077120793 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093240703 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075306834 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111734399 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.063418815 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.052005194 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.083098609 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074289913 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071999168 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044560466 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045485474 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107104229 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082593934 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.089464289 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.058975893 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074404902 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.076375798 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063317002 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088311323 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071539817 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.095755695 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039583655 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.036158847 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.025531491 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.029483155 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089611328 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072803923 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.226821957 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063879454 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.028869483 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.061441021 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063758651 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029462529 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043410878 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052448425 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.056726264 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.051227426 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066266985 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.073564185 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.054767391 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06344698 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057270243 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110524556 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.057829654 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048234334 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108950908 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115140582 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047757062 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053242003 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.029455941 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.038537966 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.080148235 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112567527 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120760835 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.037882483 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.045241037 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.045704356 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046475902 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.02810268 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.050757744 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.050147426 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066961475 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058331155 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.077404169 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067434941 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034055584 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.065009594 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061081431 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053099755 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.068196309 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083513347 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091662992 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.110944937 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076900519 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07191031 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034577601 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.03950518 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.034105761 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037541917 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.061782937 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.037741978 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034421558 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112337102 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.052180021 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067452863 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071088072 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.047651835 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03378724 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100547109 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.026635532 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101339613 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.028200733 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.04222166 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.041952956 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037456269 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054679413 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108707928 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073728942 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077510334 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.222209252 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06494257 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151016329 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124158551 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.04048387 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110902039 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035529572 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036169363 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.034843988 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071648877 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049298051 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.075168904 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105548263 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046999134 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060656468 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035727874 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108031463 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.058865956 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.063272206 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.043672715 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.036710364 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107970786 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037160086 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.040269232 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.048338155 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07181825 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.029542158 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.061688269 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.041395075 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037222805 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155647145 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.672501844 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058463972 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.034356483 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.056584599 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110006914 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102863476 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05739518 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070586737 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.082472681 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.061088905 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.053863813 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069987986 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.162140479 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.03123154 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055839258 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.064711589 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057691538 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062219691 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.060328981 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.052747945 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.053308609 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.045843731 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.038237603 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069780525 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04672891 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058294095 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.069626856 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.044514456 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.050048555 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09943083 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.065553389 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.043019773 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049465288 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.068504841 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046736581 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070753253 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.027412027 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.07476847 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.048950501 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08646186 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.205917552 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.06746075 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087144613 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052450796 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097619959 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.067375341 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082072894 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044968937 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.035969565 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085982672 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.047936718 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034406286 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107618968 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.055840432 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.06307885 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063220894 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.054691717 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074494147 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078239917 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073341642 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.056637202 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036364604 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06115193 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.063322451 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.046403466 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039009841 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.033864292 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.034661909 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07089354 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.047243161 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.046246527 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.076510335 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.047857427 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.064500224 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.061137641 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086929735 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048682404 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.063730754 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.074447723 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053435247 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098567116 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.062912032 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094580571 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.406336664 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088177814 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095843019 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103491953 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.037895714 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.034126933 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.026010075 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.075954496 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.03872836 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.049055536 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.037027814 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099483785 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.042470352 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074411429 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.221860139 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.038997602 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055085408 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057580433 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.027280359 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.043635609 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071856396 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04645675 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040004892 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.083087765 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.041904143 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094757676 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.224036974 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056947377 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053259355 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038746876 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071762689 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.063186219 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.091177004 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.053399248 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.032099504 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084699904 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.065402002 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106086868 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.03226581 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038500566 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091510319 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063292809 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092932907 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.038825502 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121437576 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.106510478 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059733174 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099095502 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028162656 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047525753 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.048493417 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.085359094 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.04418291 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072042265 seconds)
  done (took 45.511402603 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.142395321 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.141665272 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.080043555 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.092790039 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.247974365 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.256237658 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.109319349 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.08067277 seconds)
  done (took 2.384762731 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.028941027 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.041164838 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.038640427 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.309470642 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.062328253 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.023757138 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.028924378 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.040135265 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.027502849 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.023237815 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.0639728 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.02328321 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.027105086 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.489665502 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.022295095 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.029196438 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.027622347 seconds)
  done (took 2.502702629 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.325169968 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.739607628 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.4434929 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.42740279 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.105811907 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.568537881 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.031205693 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.038298711 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.634111647 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.37502658 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.101389361 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.184237874 seconds)
  done (took 18.174780326 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.033776235 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.174324268 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.171707203 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.032282215 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.031193127 seconds)
  done (took 1.619839179 seconds)
done (took 83.141160674 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.043501257 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.141480966 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.023610955 seconds)
  done (took 1.390448132 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.171307586 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.168411134 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.170208494 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.172882378 seconds)
  done (took 1.856110354 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.032315235 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.033854098 seconds)
  done (took 1.260495708 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.177408603 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.273356731 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.049550605 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.043255224 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.039513808 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.038979493 seconds)
  done (took 1.319322074 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.028209313 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.027196181 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.027562438 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.028132645 seconds)
  done (took 1.284426824 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.145700555 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.022442626 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.024950261 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.02635103 seconds)
  done (took 1.410481618 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.043141434 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.044473515 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.07653566 seconds)
  done (took 1.342364359 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.041292932 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.042261545 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.037226446 seconds)
  done (took 1.32495063 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.067177799 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.055683289 seconds)
  done (took 1.300021511 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.03917382 seconds)
  done (took 1.236459366 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.050894579 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.057667362 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.237726345 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.203673605 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.244012437 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.231089181 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.038740362 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.03635044 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.031610257 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.030101108 seconds)
  done (took 2.341112506 seconds)
done (took 17.792591317 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.039699107 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.153796929 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.273112065 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.046557918 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.61489772 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.269974911 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.685621934 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.049460979 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.059943289 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.024469027 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.043658683 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.589580658 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.691099129 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.108586208 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.67323425 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.092577 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.765019309 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.026032093 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.024021711 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.024861711 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.667282101 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.025290781 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.0247598 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.024982099 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.762437706 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.416674107 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.027463154 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.093122707 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.025445534 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.02898933 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.395849918 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.026963669 seconds)
  done (took 12.951199034 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.027669983 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.083753912 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.02958301 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.04182961 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.026580944 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.026454451 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.028878633 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.025981718 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.072053668 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.024837673 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.044079155 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.024081476 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.029414528 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.026577419 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.047709974 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.024908289 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.026905626 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.025096448 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.024174145 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.02504186 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.044921929 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.024200172 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.025957118 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.025723529 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.024966641 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.040251162 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.02573334 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.024194874 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.024495254 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.028810882 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.029918273 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.026897566 seconds)
  done (took 2.255044207 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.086270119 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.087225828 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.030414748 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.068373049 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.082066884 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.027639488 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.116248488 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.050322442 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.076018947 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.025871748 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.045064146 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.024965468 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.066665224 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.026949993 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.048422624 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.02516037 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.028187159 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.026107434 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.024858595 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.025575217 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.047133677 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.025072189 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.025729086 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.025515726 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.025488868 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.042330485 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.025847426 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.024392634 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.024854038 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.029414174 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.031018394 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.02628214 seconds)
  done (took 2.552650695 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.027297636 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.030007619 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.037774533 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.041874785 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.024252554 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.02717044 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.028444951 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.024418422 seconds)
  done (took 1.434998433 seconds)
done (took 20.391281539 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.037923413 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.024389729 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.027997419 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.046578386 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.033708483 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.161906494 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.023033415 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.032568057 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.030488328 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.030314002 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.031018136 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.023006347 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.027271963 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.021570206 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.029169139 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.022879193 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.160161383 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.027853994 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.159488326 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.16152932 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.026560188 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.029695367 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.032533432 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.15877837 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.16022153 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.160114269 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.033087359 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.029311177 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.023091285 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.026327172 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.156808837 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.159777989 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.026984582 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.156630008 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.023509326 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.022753376 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.027960336 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.025320058 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.16232999 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.033249625 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.026090644 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.033466066 seconds)
  done (took 3.830714641 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.160236799 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.169228562 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.161997272 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.036871433 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.0323555 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.035546629 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.168021108 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.033149391 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.03119579 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.167286016 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.027282174 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.03140114 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.033583622 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.023467275 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.030417529 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.026942435 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.032730953 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.025002022 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.031359453 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.031875322 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.166388068 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.024376062 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.032457636 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.032632107 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.026958553 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.034758749 seconds)
  done (took 2.842789401 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.031762589 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.04698637 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.049750655 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.108433987 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.068155517 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.039482456 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.040793438 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.053436695 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.058656973 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.023896948 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.047772549 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.054801357 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.055590606 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.032059247 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.06524674 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.044056926 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.037700774 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.025711804 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.031601773 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.061902926 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.048702515 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.044614042 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.058871022 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.046005573 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.023378389 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.034219178 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.031659308 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.043005947 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.032434536 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.037603573 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.028595546 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.029591675 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.026563714 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.038400635 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.029751535 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.023511401 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.051050682 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.04000182 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.042128664 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.067360168 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.035241596 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.025460937 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.053232608 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.09507052 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.023352689 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.026792014 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.028505653 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.037522082 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.025441421 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.056465222 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.042246505 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.023322899 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.044377345 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.025263739 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.025182373 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.041269928 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.025642418 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.026712167 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.037073703 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.030774483 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.047208894 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.029981931 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.04634937 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.023759894 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.037305467 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.026127633 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.025901817 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.022363172 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.06080564 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.031873616 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.079044438 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.026030922 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.022481394 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.037845382 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.036609344 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.031881342 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.023725758 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.044997102 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.038532619 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.028774867 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.036055788 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.026978399 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.02743189 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.061139035 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.023248028 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.022414672 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.022874105 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.028205098 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.028385802 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.024622317 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.038177783 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.022953494 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.027375511 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.039824561 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.023963828 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.025102256 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.027449625 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.025715391 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.023186271 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.035277297 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.027756955 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.025636228 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.038081113 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.025397153 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.028152011 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.045189405 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.036617374 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.024567942 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.027134735 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.028674144 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.027427127 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.030673213 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.029045472 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.027913367 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.031307501 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.03407324 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.03197022 seconds)
  done (took 5.546582082 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.259445102 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.252373015 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.024934762 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.248170043 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.03334627 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.175629615 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.256767301 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.258341861 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.025128103 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.025453409 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.023709246 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.19077756 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.185159833 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.197225447 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.175273162 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.027155633 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.053102453 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.195680283 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.254942708 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.250417026 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.052010813 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.032411931 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.026621881 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.025728595 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.024921638 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.033677118 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.041562735 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.034680658 seconds)
  done (took 4.615500352 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.032103783 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.071483692 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.02835795 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.051361092 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.04416584 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.026089207 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.026547079 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.025286332 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.042566595 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.030712412 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.024674851 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.028914814 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.02915292 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.027793715 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.025267841 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.031567308 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.031524808 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.023275792 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.028460693 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.029656622 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.03714955 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.051754418 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.029077729 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.024523087 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.028385692 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.024420942 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.030282627 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.034037092 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.024596718 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.024708967 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.022260832 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.029781501 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.040834058 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.025724184 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.024058363 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.025047854 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.024643137 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.024998061 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.025415897 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.023371826 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.023203778 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.030073582 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.0230655 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.029700613 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.038747431 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.026603425 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.026744664 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.027726447 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.027767623 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.021667645 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.028035772 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.027986515 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.026991478 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.033489802 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.028371108 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.027478616 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.02659621 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.041054293 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.030890985 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.023909248 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.023574291 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.02339523 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.028560887 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.033443004 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.044161454 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.028582239 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.024546868 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.026327845 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.027742772 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.041197515 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.025580276 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.032664372 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.022996222 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.02571923 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.028150686 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.028096724 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.026234992 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.023008718 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.024249628 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.023869375 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.024675675 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.024457313 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.024132392 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.028175345 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.023377859 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.023272642 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.025520878 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.026861643 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.030648988 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.023511669 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.028494805 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.027293557 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.024058401 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.028054845 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.031220315 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.02846337 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.047936635 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.034077155 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.026164948 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.023087599 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.042337601 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.027772063 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.024837469 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.02730064 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.030287722 seconds)
  done (took 4.341185698 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.055313223 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.026786771 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.045745267 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.061286271 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.038067467 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.032972521 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.041481023 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.027832956 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.050912638 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.02539852 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.036311587 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.024119224 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.040677754 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.036083106 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.027163132 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.03557668 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.028302903 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.047602583 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.041061683 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.023341523 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.034000369 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.038155475 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.038316489 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.044729963 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.044416216 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.04447113 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.037900581 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.02790319 seconds)
  done (took 2.296334742 seconds)
done (took 24.666441744 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.259455094 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.485580247 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.252548781 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.945083094 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.4381089 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.26470776 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.387861104 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.243480491 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.420541326 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.319495826 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.926601352 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.913872184 seconds)
done (took 62.218888447 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.223544237 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.413019474 seconds)
    (2/2) benchmarking "String"...
    done (took 1.478140147 seconds)
  done (took 4.105630469 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.708870631 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.253410327 seconds)
    (3/3) benchmarking "different"...
    done (took 1.310097101 seconds)
  done (took 5.503489935 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.558324786 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.06923975 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.505465688 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.262704821 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.247468789 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.584059962 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.319065308 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.802721391 seconds)
  done (took 28.002693727 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.179296327 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.409755442 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.527379181 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.612016885 seconds)
  done (took 17.924698157 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.587265243 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.609193577 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.610849444 seconds)
    (4/4) benchmarking "different"...
    done (took 1.877014929 seconds)
  done (took 7.92048367 seconds)
done (took 73.593767465 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.131182874 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.445259163 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.16556451 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.321727903 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.239712202 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.231261167 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.146617754 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.171071609 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.140094762 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.139611098 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.138760755 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.142745394 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.144077402 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.212301276 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.141802121 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.155772769 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.429851171 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.139160078 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.169051178 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.961316006 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.463985259 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.141377032 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.148067358 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.210253642 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.580028699 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.155386132 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.591742845 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.148333538 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.738362303 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.134355301 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.149070955 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.138237951 seconds)
  done (took 183.468897288 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.125230527 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.984217065 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.971218293 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.15409736 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.528700694 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.491836434 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.001443562 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.543528564 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.13888612 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.175507166 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.145063095 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.134379014 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.170311472 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.697504451 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.172797018 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.173617576 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.04422712 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.976194385 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.183673078 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.072330047 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.129554698 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.757071649 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.72337068 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.975439132 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.138733181 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.181210347 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.144411775 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.152233245 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.632991944 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.012469749 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.151758991 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.172141 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.32927027 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.376138108 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.134535061 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.141278159 seconds)
  done (took 154.150333019 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.349608977 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.134902516 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.175365048 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.244238235 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.086114006 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.939797631 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.136902473 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.124722487 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.125677778 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.131892122 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.130653665 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.195000684 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.136920654 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.146281871 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.167708018 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.126647939 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.126165077 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.133527134 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.146648165 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.125819668 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.126047084 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.229774003 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.477459781 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.24460838 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.13630984 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.133286153 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.234118972 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.144999694 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.127805753 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.128828442 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.235062209 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.140241073 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.257563368 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.245076563 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.142834302 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.187712812 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.142767195 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.319684293 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.14219172 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.125684895 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.127452841 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.175027065 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.138902588 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.191774893 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.238576955 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.140054595 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.146035232 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.625237967 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.707914583 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.139148939 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.129903011 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.124738912 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.129446599 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.127555515 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.234928486 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.1403714 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.161468124 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.877257878 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.22106719 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.217203997 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.209802965 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.200115548 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.197402804 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.210142853 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.246095547 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.873442494 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.324186823 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.589151681 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.035981779 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.250791564 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.220495171 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.251398627 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.302760053 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.296963412 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.239398602 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.217439389 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.425874708 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.225326862 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.229828418 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.165591967 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.134406155 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.207972261 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.365118753 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.223876373 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.243614761 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.495622465 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.582404292 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.255093677 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.244735954 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.301570329 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.226672033 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.199239779 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.250136899 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.146161509 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.227926209 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.247192333 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.615435498 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.234565884 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.226130394 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.607505965 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.597901309 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.195080254 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.254892364 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.57957096 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.109750726 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.17392323 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.166183105 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.185771006 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.169418797 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.17731935 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.177724917 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.165605316 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.165738994 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.168169408 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.163503051 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.163231348 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.164463227 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.18516847 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.166321295 seconds)
  done (took 334.462323209 seconds)
done (took 674.700335568 seconds)
(4/20) benchmarking "parallel"...
done (took 1.16309431 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.423388145 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.180503329 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.317371268 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.415554024 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.375877066 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.349791248 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.38134195 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.463517176 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.401092702 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.342028033 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.398614642 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.354258258 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.467849358 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.430064433 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.465122089 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.435520184 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.374226777 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.86903292 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.388869545 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.356836418 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.381590729 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.340284975 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.336986757 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.406231613 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.470872366 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.346451952 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.573447007 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.410668487 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.385837102 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.423447353 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.455223218 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.456284263 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.385760153 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.467064319 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.419232046 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.474979156 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.330176532 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.44227306 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.386373065 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.393078763 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.407184891 seconds)
  done (took 66.026434902 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.624642389 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.414304673 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.506932113 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.498879789 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.075025365 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.477051124 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.557937079 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.35325073 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.361657611 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.508353404 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.489459268 seconds)
  done (took 19.061090702 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.445837857 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.358628639 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.485862337 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.492342253 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.589091672 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.484081774 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.528332575 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.359048034 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.362000634 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.489030296 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.500893502 seconds)
  done (took 18.255068647 seconds)
done (took 104.503972117 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.753323676 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.24068641 seconds)
  done (took 4.132293643 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.19886099 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.182953616 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.175809417 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.181601904 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.181336507 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.17457927 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.227248867 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.190122171 seconds)
  done (took 10.648615005 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.17730809 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.17626495 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.176683165 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.174998771 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.17820744 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.17516712 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.175213992 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.178135893 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.177282578 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.173247688 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.174562837 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.174899449 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.1782945 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.17475391 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.174115986 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.175025691 seconds)
  done (took 19.952731868 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.177120686 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.175219169 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.17420653 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.174219348 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.177650241 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.174499459 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.174135915 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.183571528 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.1773613 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.174049104 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.175151106 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.174625012 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.179334813 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.174433941 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.175243122 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.174865832 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.177340563 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.17854998 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.175204121 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.176361657 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.174363411 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.177792358 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.175891681 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.177406721 seconds)
  done (took 29.365730299 seconds)
done (took 65.282566953 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.876271141 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.273660657 seconds)
  done (took 7.286287263 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.179383681 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.177191119 seconds)
  done (took 3.61040895 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.175337236 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.175610066 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.175376456 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.178955919 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.17517949 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.176740126 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.174777665 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.176964318 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.175291959 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.174612461 seconds)
  done (took 12.895196983 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.179058883 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.175199212 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.174428809 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.176603099 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.175916159 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.178518452 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.180461927 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.176860209 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.175328867 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.178547873 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.174803516 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.362914565 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.17724952 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.405564456 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.175049771 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.174582937 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.174937278 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.178851882 seconds)
  done (took 22.730803905 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.174380096 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.175654271 seconds)
  done (took 3.486808026 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.173593283 seconds)
    (2/7) benchmarking "second"...
    done (took 1.174586607 seconds)
    (3/7) benchmarking "month"...
    done (took 1.175658677 seconds)
    (4/7) benchmarking "year"...
    done (took 1.173823494 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.176993839 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.173696287 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.175090231 seconds)
  done (took 9.362366763 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.622385189 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.342354775 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.387217902 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.644313799 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.825948399 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.122546297 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.833166098 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.122757445 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.998829187 seconds)
  done (took 17.035020713 seconds)
done (took 77.567448201 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.913830493 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.146794562 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.809285045 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.256709984 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.22926023 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.477698781 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.162762239 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.741544703 seconds)
done (took 37.923243233 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.336162931 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.161831963 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.206910804 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.210933736 seconds)
  done (took 19.72004214 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.161666761 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.780030219 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.209534702 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.203006178 seconds)
  done (took 19.581887464 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.685955437 seconds)
    (2/2) benchmarking "read"...
    done (took 1.59407976 seconds)
  done (took 4.430187152 seconds)
done (took 51.233947299 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.175310886 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.174479419 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.178072976 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.176206193 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.175172157 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.174974937 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.178398658 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.175321576 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.175252197 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.174850454 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.174688682 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.177897136 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.174218092 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.174607775 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.173742529 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.178940582 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.174850514 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.17490161 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.174356787 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.177637859 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.174636433 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.175279161 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.174015711 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.17813043 seconds)
  done (took 29.352996627 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.246872732 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.243211587 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.255752775 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.252698775 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.27467357 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.253085832 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.247420203 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.217555625 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.256238432 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.224195306 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.212608259 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.267723703 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.213757148 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.271961286 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.215996147 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.273866243 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.252854301 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.218504736 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.214792788 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.275875196 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.246958451 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.217767824 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.267657836 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.212677582 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.264406697 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.213367498 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.224387899 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.243052346 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.214598292 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.267049523 seconds)
  done (took 38.399443275 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.212802271 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.180882939 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.17538092 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.265539833 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.180101057 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.175796709 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.176040848 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.175619501 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.17915566 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.174745172 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.176596741 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.174657709 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.180124176 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.175564533 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.175649131 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.176550098 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.211684441 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.356733047 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.175559916 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.175259679 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.21990842 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.179453525 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.175308383 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.175195534 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.175512412 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.179840076 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.174877085 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.176156823 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.177231805 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.181003513 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.175800235 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.228666754 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.210481772 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.179550249 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.300066069 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.236137307 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.176889396 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.211839678 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.175716323 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.1758682 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.176153534 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.175884653 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.181018635 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.17604969 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.2360217 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.176050091 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.180388173 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.175416971 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.176836591 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.175881213 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.179471503 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.175434145 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.190262121 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.175722541 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.179078216 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.175774142 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.174546447 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.175990361 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.175410384 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.178880169 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.175726424 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.250138473 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.177326347 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.179609343 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.550711092 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.1780194 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.239294567 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.180170249 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.180548748 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.399684155 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.176527434 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.384930573 seconds)
  done (took 87.582296844 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.176044823 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.175861271 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.259411566 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.259776866 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.175772994 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.17598663 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.178830238 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.175441796 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.845362866 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.177481011 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.179028642 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.174282521 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.832285671 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.179602686 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.175570692 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.259365244 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.176128136 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.178292311 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.174637006 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.175305694 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.17542943 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.175000554 seconds)
  done (took 28.593051691 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.210374938 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.1905795 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.211773905 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.194996518 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.190343844 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.190470265 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.212594595 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.195726322 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.21140932 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.220659901 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.211198668 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.215491953 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.189476402 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.21729475 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.215854851 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.25363981 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.211858793 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.251628033 seconds)
  done (took 22.935157253 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.355403199 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.341760542 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.256315505 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.218945798 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.440628978 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.411275699 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.280532179 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.350633778 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.222170574 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.341767558 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.351594811 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.218180199 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.414118124 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.223103094 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.219061622 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.438414236 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.25847158 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.218292806 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.287681869 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.28142021 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.355882391 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.288416624 seconds)
  done (took 29.912405926 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.210426727 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.22525264 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.253173818 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.248635724 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.175745941 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.179226454 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.234678142 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.212766945 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.191668439 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.221338067 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.215938038 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.175846347 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.264719024 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.232515379 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.264680701 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.215840095 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.226546525 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.232192658 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.213903107 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.175979979 seconds)
  done (took 25.510370439 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.178580821 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.175638426 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.176909947 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.176298023 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.179344039 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.175529715 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.175067567 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.175089734 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.176600287 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.433973739 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.177828065 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.175740409 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.176455508 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.179469815 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.176230724 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.175999966 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.175985964 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.179248977 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.176187966 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.175699807 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.431359494 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.181208085 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.176057463 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.176305298 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.176285349 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.179233055 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.175893118 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.177242039 seconds)
  done (took 34.602888707 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.240307998 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.177348361 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.176149077 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.175078092 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.176006535 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.247434304 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.181084904 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.176248265 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.175772119 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.180036138 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.174577719 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.176242695 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.174460391 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.239271809 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.176150327 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.175394103 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.313624373 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.179671258 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.251892621 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.163523225 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.179693313 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.307224713 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.180214663 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.178713837 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.163175651 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.179685989 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.175377375 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.177351692 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.175056119 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.174695264 seconds)
  done (took 54.958661797 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.198857605 seconds)
    (2/2) benchmarking "in"...
    done (took 1.197186497 seconds)
  done (took 3.532923603 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.175055924 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.278281895 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.180872758 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.374075548 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.34239052 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.351682984 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.344769516 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.273015857 seconds)
  done (took 11.458025065 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.177793788 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.574342635 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.197073985 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.175688402 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.176144298 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.654448405 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.121566191 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.072534103 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.994235008 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.187338053 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.295543403 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.749713281 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.166772061 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.506019061 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.300790542 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.028549468 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.438520197 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.762952102 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.261548771 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.30958451 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.94839171 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.286071714 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.17659709 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.174844025 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.180413566 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.10394917 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 4.100732347 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.626308115 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.349043549 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.308812564 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.97422966 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.264215004 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.180741844 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.458738503 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.304848578 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.177898256 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.362379093 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.29236099 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.18036343 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.176352364 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.968992495 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.909418686 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.471249675 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.433299644 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.275782195 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.177805849 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.176837491 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.177153354 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.466839485 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.843360323 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.169317382 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.171840664 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.323672862 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.177856838 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.918772812 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.188278708 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.176309566 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.110892271 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.814282933 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.455581135 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.578181635 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.313656718 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.219679581 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.313601684 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.176924049 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.40011338 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.015148408 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.996818607 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.976957885 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.299401984 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.719276967 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.195819576 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.176542835 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.178486895 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.134705005 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.49033546 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.185655003 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.177785966 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.177969003 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.176608722 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.464079331 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.303874378 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.025854198 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.32313608 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.384003399 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.671829943 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.317077852 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.176947404 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.849595965 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.05412471 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.299964891 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.853431786 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.402665328 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.322356581 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.196283116 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.474685573 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.22323644 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.177758072 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.029687402 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.831135268 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.189804411 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.176522046 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.552479442 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.230956166 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.189257337 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.177034233 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.900047887 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.312459213 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.32715945 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.225515904 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.177564342 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.17622028 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.800750282 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.304855032 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.185208489 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.699156743 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.174285321 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.736253077 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.45981077 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.412080671 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.553429524 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.207516042 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.475876511 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 3.018578417 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.189151358 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.725267787 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.095067482 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.785398239 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.455255502 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.310697444 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 5.076551827 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.248373092 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.176770136 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.355265865 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.262028211 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.181657522 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.176013011 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.177706587 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.176836573 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.180999486 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.319495361 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.579836289 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 5.064733152 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.188102412 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.432111614 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.307712006 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 5.061324027 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.42448534 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.917654537 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.324246806 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.182167201 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.955747658 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.465003356 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.916385894 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.312692845 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.181289643 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.175035366 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.025070942 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.203140584 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.284646981 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.181442627 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.802878392 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.307765514 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.183836564 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.175506532 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.66455082 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.321615062 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.176052192 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.313279778 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.984009566 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.101778128 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.190421419 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.504293713 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.301156312 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.17869689 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.174682486 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.174950356 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.982500054 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.856227891 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.367288086 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.8385206 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.981090672 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.278420766 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.358114059 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.281253928 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.469354212 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.437014367 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.327926171 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.176291383 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.175200341 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.176963316 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.700954381 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.054592534 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.250580564 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.044425998 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.211120404 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.178543745 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.296210608 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.98470026 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.1914872 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.91294991 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.169186451 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.292811909 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.177193097 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.175815048 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.346256809 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.38412408 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.326221031 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.762622054 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.187406547 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.178482574 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.862567247 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.313734549 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.860817932 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.292894841 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.030525697 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.287177556 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.313181207 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.378593863 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.888292195 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.319691427 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.177334684 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.925329657 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.330635692 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.176412964 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.237782284 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.896786215 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.99670297 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.959352583 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.842895099 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.123630768 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.759259419 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.44410067 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.325518725 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.031680394 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.291867733 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.44701047 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.250812365 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.707465797 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.195510817 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.937734109 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.192872586 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.961761845 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.18681884 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.182948019 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.309811482 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.646667598 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.303264774 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.177234331 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.375762278 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.281315478 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.864090392 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.312321847 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.320559514 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.523237769 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.120811129 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.28690677 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.443382537 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.24768556 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.131457075 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.156056693 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.542288023 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.120180856 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.201676381 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.295214132 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.976898947 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.35797204 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.437381676 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.322154054 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.179270987 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.17664529 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.368665027 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.27711036 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.177344891 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.535165977 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.165506208 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.241360753 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.295626835 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.185406361 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.177794775 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.428467392 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.339719207 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.499780258 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.69082914 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.790921738 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.016137812 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.312655266 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.872385072 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.320501096 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.884791215 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.303005836 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.186816638 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.874002208 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.313400109 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.47194303 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.332872867 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.307231172 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.868901488 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.296002802 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.480623537 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.335486844 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.310170254 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.969313661 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.752611143 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.446033428 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.596381134 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.21950359 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.751108606 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.248277743 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.774869616 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.192795761 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.899994662 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.29950606 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.243568961 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.178529766 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.177354535 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.744400931 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.167433558 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.187538477 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.973913738 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.90664412 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.095332935 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.946733253 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.305946317 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.185154685 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.181549522 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.176374917 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.088330785 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.30739843 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.551523651 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.321409288 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.181163852 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.176571758 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.161694084 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.539709287 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.008370287 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.084908211 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.162419467 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.322797772 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.182565693 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.177453515 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.178132735 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.17642106 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.180826795 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.17646004 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.704025554 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.189526948 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.80957085 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.312743302 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.188494007 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.411307015 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.249350587 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.17965034 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.413126265 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.269613748 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.307772788 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.253322957 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.17785123 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.613563645 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.323849695 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.16508114 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.507039093 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.506875142 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.437773926 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.760149472 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.239822958 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.61489432 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.531437283 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.973314988 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.187064079 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.107225576 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.296109532 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.999398223 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.190553465 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.671844506 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.825510622 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.188716146 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.464396068 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.104827086 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.588669112 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.351531016 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.258957674 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.178229401 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.177050549 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.248890465 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.44768496 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.233102624 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.495374989 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.403330785 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.18230022 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.534478281 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.288423456 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.417889473 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.217029496 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.19633177 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.177925747 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.178680632 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.628297113 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.109889876 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.276267013 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.178611878 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.107776163 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 4.085752148 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.105348034 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.852824286 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.086042459 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.321751582 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.178306397 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.398815754 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.234963194 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.990804571 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.202244457 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.975841051 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.528248783 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.231483864 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.401193234 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.609429454 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.928924207 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.605581881 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.305682293 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.177382039 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.556250633 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.199150617 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.326065627 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.088937115 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.554333594 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.77547397 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.669429486 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.468914742 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.303360673 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.095904167 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.79278177 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.189983619 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.191461087 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.035329712 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.326218993 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.469188925 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.186588038 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.46542976 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.327677912 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.833386409 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.937729668 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.32391231 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.790723644 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.325624859 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.179381998 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 5.008141127 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.113194735 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.372575053 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.309407117 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.178781118 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.196492289 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.874510338 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.805788155 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.403277318 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.263675472 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.18198318 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.974237799 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.904910923 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.308208752 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.188065979 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.178680031 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.653665397 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.23331508 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.177611732 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.612239001 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.818011589 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.324649027 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.699804785 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.331955087 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.325081287 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.466612412 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.595023894 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.409606539 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.245846122 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.177682521 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.178627743 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.181039479 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.76735914 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.190298695 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.179150339 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.796401046 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.326796256 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.943139665 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.10746521 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.437314513 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.258662521 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.610128843 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.324070771 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.712557325 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.088516194 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.296223782 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.481066711 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.253387487 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.303436211 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.942279934 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.292873022 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.178799629 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.134220016 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.556433251 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.561667595 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.596028913 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.501976267 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.276083232 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.896960851 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.303082347 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.984993445 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.195383091 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.178271645 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.698931263 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.34146977 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.641629691 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.339850637 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.674966522 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.305646485 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.546009037 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.456389521 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.277985207 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.183455351 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.179893689 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.199038714 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.231124719 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.784405278 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.101497502 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.66460808 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.321146531 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.057623808 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.756959553 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.920082469 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.546763554 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.524668834 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.48873527 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.21795892 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.168739891 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.569492897 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.270377605 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.363837525 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.282421332 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 4.003719074 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.261231798 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.178966541 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.773720921 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.190287734 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.179550039 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.178644757 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.088899517 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.99225642 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.291662239 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.410203663 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.283908161 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.180267659 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.813644125 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.483438616 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.2215501 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.181772678 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.179131275 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.04872949 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.298822327 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.179334542 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.538604069 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.338289579 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.507923313 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.028155894 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.640505278 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.277387206 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.178557746 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.179224934 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.897972614 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.780728466 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.211983886 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.542257667 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.233646334 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.719211033 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.178836586 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.664708736 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.745209545 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.204708802 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.309464318 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.180037441 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.208966074 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.119814768 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.099029462 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.951774046 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.635593215 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.280171997 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 4.001860129 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.344960193 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.339443863 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.452116595 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.34629641 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.243144334 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.242464563 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.270534949 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.763615569 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.282191005 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.265710474 seconds)
  done (took 1484.753145564 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.542339235 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.231509919 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.246490605 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.255571321 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.253186282 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.256713456 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.232208168 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.197788916 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.269671061 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.25967554 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.227704286 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.239559191 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.266751999 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.513179412 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.268406207 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.22751144 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.217994588 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.276913174 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.243221525 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.259807236 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.222010204 seconds)
  done (took 27.897667941 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.251292559 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.219674864 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.272998565 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.233331346 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.227423019 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.265422931 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.21676314 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.26072954 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.230300041 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.21624222 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.261302843 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.250980483 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.23624719 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.22875245 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.272247829 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.223585921 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.230854954 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.273361021 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.226114551 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.265929128 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.221943019 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.261175653 seconds)
  done (took 28.555667796 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.232383624 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.267424229 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.04725694 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.374386813 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.268716585 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.231270383 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.235907183 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.485971766 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.281980662 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.12704627 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.704213147 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.318858062 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.268638244 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.468484927 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.353972254 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.218972106 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.315897933 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.192244857 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.189007946 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.188043488 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.186337406 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.434306371 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.333781185 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.185349961 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.036606534 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.332547803 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.184571573 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.183403418 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.183288663 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.174828282 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.295443058 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.194550893 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.062920875 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.99748111 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.546582471 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.099303202 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.308281104 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.19538536 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.180475363 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.181944195 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.407819232 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.978813819 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.189873349 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.184140832 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.509135866 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.310793742 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.183681163 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.556450919 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.237743797 seconds)
  done (took 93.841464835 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.190985197 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.320034837 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.239241071 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.182094556 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.312079108 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.182229309 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.234756475 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.181575954 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.180457388 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.183590241 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.321076474 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.33897409 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.181820667 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.184773688 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.267822486 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.182161844 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.18063201 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.18360221 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.184191466 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.180466922 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.180463268 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.235366684 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.306482268 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.340911847 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.182170045 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.183368637 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.181825242 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.180304377 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.332356813 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.185146323 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.182188566 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.181021445 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.318208727 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.266003507 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.182065519 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.18257555 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.316894904 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.185110093 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.181025333 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.18111269 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.179971136 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.183989614 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.244737606 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.322190473 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.182171858 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.287695225 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.181979829 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.182028502 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.329550852 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.185185643 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.181357601 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.351387716 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.183351994 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.180328364 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.184254781 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.313236032 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.181343229 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.181507291 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.18486986 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.325408324 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.181783503 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.181145463 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.341505414 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.182905737 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.181371264 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.349544049 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.286310667 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.181205739 seconds)
  done (took 84.476352606 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.182804872 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.322743999 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.356876394 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.360202398 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.319852194 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.319733662 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.321837162 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.319975216 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.322178488 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.326643697 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.319679342 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.273036369 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.291370958 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.278124261 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.322819733 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.309104618 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.314751173 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.308678402 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.322240318 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.321009445 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.316001559 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.357536211 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.320049918 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.358193554 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.549970071 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.289528348 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.319344955 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.323363967 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.361130172 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.319625093 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.544316749 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.325946788 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.318340285 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.362380972 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.543628075 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.320288044 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.182609046 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.318636261 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.325836241 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.320384134 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.290378868 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.360997229 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.319701322 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.289209604 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.31096896 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.316971498 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.362188717 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.542090686 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.278433436 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.32161777 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.322276768 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.36028735 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.317635047 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.321083127 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.359355294 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.279227089 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.357512838 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.363376366 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.322793119 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.358927793 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.360253632 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.28560174 seconds)
  done (took 83.835985189 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.180031886 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.180926331 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.26859495 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.184398805 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.182346772 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.265937013 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.184965435 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.181305745 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.181004423 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.180813603 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.183935692 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.265360618 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.543445055 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.186446065 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.265856511 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.543244267 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.270758666 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.266664205 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.182021663 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.266080758 seconds)
  done (took 28.107296286 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.180632776 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.182130725 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.181923412 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.338580887 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.181944764 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.317043887 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.18145391 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.18406649 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.181329463 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.180416101 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.181449997 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.182190786 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.183123593 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.336390867 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.182921553 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.316674103 seconds)
  done (took 20.638576755 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.181626941 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.181509739 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.181490592 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.185529265 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.181445387 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.181157173 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.183157175 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.184374409 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.181066416 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.638183265 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.182382032 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.183749563 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.181912535 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.182009256 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.183467902 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.184716299 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.181581899 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.181003232 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.180754666 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.185518544 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.758747363 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.183323287 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.181380202 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.184554622 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.182000961 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.7525477 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.182632889 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.183903504 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.180918982 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.18089999 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.181239659 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.66100787 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.18273082 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.181099943 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.182610054 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.183978099 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.181775347 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.180861656 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.181764219 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.183876893 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.181565826 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.181205421 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.182097858 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.184592189 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.182888628 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.182418875 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.181556191 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.635829263 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.187243803 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.182082309 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.182076513 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.181861326 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.182999218 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.651569801 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.184034722 seconds)
  done (took 69.191831394 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.219228791 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.234728803 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.180306472 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.179682158 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.239594575 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.21592176 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.222274688 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.195308195 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.223441781 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.181211459 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.245031941 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.195589516 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.219549128 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.235606849 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.241504127 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.222944594 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.185811698 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.249871144 seconds)
  done (took 23.032815121 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.17941308 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.18352425 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.180005766 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.180283023 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.179516747 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.183822677 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.180861572 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.179900957 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.179820014 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.180661596 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.182608564 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.180231754 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.180582415 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.179962356 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.182470966 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.179300898 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.179652938 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.180096239 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.181698252 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.179474439 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.17995207 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.179478992 seconds)
  done (took 27.116052958 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.210197393 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.226362769 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.18064188 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.185338852 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.182636081 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.203379054 seconds)
  done (took 8.332414148 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.232188888 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.249561182 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.216952116 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.234007833 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.243913343 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.2602746 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.257473353 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.263926487 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.24795441 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.490747085 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.265864761 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.258546132 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.252101143 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.311469448 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.245069629 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.250770858 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.270184106 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.264860516 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.229069396 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.263933474 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.27265131 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.250137566 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.270747805 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.258494287 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.2709433 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.311963842 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.250389028 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.491733658 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.262420686 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.250394128 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.246210698 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.270978091 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.256971597 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.483795312 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.231924481 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.250481642 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.264248082 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.264304258 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.246868055 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.306700352 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.227034551 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.246229534 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.252834883 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.270103494 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.254368941 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.270816978 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.26751105 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.273645049 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.273452797 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.496220236 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.249593634 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.305666788 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.24988341 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.25612338 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.249715678 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.486668762 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.489252664 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.304477908 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.250087743 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.489706232 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.309535497 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.246753811 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.304732987 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.490115552 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.247755744 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.309353017 seconds)
  done (took 86.257956069 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.311370029 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.21930147 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.272028384 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.492569725 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.309737714 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.27415096 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.269818007 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.271402955 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.261523792 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.241750192 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.261619192 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.276701999 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.309322821 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.311479227 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.266482214 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.267522272 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.267285482 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.30614924 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.23397847 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.497285727 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.270415906 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.309052706 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.310453022 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.312555742 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.484184197 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.254754298 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.266864777 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.271639573 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.258227898 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.272826742 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.277861577 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.276569183 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.308619907 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.21884268 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.308838804 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.268863589 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.269497882 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.275709436 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.274050533 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.251104535 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.311054257 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.260993693 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.271587846 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.257740083 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.484483038 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.262284282 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.271778441 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.235845798 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.272356724 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.234847681 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.485985815 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.484393699 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.493463211 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.310710379 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.273604373 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.267845551 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.274385168 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.273256694 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.275327339 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.249165346 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.305410848 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.261446105 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.491080856 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.268186794 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.27291571 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.31269244 seconds)
  done (took 86.971644059 seconds)
done (took 2521.016140512 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.308284297 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.278736091 seconds)
  done (took 13.728182843 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.179646101 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.180719366 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.337052525 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.181398876 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.213653965 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.17916444 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.193345757 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.18536284 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.180459294 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.263882998 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.184556211 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.310681875 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.285577643 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.182815052 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.226892711 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.186058113 seconds)
  done (took 40.620465394 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.306493389 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.736697256 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.10415958 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.927788342 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.203967706 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.893453253 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.479455803 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.896340052 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.489817074 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.652812668 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.445915779 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 5.074817516 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.965763596 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.352043975 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.608266265 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.646833383 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.732659737 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.800256553 seconds)
  done (took 61.460185761 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.19434439 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.329006157 seconds)
  done (took 8.679963209 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.2101971 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.206686509 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.176308359 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.199939122 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.196786996 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.205281631 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.204320658 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.212939863 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.196779471 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.189202541 seconds)
  done (took 63.156241214 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.172677577 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.956634347 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.528449223 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.774635315 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.905523936 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.681382841 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.336453144 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.523975642 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.268446848 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.169638069 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.413272251 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.575684496 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.089156966 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.480009286 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.841472572 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.633866645 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.839334693 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.547708561 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.497663222 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.715530355 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.368846526 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.348545728 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.602083002 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.019114517 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.186308795 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.867563343 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.302348522 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.297146296 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.25528494 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.342942338 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.504546311 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.196274194 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.539930623 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.187739552 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.385625994 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.70756468 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.834957901 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.384205225 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.544243889 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.510474402 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.570076947 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.906717279 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.245902875 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.871958486 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.336233522 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.648789907 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.18887544 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.417884576 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.282645561 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.30114058 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.796254005 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.357014817 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.322053697 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.293210458 seconds)
  done (took 159.027757368 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.170293456 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.632495855 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.347061023 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.177794388 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.562987118 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.3879394 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.97195457 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.652720284 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.186130881 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.387322258 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.350331896 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.309473047 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.173080407 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.175073141 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.176485995 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.176452846 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.363545893 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.677452399 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.18549736 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.177216565 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.391199838 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.42633239 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.306695324 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.176217301 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.343252008 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.426794734 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.587374018 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.30466634 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.558040141 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.170095922 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.625256394 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.185600982 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.17371986 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.060360601 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.570590334 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.522770238 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.633602043 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.179336053 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.937650203 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.175452398 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.823459339 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.380989372 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.511647298 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.319808878 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.332263637 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.412613672 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.765746294 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.170144707 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.962523158 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.349107226 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.397203531 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.395359596 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.458040243 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.179572263 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.635852837 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.173659455 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.174079168 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.470814083 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.326098716 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.309645376 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.178151208 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.175269614 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.173507278 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.42460236 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.175073004 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.297195571 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.17253176 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.177658209 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.300297155 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.306547059 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.325640996 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.424506422 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.427182198 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.109470884 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.527321046 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.41189405 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.597273968 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.438170909 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.174006286 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.176462767 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.625653684 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.615978049 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.340141805 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.423596421 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.492720033 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.475971302 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.755057229 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.170380576 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.406466532 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.345838039 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.408993122 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.332513149 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.544492063 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.077288174 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.171182352 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.1754 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.481825838 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.307039921 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.173639015 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.686843294 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.459801332 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.819483086 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.351807879 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.623904425 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.288965735 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.173494013 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.728943527 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.172315536 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.400299027 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.469335319 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.183215925 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.176545793 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.331862695 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.000848922 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.173043632 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.290704198 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.596922512 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.17794634 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.339826466 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.177280243 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.431459955 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.005411246 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.409402237 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.177615233 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.452521273 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.364306569 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.32867834 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.176970573 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.529411956 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.445674358 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.583170147 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.410916879 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.022613846 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.178998414 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.485356891 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.175540614 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.172727382 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.355981771 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.127336199 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.356989854 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.17366682 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.44295635 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.340558709 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.562381535 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.171606121 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.416154933 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.425669474 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.553321556 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.173491571 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.314034432 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.177053134 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.227021836 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.343577368 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.173776154 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.175039536 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.025145995 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.173571117 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.329847067 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.408459016 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.874660891 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.553705024 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.53182211 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.173683554 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.592994002 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.371962729 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.704202925 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.656799372 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.350913933 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.174758347 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.177212803 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.174497401 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.419808156 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.368046396 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.176313235 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.174807228 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.902145515 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.282998534 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.174742175 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.367704484 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.801921907 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.587335157 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.397802822 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.17651005 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.541596007 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.175459527 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.365094163 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.678368851 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.476592149 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.173957514 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.173524769 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.176227804 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.175203264 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.389561574 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.429848481 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.743887831 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.326605468 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.481715542 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.394241899 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.490318064 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.644030036 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.189570838 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.435779716 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.174662454 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.575498304 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.180695783 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.351347133 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.434718062 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.177112554 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.488883164 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.531973107 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.252446911 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.574524604 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.175199665 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.178572223 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.174496717 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.346819463 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.622743261 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.175160555 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.837425966 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.542395216 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.302533147 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.375632928 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.400071367 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.195399896 seconds)
  done (took 744.133678376 seconds)
done (took 1091.974665306 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.170367941 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.17336477 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.176434281 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.174738194 seconds)
  done (took 25.838012372 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.159188099 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.255608019 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.35398495 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.182446123 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.562197721 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.234537573 seconds)
  done (took 11.897588127 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 4.705459059 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.173989239 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.174902694 seconds)
  done (took 18.197665414 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.450228416 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.636516513 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.356875981 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.273424355 seconds)
  done (took 6.867742546 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.184650708 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.186889136 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.18188221 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.181745091 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.18231806 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.182129619 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.190899711 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.18153925 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.183806225 seconds)
  done (took 11.805307556 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.943364958 seconds)
done (took 80.720743278 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.528417637 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.475467926 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.18043729 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.518243875 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.303411885 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.489632727 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.296348689 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.195435649 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.480763453 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.681446072 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.703952769 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.208992811 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.524382067 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.636480494 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.413223994 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.208101153 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.191378206 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.242917899 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.720166583 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.362131189 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.848053802 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.311426697 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 6.173271618 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.204236893 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.056840269 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.296571501 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.430635075 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.173940339 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 3.859055836 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.201668347 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.258290901 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.754254673 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.360900893 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.473725496 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.276261518 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.008407628 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.690574687 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.181709238 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.532521595 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.612775766 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.472149905 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.261912629 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.175901681 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.343708535 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.540867556 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.194345523 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.087069739 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.343493734 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.676139042 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.368809955 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.562366931 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.186479098 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.791884544 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.255630469 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.265721764 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.175271252 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.107100745 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.730519503 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.339554054 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.48519993 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.198263683 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.169147253 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.235571649 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.20633335 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.824850977 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.49345002 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.62066729 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.271021775 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.796193458 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.204991715 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.195041242 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.20650266 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.87171006 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.308632215 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.170591555 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.320453896 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.44099008 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.263710253 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.176694235 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.451610495 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.39836697 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.226922373 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.318401772 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.48996039 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.33937078 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.512350022 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.709487794 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.558332114 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.640498879 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.179416802 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 9.391249217 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.180843715 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.275907213 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.237462353 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.180349443 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.937619544 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.812254055 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.706631082 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.316649042 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.776753303 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.203983125 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.198482609 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.530692993 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.566127185 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.970994093 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.213490071 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.32106763 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.173569696 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.469195356 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.085114155 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.270531499 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.775879321 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.178002604 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.239178535 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.722885953 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.179841749 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.49615178 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.609216044 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.293751784 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.178256009 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.470857324 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.189298863 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.303975012 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.760417313 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.571734657 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.407518498 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.175957277 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.959352413 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.178550506 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.37698065 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.182233449 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.748719488 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.705418239 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.215258086 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.434320349 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.308239461 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.17092108 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.462568734 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.23411727 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.313118554 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.515481958 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.483180085 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.304403571 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.170332397 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.532560525 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.179068689 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.394749076 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.491467159 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.342869646 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.496968234 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.267604563 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.199953437 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.104864524 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.62607696 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.791279915 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.787831854 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.446690747 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.312252128 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.699040686 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.438449269 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.974502872 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.28198761 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.233303624 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.178227256 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.197499683 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.244265213 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.17047245 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.176037401 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.473316595 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.400444293 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.712049611 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.971912437 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 6.082917179 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.437894456 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.331686146 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.106529805 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.760226441 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.183444173 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.572408617 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.666194986 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.293554528 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.206691315 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.175093502 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.224258512 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.899879469 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.217734983 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.51739557 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.646167597 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.481269495 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.587924892 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.3673075 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.211458984 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.564706415 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.437103091 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.431692714 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.377667416 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.602618071 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.297119483 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.525387745 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.251594779 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.42845887 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.181753739 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.686029234 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.393935271 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.6590847 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.507755176 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.403701804 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.344468172 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.494251693 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.177568624 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 6.179165731 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 8.317652884 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.527215571 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.200067735 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 6.169860651 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 8.301637827 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.171174492 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.0987343 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.293490908 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.462406111 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.282266384 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.271464302 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.63435244 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.19820736 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.51237397 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.343922721 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.437984811 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.399991422 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.249955584 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.340455464 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.391624434 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.339985735 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.457633602 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.198627998 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.633947762 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 6.221282315 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 3.507548401 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.173900128 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.3800534 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.207890421 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.192747544 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.519237522 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.382841911 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.494868679 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.351790853 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.339828563 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.298949483 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.203974345 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.613159173 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.081782385 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.765229425 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.241848367 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.201245548 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.173297176 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.686089396 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.543475099 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.245245148 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.311838038 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.761788778 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.211876794 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.383141682 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.182911323 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.18155165 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.874426039 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.306615388 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.421917355 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.725872471 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.181033159 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.846468779 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.192579076 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.592665947 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.718942978 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.229357769 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.305757616 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.561675448 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.29234943 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.551630349 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.206152314 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.33858156 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.514013246 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.300431974 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.291655556 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.175352055 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.213331283 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.662673622 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.405120762 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.704101044 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.207381326 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.558879659 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.360328004 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.404564715 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.199473688 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.265269825 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.609024156 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.377392524 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.579320133 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.185346081 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.333462643 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.433843646 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.204131957 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.306129572 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.316304308 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 6.206475459 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 9.925938808 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.49745014 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.32799905 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.09481718 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.416148862 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.175566927 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.097672345 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.34078076 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.281199015 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.789691127 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.75064913 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.178378275 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.388589656 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.180090908 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.521685213 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.203870727 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.19555363 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.30622191 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.274565268 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.171791948 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.477187208 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.34688519 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.705249149 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.221959036 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.011960066 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.365983429 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.35508379 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.299592067 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.492519117 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 6.181817936 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.193991894 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.325049836 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.799560705 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.382135883 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.20416848 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.433106114 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.182020117 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.773982606 seconds)
  done (took 893.690048418 seconds)
done (took 895.023740135 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.410594479 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.532520443 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.40059898 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.03939369 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.967079914 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.805687561 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.418504173 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.391471826 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.239310341 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.418684382 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.112340068 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.964178218 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.258179281 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.27538045 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.23684075 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.263777561 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.334808753 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.39982697 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.280274441 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 1.964926201 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.523551555 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 1.973165243 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.576569964 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.454032333 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.534481958 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.264801592 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.407254679 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.513886834 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.51185462 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.147663276 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.368961163 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.382211083 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.993035299 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.405587652 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.239126653 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.238819975 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.035654657 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.254304981 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.408501239 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.243500816 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.530102605 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.282803808 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.880054616 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.018322887 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.936748619 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.581410587 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.033538001 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.264964243 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.262079951 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.363886755 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.359039209 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.411201499 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.51184358 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.168612221 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.993572136 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.004115699 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.511367915 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.013280465 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.891107374 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.365124236 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.530143821 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.256400193 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.363110529 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.393828587 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.278715432 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.454107533 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.575609537 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.411083809 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.38224059 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.421503845 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.407357863 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.384302593 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.275630071 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.373222233 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.277314399 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.41531835 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.776237753 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.397365174 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.949054882 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.265136026 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.046015044 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.104585961 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.11704996 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.240800278 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.407682028 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.938315663 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.98190323 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.046840461 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.27614921 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.382123596 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.097259791 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.403984527 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.614243911 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.407192068 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.410994682 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.399880058 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.984863714 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.355755097 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.188482789 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.38426547 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.947380802 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.40859048 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.176797336 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.24023346 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.261384054 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.408252725 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.411563617 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.578821782 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.38622069 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.315031023 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.537338683 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.277187499 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.383920177 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.275522073 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.232113945 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.9350945 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.447009376 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.032425766 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.350968988 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.832614926 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.414759262 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.242209744 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.532064875 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.455177569 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.412834357 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.2509682 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.261484296 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.040226091 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.26393332 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.255135781 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.349528298 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.607431686 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.365721222 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.040356068 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.386482573 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.835326529 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.396087041 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.385904585 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.23214084 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.077931629 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.255446803 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.169267369 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.457334408 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.539250815 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.399216004 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.454201297 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.276443735 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.408651971 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.348257069 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.278002777 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.382627773 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.287972929 seconds)
done (took 251.639332602 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.549279729 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.402896109 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.486676418 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.406089525 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.546658414 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.460101368 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.249280784 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.623275522 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.231923196 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.603896735 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.373924152 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.04128093 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.42644068 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.405734881 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.531259268 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.412600473 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.23356088 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.427759011 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.640484827 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.569321933 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.918955248 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.376862542 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.329013693 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.57196147 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.173382177 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.902137371 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.482891033 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.29364174 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.448949946 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.926837601 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.918772727 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.445587688 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.483627118 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.87570874 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.542750776 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.857106048 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.489708992 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.940708888 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.436812876 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.554824184 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.393652458 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 5.97787345 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.908183257 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.962446782 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.286146066 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.44796038 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.251540967 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 4.98639637 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.175500039 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.867847497 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.445300041 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.965936148 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.026231707 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.457955609 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.399908839 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.780389979 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.568135993 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.55185037 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.567754238 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.483444115 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.431968281 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.601822937 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.553858998 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.310461796 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.908348611 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.468060996 seconds)
  done (took 150.517991794 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.609422233 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.478018398 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.584376779 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.581270401 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.753271878 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.581596614 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.67496482 seconds)
  done (took 14.408585545 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.241418612 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.233974255 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.472466687 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.471787813 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.240119393 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.358956614 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.31804034 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.963466614 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.455218994 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.272691449 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.544421877 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.476202382 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.864530944 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.97458134 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.321912834 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.470890599 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.210425847 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.299384739 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.289988932 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.491907235 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.946763717 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.932049492 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.38458384 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.213110987 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.236401307 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.27283984 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.226170558 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.201551408 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.22950665 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.21543106 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.23538404 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.346307695 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.222918772 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.925732836 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.221408158 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.55124291 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.235918894 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.235281575 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.364061 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.171895347 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.21359287 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.237051166 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.368999551 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.238099219 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.209425914 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.419582447 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.21771274 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.238638793 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.212306512 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.230614115 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.420460595 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.225876072 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.213967597 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.872956717 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.44188275 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.916537926 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.299607486 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.221634944 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.231919983 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.287610908 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.224950309 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.490521628 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.475320905 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.211425588 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.470147404 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.5123664 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.230662463 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.208977573 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.215836048 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.446388378 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.227246619 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.473867133 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.233995759 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.280506344 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.233561654 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.354755748 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.417651642 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.028422654 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.993041677 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.860684478 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.555110559 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.211071966 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.552326752 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.172305181 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.873281503 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.213221845 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.231041757 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.915795652 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.138160018 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.231471488 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.541891889 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.212774089 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.284535777 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.28300843 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.209848778 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.288767945 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.420041623 seconds)
  done (took 158.311174122 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.372883394 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.79103116 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.452295237 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.246037981 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.355426896 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.491060397 seconds)
  done (took 15.85709524 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.552076058 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.033431868 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.248664361 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.247513269 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.284062083 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.187302736 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.183372367 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.427742181 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.383700691 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.242189047 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.183802877 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.18681937 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.183004668 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.363083604 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.186059245 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.233709841 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.184061996 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.25140925 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.234958645 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.297467229 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.523556542 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.285515448 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.296203446 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.087952954 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.248050341 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.241336531 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.950381546 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.236488692 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.233893921 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.543269737 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.416353843 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.184656443 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.035879498 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.568444831 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.953630829 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.084543728 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.3752373 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.186603306 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.23015953 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.188868339 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.183898657 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.29369134 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.247311355 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.188358359 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.578411424 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 3.012147657 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.244544789 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.521636594 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.187481363 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.183064995 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.184337885 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.254291485 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.188933148 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.184210668 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.811350147 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.647719511 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.144810517 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.185699388 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.284286035 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.111086725 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.302933696 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.185992409 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.563198309 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.133182429 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.861281879 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.188906766 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.111919918 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.366024568 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.29700763 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.244624162 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.186752487 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.250116465 seconds)
  done (took 121.50022593 seconds)
done (took 461.768524051 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.250388102 seconds)
  done (took 7.395016526 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.188356326 seconds)
  done (took 7.478737581 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.175087834 seconds)
  done (took 7.325747014 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.19395791 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.202536179 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.202607345 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.191608036 seconds)
  done (took 25.974838462 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.35823585 seconds)
  done (took 7.507754339 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.17413686 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.190783413 seconds)
  done (took 13.615564514 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.300417043 seconds)
  done (took 7.465749171 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.58538481 seconds)
  done (took 7.74146429 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.180300255 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.188183516 seconds)
  done (took 13.556980173 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.170841928 seconds)
  done (took 7.322051583 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.727822486 seconds)
  done (took 8.966271795 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.183492509 seconds)
  done (took 7.366877408 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.225896353 seconds)
  done (took 7.37895377 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.338067509 seconds)
  done (took 7.488010705 seconds)
done (took 137.754286252 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.171990292 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.176529407 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.181976601 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.177663885 seconds)
  done (took 25.853394977 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.510334162 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.514761309 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.487282045 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.660286596 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.457935866 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.455095131 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.510383566 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.510567258 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.456851813 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.554863595 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.509941453 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.556295085 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.660204412 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.488158405 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.489422503 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.651034179 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.66182236 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.513500483 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.453723613 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.488341921 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.660938641 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.665013907 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.946698848 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.924150072 seconds)
  done (took 38.937705487 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.392242322 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.549902113 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.356078439 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.503781396 seconds)
  done (took 6.950572355 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.216547262 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.562050437 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.544128306 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.602458019 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.547093005 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.360541933 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.542396287 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.397323953 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.363498513 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.364373702 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.810366358 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.339317949 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.349370175 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.601075486 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.36101858 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.185422259 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.183973139 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.364209695 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.562771586 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.386421911 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.449135571 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.542393777 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.544696307 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.542446501 seconds)
  done (took 35.870513831 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.955689383 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.115937737 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.545134861 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.144053561 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.893797032 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.073548359 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.46592518 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.687457391 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.451326763 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.430733361 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.916751472 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.985945427 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.335670804 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.151108404 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.955589563 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.368060987 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.362247056 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.139166959 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.605756752 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.485543152 seconds)
  done (took 40.217892156 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.175114721 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 6.181782728 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.40793028 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.34891788 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.176804243 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.177337084 seconds)
  done (took 28.618591693 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.502384843 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.31033348 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.468023519 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.434929398 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.334171024 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.30205694 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.730100168 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.394621431 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.937460454 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.885714454 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.628179761 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.596617362 seconds)
  done (took 22.676376942 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.17086758 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.212221388 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.176907674 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.409808228 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.49700852 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 3.944053774 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.193987393 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.176244057 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.691317408 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.440755528 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 3.319594394 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.417085633 seconds)
  done (took 45.810466197 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.365410943 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.379319396 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.527345757 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.226618009 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.712682365 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.275656077 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.543191494 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 6.176908698 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.001137391 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.061027934 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.71390389 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.236932114 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.710430303 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.149366044 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.176646498 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.472659168 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.99934077 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.672123868 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.627940006 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.254724577 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.143984803 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.331282083 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.172454377 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.742411643 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.502960801 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.176655677 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.39628253 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.424124489 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.176434845 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.395053086 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.173861326 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.663908667 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.34950023 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.486049587 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.712003979 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.261006905 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.272670582 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.17752683 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.768487558 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.474141115 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.320761609 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.341161661 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.427353008 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.186952017 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.435363126 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.996243157 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.192287223 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.807593937 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.160426438 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.337334831 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.07579149 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.056254014 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.507505676 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.869482692 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.3211301 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.472680629 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.341597643 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.176973165 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.435181314 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.24591587 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.361353851 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.272307297 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.373069574 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.144365884 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.470657001 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.522289796 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.416368367 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.503231322 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.475066588 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.484958343 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.564427913 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.329791235 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.008029104 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.319434244 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.72059655 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.097851285 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.549481357 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.177765242 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.888289333 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.713734467 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.156986614 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.299411149 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.792714426 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.14635301 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.175568789 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.348398652 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.043236054 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.151841943 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.271563045 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.261976946 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.584749104 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.384332953 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.328590722 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.374972195 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.884275195 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.158304567 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.177360847 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.470642149 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.151722419 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.739148197 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.177533734 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.156061951 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.246055573 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.723806557 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.606005091 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.243674787 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.953768102 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.8429108 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.475060673 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.785202874 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.334665943 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.007765967 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.54398759 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.507099456 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.179892193 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.869598801 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.258820017 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.257508403 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.529770745 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.178276994 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.147230503 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.547983703 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.346295456 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.173414808 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.408962294 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.17490476 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.328624375 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.17806183 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.751834497 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.603608609 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.422927809 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.710182088 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.293232171 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.262866348 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.144497912 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.325403005 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.699243691 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.266850957 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.517023627 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.625093934 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.411218945 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.748735953 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.16962085 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.986889193 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.660259645 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.445553306 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.513427583 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.863514691 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.362978354 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.2698327 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.175284217 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.357585927 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.179957254 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.745247433 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.177886138 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.84032405 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.913596809 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.433678038 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.177855744 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.349240431 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.180465818 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.349274504 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.863616187 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.226846385 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.34572909 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.484893189 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.379411456 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.173779716 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.153829088 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.560639671 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.450047276 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.706449757 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.43817931 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.85539565 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.518863318 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.67171856 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.394419513 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.555294798 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.972892391 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.409992722 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.536605585 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.929228482 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.200703018 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.20506668 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.274545455 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.600112075 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.401758148 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.965908269 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.840143449 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.229468443 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.218235702 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.761254804 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.150620375 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.323941596 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.664182561 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.211183173 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.743372547 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.273460141 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.371386564 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.462058836 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.210931665 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.502677527 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.048423327 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.615815892 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.532101325 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.505218222 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.162484334 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.181661594 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.579002526 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.592318693 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.316007986 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.460445319 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.193281975 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.232408497 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.177777416 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.525115979 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.085897351 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.909941173 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.47918819 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.718858267 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.163611524 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.335875528 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.175178633 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.194030031 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.144710633 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.32808244 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.255936845 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.348706215 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.730178745 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.440949509 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.506858593 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.175108425 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.177740206 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.460884865 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.491043339 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.461269413 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.70209692 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.427887747 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.880356045 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.285722129 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.805207904 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.347223028 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.215894223 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.783109313 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.40253882 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.123740779 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.341299175 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.911206842 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.356878665 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.795597493 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.466559524 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.174511665 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.662559136 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.800808614 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.176891011 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.212604088 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.324190854 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.177711714 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.392195141 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.941069451 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.352443454 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.773087665 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.874419128 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.399695873 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.337714547 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.591185187 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.713256832 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.96674055 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.152004629 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.33276676 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.27639636 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.465796844 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.177531036 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.451706304 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.781877253 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.874030302 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.969889139 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.729872449 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.461911414 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.357414189 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.655542248 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.43204085 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.464621374 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.15967598 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.870189911 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.164423053 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.32003009 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.143501615 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.0159318 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.498551551 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.553990323 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.659826771 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.246591242 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.71410035 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.554046514 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.259235513 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.358742652 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.436611313 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.179360736 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.415267685 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.176089265 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.943473524 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.603953004 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.182113055 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.041824189 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.379053679 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.510812772 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.335284138 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.942194946 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.21520601 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.324543845 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.946284665 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.354654876 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.316024397 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.520767196 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.051540183 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.215435705 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.250914907 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.343581848 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.816999424 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.658746008 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.777964487 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.77847026 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.521020283 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.919068304 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.177148931 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.393955584 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.341946057 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.178360944 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.356722524 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.602262135 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.215711581 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.370455685 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.525173573 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.376258691 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.743811013 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.159830553 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.862203419 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.355445737 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.693318915 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.738107481 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.953704572 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.688847522 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.21561671 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.734631368 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.171316578 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.342108021 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.462179212 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.906042233 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.258933724 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.011698814 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.972063166 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.355015665 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.608213213 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.286867804 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.914023763 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.342292733 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.414183344 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.393078958 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.31500359 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.147177317 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.811117136 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.956114979 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.456528845 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.345057785 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.340138051 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.33511841 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.346389186 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.718195459 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.492993393 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.915485143 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.653739314 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.408924721 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.14446749 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.182317657 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.453305358 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.539920563 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.273335961 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.484274769 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.612095181 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.234209769 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.190921567 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.206835342 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.495611992 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.887174176 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.900168806 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.526200116 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.716639053 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.780137517 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.177336645 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.921077304 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.396038615 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.542924792 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.589414516 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.101959587 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.563671544 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.467340573 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.329105973 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.152599588 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.344824741 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.190057446 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.264609742 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.877532925 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.475518414 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.259983074 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.990866677 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.814960411 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.176663278 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.202218054 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.887424525 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.457509886 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.373680127 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.174483075 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.780758982 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.537512584 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.322943524 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.160463176 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.941517549 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.151834165 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.397022558 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.17748929 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.360871289 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.013646606 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.2790702 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.839831562 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.730929223 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.253316163 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.37338135 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.146941376 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.0082952 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.192762535 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.85415187 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.961693858 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.42916216 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.680995825 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.343039228 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.187005486 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.508373479 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.310094213 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.523498836 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.449302507 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.657702965 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.613844323 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.554463628 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.472973993 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.934101712 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.320245473 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.425616391 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.148687012 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.180068756 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.210206005 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.547252294 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.537764124 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.175945268 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.703150381 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.425879699 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.333049668 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.344986887 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.25966665 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.755220179 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.392721351 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.339410394 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.340091833 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.352503239 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.541173373 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.176789968 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.367355748 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.176821409 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.231977855 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.395558666 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.426378742 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.557936442 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.491277229 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.778440389 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.343706931 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.647980228 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.893062039 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.711069586 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.177608972 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.053408514 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.519550083 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.174954019 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.663844339 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.821021303 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.343981564 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.451202207 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.269663302 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.202321475 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.319271677 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.684683016 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.181309808 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.808395559 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.587789112 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.176266019 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.664095573 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.253774722 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.34621014 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.962676932 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.673308729 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.176665606 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.006203976 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.315250668 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.734135822 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.452380242 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.181160609 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.185011012 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.752673792 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.155435988 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.178608464 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.260572929 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.711831954 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.183352946 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.74130897 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.341111024 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.337434932 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.184287142 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.324079639 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.178123712 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.396934449 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.369671412 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.424773229 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.453577284 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.343443124 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.183893878 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.788921494 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.879450123 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.284868871 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.366426796 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.178580236 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.527999428 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.871773236 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.180199625 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.736458842 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.385777333 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.289036603 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.608769972 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.441329566 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.211593449 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.367112707 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.179858717 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.490327836 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.34079422 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.747413891 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.44595366 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.557956289 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.316189301 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.203610304 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.715895667 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.65273518 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.061491151 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.175438927 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.488333481 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.177981722 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.021268067 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.825839193 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.377117578 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.341896047 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.183673473 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.770166734 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.403473376 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.307598171 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.177845389 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.392328966 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.674787641 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.151558504 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.022409732 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.060497797 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.352909055 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.506354486 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.14671454 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.344373902 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.195412821 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.15707686 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.675626811 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.17786971 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.518741167 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.147011111 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.719190757 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.203898091 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.292598285 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.338556054 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.488467588 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.176796519 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.897563479 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.35410466 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.178958869 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.178996525 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.569057102 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.266776876 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.429362414 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.651535423 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.429628268 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.522964973 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.08610715 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.000218902 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.188378352 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.487160863 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.176181033 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.737126223 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.285642264 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.702382157 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.009101451 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.190854112 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.714923171 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.425296776 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.921761762 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.322598733 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.633766446 seconds)
  done (took 2000.812784112 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.18149203 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.229581263 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.269206723 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.26795748 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.216140685 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.214984819 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.215319233 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.229519827 seconds)
  done (took 50.974859266 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.173853967 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.358148014 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.640353824 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.358154594 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.201335674 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.403113822 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.335178001 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.708125263 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.375741056 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.224358509 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.238002141 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.264740198 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.187263312 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.211918932 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.09685403 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.265229133 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.179305932 seconds)
  done (took 92.378334639 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.212119482 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.50772452 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.203363913 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.263653618 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.234794241 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.607300949 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.189294606 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.181474083 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.573123376 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.858329922 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.206419769 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.33549411 seconds)
  done (took 82.560470709 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.21613524 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.216180286 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.215823346 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.215649319 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.214705209 seconds)
  done (took 7.230795179 seconds)
done (took 2480.09191134 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.382314872 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.719334578 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.747635523 seconds)
  done (took 4.61581224 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.248943584 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.3360088 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.379354548 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.334241715 seconds)
  done (took 6.469910984 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.460080714 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.654262499 seconds)
  done (took 4.263331526 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.549331436 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.17172166 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.705318146 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.176233618 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.184226231 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.182589661 seconds)
  done (took 19.703302225 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.205206146 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.210196398 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.209736755 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.202710406 seconds)
  done (took 5.980461237 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.176303704 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.202025969 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.178293633 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.148599786 seconds)
  done (took 18.85328841 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.495952673 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.435444001 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.941183653 seconds)
  done (took 6.029737598 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.994260937 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.317210761 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.976433332 seconds)
  done (took 6.438295445 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.130622473 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.126365681 seconds)
  done (took 5.409738199 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.347949366 seconds)
  done (took 2.499874319 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.666106539 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.671968751 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.047375346 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.057088363 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.212539434 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.489682462 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.561570116 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.460295973 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.878525975 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.763492794 seconds)
  done (took 18.957832692 seconds)
done (took 111.208511645 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.076188342 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.591608391 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.339807364 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.88167503 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.271689907 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.340220765 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.801381231 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.680334916 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.490215727 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.485947023 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.382189184 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.271874532 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.209654795 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.58687747 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.211387669 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.543607177 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.340299839 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.094562628 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.827061022 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.689536768 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.802422764 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.484405385 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.098297813 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.491243469 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.344326034 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.340400234 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.141301406 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.537530624 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.073113288 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.143059249 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.347337366 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.939134761 seconds)
  done (took 154.006975657 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.174501357 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.184019339 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.189449291 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.179813889 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.06481271 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.187055361 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.180346594 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.181499699 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.845195263 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.845332983 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.184669282 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.037725487 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.187635078 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.180994888 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.190495933 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.181414513 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 4.989704048 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.184999557 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.186071743 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.18369326 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.189839989 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.814590501 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.185150185 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.817920368 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 4.977938499 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.187285932 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.18016127 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.185960155 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.185561523 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.184837205 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.185725236 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.181377621 seconds)
  done (took 188.976724148 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.174661317 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.184777892 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.184777044 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.183034012 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.183528033 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.187371359 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.181440442 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.182404904 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.184725436 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.189986661 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.18194636 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.188466579 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.188016497 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.180461914 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.18516312 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.184816483 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.183588992 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.184348552 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.184264882 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.182704795 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.185379723 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.181297034 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.185415189 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.185924916 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.187796965 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.186445286 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.181426609 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.178947193 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.185839146 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.183698668 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.185614215 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.182943842 seconds)
  done (took 199.051228311 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.484405951 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.219337719 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.119233979 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.753352596 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.07633615 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.213768608 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.748746312 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.488110287 seconds)
  done (took 14.263704053 seconds)
done (took 557.485108788 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.869658225 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.111560994 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.36188971 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.408457417 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.783752986 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.472452217 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.402100191 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.637418359 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.916884604 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.59163134 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.681849928 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.383070756 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.021411509 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.40088453 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.371036004 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.680751904 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.618762756 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.946183772 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.396285959 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.055175237 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.397740244 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.04146245 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.65035119 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.972865652 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.683479256 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.096639461 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.352404956 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.622450046 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.382039272 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.395006013 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.223713408 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.642680815 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.439671152 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.431864825 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.686867434 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.64810282 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.592497102 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.624152431 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.356834485 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.847860679 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.050571714 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.79425212 seconds)
  done (took 78.198104752 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.207807355 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.222631531 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.371499706 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.281121643 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.846339524 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.279719895 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.452634526 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.414743927 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.291420533 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.408826182 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.458177441 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.86842364 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.447664833 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.83318122 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.442957974 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.46362199 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.28589961 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.813095414 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.435031242 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.414113243 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.245011625 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.374265449 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.245045485 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.396286629 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.237155778 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.262807479 seconds)
  done (took 38.172984545 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.255830716 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.394106217 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.447937854 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.445221151 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.434754942 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.232078376 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.55441453 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.332823074 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.937892424 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.37682812 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.318776733 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.369572785 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.394267366 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.472836741 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.454100673 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.334372801 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.375700399 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.377968306 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.406458471 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.445386273 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.407521141 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.289379131 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.557014803 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.386526165 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.921604191 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.717644338 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.345370369 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.758325651 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.451087902 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.328702257 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.344274874 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.538721654 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.587650485 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.453557033 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.356630603 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.229413382 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.239580361 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.321808178 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.087373649 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.375592017 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.55482895 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.567696708 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.48823139 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.733262194 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.471542034 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.38583941 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.654788818 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.332301797 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.349934618 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.962655695 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.499070415 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.892270919 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.322556363 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.406645453 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.337675975 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.822744332 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.391626425 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.488413667 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.310912065 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.747152291 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.293408994 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.608302566 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.408593082 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.473509032 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.451815893 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.413777811 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.4018488 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.796271625 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.492640546 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.246236101 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.868931209 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.30761704 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.251639475 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.315397805 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.399166972 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.686901658 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.143243229 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.447168486 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.606976061 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.546605535 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.458796502 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.780974535 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.202610248 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.753200375 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.244476922 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.226252805 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.297052119 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.556217174 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.542126971 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.67915195 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.74071542 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.503023722 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.530438627 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.54169863 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.790080519 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.518014727 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.219591257 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.231246983 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.434897585 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.746194803 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.309370983 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.515801252 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.859360935 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.510205868 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.587766659 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.338950839 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.555889268 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.47934053 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.558022987 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.211095269 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.411275186 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.270591664 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.443121418 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.483763859 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.21472753 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.719850581 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.336110768 seconds)
  done (took 242.895018756 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.177302534 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.186649865 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.180979567 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.187089458 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.183359579 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.78919951 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.245532527 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.182018789 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.785909503 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.245027846 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.179587404 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.184935127 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.180252062 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.188023062 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.723750365 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.685798824 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.824975604 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.178482518 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.185211702 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.182716458 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.010784581 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.186921636 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.180474094 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.1816878 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.184204559 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.183178407 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.189608243 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.226968978 seconds)
  done (took 154.17738432 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.239617222 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.607593522 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.264013262 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.333573123 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.282993982 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.253867035 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.746157891 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.378545674 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.308192473 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.253881129 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.248942223 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.475807571 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.564967864 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.828486254 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.372593236 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.633030751 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.895179389 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.390322188 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.251797136 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.245793624 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.401118699 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.601853092 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.498386462 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.501969395 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.404393368 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.512406703 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.30718848 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.247357356 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.370739573 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.723488419 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.25577222 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.59723888 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.397150738 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.250263899 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.733132094 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.586726881 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.816399163 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.885354169 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.429011174 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.20385669 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.207467261 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.480018426 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.543601422 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.289505497 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.241173176 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.873629746 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.260569846 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.646835116 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.285195944 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.205486152 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.342275171 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.347668034 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.4825927 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.29994601 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.42855924 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.428670237 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.8359546 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.22306664 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.308450367 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.546434451 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.216016304 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.727939707 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.752038679 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.304190744 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.260001159 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.095738069 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.33336867 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.756701766 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.852797529 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.287286279 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.586120707 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.426902698 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.21672847 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.508825445 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.414315882 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.712414159 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.818715702 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.378290817 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.341394479 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.313569212 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.513399233 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.229637958 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.795208208 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.341217449 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.214125896 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.721303086 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.636273793 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.21110356 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.243381312 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.365518357 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.406166563 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.456474546 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.517323189 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.3151056 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.150789937 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.498802353 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.529672558 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.259770012 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.368826811 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.229226817 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.745527824 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.423558117 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.225581862 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.55328238 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.678116942 seconds)
  done (took 164.669903914 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.993126735 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.293183499 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.481024187 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.770792624 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.589662463 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.750383663 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.512679604 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.312031312 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.538752494 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.450479029 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.420025527 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.328039384 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.196462849 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.991726936 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.295091765 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.416981738 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.306837939 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.91218226 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.624031921 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.356940817 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.531324196 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.98796516 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.548612203 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.648871043 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.622978143 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.753631012 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.891825651 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.384600013 seconds)
  done (took 51.067709677 seconds)
done (took 730.356654068 seconds)
SAVING RESULT...
DONE!
