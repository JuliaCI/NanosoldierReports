cset: moving following pidspec: 190787
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "shootout"... done (took 1.142028074 seconds)
loading group "string"... done (took 0.274022587 seconds)
loading group "linalg"... done (took 4.021776935 seconds)
loading group "parallel"... done (took 0.024757848 seconds)
loading group "find"... done (took 1.371432291 seconds)
loading group "tuple"... done (took 0.938200441 seconds)
loading group "dates"... done (took 0.249790667 seconds)
loading group "micro"... done (took 0.058433285 seconds)
loading group "io"... done (took 1.363340237 seconds)
loading group "frontend"... done (took 0.011714595 seconds)
loading group "scalar"... done (took 4.992527988 seconds)
loading group "sparse"... done (took 3.490041007 seconds)
loading group "alloc"... done (took 0.015079251 seconds)
loading group "broadcast"... done (took 0.371314272 seconds)
loading group "union"... done (took 3.625262424 seconds)
loading group "simd"... done (took 2.867463857 seconds)
loading group "random"... done (took 3.1772155 seconds)
loading group "inference"... done (took 0.30046204 seconds)
loading group "problem"... done (took 1.100457848 seconds)
loading group "array"... done (took 4.869601626 seconds)
loading group "misc"... done (took 0.903978793 seconds)
loading group "sort"... done (took 0.371931828 seconds)
loading group "collection"... done (took 6.459246101 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/23) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.437164179 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.076096654 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.233784316 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.064070933 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.271342529 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.078894726 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.079487928 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.068101648 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.882939589 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.144160862 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.205214674 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.382543121 seconds)
done (took 4.716637261 seconds)
(2/23) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.203197106 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.024484327 seconds)
    (2/2) benchmarking "String"...
    done (took 0.119829808 seconds)
  done (took 0.837041183 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.12767205 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.022219951 seconds)
    (3/3) benchmarking "different"...
    done (took 0.022052259 seconds)
  done (took 0.862756379 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.021428411 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.08568666 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.022910558 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.023353688 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.02321685 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.022902469 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.022571847 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.02270342 seconds)
  done (took 0.915975702 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.031987062 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.020578299 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.02137771 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.020674963 seconds)
  done (took 0.784890089 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.02129022 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.077169639 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.020711146 seconds)
    (4/4) benchmarking "different"...
    done (took 0.020546394 seconds)
  done (took 0.828180442 seconds)
done (took 5.177460876 seconds)
(3/23) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.16141704 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.844966878 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.948454915 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.173006286 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.308931639 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.320602974 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.07396565 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.21444324 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.129939244 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.027562805 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.1575937 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.033301147 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.079085522 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.570118824 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.024659971 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.131838684 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.708570435 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.041657053 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.089354326 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.325371329 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.021953293 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.039042356 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.041206531 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.022519859 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.214213556 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.120722071 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.711872342 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.023369046 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.021772806 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.047535134 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.023589321 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.026965014 seconds)
  done (took 9.407380299 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.130908137 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.124981877 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.02337726 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.072921977 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.046904427 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.024746823 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.028951282 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.022792584 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.038092556 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.072108288 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.038881907 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.136055056 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.022482361 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.021622499 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.130464304 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.144265731 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.035132906 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.037730309 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.022041938 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.03831057 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.056830184 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.032684221 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.0265447 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.025854717 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.083536798 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.124271243 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.054632812 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.053069476 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.02148695 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.025083549 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.068919375 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.073855056 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.023023181 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.02131052 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.068107892 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.050498022 seconds)
  done (took 2.74084821 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.834837805 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.105485388 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.12555443 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.168633395 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.058612811 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.06892439 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.138300482 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067897412 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.046653889 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023765951 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.193828826 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.725565345 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.153453898 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.123380849 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.051573924 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.261203609 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.199650593 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.137351468 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.021197662 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021372341 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.11594118 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024001085 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.146022475 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.02196788 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.100560761 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.127692558 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.094077611 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025755804 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067625097 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.127918045 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.021438342 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.089332877 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.042953013 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.024794663 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.145492808 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.022413371 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.020624089 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.044709714 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.034247167 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022071747 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.022218795 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026053604 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021486593 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.0557469 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.026387326 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.471780565 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.025277954 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.629123609 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 4.357928428 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.021053651 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.02161682 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.053374241 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.021067907 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022731963 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.552609318 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.026567077 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.024126783 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.255699205 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.024304323 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023374094 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.02374552 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.046861529 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.0228087 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024358291 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.022331186 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.051778833 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.729098642 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.026754623 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.052920643 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.022727668 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.023342703 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.023064508 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.377769871 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.022845888 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.113127328 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.021474105 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025191679 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022351269 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022141047 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.041742656 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.04356694 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.049880809 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.025582013 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.023079286 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022486859 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.623017138 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.126225181 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.022748227 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.023627636 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.127393571 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.021151742 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022116617 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023953696 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.04193465 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023998567 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.020821364 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.05667075 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.022716633 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.11605966 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.189072432 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.023425634 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.021408937 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.580534484 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.027958852 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.058626908 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071853103 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022961073 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.022428105 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.02289079 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.022131409 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.022429792 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.021694002 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.023913549 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.022902806 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.022420402 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.02262251 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.022358184 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.023499176 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023344548 seconds)
  done (took 20.986442857 seconds)
done (took 35.660993525 seconds)
(4/23) benchmarking "parallel"...
done (took 0.835534609 seconds)
(5/23) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.148158581 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.064536798 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.020757009 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.099799589 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.022144159 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.098559559 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.101880301 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.096131841 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.023079263 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.022931915 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.023037475 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.13572156 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.137577657 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.022722395 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098636009 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.142046954 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.023010728 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.0208665 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.022793925 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.022695943 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.022612446 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.021089378 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.022572669 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.022631849 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099021091 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.022670511 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.020971954 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.098824285 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.022528182 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.09686189 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.021952459 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.022470356 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.022644448 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.097107135 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.02197562 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.09575773 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.020237756 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.021711146 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.022041778 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.022477874 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.022282623 seconds)
  done (took 2.977751674 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.040327178 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039985078 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.062424644 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.019520258 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029799151 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.040637844 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.019452535 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.040321396 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.066006802 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.040519781 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.040587406 seconds)
  done (took 1.222991014 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.038762897 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.040361392 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.056218991 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.019621953 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.030828688 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.040553286 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.01974925 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.040486069 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.061907141 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.040825796 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.040695517 seconds)
  done (took 1.196565957 seconds)
done (took 6.149201359 seconds)
(6/23) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.150577432 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.118015568 seconds)
  done (took 1.028809083 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.390505301 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.205166359 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.125680185 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.212520892 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.114795412 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.145456939 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.387002159 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.139750716 seconds)
  done (took 3.528908116 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.05619019 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.133879824 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023421418 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.02214152 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.022147466 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.022240029 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.023347713 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.022439928 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.021885611 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.023906153 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.023642989 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.022092849 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022663393 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.023540793 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.022174107 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.022190103 seconds)
  done (took 1.33972394 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.031461804 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.02342571 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.023774562 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.021360529 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.024168872 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.022609285 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.023805266 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.025005509 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.024075733 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.024404712 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.023150449 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.025954229 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.02454955 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.023804323 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.024984032 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.021952956 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.025259827 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.024840088 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.026314909 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.02467359 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.023953545 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.023082866 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.025091149 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.024036726 seconds)
  done (took 1.363856198 seconds)
done (took 8.027817469 seconds)
(7/23) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.139563099 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.021432791 seconds)
  done (took 0.92964388 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.126126107 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.119983338 seconds)
  done (took 1.021537877 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.030612658 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.021889513 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.033155128 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.024608569 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.022669656 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.022116922 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.031135995 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.022565522 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.022193055 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.022540753 seconds)
  done (took 1.033342678 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.022326754 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022811123 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.022359137 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.02061763 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.023039081 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.025001124 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.026510272 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.022724478 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.027010165 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.021767037 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.021847147 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.031059912 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.021304308 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.030777072 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.026267058 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.022749267 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.023502488 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.021551624 seconds)
  done (took 1.211845857 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.020619776 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.021557077 seconds)
  done (took 0.820106078 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020026215 seconds)
    (2/7) benchmarking "second"...
    done (took 0.019888837 seconds)
    (3/7) benchmarking "month"...
    done (took 0.020090557 seconds)
    (4/7) benchmarking "year"...
    done (took 0.019913333 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.020286116 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.021559901 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.02010644 seconds)
  done (took 0.917951635 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.384618512 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.089408817 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.313304566 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.026203427 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.021863885 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.226707076 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.020775095 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.023596715 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.020894111 seconds)
  done (took 1.904298399 seconds)
done (took 8.615068831 seconds)
(8/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.039374131 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.141359119 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.132929572 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.500166348 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.043230581 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.02293339 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.075718507 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.239062868 seconds)
done (took 1.984575555 seconds)
(9/23) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.181657964 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.474113854 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.174573908 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.022500286 seconds)
  done (took 2.455480995 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.287602179 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.13484532 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.03244569 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.02521708 seconds)
  done (took 1.278637737 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.023114669 seconds)
    (2/2) benchmarking "read"...
    done (took 0.025719454 seconds)
  done (took 0.84334254 seconds)
done (took 5.558496794 seconds)
(10/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.109164373 seconds)
done (took 0.896252403 seconds)
(11/23) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.025677977 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.021840062 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.031798764 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.02192974 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.019459836 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.020161636 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.01987414 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.022391859 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.022309025 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.022701581 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.022104583 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022230543 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.019977536 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019900059 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.019849339 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022066942 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.021962386 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.019689697 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019778082 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019841551 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.022337719 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.022300509 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.019968871 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.019850401 seconds)
  done (took 1.303673805 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.040740137 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.019476428 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.019085134 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.019376746 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.022290697 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.01940871 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.019372488 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.02016796 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.019262373 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.019419597 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.019861407 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.019782433 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.019478227 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.019844923 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019483535 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.020415545 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.01976528 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019863631 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019425378 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.019818555 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.019351049 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019793807 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.019815086 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.019424711 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.019881124 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019960142 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.019455733 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.019913927 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.019618464 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.019869995 seconds)
  done (took 1.404878785 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.021283851 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.016635856 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.01981777 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.025444596 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.016571298 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.020418828 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.020040023 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.016725511 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.017491908 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.021569611 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.021711409 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.019991793 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.022145052 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.02058235 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.017142766 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.021302524 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.021402083 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.035242347 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.017088487 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.016998568 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.020916623 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.020313721 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.01694927 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.020906258 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.022234215 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.020323289 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.020044218 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.020318436 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.020519532 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.02059248 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.020583507 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.020873932 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.021623985 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.021284263 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.025867019 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.02101555 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.021916384 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.020714393 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.020918627 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.016894837 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.01666882 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.01660116 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.02001175 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.016915971 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.025755155 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.0201818 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.020935354 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.020994158 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.016991096 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.016692495 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.016715405 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.021660907 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.021220043 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.021422208 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.016871316 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.020771477 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.016678664 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.021078392 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.020437674 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.016674285 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.016849536 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.020009769 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.021615775 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.020612962 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.036550737 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.021362676 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.026177714 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.016964589 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.020124066 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.020388554 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.022498223 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.035201575 seconds)
  done (took 2.282229447 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.033170251 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.032926703 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.019331996 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.019494188 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.019475768 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.018891621 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.019592083 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019068167 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.01942781 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019060579 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019037759 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019305803 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019369707 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.01918077 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.018991493 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.019378856 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019044534 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019415198 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.019069904 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019185586 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.018879667 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.019421133 seconds)
  done (took 1.247471456 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.090477246 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.025600023 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.061723659 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.04367524 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.039438747 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.022330536 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.019235839 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.018699088 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019451222 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020084398 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020058118 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019431722 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.019022879 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020022472 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020394065 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.02471193 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019473652 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.018554484 seconds)
  done (took 1.316450517 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.030465659 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.019504912 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.045124682 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.019630484 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.019512666 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.019197332 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.019801311 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.019473018 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.019203719 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.019690179 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.019218164 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019396842 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.019307443 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019766384 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019645758 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.019729536 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.019543159 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020185934 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.019237676 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019744113 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.020311065 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.019556476 seconds)
  done (took 1.263234215 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.032243375 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.019061771 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.034061716 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.019465294 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.019469043 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.019293817 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.019099543 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.020029801 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.025080131 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.019245956 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.019963319 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.019330162 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.018348684 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019647654 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.019797064 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019869127 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019252555 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020028381 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019369081 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.020011357 seconds)
  done (took 1.216280366 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.130276033 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.033362812 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.033399004 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.033999761 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.034178902 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.034040543 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.034189241 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.034163423 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.03394324 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.034400946 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.034120443 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.034086188 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.034399654 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.034075128 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.03398284 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.034269733 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.034216813 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.033867231 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.033986424 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.034429274 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.034046502 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.033931181 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.033946256 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.034177254 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.034122957 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.033958554 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.033771176 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.034123335 seconds)
  done (took 1.843424395 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.041958224 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.01898327 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.019416542 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.019408014 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.019297958 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.019345645 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.019608614 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.019884356 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.019445535 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.0198386 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.01945114 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.019418035 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.01923475 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.019319432 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.019375886 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.019289225 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019317851 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.019876803 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.019943065 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019674836 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.019533927 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019440016 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.019430922 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.019694639 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019770454 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.019538256 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019926689 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.019893131 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019351118 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.019675516 seconds)
  done (took 1.408198706 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.02433025 seconds)
    (2/2) benchmarking "in"...
    done (took 0.027000153 seconds)
  done (took 0.850011222 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.032930094 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.029240408 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.018814639 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.019244866 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.019579477 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.018948154 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.018977551 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.019504705 seconds)
  done (took 0.971499672 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.1208015 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.133120599 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.022160789 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.02242973 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.12033412 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.087793907 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.125565338 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.029401767 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.0294435 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.021401613 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.022881046 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.124728656 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.022137045 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.029984134 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.024107655 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.026866987 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.024166867 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.035037231 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.029231793 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.020395107 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.02815499 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.023292295 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.027552726 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.023020268 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.02747246 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.023082747 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.028862167 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.028875284 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.023779648 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.022311606 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.031982941 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.019972522 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.023239763 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023734408 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.123359026 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.022753218 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.050420726 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.021523997 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.023487604 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.020881105 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.026431925 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.033493438 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.023647506 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.03060695 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.022814083 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.023732343 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.020514468 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.022410109 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.020553227 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.024108141 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.020616677 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022907299 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.021027809 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.022872553 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.024728945 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.02210148 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.02390605 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.023971748 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.028830211 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.02607278 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.027105244 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.029443097 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.0237983 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.032092131 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.023039847 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.033523728 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.02199676 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.029684025 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.029408921 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.023157359 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024667704 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.020204583 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.021488262 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.020805832 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.046188111 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.022449399 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.021653749 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.021914132 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.020786631 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.022752405 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.023123693 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.023968979 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022482017 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.02279276 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.029314944 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.024294451 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.021644387 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.023076492 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.031120219 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.020133507 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.021169373 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.028067926 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020822978 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.019509047 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.029061623 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.026398489 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.022471221 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.021673604 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.020707334 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026541218 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.021876564 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.019987529 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.022971357 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.021548956 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.116907021 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.023375999 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023448683 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.021911059 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.025910412 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.022922269 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.023126217 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.021362369 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.021533762 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.021599797 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.019791178 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.023491423 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.021448752 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025494951 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.022815721 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.028477607 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.028655031 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.025294423 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.028699885 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.021260038 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.019720399 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.029611666 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.024245248 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.021863929 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.029939193 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.020715537 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.024577086 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.020579052 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.023028777 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.024125992 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.020491517 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.022189477 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.020564631 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.022503618 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.022648925 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022670547 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.02250422 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.024145791 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.024458683 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.02203539 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.023782282 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.022214481 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.028804211 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.025292581 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.020637365 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022684794 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.021724264 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.024166005 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.021851265 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.023579948 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.020799198 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.021818218 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.021502289 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.027939055 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.023754136 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.021989928 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.027125624 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.021237205 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.021943276 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.022094715 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.021707663 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020582771 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.027711332 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.021697748 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022733729 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.023408193 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.024195775 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.031259685 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.023956136 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.019710411 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.02228554 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.021889075 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.020572994 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020918917 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.023956067 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.02821468 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.024771578 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.034576113 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.021722406 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.024814249 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.022031288 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.029203625 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.028109427 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.021858431 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022791161 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.021528304 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.022121901 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.023678513 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.02556994 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.024216605 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.028700244 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.020939408 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.021636963 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.020382324 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.028302855 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.022115186 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023378837 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.02365874 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.0225672 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.021671323 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.02202281 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.023737868 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.02137733 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.026924633 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.029019755 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.023024742 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.020382937 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.028560088 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.022502901 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.024918096 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.020584354 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020661547 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.022329267 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.023136477 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.025282525 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.028809822 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.02048469 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.022402921 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.028072974 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.021960547 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.023071679 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.023867068 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.029336597 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021150931 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.023148323 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024925652 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.026748854 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.02030641 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.026123577 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.021527312 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.023081527 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.023046892 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.024504236 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.021504255 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.028593254 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.01988229 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.02776517 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.022638977 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.023950607 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.021688536 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022973406 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.021720716 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.028425754 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.021738326 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.021632475 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.02328765 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.019563964 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.023036411 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.02044039 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021301579 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.022034073 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.023232706 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.022133221 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022824688 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.02223293 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.025810172 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020220844 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.022366003 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.023277075 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020297433 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.01987641 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.023241497 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.023505805 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.022314776 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.022120592 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.022147552 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.021284231 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.023345354 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.021728652 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.021503092 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.022103687 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020507579 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021409453 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021971446 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.02196079 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.021966444 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.022510655 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.023219724 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.028373664 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.02357545 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.02253354 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.023696777 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.0204506 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.028071812 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.021244338 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.023350913 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.019807628 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.024767491 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.023663203 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.02213475 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.029665355 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.023163891 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022840558 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.023779145 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023177414 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.021918436 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.030100546 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.023157796 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.023680525 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.02279901 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020718865 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.021864088 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.022474335 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.023606869 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.02446645 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.024101638 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.022727327 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.02267632 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023941943 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.022387138 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.040376721 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.022138121 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.02358439 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.02266574 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.020301034 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020585786 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.024694611 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020830334 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.022064735 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.021459242 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.019815032 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.021942972 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.024147162 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.120174384 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.023280978 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.028437612 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.019972542 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.022057369 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.020248607 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.020666122 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.029027511 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.023683518 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.023502665 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.021197019 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.020076166 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.022119821 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.023178764 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.021402038 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.022901817 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.021740591 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.019650316 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024266296 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.022110895 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.021203589 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.021520396 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.02222403 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.024246298 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.022098229 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.021408703 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.021633336 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.021157342 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.021242324 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.019568367 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.021458173 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020139554 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.021351702 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.02025919 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.024104285 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.02773689 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.021371973 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.024188953 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.021757446 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.022573515 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028243118 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.022762052 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.022144808 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.02294413 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.020346907 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.029438278 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.023282522 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023073509 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.02323009 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.022119744 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.028544791 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020663992 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.023230756 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.028443802 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022486709 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.022366688 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.020320349 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.028247501 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020508095 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.020343921 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.022183145 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023087142 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.021555051 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.023930444 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.022032746 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.02274665 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.023605505 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.023262817 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.021860628 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.022176296 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.023359698 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.028786781 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.021448514 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.022462378 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.022661501 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.023595082 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.020428033 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.024916026 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.022650349 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.023023291 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.022782416 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020591752 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.022215895 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.024145877 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.021758845 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020539008 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020781132 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.020300131 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.02225928 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.029517457 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.02361694 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022985401 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.020603861 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.019858832 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.028642732 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020631497 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.022403743 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.022552793 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.024453695 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.025251697 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.023904434 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.02922715 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.02237704 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.021677006 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.025219734 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.021709369 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.021124546 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020829185 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.022173204 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.023478387 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.023355084 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.022603241 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022617771 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.022393162 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.028152495 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.02178524 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.0207615 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.022089596 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.022313508 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.024183107 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.022753374 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.023498152 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.02253726 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.020425722 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.021381351 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.022631769 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.022773806 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.023088347 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.021726171 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.024951372 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.024124978 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.022586143 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.023181703 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.020700154 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.02305029 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.02396419 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.021105957 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.020773314 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.020823442 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020625927 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.022940494 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.023563748 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.02068473 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.020034482 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.028641496 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.021926526 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.023291849 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.022509596 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.021916636 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.021961232 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.020420118 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.024546897 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.020326587 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.021847705 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.020822772 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.022109264 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.028252246 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.022538529 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.028509187 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021753884 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.020595664 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.020343752 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.023385137 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.020928424 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.021588984 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.024547887 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.020140458 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.028475213 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.023597375 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.024255139 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.020625118 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021702469 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.022232857 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.028516537 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.023432505 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.02306001 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.022743634 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.023395698 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.021699007 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.024121732 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.02028866 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.020006633 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.023597562 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.023366326 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.025326505 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.020416463 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.023423319 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.021495451 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.022930991 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.021722056 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.021334586 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021860615 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.022292623 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023046022 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.020389344 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.023205981 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020357873 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.028344391 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.02137352 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.023906589 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.023477528 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.023884484 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.027673346 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.023463772 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.021858619 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.021850226 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023127585 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.021908282 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.021936117 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021740491 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.022505076 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.030309768 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.022879321 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.022233139 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.024664978 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.02449289 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.021712596 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.023233016 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.020708658 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.023551795 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.021848853 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.024358362 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.022222152 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.022540556 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020874659 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020888331 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.019846112 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.020889959 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.022006827 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.023112715 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.02320734 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.021374331 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.029366684 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.021860154 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.023512779 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.024084538 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.022061273 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.021924058 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.020136638 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.022172515 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.027983797 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.02856159 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.022683151 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023036288 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.022702232 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.023492657 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.019657496 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.022712899 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.022125138 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.022987118 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.020388526 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.021350839 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.02823577 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028030146 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020526038 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.032437347 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.023034325 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.022236258 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.029865366 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.023534438 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.021458026 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.023520758 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020931478 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.021370524 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.019633298 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.021640771 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.024101319 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.019743093 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.020966104 seconds)
  done (took 15.628698903 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.046640103 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.019693717 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.019574296 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.019687166 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.019528879 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.019698516 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.019810009 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.019520553 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.019748217 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.019938936 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.020007065 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.019900239 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020107237 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.020116002 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.019966513 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.020234353 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.019709394 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.019684413 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.019864376 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.019461341 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.019730365 seconds)
  done (took 1.298714733 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.028253756 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.029307779 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.019270917 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.018867422 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.019278671 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.019042459 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.019404677 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019086308 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019068568 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019428239 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.018873818 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018902006 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.019650112 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.019465322 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019327067 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.019052104 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019175635 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019473143 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.018901233 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019341916 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.01932136 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.019807938 seconds)
  done (took 1.26973358 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.022030572 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.021087943 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.022911535 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.019823408 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.019920114 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.020848896 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.019583134 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.020879379 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.020462349 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.020579248 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.023101063 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.021755637 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.020218132 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.021591798 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.019630668 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.021358788 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.064768913 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.024162903 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.021720727 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.020598466 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.023242865 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.036372705 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.020220658 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.021091578 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.021090109 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.021567952 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.020331343 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.023307 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.0219464 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.020821373 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.021750573 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.019886523 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.023348698 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.022915715 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.021207155 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.021032574 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.022796786 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.021551037 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.020419916 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.020276228 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.022841994 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.022680431 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.021129343 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.022324557 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.022968972 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.020281081 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.020065349 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.023324788 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.020470626 seconds)
  done (took 1.938023794 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.032198053 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.032089118 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.019584554 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.033717715 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.019511726 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.019658471 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.019624562 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.035017571 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.019857984 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.02005051 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.019645419 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.020099833 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.020221514 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.019764883 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.019786445 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.020213066 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.020191373 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.020073026 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.021181929 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.020562991 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.020053679 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.019740824 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.019660245 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.020037355 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.01979899 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.020068636 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.02006798 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.019640707 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.020041671 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.02008152 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.019640202 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.021261406 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.019518043 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.019975608 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.020250177 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.019602198 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.019797697 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.020027732 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.019840122 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.020269151 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.019603013 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.019583201 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.019591058 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.019845354 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.019937271 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.020080165 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.020268186 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.019901798 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.019944259 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.019630281 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.01921956 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.019895003 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019339766 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.019603831 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019406485 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.019262843 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.019848094 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.019668432 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.019444319 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.019628133 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.019686682 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.019300643 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.019629393 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.019552699 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.019242406 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.019564907 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.019645375 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.019635815 seconds)
  done (took 2.34546244 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.051744011 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.020304512 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.020471533 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.020032281 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.020066815 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.020184923 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.019978334 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.019965406 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.020206271 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.02009034 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.020036069 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.148325398 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.020378041 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.020491798 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.020219698 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.020212657 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.020319108 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.020068435 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.020358309 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.02041351 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.020202846 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.020105597 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.020388914 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.020315489 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.020037141 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.020226958 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.02009965 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.019993913 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.020069964 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.020132885 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.020276584 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.020318037 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.020183011 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.020352813 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.020519226 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.020467845 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020450611 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.020700521 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.020576717 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.020857639 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.020810866 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.020673904 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.020974581 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.020698573 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.020502828 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.020652195 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.020557313 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.020490215 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.020760435 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.02059999 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.020500412 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.020982845 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.020595587 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.020468512 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.020587339 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.020735472 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.020404193 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.020576622 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.020671306 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.0206536 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.020351675 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.021185745 seconds)
  done (took 2.259010092 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.051576743 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.018797195 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.035693626 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.019423525 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.018788915 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.019368953 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.018898738 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.019004365 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.019068976 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.018935906 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018969873 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.019468383 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019197677 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019376045 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.019413323 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019429412 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.01948901 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.019393531 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018968911 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.019420269 seconds)
  done (took 1.270130298 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.028698447 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.02727841 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.019396943 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.019328942 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.01888185 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.019488009 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.018967495 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019128443 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019588638 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018933077 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.018847242 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019183292 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019292752 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019255576 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.018859964 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.019744198 seconds)
  done (took 1.157152465 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019716304 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.021775363 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.119951186 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.022780486 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.01954631 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.020953502 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.021952225 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.023875914 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.019613847 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.034089177 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.023348861 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.021948677 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.021899548 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.022951323 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.021009467 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.021711397 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.019503073 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.023805771 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.021859072 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.120940124 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.019590556 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.020879146 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.021857447 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.022096502 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.019431221 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.019498053 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.024132516 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.019676557 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.022210518 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.021949485 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.019346186 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.023963377 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.019494798 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.023746374 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.022808391 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.021423782 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.021780455 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.022138458 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.021970119 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.021797343 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.023583891 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.019723296 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.021800054 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.020970703 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.019439986 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.021622394 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.020985086 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.024064876 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.020995844 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.01961817 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.02194396 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.022671593 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.023584829 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.023432804 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.023673054 seconds)
  done (took 2.233599217 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030758825 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.018978275 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.029475905 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018937707 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.018983906 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.019166454 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.018915711 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.018234189 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.019430262 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.070624253 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019384564 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.021207268 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.071673009 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019024289 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.019473173 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.01905274 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.019591479 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.019543564 seconds)
  done (took 1.312688434 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.028923845 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019496851 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.028663376 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.01931439 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.019317259 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018892983 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.019311424 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.018850696 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019005609 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.019349194 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019271299 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.018887586 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019011141 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.018780787 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.019472708 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019353533 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.018948335 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.018776098 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.019498534 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.01909443 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019062559 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.018894549 seconds)
  done (took 1.274778906 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.177810074 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.137411281 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.041594134 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.036168752 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.026110337 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.050169048 seconds)
  done (took 1.302469848 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.047121882 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.046948257 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.019688548 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019127496 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019280139 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019640312 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019594769 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019490194 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.019518432 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019840532 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019775505 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.01939215 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019566282 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019741643 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.019289153 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019475148 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019963612 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019859543 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019847762 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.01940677 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019787714 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.019489664 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020011736 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019747003 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019860912 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02015268 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019527403 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019491264 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019584595 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019052555 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019149848 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019570048 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019048252 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019448537 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.019292381 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.019067203 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019651714 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019162504 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019159551 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019710667 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.018985451 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019205103 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019146684 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.01939737 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019062373 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019672495 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019548406 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019630856 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019584906 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019102465 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019147979 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019631619 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.019133179 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.01949727 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018976437 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.019027879 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020026268 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019467928 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019024643 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019511674 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019628366 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019009666 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019517188 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019554159 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.01928905 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019607078 seconds)
  done (took 2.182644812 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.047898822 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.01950013 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.01954929 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019813068 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019487757 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019628375 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019487878 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019648706 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019933343 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020467209 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.050214657 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020120432 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019990827 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019716379 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019817159 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019904196 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019963233 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.01979105 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019711726 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019505998 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019869416 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019847774 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.019747313 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019787843 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.01989675 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.01944009 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019960183 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02033169 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020082081 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019980523 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020051316 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019743972 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019824158 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.019794276 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.019900357 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0200523 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019800341 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.01985449 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019855165 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019762957 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019904988 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019576252 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019946669 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020191052 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019978159 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.020074007 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020274958 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020309269 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020086976 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019955836 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.020129923 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019937621 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02023179 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019881696 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019950004 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020186389 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019989696 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02000844 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019960994 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019310914 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019953236 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.01993585 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019580322 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02012309 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.019826936 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019974747 seconds)
  done (took 2.212019049 seconds)
done (took 53.583291071 seconds)
(12/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.182107576 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.13521518 seconds)
  done (took 1.147682798 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.122883113 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.122441449 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.160343752 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.02274483 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.161741621 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.12395943 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.113447937 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.022627538 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.022094141 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.022732074 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.022503758 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.023179967 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.023557644 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.02315374 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.066354229 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.022491967 seconds)
  done (took 1.917704504 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.07192369 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.329685863 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.073913659 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.023329956 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.064524621 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.02318474 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.023634563 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.022968033 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.022700367 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.022945739 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.068642843 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.092933398 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.023129768 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.023052242 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.023443606 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.022694616 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.022864994 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.022819714 seconds)
  done (took 1.824832353 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.067164115 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.022735438 seconds)
  done (took 0.941302803 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.121782967 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.058098561 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.10159813 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.267196391 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.054479292 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.234556133 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.0675447 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.062800368 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.055544953 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.059802903 seconds)
  done (took 1.928392499 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.051158158 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.046916953 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.223025342 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.050860099 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.026138316 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.025009132 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.031901024 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.023872204 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.034005966 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.029163072 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.071395191 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.027431306 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024434646 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.067368345 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.024020216 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.058000931 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.023549803 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.023566462 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.031450972 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.023114177 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.02284034 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.023029028 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.13728081 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.023402885 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.024164452 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.025286967 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.022713528 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.026311742 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.026413576 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.022639409 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.022720348 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.024552158 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.022971837 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.034061237 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.022774658 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.022365478 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.022509714 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.023157098 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.022857962 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.023285012 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.024999892 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.022741913 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.023290996 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.022640941 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.028257778 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.025171045 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.022919929 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.022945246 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.028539164 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.022568795 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.023808505 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.022482543 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.022677962 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.022781596 seconds)
  done (took 2.705403101 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.078018143 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.067381131 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023989701 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.071437024 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071365205 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023860713 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.085476247 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066856131 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.081726073 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023520673 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023352245 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.021985347 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.023249915 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.02548005 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.075475335 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.068433572 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024396768 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023334218 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.068182408 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.068537524 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.021492326 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069276833 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.077662477 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.064111331 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.021569306 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023774818 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.021699865 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.021611648 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.021076654 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.022627833 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.021984397 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.022589996 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.026118833 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.021960564 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.021617693 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.021436686 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.021507398 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.022717638 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.023596463 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.022524921 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.021555522 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022008106 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.021677018 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.021747557 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023508905 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.021603406 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.021403623 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.022531184 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.021550903 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.021942714 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.022002777 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022032021 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.021881806 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.022295071 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.022910013 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.023235853 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.021746556 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.021630082 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.021601151 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023748315 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.023456233 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.023426488 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.022305726 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023355772 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.021744214 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.021626192 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.022602326 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.026964512 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.02177168 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.021751513 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.021506497 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.021479899 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.021565884 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.021458983 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.021339327 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.021749574 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.021855634 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.021458139 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.023372958 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.021686291 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.021618277 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.021263909 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.021930749 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.021504055 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.021563805 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.021356878 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.020968736 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.022366687 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.021972295 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.02154308 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.021681428 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.021389699 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.02134814 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.02120556 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.022278987 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.022247683 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.021289411 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.021546566 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.02160686 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.021147338 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.021798138 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.021455707 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.021778084 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.02153564 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.021618128 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.02175673 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.021048828 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.023756094 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.021820586 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.021398487 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.021956217 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.024750849 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.021594645 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.021137185 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.023693457 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.021563134 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.021548258 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.024578447 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.021655877 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.022025619 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.021684187 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.021433394 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.021780527 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.02137205 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.021685051 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.021815904 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.021678781 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.021339379 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.021736524 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.02159069 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.02173656 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.021893925 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.022540449 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.025135912 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.021813071 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.021744774 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.022099562 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.021732568 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.021651976 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.021547669 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.021777901 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.021785429 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.021483037 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.021674296 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.023389351 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.021668094 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.02179553 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.021824581 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.023650018 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.02182677 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.023955353 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.021304383 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.021484346 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.022289242 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.023449598 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.021952241 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.024195139 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.021705298 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.021621214 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.021525047 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.021648997 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.021131454 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.021730175 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.021705022 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.021359189 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.021154748 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.021941556 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.021485837 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.021513969 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.021384795 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.02175218 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.021767629 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.021645128 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.024389056 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.022920036 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.021110249 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.021342392 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.022103565 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.02154823 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.021278002 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.021518906 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.021771675 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.026953085 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.021766249 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.023943622 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.021446093 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.021328088 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.02196207 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.022548146 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.023642575 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.023879421 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.025081949 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.021750067 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.021419748 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.021002405 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.021501415 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.021758175 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.0213133 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.022094496 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.021858135 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.028403357 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022537187 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.02266627 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.021603102 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.021783646 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.021571683 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.021759543 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.025820782 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.021909133 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.021797483 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.02120448 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.022005187 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.021979568 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.023882315 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.021661579 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.02169273 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.021828971 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.021513949 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.02186117 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.021898183 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.021761015 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.021685507 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.021581781 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.021343541 seconds)
  done (took 6.536195372 seconds)
done (took 17.8410237 seconds)
(13/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 0.073601295 seconds)
  (2/4) benchmarking "arrays"...
  done (took 0.054010103 seconds)
  (3/4) benchmarking "structs"...
  done (took 0.061234415 seconds)
  (4/4) benchmarking "grow_array"...
  done (took 0.031492001 seconds)
done (took 1.086180156 seconds)
(14/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.127999101 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.071063616 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.124192166 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.079181471 seconds)
  done (took 1.247382144 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.063421353 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.020040391 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.146426682 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.156005538 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.020101049 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.138659811 seconds)
  done (took 1.405382057 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.220276975 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.148823271 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.153289273 seconds)
  done (took 1.387285802 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.169000946 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.272457305 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.288725906 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.148246439 seconds)
  done (took 1.750686057 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.144641927 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.180837182 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.032245762 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.160813415 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.035985488 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.022154599 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.076474798 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.022254429 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.041762403 seconds)
  done (took 1.635902879 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.073194295 seconds)
done (took 8.354459272 seconds)
(15/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.187494073 seconds)
    (2/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.12754251 seconds)
    (3/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.0319654 seconds)
    (4/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.028067245 seconds)
    (5/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.114689059 seconds)
    (6/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.033948027 seconds)
    (7/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.122525336 seconds)
    (8/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.126236968 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.031705134 seconds)
    (10/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.042900348 seconds)
    (11/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.030695602 seconds)
    (12/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.105591498 seconds)
    (13/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.282453411 seconds)
    (14/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.166055562 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.047000036 seconds)
    (16/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.042518101 seconds)
    (17/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.142764669 seconds)
    (18/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.032388499 seconds)
    (19/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.054126719 seconds)
    (20/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.218073262 seconds)
    (21/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.029441953 seconds)
    (22/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029558825 seconds)
    (23/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.026056002 seconds)
    (24/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.127528168 seconds)
    (25/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.114191834 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.032775714 seconds)
    (27/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.226754247 seconds)
    (28/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.0273439 seconds)
    (29/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.320790093 seconds)
    (30/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.028880255 seconds)
    (31/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.095950443 seconds)
    (32/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.104073043 seconds)
    (33/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.170407868 seconds)
    (34/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.283866063 seconds)
    (35/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.28428829 seconds)
    (36/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.029692574 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.110833293 seconds)
    (38/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.045870362 seconds)
    (39/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.110298097 seconds)
    (40/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.113808156 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.032050353 seconds)
    (42/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.123297768 seconds)
    (43/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.038555265 seconds)
    (44/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.045957169 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.021074222 seconds)
    (46/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.225052081 seconds)
    (47/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.033849156 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.048457844 seconds)
    (49/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.097376063 seconds)
    (50/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.295126228 seconds)
    (51/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.171442678 seconds)
    (52/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.02643231 seconds)
    (53/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.131995268 seconds)
    (54/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.138763242 seconds)
    (55/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.024372469 seconds)
    (56/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.020910779 seconds)
    (57/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.028480868 seconds)
    (58/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.030374046 seconds)
    (59/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.024923255 seconds)
    (60/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.039808224 seconds)
    (61/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.026349655 seconds)
    (62/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.038380134 seconds)
    (63/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.026856781 seconds)
    (64/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.115174539 seconds)
    (65/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.02341954 seconds)
    (66/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.084001549 seconds)
    (67/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.123195083 seconds)
    (68/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.038223467 seconds)
    (69/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.037518654 seconds)
    (70/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.161402205 seconds)
    (71/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.096937178 seconds)
    (72/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.024407338 seconds)
    (73/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.037030298 seconds)
    (74/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.029297932 seconds)
    (75/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.12597843 seconds)
    (76/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.039359861 seconds)
    (77/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.02511492 seconds)
    (78/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.035496019 seconds)
    (79/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.031457947 seconds)
    (80/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.029425207 seconds)
    (81/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.020806007 seconds)
    (82/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.11958331 seconds)
    (83/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.033850809 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.021391502 seconds)
    (85/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.035433825 seconds)
    (86/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.029585032 seconds)
    (87/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.028455248 seconds)
    (88/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.084676199 seconds)
    (89/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.13277633 seconds)
    (90/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.082730025 seconds)
    (91/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.030953969 seconds)
    (92/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.094329601 seconds)
    (93/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.088624157 seconds)
    (94/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.02501575 seconds)
    (95/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.145663753 seconds)
    (96/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.045616731 seconds)
    (97/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.031150837 seconds)
    (98/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.029753535 seconds)
    (99/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.025251425 seconds)
    (100/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.020680074 seconds)
    (101/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.033144142 seconds)
    (102/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.168308966 seconds)
    (103/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.021104087 seconds)
    (104/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.04341031 seconds)
    (105/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.026170339 seconds)
    (106/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.0484778 seconds)
    (107/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.030912471 seconds)
    (108/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.032105649 seconds)
    (109/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.038008192 seconds)
    (110/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.021283287 seconds)
    (111/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.029798637 seconds)
    (112/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.0360755 seconds)
    (113/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.176072328 seconds)
    (114/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.147827788 seconds)
    (115/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.076002763 seconds)
    (116/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.021652624 seconds)
    (117/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.140104947 seconds)
    (118/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.021497296 seconds)
    (119/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.042123242 seconds)
    (120/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.021998909 seconds)
    (121/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.021622067 seconds)
    (122/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.163371581 seconds)
    (123/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.021090081 seconds)
    (124/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.021996312 seconds)
    (125/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.03034524 seconds)
    (126/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.028875223 seconds)
    (127/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.021935697 seconds)
    (128/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.173197192 seconds)
    (129/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.095655839 seconds)
    (130/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.027529043 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.026995797 seconds)
    (132/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.021080686 seconds)
    (133/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.033914275 seconds)
    (134/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.026194566 seconds)
    (135/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.023004604 seconds)
    (136/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.021225894 seconds)
    (137/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.020942305 seconds)
    (138/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.09167919 seconds)
    (139/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.02872859 seconds)
    (140/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.025646957 seconds)
    (141/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.03222001 seconds)
    (142/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.020844303 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.031280305 seconds)
    (144/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.031277935 seconds)
    (145/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.102743523 seconds)
    (146/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.030371281 seconds)
    (147/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.129657499 seconds)
    (148/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.02963652 seconds)
    (149/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.030981362 seconds)
    (150/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.03295126 seconds)
    (151/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.041500851 seconds)
    (152/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.075376959 seconds)
    (153/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.023435491 seconds)
    (154/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.024982315 seconds)
    (155/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.026513795 seconds)
    (156/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.119495895 seconds)
    (157/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.026497359 seconds)
    (158/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.11939734 seconds)
    (159/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.022704715 seconds)
    (160/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.045071549 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.103035182 seconds)
    (162/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.095125996 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.033163303 seconds)
    (164/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.098712426 seconds)
    (165/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.021362452 seconds)
    (166/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.028643026 seconds)
    (167/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.021179747 seconds)
    (168/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.122833153 seconds)
    (169/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.050840851 seconds)
    (170/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.026165655 seconds)
    (171/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.028475006 seconds)
    (172/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.025519216 seconds)
    (173/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.027662326 seconds)
    (174/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.124832113 seconds)
    (175/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.029131846 seconds)
    (176/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.025283685 seconds)
    (177/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.101899728 seconds)
    (178/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.020331914 seconds)
    (179/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.087456898 seconds)
    (180/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.089434408 seconds)
    (181/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.106215877 seconds)
    (182/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.023929877 seconds)
    (183/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.028765688 seconds)
    (184/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.08444939 seconds)
    (185/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.040458154 seconds)
    (186/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.046340369 seconds)
    (187/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.044444362 seconds)
    (188/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.020609538 seconds)
    (189/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.033469747 seconds)
    (190/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.021238984 seconds)
    (191/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.021052857 seconds)
    (192/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.028297253 seconds)
    (193/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.036301869 seconds)
    (194/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.025563426 seconds)
    (195/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.020171073 seconds)
    (196/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.021497239 seconds)
    (197/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.03062334 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.030745253 seconds)
    (199/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.029448781 seconds)
    (200/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.025916881 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.032488671 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.217867415 seconds)
    (203/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.024921305 seconds)
    (204/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.024565022 seconds)
    (205/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023598923 seconds)
    (206/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.033076464 seconds)
    (207/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.231503598 seconds)
    (208/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.030634671 seconds)
    (209/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.082293848 seconds)
    (210/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.037221126 seconds)
    (211/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.033139476 seconds)
    (212/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.028811522 seconds)
    (213/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.02139235 seconds)
    (214/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.032086805 seconds)
    (215/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.092821132 seconds)
    (216/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.021726703 seconds)
    (217/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.035534388 seconds)
    (218/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.10207719 seconds)
    (219/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.020551763 seconds)
    (220/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.095127558 seconds)
    (221/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.021811964 seconds)
    (222/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.021759803 seconds)
    (223/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.037510461 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.032008701 seconds)
    (225/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.033036685 seconds)
    (226/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.025572335 seconds)
    (227/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.021412479 seconds)
    (228/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.028883326 seconds)
    (229/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.032928188 seconds)
    (230/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.021593771 seconds)
    (231/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.036518865 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.030021704 seconds)
    (233/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.030256426 seconds)
    (234/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.026698916 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.020926633 seconds)
    (236/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.037208209 seconds)
    (237/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.092470723 seconds)
    (238/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.021715601 seconds)
    (239/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.16185991 seconds)
    (240/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.093370626 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.089769901 seconds)
    (242/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.020457553 seconds)
    (243/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.037290416 seconds)
    (244/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.032670148 seconds)
    (245/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.020925882 seconds)
    (246/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.116233094 seconds)
    (247/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.02179953 seconds)
    (248/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.08772301 seconds)
    (249/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.103962891 seconds)
    (250/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.033499319 seconds)
    (251/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.033418388 seconds)
    (252/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.036098119 seconds)
    (253/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.021955454 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.091517724 seconds)
    (255/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.037522226 seconds)
    (256/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.031859677 seconds)
    (257/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.025345001 seconds)
    (258/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.088327632 seconds)
    (259/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.032799803 seconds)
    (260/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.108388608 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.086704206 seconds)
    (262/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.026701543 seconds)
    (263/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.224770677 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.038803888 seconds)
    (265/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.029234122 seconds)
    (266/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.13632821 seconds)
    (267/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.02754692 seconds)
    (268/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.039202837 seconds)
    (269/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.029969907 seconds)
    (270/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.022505181 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.033639956 seconds)
    (272/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.092652308 seconds)
    (273/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.025735156 seconds)
    (274/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.021007644 seconds)
    (275/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.021162675 seconds)
    (276/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.022178012 seconds)
    (277/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.020509096 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.041712376 seconds)
    (279/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.020496872 seconds)
    (280/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.029383653 seconds)
    (281/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.027394445 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.026079601 seconds)
    (283/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.0353881 seconds)
    (284/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.038454172 seconds)
    (285/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.023138872 seconds)
    (286/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.028887676 seconds)
    (287/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.021674167 seconds)
    (288/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.020251074 seconds)
    (289/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.029006687 seconds)
    (290/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.033689098 seconds)
    (291/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.097763204 seconds)
    (292/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.107351345 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.025988612 seconds)
    (294/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.035044814 seconds)
    (295/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.031958293 seconds)
    (296/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.02962343 seconds)
    (297/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.08825516 seconds)
    (298/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.023590418 seconds)
    (299/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.139972424 seconds)
    (300/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.020538073 seconds)
    (301/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.029285087 seconds)
    (302/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.040007653 seconds)
    (303/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.020861064 seconds)
    (304/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.031101182 seconds)
    (305/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.020877473 seconds)
    (306/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.025253717 seconds)
    (307/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.035684634 seconds)
    (308/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.023691998 seconds)
    (309/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.021200626 seconds)
    (310/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.029098571 seconds)
    (311/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.021633752 seconds)
    (312/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.021037307 seconds)
    (313/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.020948057 seconds)
    (314/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.021717622 seconds)
    (315/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.028558604 seconds)
    (316/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.022732842 seconds)
    (317/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.020779473 seconds)
    (318/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.020912967 seconds)
    (319/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.024750237 seconds)
    (320/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.025093739 seconds)
    (321/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.026699711 seconds)
    (322/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.030682801 seconds)
    (323/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.024720601 seconds)
    (324/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.020626494 seconds)
    (325/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.035101187 seconds)
    (326/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.428604795 seconds)
    (327/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.021302094 seconds)
    (328/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.021917588 seconds)
    (329/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.035346492 seconds)
    (330/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.02527468 seconds)
    (331/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.02523357 seconds)
    (332/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.02140725 seconds)
    (333/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.021738406 seconds)
    (334/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.02090558 seconds)
    (335/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.039169375 seconds)
    (336/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.0216571 seconds)
    (337/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.028373502 seconds)
    (338/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.021528937 seconds)
    (339/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.031120856 seconds)
    (340/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.020593375 seconds)
    (341/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.049858505 seconds)
    (342/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.020933951 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.032657582 seconds)
    (344/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.020370779 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.028836876 seconds)
    (346/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.031133793 seconds)
    (347/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.029574868 seconds)
    (348/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.025769174 seconds)
    (349/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.029028492 seconds)
    (350/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.036438694 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.103220431 seconds)
    (352/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.030998115 seconds)
    (353/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.036464975 seconds)
    (354/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.035012726 seconds)
    (355/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.030650983 seconds)
    (356/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.020503647 seconds)
    (357/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.020963075 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.235822808 seconds)
    (359/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.083034104 seconds)
    (360/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.037810865 seconds)
    (361/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.035926811 seconds)
    (362/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.02032391 seconds)
    (363/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.028180877 seconds)
    (364/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.020836337 seconds)
    (365/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.021346684 seconds)
    (366/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.020392642 seconds)
    (367/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.043380731 seconds)
    (368/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.020631793 seconds)
    (369/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.028785472 seconds)
    (370/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.020591088 seconds)
    (371/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.020174742 seconds)
    (372/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.020948581 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.092865975 seconds)
    (374/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.027063836 seconds)
    (375/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.02071212 seconds)
    (376/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.023384379 seconds)
    (377/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.031424593 seconds)
    (378/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.025134403 seconds)
    (379/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.032931706 seconds)
    (380/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.020944582 seconds)
    (381/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.04938867 seconds)
    (382/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.020844455 seconds)
    (383/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.020581588 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.033261693 seconds)
    (385/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.021134209 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.032603318 seconds)
    (387/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.034399009 seconds)
    (388/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.029767385 seconds)
    (389/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.060283156 seconds)
    (390/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.031139375 seconds)
    (391/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.022665575 seconds)
    (392/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.095767472 seconds)
    (393/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.020168974 seconds)
    (394/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.021052548 seconds)
    (395/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.029810686 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.034204889 seconds)
    (397/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020515645 seconds)
    (398/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.032292504 seconds)
    (399/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.034082536 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.032919856 seconds)
    (401/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.088357047 seconds)
    (402/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.031004271 seconds)
    (403/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.022443226 seconds)
    (404/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.02095844 seconds)
    (405/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026438966 seconds)
    (406/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.031169841 seconds)
    (407/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.02863893 seconds)
    (408/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.091601651 seconds)
    (409/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.034693027 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.025649246 seconds)
    (411/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.02537619 seconds)
    (412/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.022477446 seconds)
    (413/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.033829563 seconds)
    (414/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.027041241 seconds)
    (415/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.020502736 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.020841362 seconds)
    (417/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.04248631 seconds)
    (418/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.044847876 seconds)
    (419/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.022341965 seconds)
    (420/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.02352161 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.028313339 seconds)
    (422/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.021110511 seconds)
    (423/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.020803497 seconds)
    (424/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.298590287 seconds)
    (425/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.023935676 seconds)
    (426/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.029243339 seconds)
    (427/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.287752942 seconds)
    (428/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.021554894 seconds)
    (429/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.02522216 seconds)
    (430/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.028507471 seconds)
    (431/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.020589167 seconds)
    (432/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.437168893 seconds)
    (433/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.020786877 seconds)
    (434/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.028075937 seconds)
  done (took 24.602401803 seconds)
done (took 25.485206342 seconds)
(16/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 0.090301655 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 0.029377284 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 0.090203629 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 0.052062969 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 0.13135287 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032323576 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 0.038133956 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.162857521 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 0.152659346 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.155664053 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 0.132674995 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 0.046033092 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 0.047534478 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 0.218717427 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 0.028594065 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 0.024639263 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.201080647 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 0.147369106 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.18674181 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 0.067710244 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.046627521 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 0.048424478 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.187679134 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 0.048549779 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.172892544 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 0.106208184 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 0.052994056 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 0.08820647 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 0.024064176 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 0.156018458 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 0.030319984 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 0.025997218 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 0.034363073 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 0.154511835 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 0.03816132 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 0.03065057 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 0.075843841 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.02987195 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 0.046504677 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 0.166629692 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 0.041739442 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 0.051019938 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 0.032699226 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.178181157 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 0.058313513 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 0.06717335 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 0.04734483 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.074297232 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 0.071861833 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 0.033613898 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 0.042415927 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 0.059861543 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.029090438 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 0.070812364 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 0.077351956 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.075409644 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.064262167 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 0.077472763 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.027369137 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 0.058776035 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 0.019911817 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 0.057744802 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.030114263 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 0.044908424 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.145761842 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.066511096 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 0.071931397 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 0.072632753 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.028243183 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 0.053938581 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 0.066432846 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 0.05495177 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 0.058832984 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 0.023761058 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.075719963 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 0.069268195 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 0.071241126 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.02629422 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 0.069740334 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 0.072280245 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 0.041989932 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.028356868 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 0.057902128 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 0.072461467 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 0.019862747 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 0.021758776 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 0.026254401 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 0.021061344 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.059093023 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.023647333 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 0.02139786 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 0.065243422 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.070020661 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.023879721 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.030302211 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 0.161632791 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 0.024456842 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 0.072432801 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.078289201 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 0.030226389 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.045974795 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 0.048811803 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.050508197 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.064171935 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 0.065294243 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 0.048133384 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 0.030684037 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 0.02790257 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 0.037416975 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 0.021488162 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.028190048 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 0.052508423 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 0.051491546 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 0.063382125 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 0.021130807 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 0.02422423 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 0.027674884 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 0.020582073 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 0.026258173 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 0.021083379 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 0.020049653 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 0.019825908 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.030496953 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 0.03058545 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 0.06791628 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.051717448 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.138547854 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 0.029911879 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.038130546 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 0.019848332 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 0.029238563 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 0.064698213 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 0.050398146 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 0.024404188 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.031484335 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.04794952 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 0.020811978 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 0.063024868 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 0.020965828 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 0.042520163 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 0.020940647 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 0.023573497 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 0.066888556 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.028421351 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 0.026310097 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 0.051099289 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.051049464 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.030644166 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 0.02411751 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 0.020783305 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 0.024976787 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.046363648 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 0.024354428 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 0.054542855 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 0.047235749 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 0.056564719 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 0.02423948 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 0.030466358 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 0.019964738 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 0.023683779 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 0.051149298 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 0.065322246 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 0.063665558 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 0.026833677 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 0.05609205 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 0.023849619 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 0.020913853 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 0.026867817 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.030845734 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 0.03665214 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 0.032785621 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 0.025629683 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 0.045171842 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.055081642 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.072006783 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.031733171 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.030713271 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 0.029273932 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 0.037814862 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 0.020148603 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 0.054169075 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 0.054360126 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.032316371 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 0.028398263 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 0.054621208 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 0.05224185 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 0.025733889 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 0.02795067 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 0.05757828 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 0.021209366 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 0.029463109 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 0.025068713 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 0.027901206 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 0.038470286 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.023556375 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 0.020407866 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 0.021058326 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 0.023983387 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 0.078330713 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 0.020974956 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 0.023440148 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 0.023385357 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 0.020763398 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 0.020438175 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 0.027092583 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 0.020798724 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 0.020879777 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.031295622 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 0.060703894 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.027980503 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 0.025032323 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 0.023564303 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 0.024280589 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 0.05422815 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 0.068696493 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 0.023728844 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 0.023362496 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.02353335 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.03344757 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 0.024665883 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 0.028127088 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 0.020731149 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 0.020967296 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.024339432 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 0.064527139 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 0.020117524 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 0.019929228 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.031247646 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 0.021088536 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 0.023882413 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 0.021290315 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 0.028344536 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.057239927 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 0.020671319 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 0.027527064 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 0.028848684 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 0.020850344 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 0.023800641 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 0.019743464 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 0.023725769 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.023634247 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.03018093 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 0.028116291 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.030393357 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 0.023953446 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 0.023652704 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 0.020966868 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.05095639 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 0.045352724 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 0.02340306 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 0.029110556 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 0.020731837 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 0.025365512 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 0.061305078 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.034087657 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 0.053016222 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 0.020938056 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 0.049881364 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 0.020344707 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 0.019792189 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 0.020710347 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.023170958 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 0.020815556 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 0.062188684 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 0.04292026 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 0.019829041 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 0.028940761 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.030141583 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 0.023632625 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 0.024137264 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 0.053527575 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.023420993 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.047627024 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 0.020408061 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 0.072210719 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 0.034366737 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 0.026786103 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 0.026056667 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020844118 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.029536748 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 0.026010634 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 0.021143176 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 0.020658204 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 0.02057682 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 0.029062066 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 0.023649816 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 0.036267145 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 0.02068252 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 0.020277546 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 0.03294684 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 0.020363201 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 0.025053377 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 0.059377168 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 0.020768673 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 0.051442086 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 0.020783634 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 0.024368889 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 0.020508638 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 0.023865521 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 0.031130488 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 0.033150445 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 0.020597069 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 0.023839419 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 0.028170233 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 0.064558263 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 0.026814993 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 0.020243631 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.023465788 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.031320879 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 0.025203261 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 0.025558852 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 0.023693012 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 0.023902575 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 0.020002722 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 0.036166449 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 0.031296025 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 0.02082727 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 0.023741525 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 0.019866642 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 0.025174392 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 0.046688969 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 0.029126245 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 0.0266464 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.037866031 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 0.020053515 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 0.066808702 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 0.021040788 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 0.024301275 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 0.021051794 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.046194207 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 0.023443878 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.023598063 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 0.023394683 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.030387346 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 0.024026046 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 0.019734395 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 0.026318675 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 0.021278996 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 0.078264199 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 0.020951433 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 0.043672302 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 0.021086747 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 0.020532008 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 0.028656977 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 0.020542642 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 0.02810666 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.137730381 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 0.025984543 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 0.024114374 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.021251583 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 0.021411662 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 0.024024364 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 0.024853906 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 0.028748419 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 0.131606135 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.039662794 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 0.021523032 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 0.024003813 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 0.024313776 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 0.019938995 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 0.024997845 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.031156739 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.023809733 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 0.024077947 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 0.021543245 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 0.021241057 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 0.021379537 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.060081956 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 0.025914575 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 0.025108799 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 0.024038164 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 0.021948536 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 0.020582377 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 0.025666722 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 0.024210349 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 0.061386234 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 0.026416132 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 0.026327518 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 0.025446427 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 0.02130762 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 0.025114935 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.140962699 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 0.021638066 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 0.02187457 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 0.021831582 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 0.020837091 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 0.021835543 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 0.020762864 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 0.026091815 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 0.020649231 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 0.021426748 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 0.030082833 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.057371849 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 0.020781002 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 0.020380536 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 0.022180259 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 0.048323114 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 0.02917533 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 0.021215565 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 0.047669263 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.031874327 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 0.025408066 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.03153944 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.031729168 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 0.020543865 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 0.020540681 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 0.021134616 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 0.022074294 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 0.020874188 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 0.020544822 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 0.021912535 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.024425488 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 0.029935822 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 0.033159477 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.024639934 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 0.020598278 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 0.02909879 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 0.02897246 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 0.021540407 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 0.029810022 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 0.021329037 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 0.020634231 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 0.022008721 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.02448993 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 0.02602235 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 0.021195233 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 0.030446655 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 0.024621724 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 0.02914314 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 0.02474514 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 0.027409679 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.032689611 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 0.025203899 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.02068447 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 0.026259467 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 0.021824297 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 0.024311649 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 0.021692172 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.024005829 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 0.028596874 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 0.020597123 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 0.020638592 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.02431698 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 0.032496851 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 0.028904657 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 0.029020173 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 0.021337493 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 0.020551942 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 0.021924851 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.024421822 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 0.029758846 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 0.027254012 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 0.022008477 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.026674483 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 0.026494757 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 0.024523911 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 0.026477526 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.067459729 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 0.020815 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 0.021635559 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 0.021309005 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 0.026655151 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 0.048702055 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 0.026600748 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 0.02057697 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.028371442 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 0.028545659 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 0.024417911 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 0.038053246 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 0.024225238 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.066674974 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.024687079 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 0.030084646 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 0.02151562 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 0.020878497 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 0.021579348 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.024221854 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 0.03013644 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 0.029949661 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 0.030868081 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 0.025153493 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 0.02566603 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 0.025471095 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 0.021099376 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 0.021776174 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 0.021403638 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 0.020659081 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 0.020599491 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 0.026368366 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 0.021333061 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 0.022008045 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 0.021185612 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 0.021321647 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 0.024780384 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 0.02505265 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 0.030714165 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 0.031274732 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 0.024903673 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.020937666 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 0.020443422 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 0.022022118 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 0.019814743 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.022519354 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 0.022378214 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 0.027047522 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 0.021164981 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 0.020609009 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 0.020911971 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 0.026420258 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 0.028650919 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 0.029881636 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 0.021654838 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 0.021553093 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.024526215 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.024443767 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 0.020901376 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.028466242 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 0.021013657 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 0.030592195 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.03245774 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 0.021682855 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.024468117 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 0.024221203 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 0.020782409 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.024427779 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.031699848 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 0.025312847 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 0.025882169 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 0.020617734 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.028594504 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 0.020681918 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 0.025475248 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 0.022185177 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 0.033257927 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 0.020115892 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 0.020061949 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.02859889 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 0.02125642 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 0.020663242 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.021570188 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 0.020834184 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 0.023850486 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 0.024226838 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 0.021359029 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 0.02058488 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 0.024304908 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.020112968 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 0.026222335 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 0.020647909 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 0.021329651 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 0.021841028 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 0.024017357 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 0.021323072 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 0.021761397 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 0.025060042 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 0.02139536 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 0.029461587 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 0.024119768 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 0.032172681 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 0.021081221 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 0.025136139 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 0.029395839 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 0.025139502 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 0.024703672 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 0.020734596 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 0.032266595 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 0.02432948 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 0.025602128 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 0.021156538 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 0.029014711 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 0.02520925 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 0.024167494 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 0.021680658 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.028488686 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 0.020965983 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 0.024663923 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 0.024939739 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 0.02433464 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 0.029164204 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.024162444 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.024599481 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 0.021655541 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 0.028787085 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.024036141 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 0.028996759 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 0.021599797 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.020556299 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 0.03106204 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 0.026748725 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.024212704 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 0.024970317 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 0.021412098 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 0.021492931 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 0.033044009 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 0.02454465 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 0.02616179 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 0.029880451 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 0.028861927 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 0.021273733 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 0.021928689 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 0.025620367 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 0.021102252 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 0.02147212 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 0.024883892 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.024217984 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.031235888 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 0.026333212 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 0.019762574 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 0.026264721 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 0.029126102 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 0.024153617 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 0.0219544 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 0.02007878 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 0.021302192 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 0.024268927 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 0.021573526 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 0.021289257 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 0.031375062 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.021064645 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 0.026517459 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.023998663 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 0.027621133 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 0.02408053 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 0.02571605 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 0.020486467 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 0.026551631 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 0.021327155 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.028278393 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 0.025573283 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 0.025453698 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.028394781 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 0.019933582 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 0.026048051 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 0.019844748 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 0.021070237 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 0.024083871 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 0.028901829 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 0.021159195 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.031162958 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 0.026413111 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 0.021535073 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 0.029927844 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 0.021617594 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 0.025039768 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 0.022171481 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 0.020958947 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 0.024288664 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 0.026571745 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 0.022237799 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 0.021287035 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 0.020356749 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 0.022306591 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.024267286 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 0.021860231 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 0.029906921 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.030951892 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 0.022230036 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 0.020676961 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.020488625 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 0.025658475 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 0.021808251 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 0.028705956 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 0.030005614 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.027129145 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.024445852 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 0.021954988 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 0.020510669 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 0.024411744 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 0.024853847 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 0.0244279 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 0.024888546 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 0.021535661 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 0.026596579 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.031359867 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 0.020997397 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 0.021077781 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 0.024378237 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 0.021219709 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 0.021342972 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 0.021008103 seconds)
done (took 25.001964036 seconds)
(17/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067079326 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.056026071 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.155290746 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.135243738 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.033541973 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.034187623 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.02614542 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.033114468 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.026330447 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.03904568 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.04671486 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.040595016 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.144972134 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.040437305 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.021057227 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.031769805 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.021435592 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.039912388 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.134543361 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.044886171 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.052088115 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.020211507 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.026057378 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.03880126 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.029531586 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.034988933 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.045009093 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.022497557 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.037509401 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.03150412 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.046193982 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.024250773 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.021912888 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.033043616 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.033829017 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.027403932 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.021297891 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.022210201 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.030059957 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.024869856 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.051038715 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.032303599 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.025561285 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.02149658 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.021505117 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.031064796 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.021761757 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.024771496 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.029775091 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.021354267 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.024669967 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.027194806 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.019497894 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.031639117 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.019693712 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.025405475 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.024657005 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.02541303 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.021345417 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.025607586 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.024312166 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.023363238 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.023997007 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.0268214 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.022475686 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.02514797 seconds)
  done (took 3.454855802 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.040942913 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.061865587 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.040626999 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.033831677 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.020951833 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.021581814 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.021458668 seconds)
  done (took 1.253194536 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.078168504 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.132717009 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.13470808 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.133072312 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.143570626 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.131410793 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.032701457 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.040367727 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.052029554 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.146307102 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.144336057 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.13468624 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.023327548 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.02966102 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.047841005 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.136599337 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.032652626 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.028671529 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.131314545 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.135690344 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.021439484 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.044011921 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.032616958 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.022812026 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.137047295 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.132755394 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024539279 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.058254521 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022423682 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021965287 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.02139049 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.041306881 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.131778258 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.023996039 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021124838 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.020620004 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.129647617 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.02086811 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.133840916 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.024587963 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.126204373 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023973623 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.023558813 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.022501837 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.022942324 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.128249228 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.022210866 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.021307067 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.021788926 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.133449812 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.030990764 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.132424258 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.021910182 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.02281678 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.029348263 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.023099216 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.028396818 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.022541899 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.134846275 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.031347588 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023050645 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.136553729 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.136188343 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.1345467 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.135620682 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.029776122 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.133327476 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.12868956 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.021982811 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.029706229 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.023312185 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.140473845 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024834209 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.024085749 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.020111236 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.029684749 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.143112111 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.141190889 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.140134003 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.029432772 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.022285401 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021530791 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.139027537 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.140056998 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.022147467 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021306624 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021188068 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.034926335 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.042142525 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023375516 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.026503959 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021377655 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.030752418 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.023655778 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.022039402 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.133737145 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.020259243 seconds)
  done (took 7.379411523 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.034563261 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.021886265 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.021860417 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.020921915 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021122773 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.020846979 seconds)
  done (took 1.217025021 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.053921742 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.02154005 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.021475273 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.020630251 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.041053985 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.131311543 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.131651987 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.021911985 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.036225426 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.032919106 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.131746962 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.136491273 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.132712934 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.021693519 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.1323075 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.031959595 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.131631269 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.024295332 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.031338189 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.021252726 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.028508764 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.021445968 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.021309121 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.138817855 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.022641035 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.031790942 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.027956669 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.031860385 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.031791118 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.021433658 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.021171459 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.022491799 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.026231488 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.021671827 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.13268989 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.026528342 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.020855908 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.023698337 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.023243911 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.022400836 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.131394265 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.020986863 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.022819558 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.023139065 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.020851429 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.025440806 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.023060868 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.027855919 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.129268188 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.023596247 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.023351204 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.020323196 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.022234117 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.02324951 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.025467732 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.021061014 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.023874744 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.129879626 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.021039533 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.025558964 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.020577206 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.021815224 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.021138432 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.021922244 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.023448781 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.023129736 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.025510394 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.02086606 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.021093058 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.020123374 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.023131781 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.020265009 seconds)
  done (took 4.098738921 seconds)
done (took 18.441504413 seconds)
(18/23) benchmarking "inference"...
  (1/8) benchmarking "abstract interpretation"...
    (1/6) benchmarking "rand(Float64)"...
    done (took 2.583196699 seconds)
    (2/6) benchmarking "sin(42)"...
    done (took 0.038609189 seconds)
    (3/6) benchmarking "construct_ssa!"...
    done (took 0.165202563 seconds)
    (4/6) benchmarking "abstract_call_gf_by_type"...
    done (took 0.499928238 seconds)
    (5/6) benchmarking "println(::QuoteNode)"...
    done (took 0.227174057 seconds)
    (6/6) benchmarking "domsort_ssa!"...
    done (took 0.061352316 seconds)
  done (took 4.598052603 seconds)
  (2/8) benchmarking "rand(Float64)"...
  done (took 0.528021748 seconds)
  (3/8) benchmarking "sin(42)"...
  done (took 0.06288392 seconds)
  (4/8) benchmarking "construct_ssa!"...
  done (took 0.414448525 seconds)
  (5/8) benchmarking "abstract_call_gf_by_type"...
  done (took 1.661668677 seconds)
  (6/8) benchmarking "optimization"...
    (1/6) benchmarking "rand(Float64)"...
    done (took 0.104175876 seconds)
    (2/6) benchmarking "sin(42)"...
    done (took 0.076995762 seconds)
    (3/6) benchmarking "construct_ssa!"...
    done (took 0.42331963 seconds)
    (4/6) benchmarking "abstract_call_gf_by_type"...
    done (took 1.719747785 seconds)
    (5/6) benchmarking "println(::QuoteNode)"...
    done (took 0.576304368 seconds)
    (6/6) benchmarking "domsort_ssa!"...
    done (took 0.15547976 seconds)
  done (took 4.124375934 seconds)
  (7/8) benchmarking "println(::QuoteNode)"...
  done (took 0.691384709 seconds)
  (8/8) benchmarking "domsort_ssa!"...
  done (took 0.135289944 seconds)
done (took 13.267298285 seconds)
(19/23) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.458209133 seconds)
  done (took 1.490090999 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.885174954 seconds)
  done (took 1.926485187 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.046015737 seconds)
  done (took 1.101563384 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.419309744 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.458327981 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.649888026 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.067780574 seconds)
  done (took 2.6384066 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.750595668 seconds)
  done (took 1.815204273 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.229609704 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.150014606 seconds)
  done (took 1.456108201 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.410452641 seconds)
  done (took 1.464453157 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.129265356 seconds)
  done (took 2.189645811 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.213450044 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.1174754 seconds)
  done (took 1.390958155 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.502237642 seconds)
  done (took 1.558640308 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 3.63641367 seconds)
  done (took 4.696675747 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.171313082 seconds)
  done (took 1.244173398 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.232395999 seconds)
  done (took 1.297398292 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.563084272 seconds)
  done (took 1.623807429 seconds)
done (took 26.951114043 seconds)
(20/23) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.03865387 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.035623988 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.035058329 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.032830497 seconds)
  done (took 1.196377779 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.026806627 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.037625933 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.026142568 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.026200613 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.0289097 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.025268924 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.026083275 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.029818169 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.023429681 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.02950117 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.023028769 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.024182359 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.025450267 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.028510338 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.025390356 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.026381632 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.024075161 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.030237805 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.023932854 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.023826424 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.025097214 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.024073039 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.024001365 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.025483628 seconds)
  done (took 1.696773798 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.038104099 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.032999887 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.032696823 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.032798216 seconds)
  done (took 1.206233173 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.028940862 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.028539322 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.038249626 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.033358258 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.028908571 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.029195119 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.034722389 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.034593383 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.041861499 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.037327647 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.022261383 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.021920561 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.021330608 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.027133077 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.036516256 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.021438756 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.027702464 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.029254234 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.028375499 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.0307982 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.023944943 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.022664952 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.028900506 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.028921534 seconds)
  done (took 1.772376022 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.040564834 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.020224093 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.050161901 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.042478864 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.041567816 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.020129356 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.036926888 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.042362341 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.178925353 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.021187308 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.026240848 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.021095816 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.050539731 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.021364605 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.035160214 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.048610079 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.048209497 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.024887491 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.046841265 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.021386547 seconds)
  done (took 1.910607701 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.026677092 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.026105615 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.022000815 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.020160571 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.030293205 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.032531755 seconds)
  done (took 1.231440187 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.02260449 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021119421 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.021999697 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.023977935 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.02095762 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021304122 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.02187244 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.023754485 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.023899999 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.021697795 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.021469236 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.021720143 seconds)
  done (took 1.333917811 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.144615778 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.026203669 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.023495799 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.020833325 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021982384 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.021726377 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.034586002 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.022314758 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.038119267 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.021424841 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.021524219 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.027324607 seconds)
  done (took 1.491481333 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.054106356 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.055848288 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.074301975 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059020359 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068469769 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034824099 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.182462907 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.030042214 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.104463444 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076318539 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06394669 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.038125119 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034594312 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.024312693 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033857636 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04755131 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093413454 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.025540335 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.059902606 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.241395699 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.062089861 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.083992786 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077666431 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064464047 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.034346102 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071051532 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.046567788 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034012301 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.062735274 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054874822 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062950834 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.05466637 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.024952361 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.023298235 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093496043 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.046190508 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057389491 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.042836994 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.048035903 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.03894597 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044960194 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.024071871 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.036279439 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.059063458 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.02790451 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067593014 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.038087812 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051112612 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030280768 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073994858 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.054005921 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.163156093 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.034375987 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053132434 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.0630253 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.043387065 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057822642 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.051783207 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.026427728 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.065190055 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.046409644 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.040186429 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042764255 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029338232 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092848806 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032508732 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.065230228 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048663001 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.032104432 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.045551198 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.058327544 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.074359308 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059023512 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.043995679 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060849095 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.039514994 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06341372 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.051879282 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.0837628 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040674662 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.025795756 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.056900197 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086534302 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038215798 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049941764 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061083825 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047554256 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.133874376 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.036030619 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.06459613 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.029852709 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.077014897 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024200479 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.088442907 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.057854262 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032956304 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054587649 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.059054321 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028458547 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.073750375 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.053677508 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025308993 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.062416177 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050821822 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070230118 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032433446 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.028051586 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049495036 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040505268 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.101943582 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037513354 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.029359085 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052735169 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.053271645 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038086523 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.252036164 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.040855253 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068316515 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05061446 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.036293343 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.02683934 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.047187236 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048974029 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051585628 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055372927 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034835916 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.036068796 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.037054122 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051464302 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048363866 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.025587913 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.064189071 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.055783734 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.023813367 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027498107 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.029115477 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07671783 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.037065399 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.058425289 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0733462 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.029963674 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052065521 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042754283 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057600955 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.052887887 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060860535 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.052793256 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.13743503 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.037743541 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.028633732 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051616093 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078335253 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.065215469 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.036648861 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.034901757 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054666647 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058798724 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042577983 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.056938126 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.036479142 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05127929 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.05003232 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073827579 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065061747 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039446596 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.050945569 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044683472 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.070095885 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.027099869 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089699432 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042996861 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068405407 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.030150261 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074830203 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.066701001 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033159703 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.037544195 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050707788 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.041809328 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05039308 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078067235 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.042053796 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.025135382 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0301425 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071899268 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024661118 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053551571 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.045784995 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.042871176 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057367509 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.036146729 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031152599 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022435775 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.163186814 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.074363904 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.024166262 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.061763851 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.059035106 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033793962 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.039829941 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.022102126 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.050740867 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07370238 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057922534 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.051704189 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061524306 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047872277 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.057058746 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.082178191 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.055895693 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.030537716 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.069168099 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073112563 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029725316 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033474985 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.048259744 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.088421747 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.069014949 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.046617053 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050814428 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.043209928 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052100755 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037289903 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.04549047 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.078771083 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.069582846 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.069292784 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.031997034 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055112136 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059692488 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.049360005 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031322676 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064168645 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.025023494 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055437032 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.025871885 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05512926 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.029727885 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.109503727 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.031047219 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.049305616 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.023928365 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.022994 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078818284 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.063036623 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03956376 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037161048 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.070055163 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.073715742 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.03113659 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058061757 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.056358105 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052235453 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050437189 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.054960294 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.038959362 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.02931678 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.054763206 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.034561085 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.025390163 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.051695065 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031013749 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.05945569 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.032162974 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026857703 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.057797667 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053633905 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028809197 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.028310481 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04145939 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.072481322 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043328332 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.036473782 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060447197 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049251942 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075157414 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.045035388 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.052608297 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.061012606 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029626751 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.047547511 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.023432935 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.043358025 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.032530554 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.100743835 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.025883805 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.040794062 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.022687946 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.070992011 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.022802429 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.050705553 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.053471086 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049017008 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.073453856 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044514774 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068517762 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027298233 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.058653595 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051688383 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037337079 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034823351 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049602707 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.164866091 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.061235442 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.042623506 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.053643269 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.062388934 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043586244 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.078749334 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033855615 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.068654238 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050773726 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.061231174 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.037749786 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061890538 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071804047 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054958219 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.055158247 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029483734 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039254625 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055221715 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053592833 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.083255513 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.049807243 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.026279394 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.03958274 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044581923 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.050734174 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047269515 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.027347378 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.063361058 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037680562 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.04317425 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.043203398 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.020134024 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.04909345 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025674243 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.037366231 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.040342594 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036025734 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.044968732 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059104936 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060982289 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049118188 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.076302759 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.052422715 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.076918134 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.171061386 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060358614 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055472968 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.029777157 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.030582742 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065671292 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.057664515 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.070080497 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.049986745 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048117488 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.052909735 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038117177 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.050133735 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043193861 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.052396189 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027271642 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.024228512 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022727167 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.025396261 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.061428451 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051960608 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04367337 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.042427552 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.025908821 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.054034022 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052962031 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.024469033 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031508682 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028807702 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.03544357 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.029059315 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041540585 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.064531211 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.042007857 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.046280768 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046885999 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064446546 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.054462806 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02706841 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077418386 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065721977 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026911076 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029703824 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.024960234 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.028625428 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055096877 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061985036 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063194214 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.025207271 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03757783 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.036232577 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026141286 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025195694 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.038673664 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.039046424 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049578928 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046625788 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.060745002 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049060461 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025737931 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.052246304 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.040477232 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04762646 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.053765117 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058321552 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.058620075 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.171179952 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054497038 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051456514 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02610704 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.025008172 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.026404209 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.029460086 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.050659624 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.030184102 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026340029 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069335386 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.041499017 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053039053 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052487075 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036198029 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025263637 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068101759 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.023496911 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073589985 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.025276225 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.027144089 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.03266545 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02785561 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028719629 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.057641513 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050275655 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042867499 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051003295 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052239593 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.057441806 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087178571 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024967414 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.078203179 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025939194 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024258191 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.025926434 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049508052 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027423897 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.060060386 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.052477713 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03406579 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042967796 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024960898 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068457247 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.044783718 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.04676587 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03345276 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.029819176 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069361195 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.031444606 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.020880677 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.038164054 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.059306639 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.026829739 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.049898393 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.031764218 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.030011194 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.058668986 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.598375784 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037016685 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.026373048 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.043191573 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081266972 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060432261 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038618184 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054359593 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.064980337 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048019865 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.040494314 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057037992 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.13638736 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027039849 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.02949283 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.042015738 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.047075014 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046336768 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.047119175 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.038069989 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.047448853 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.042030857 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.030789356 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055161741 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031031804 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.039622767 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049662189 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.02991059 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.034226939 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.069703651 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.043230476 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.025198055 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026535571 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.053773796 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031030195 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039707098 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.023226691 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.050982522 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.035016938 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04867827 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.043924908 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.058014295 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061343684 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032924757 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061473477 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.038532885 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.061398543 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03776772 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.026761315 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.049991577 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.031791102 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026430117 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066028215 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.020206046 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.053058254 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04782817 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.051936673 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049627672 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.046690838 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.171551377 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04652943 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028075933 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03711501 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.042975446 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.025099132 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.02679322 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.024003442 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.028216094 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051366391 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.022973602 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.029976845 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.062536806 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.034024825 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049483449 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.043904722 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.061023841 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030418553 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.166140266 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.059710692 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033468754 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04958178 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055148466 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.067125377 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.083367348 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.050766586 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.066411604 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068044757 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.025609255 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.019984948 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.02284437 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.060620265 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.02914006 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.038493158 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029745943 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067178601 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.036288889 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.042681428 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.186605918 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029393328 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.035716243 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031760949 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.023758662 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.030281675 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050758852 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.037539151 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027416966 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.042140033 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.029406005 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.061506413 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049403955 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03756178 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.038989362 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02786533 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.038431093 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.058195399 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.076276588 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045446542 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.023760794 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.038238839 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.053505336 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063558077 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.027217531 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027879904 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.068323629 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040238276 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.051774429 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.029264553 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.069098933 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.075209899 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.046156718 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068697047 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.02368625 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030965928 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032428893 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.077051263 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.023348852 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040725434 seconds)
  done (took 32.08061855 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.117311308 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.158825671 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.107045832 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.080498922 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.052034576 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.061819112 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.149838014 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.065432746 seconds)
  done (took 1.980820433 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.022269454 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.035074989 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.035431288 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.290473852 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.097825727 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.021838147 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.020269415 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.036316591 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.021512614 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.021209933 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.054690218 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.021857186 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.024114732 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.500601402 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.021313005 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.020934073 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.024187548 seconds)
  done (took 2.448563868 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.365614648 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 3.997871894 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.141013292 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.097477297 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.080345738 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.384699626 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.029583961 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.031922336 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.438644423 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.323414409 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.074441905 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.110270285 seconds)
  done (took 16.25631113 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.029069918 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.142230062 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.142119287 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.028225643 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.027977055 seconds)
  done (took 1.581348003 seconds)
done (took 67.311124212 seconds)
(21/23) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.039579979 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.116860303 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.023398355 seconds)
  done (took 1.338469702 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.141979245 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.14073775 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.140379275 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.14030062 seconds)
  done (took 1.736708398 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.028473231 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.031896806 seconds)
  done (took 1.239304157 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.340572919 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.29046652 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.054126456 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.036402752 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.033065892 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.033709268 seconds)
  done (took 1.290269607 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.023554299 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.023502153 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.023581715 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.023301802 seconds)
  done (took 1.269629162 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.022638859 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.021387437 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.023358989 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.052954828 seconds)
  done (took 1.296029352 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.053299841 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.055880687 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.108673878 seconds)
  done (took 1.3951132 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.044110749 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.041899244 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.040233785 seconds)
  done (took 1.306522438 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.054933293 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.045683971 seconds)
  done (took 1.276366597 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.033602142 seconds)
  done (took 1.212203549 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.046870137 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.055667803 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.214978625 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.165178756 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.213553833 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.21190409 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.021673182 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.029488144 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.027074949 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.021396856 seconds)
  done (took 2.183422244 seconds)
done (took 17.446505998 seconds)
(22/23) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.033983948 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.164552503 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.310379447 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.04330122 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.595881726 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.302845961 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.828845288 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.040431872 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.042770909 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022017082 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.035018586 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.592595359 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.823330906 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.120652511 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.810082265 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.120119864 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.604962742 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022546115 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021653559 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022316268 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.811032175 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021361591 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.0218546 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022627284 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.600627278 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.328520031 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022053699 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.121080229 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021681687 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.024051758 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.304912927 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.02235026 seconds)
  done (took 13.053552003 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.034174047 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.074350162 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.030528614 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.037786394 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.025810877 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023254729 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.042515672 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.040966 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.053469825 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022165945 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.03536914 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021352504 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.052824602 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022530157 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.037655288 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021883304 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023541606 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022852095 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022007835 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022741721 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.036656451 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021389083 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022270517 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022512131 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022112072 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.03269383 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022289097 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.022647129 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021920568 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.024656029 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.02581831 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022807707 seconds)
  done (took 2.154587499 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071622004 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.075309101 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.031374586 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.056780873 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.049636884 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.02381332 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.094518173 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.040782359 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.053267766 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022940138 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.035600046 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.022546902 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.054042214 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022837067 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.038197917 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.022256182 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.022109517 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022673933 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022179497 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022580017 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.037307975 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.0224164 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.02257196 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.023042321 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.023248737 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.034303018 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022281592 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.02235008 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022366233 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.028257438 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.025996049 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022696031 seconds)
  done (took 2.300939621 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.023660017 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.025809352 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.026648497 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.033103782 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.020623204 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.023312124 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.024573939 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.020611841 seconds)
  done (took 1.389067989 seconds)
done (took 20.093397552 seconds)
(23/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.039620061 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.02501443 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.028738969 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.035995538 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.030507763 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.130978476 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.022606091 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.027006598 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.027264548 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.024516366 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.03012887 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.020667628 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.0250931 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.022561152 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.02912705 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.025954507 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.138745262 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.025326155 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.136581535 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.139166318 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.023966928 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.02672522 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.027509748 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.136204577 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.137876589 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.140757563 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.032602393 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.028872935 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.02303584 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.02446243 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.134740438 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.136744356 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.0315874 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.135490766 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.027570237 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.024587509 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.025616217 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.02693309 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.13819176 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.028735307 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.025606329 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.028408544 seconds)
  done (took 3.53071225 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.135575809 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.1449236 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.139137631 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.030988738 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028790829 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.031511817 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.142261845 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.029329562 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.028706149 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.143073427 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.025099047 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.027898106 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.028660814 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.02295585 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.028719839 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.025788445 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.029441737 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.023616641 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.028648028 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027905254 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.144222604 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022846968 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.029340342 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.0300201 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.024853627 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029928104 seconds)
  done (took 2.612647966 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.028082241 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.042109476 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.047804772 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.093622444 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.052365544 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.040492508 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.038111648 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.042587 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.044056559 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.02130962 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.040625134 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.048739437 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094841725 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.030449147 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.051356723 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.036813027 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.033195553 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.023450522 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.027930564 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.137021979 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.044179958 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.038727801 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.053587657 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.083882619 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.021505287 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.052746519 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.025990187 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.036256736 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.030659393 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.031937727 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.024762114 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.024130497 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.023681561 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.035288256 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.024595982 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.020898455 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.041729125 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.038955504 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.035583963 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.056168192 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.024956327 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.024313813 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.04717651 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.087994241 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.021177822 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.022590786 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.032383469 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.035900251 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.023993565 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.063574272 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.039177306 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.023139779 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.039710614 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.023736565 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.023765772 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.040705899 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.024288245 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.024274782 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.039498045 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.024829511 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.041631166 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.028539183 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.038140695 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.021618598 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.031180525 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.02358876 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.022379978 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.021491257 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.053457948 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.029267819 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.062431376 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.023381145 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.0209717 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.031627989 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.030635555 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.029382925 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.021605364 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037664877 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.033574174 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.024261793 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.039144394 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.024093562 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.024934502 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.079407389 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.021942131 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.021120483 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.021057611 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.022832108 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.024010235 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.022799066 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.034686419 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.022976676 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.02467304 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.04564216 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.022556141 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.023280499 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.021702587 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.021199525 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.021692122 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.030266501 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.02337862 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.023815447 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.034244505 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.022170357 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.024077106 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.04721007 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.031558051 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.020575354 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.021170529 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.02197727 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.022862328 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.023090012 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.024444054 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.023729459 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026934739 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.029288142 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.025846804 seconds)
  done (took 5.261180656 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.268771694 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.210909217 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.085181265 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.251964334 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.046760935 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.152209506 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.210141728 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.229779226 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.023616762 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.046591914 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.076436121 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.16596991 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.15713929 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.170809411 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.168933091 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.023781038 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.046862575 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.163196021 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.212647195 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.273447074 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.043812971 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.029624032 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.046858052 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.046320026 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.031207882 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.044757123 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.036473983 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.030926417 seconds)
  done (took 4.51943113 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.023760416 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.058926977 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.02568163 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.04467259 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.033523187 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.023037625 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.023888401 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.02347724 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.036253824 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.022753003 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.023694237 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.026175395 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.026895627 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.024980101 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.023429535 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.031270585 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.031095888 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.023601883 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.026501555 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.026363333 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.033809022 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.041112725 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.02609605 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.022804727 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.025277283 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.022462632 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.022277455 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.026397377 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.024451132 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.023061458 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.020913425 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.031440945 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.036970753 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.024419335 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.023069588 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.02340709 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.023462088 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.02342746 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.025001499 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.021931337 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.021897703 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.029173977 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.021727087 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.022121631 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.029031028 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.025625303 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.024221524 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024760846 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.025993743 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.020491528 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.025416032 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.025397414 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.024808741 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.032194682 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.024791143 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.025735118 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.023705426 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.034906097 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.028364097 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.022519296 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.023390622 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.022657895 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.025131206 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.024414044 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.032122248 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.024567304 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.021970625 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.023602888 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.024273039 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.029267591 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.022658761 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.029132325 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.020136575 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.02306095 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.023553475 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.024799121 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.023520268 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.021549888 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.021965602 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021649745 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.023236713 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.022377286 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.021809865 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.024365711 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.021035923 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.022021491 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.02328956 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.023110089 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.0223405 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.022078114 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.026907012 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.024180046 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.021834979 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.024700575 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.028181977 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.025067666 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.039451937 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.023521366 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.02417283 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.02126295 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.038880683 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.024825394 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.023019064 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.024803527 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.031265961 seconds)
  done (took 3.970855911 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.049361789 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.023664834 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.04364811 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.057462767 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.035225213 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.029584012 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.038278999 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.022817828 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.045252621 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.029688469 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.032237835 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.022086648 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.035469246 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.031810401 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.023271486 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.033067518 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.025362998 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.042982547 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.038758196 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.022070031 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.033253086 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.035090403 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.037155686 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.040476519 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.039863899 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.041145541 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.035940715 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.025035214 seconds)
  done (took 2.201200425 seconds)
done (took 23.282374262 seconds)
RUNNING BENCHMARKS...
(1/23) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.266456151 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.470036727 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.227951352 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.629385483 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.319206903 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.228174912 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.326686979 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.213944298 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.422656177 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.265718671 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.556818711 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 4.995308106 seconds)
done (took 60.195947095 seconds)
(2/23) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.26563158 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.347048756 seconds)
    (2/2) benchmarking "String"...
    done (took 1.412432954 seconds)
  done (took 3.977701663 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.518131581 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.2481616 seconds)
    (3/3) benchmarking "different"...
    done (took 1.266445842 seconds)
  done (took 5.241124745 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.225111103 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.645189264 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.478582784 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.210954157 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.217770966 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.595062945 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 1.980819729 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.652718761 seconds)
  done (took 26.992763985 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.133816111 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.464221287 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.425368621 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.462380634 seconds)
  done (took 14.740823936 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.527616978 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.523450992 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.521127443 seconds)
    (4/4) benchmarking "different"...
    done (took 1.329319813 seconds)
  done (took 7.157646176 seconds)
done (took 67.885110977 seconds)
(3/23) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.210718992 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.642532297 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.257614244 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.362052198 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.223989894 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.313305316 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.222500393 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.22753809 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.210231537 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.217276669 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 5.256337463 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.11345325 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 2.055898337 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.220801912 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.226036676 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.268689693 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.659578265 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.231772105 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.255948054 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.336920919 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.686219762 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.226483676 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.227676902 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.28897253 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.083230657 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.261716412 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.813210536 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.216012831 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.620905291 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.224769037 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.235368813 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.221201505 seconds)
  done (took 181.829951859 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.210846712 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.564991359 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.59618451 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.253339853 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.010673493 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.426081484 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.367195339 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.017377297 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.212445126 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.22946006 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 2.687161354 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.211639894 seconds)
    (13/36) benchmarking "trsv"...
    done (took 2.720790086 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.150804745 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.222611399 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.279880374 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.709766604 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.668625416 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.226959813 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.419095964 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.217256789 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.661098383 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.635680558 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.612376104 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.24838943 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.279013118 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.241607031 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.22690621 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.973058735 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.693813955 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.2194131 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.255164498 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.305265543 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.087014213 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.232238869 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.216578053 seconds)
  done (took 152.508973117 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.389333776 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.217397535 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.27065165 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.458886594 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.063414959 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 5.994586992 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.224606801 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.21030107 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.212482002 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.216658847 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.211455672 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.276204164 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.211983677 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.497845992 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.242060827 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.209981295 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.211572155 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.597136093 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.226499483 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.212410669 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.210672597 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.272595825 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.583492648 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.458582948 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.224769456 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.213841252 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.458025592 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.231864191 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.211474808 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.209988095 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.457902935 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.22511426 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.2875331 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.458948129 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.22892658 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.290056743 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.218626443 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.837415297 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.226313049 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.210359249 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.211678931 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.271196383 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.210563918 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.506813932 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.315266743 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.215488396 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.226740643 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.263264066 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.929448701 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.213202074 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.210575626 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.210945611 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.214190368 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.213791573 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.359107216 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.223290777 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.237254007 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.024345543 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.227307945 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.210265685 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.2105912 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.211178305 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.21309265 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.215744037 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.441963799 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.092597086 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.7810266 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.593887819 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.098756192 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.224513621 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.211087373 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.210460127 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.063092032 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.455337447 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.224668237 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.210874682 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.29208269 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.210321006 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.210155356 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.290051109 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.286246913 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.212998477 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.453503879 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.22546877 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.211020167 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.685659971 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.467542789 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.227716046 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.226749484 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.441789851 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.227170341 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.210134949 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.217687508 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.290957145 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.213473964 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.220857607 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.42922943 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.226742809 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.210836709 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 17.934236355 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.443592718 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.211300441 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.276924664 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.462981248 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.623517649 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.225144556 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.2111807 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.226230105 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.211932489 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.2202716 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.219517016 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.213027469 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.213535789 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.219749651 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.212549905 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.210514133 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.210048497 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.225813147 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.211149055 seconds)
  done (took 341.129953255 seconds)
done (took 678.067154044 seconds)
(4/23) benchmarking "parallel"...
done (took 1.209955219 seconds)
(5/23) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.434733857 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.829884436 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 5.912052117 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.468167581 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.384889429 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.391212769 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.500036493 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.537098609 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.495543745 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.37814411 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.430049133 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.390726282 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.450720419 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.514016961 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.461792493 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.463139698 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.415189131 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.606840021 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.428320341 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.390444783 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.391482923 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.34722837 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.382732343 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.43549723 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.504279636 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.398361656 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.578803209 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.435693832 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.398908614 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.448064986 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.528431339 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.469230568 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.507554864 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.487901978 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.468648141 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.483885089 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.347504502 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.528209534 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.381588375 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.492240024 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.425471099 seconds)
  done (took 66.536199083 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.534186262 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.37723482 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.480928861 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.506481543 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.862983628 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.478942147 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.621469623 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.374815402 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.378031384 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.478406557 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.490547204 seconds)
  done (took 18.815662088 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.382467014 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.380327361 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.481692389 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.510549421 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.579969935 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.490778092 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.551844741 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.376623473 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.388456593 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.487851422 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.489564169 seconds)
  done (took 18.346406675 seconds)
done (took 104.910725645 seconds)
(6/23) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.685819494 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.29884926 seconds)
  done (took 4.195702129 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.235642625 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.224937903 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.223671009 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.231209193 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.223849479 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.223715817 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.261958066 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.236122722 seconds)
  done (took 11.073588564 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.224038058 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.222687535 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.223015777 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.223161687 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.222873685 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.222568835 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.223453107 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.223223617 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.220997124 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.222446298 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.222731865 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.222235768 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.222308082 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.222546238 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.223053988 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.221776372 seconds)
  done (took 20.777161636 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.2229193 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.222784543 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.222627655 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.223094106 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.223956141 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.223013182 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.224175618 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.226903295 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.223922115 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.222274756 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.222504377 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.22310729 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.22292535 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.223457419 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.223479017 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.222398235 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.22379264 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.222601834 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.223089289 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.223751021 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.222236506 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.222767636 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.225080319 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.224092152 seconds)
  done (took 30.572276347 seconds)
done (took 67.844617617 seconds)
(7/23) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.538179716 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.779817443 seconds)
  done (took 6.527872724 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.234021163 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.236289126 seconds)
  done (took 3.687389316 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.581668916 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.247714268 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.776222611 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.497975224 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.246568338 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.249276261 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.685110975 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.248321448 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.250473791 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.247305832 seconds)
  done (took 15.240303777 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.255844284 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.410349391 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.392071682 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.340346862 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.394680722 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.272146361 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.278196059 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.256930172 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.438818808 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.255931804 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.372922718 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.412525414 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.37217948 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.446087047 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.280020361 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.407907765 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.42844407 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.37543561 seconds)
  done (took 25.603231646 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.249345545 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.248649344 seconds)
  done (took 3.708959811 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.370122274 seconds)
    (2/7) benchmarking "second"...
    done (took 1.269725661 seconds)
    (3/7) benchmarking "month"...
    done (took 1.349655712 seconds)
    (4/7) benchmarking "year"...
    done (took 1.33764731 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.272927522 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.251989544 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.269712363 seconds)
  done (took 10.33229546 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.663209093 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.252780178 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.290792448 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.66197789 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.830306282 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.115020507 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.815407003 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.122068714 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.91348114 seconds)
  done (took 16.876227545 seconds)
done (took 83.186713909 seconds)
(8/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.32472913 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.214828481 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.504092194 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.267759819 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.219273744 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.51943131 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.225492473 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.638482544 seconds)
done (took 37.13094733 seconds)
(9/23) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.219597465 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.210876621 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.24665483 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.331050375 seconds)
  done (took 20.004152672 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.21059965 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.524323683 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.218620868 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 2.883868595 seconds)
  done (took 19.05436011 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.511886321 seconds)
    (2/2) benchmarking "read"...
    done (took 1.570292458 seconds)
  done (took 4.304481538 seconds)
done (took 50.795325884 seconds)
(10/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 6.212777271 seconds)
done (took 7.424140848 seconds)
(11/23) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.283256907 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.253965728 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.298539693 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.282203417 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.298608568 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.305035779 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.223342941 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.282247063 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.256175652 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.282192081 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.285347783 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.105952755 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.299171494 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.616940837 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.223285841 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 4.105118123 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.222794232 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.298801842 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.615660326 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.299735551 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.223750842 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.282014564 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.304330418 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.298790326 seconds)
  done (took 42.158182594 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.367979528 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.495685872 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.368164697 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.361499081 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.475541979 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.364190575 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.364439601 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.434242659 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.366995599 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.367330613 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.343901972 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.4738545 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.35891736 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.476328368 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.358769827 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.47815046 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.368246577 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.433958656 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.356542838 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.474787587 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.360545578 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.433536271 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.474047436 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.313499179 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.45266434 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.342453807 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.368176262 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.49662198 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.311034376 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.451745 seconds)
  done (took 43.305573903 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.263220771 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.235575862 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.245786735 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.310125555 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.234573449 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.24767265 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.245402928 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.235189887 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.235911024 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.253029144 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.245381005 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.245554883 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.244950944 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.248627062 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.234950881 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.249602848 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.270280141 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.398094573 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.234155973 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.234457541 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.280402161 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.245511632 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.235605508 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.250225861 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.248934793 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.248471092 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.234325595 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.246273127 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.245426102 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.248830232 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.248437382 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.277871992 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.268690763 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.253838113 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.350873913 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.28547218 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.253074824 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.260704153 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.251298718 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.234705469 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.237574119 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.234648783 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.245439927 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.234533627 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.292172045 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.247907557 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.246207683 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.247730284 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.235052414 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.235015336 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.235016433 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.250683212 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.248868201 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.251953087 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.235121829 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.245390676 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.235658999 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.248943519 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.246167449 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.236857843 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.235223402 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.297423496 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.247716451 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.248525794 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.593558808 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.248618719 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.292387632 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.234149151 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.248836289 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.431771714 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.252720429 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.423292414 seconds)
  done (took 92.139802121 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.273514582 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.334981183 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.316764617 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.316281867 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.335134234 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.27276944 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.335437391 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.664923934 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.827834109 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.314761651 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.663213515 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.335661816 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.827287574 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.315239062 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.27693504 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.31603513 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.313999899 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.336414658 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.272172782 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.315790155 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.27505228 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.338745419 seconds)
  done (took 31.792006746 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.275457899 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.163065193 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.270208978 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.138296642 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.16327593 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.130835051 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.275642079 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.165020571 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.272733789 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.27165074 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.268979885 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.274435136 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.142464685 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.268498465 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.271436739 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.181340732 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.276656794 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.128565449 seconds)
  done (took 31.150895578 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.485490112 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.462425646 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.350179718 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.350729648 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.567819735 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.464221735 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.397325746 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.429564489 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.318555882 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.466371923 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.42993958 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.322784549 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.462034501 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.350335034 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.317737914 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.567038836 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.350849869 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.349971731 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.377603285 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.397692834 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.485386855 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.37505276 seconds)
  done (took 32.291628999 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.310667231 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.326742496 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.312106775 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.311896167 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.273113951 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.270262565 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.290785713 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.269414247 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.19585393 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.309608388 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.269437656 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.269105033 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.185219782 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.298968184 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.338116296 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.268793135 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.325788693 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.299975652 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.309168233 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.271641802 seconds)
  done (took 28.919758579 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.295109061 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.264899851 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.270403095 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.294249688 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.272915901 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.267775416 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.299062425 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.269560334 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.272206035 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.468653528 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.267692409 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.265912689 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.299258762 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.27161422 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.27127955 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.294398774 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.293723532 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.29306663 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.265978112 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.274418678 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.469660436 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.26793358 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.293907199 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.264034526 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.268176032 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.264363372 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.267379201 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.27502208 seconds)
  done (took 37.355230036 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.294354971 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.262302508 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.270444285 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.311853382 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.312957474 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.330945942 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.312439151 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.312111783 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.265475573 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.268174882 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.306870346 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.262116185 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.266032858 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.297080326 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.265094588 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.30689627 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.806375195 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.314029074 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.332838062 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.212380479 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.306391165 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 4.804780199 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.306170304 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.271310178 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.21182719 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.307218557 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.313118019 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.312588691 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.306872513 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.269335417 seconds)
  done (took 56.931847661 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.256358283 seconds)
    (2/2) benchmarking "in"...
    done (took 1.258536395 seconds)
  done (took 3.72686769 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.270641611 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.373886272 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.271163284 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.413187888 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.475251306 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.389909845 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.420144983 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.392875181 seconds)
  done (took 12.219442123 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.262951805 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 3.639860644 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.271220985 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.250694409 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.247646029 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.008638908 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.015960926 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.47680153 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.41256699 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.875931066 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.172740031 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.516095028 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.897650667 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.400942715 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.26213547 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.8829035 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.872394543 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.591528791 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.763055191 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.274438923 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.185888396 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.290716621 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.320325102 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.255211308 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.290458641 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.019881071 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.560322208 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.491756481 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.760926629 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.360900633 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.211473529 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.271774102 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.252058463 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.952456438 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.273299454 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.253175823 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.931531528 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.272903507 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.396464735 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.250803838 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 3.941797916 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.7919647 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.229322491 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.988518264 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.26665663 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.268280086 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.252270939 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.248702456 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.288761444 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.492144233 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.899718728 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.013199514 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.272444078 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.253320565 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 3.84574185 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.334192076 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.307617121 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.993735403 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.540066065 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.971899967 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.24720943 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.059752222 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.463456589 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.36034042 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.260921891 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.202150617 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.772710636 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.246485902 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.427396745 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.276894167 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.067225827 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.315422481 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.366079244 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.248157349 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.988084446 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.504236855 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.265026643 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.262174843 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.246856118 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.25301429 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.977933328 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.339656501 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.865728071 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.273313605 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.197753131 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 3.900592219 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.285821278 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.334783786 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.392229814 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.80919806 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.176427658 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 3.853281629 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.213563184 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.261661802 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.731288141 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.301816312 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.278766428 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.252047075 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.873000082 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.038920439 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.318450749 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.251126268 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.363657983 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.535176423 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.260317383 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.377024457 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.411425584 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.329827489 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.955795955 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.345632685 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.252012599 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.288140163 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.849447968 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.184719961 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.26126622 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.471007139 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.903711316 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.045472024 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 3.827061439 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.24197754 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.00127072 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 4.011392454 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.330262498 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.77359037 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.261554206 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.037485771 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.850250641 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.409857058 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.939100525 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.324457674 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 3.93383736 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.382792335 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.255696021 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 3.646680624 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.272320581 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.258530534 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.248436258 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.330594311 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.264921862 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.257464526 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.209276539 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.057607975 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 3.951691142 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.332798962 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.240680635 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.341952334 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 3.941873814 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.030519682 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.638371129 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.36312712 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.255335343 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 3.892688637 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 3.740371126 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.534035294 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.32954189 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.255677902 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.252075341 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.81105591 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.679673121 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.303285789 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.332538223 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.739695583 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.185776717 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.264139038 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.260119688 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.452611909 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.433994716 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.263230135 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.817471795 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.453511189 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.002716169 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.46758901 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.304568785 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.338078557 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.250998682 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.250225925 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.251931889 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.770991224 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.585613385 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 5.200011787 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.503951459 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 4.906340721 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.294796106 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.907810612 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.305781985 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.963671148 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.153346974 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.354321683 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.330616753 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.301904892 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.257094422 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.450752156 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.584135822 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.154017016 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.646514211 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.091058293 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.881565078 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.16047729 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.582545252 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.380274931 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.418896197 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 3.642298566 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.402035458 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.250092221 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.25666034 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.229098844 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.132647938 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.476124457 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.031510244 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.437290439 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.25026873 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.39415864 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.332937689 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.375531302 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.317428393 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.793244005 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.74393534 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.332302579 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.979961403 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.790006649 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.29378896 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.247874166 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.840781553 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.313852763 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.262515727 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.762702727 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.106515282 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.876144197 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.68871606 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.118354805 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.997373154 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.50630557 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.180416756 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.358980581 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.540003483 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.314207293 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.227860579 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.959795894 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 3.695880477 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.350482105 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.526035351 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.425954039 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 3.891753569 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.335236271 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.711013646 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.330652723 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.179650721 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.320725126 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.257071297 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.926708043 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.303794619 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.385619367 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.330580096 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.209242185 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 3.783080927 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 3.584042475 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.312333085 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.229282858 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.961500177 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.763398335 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.929598277 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.353282497 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 3.615949268 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.065271753 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.161167483 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.484179671 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.139814569 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.189224371 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.359541542 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.256668987 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.255626865 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 3.892688708 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.30067759 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.254604863 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.050438532 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.897679287 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.099845432 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.173935536 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.26582239 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.263710984 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.899667233 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.822359979 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 3.619417748 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.10029271 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.526561022 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.495576586 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.332176199 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.795493992 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.298611386 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.801606537 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.168521321 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.33982951 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.397526703 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.335607213 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.922876547 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.352356108 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.090515025 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.133035344 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.917720791 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.206986394 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.84084704 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.333685669 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.462366919 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.480680007 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.192438269 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 3.780987951 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.396488181 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.478030636 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 5.451617717 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.477602478 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.916881498 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.818020837 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 3.738051425 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.278548372 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.302517259 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.256401265 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.469412241 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.886886119 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.270082423 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.774622068 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.148930457 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.013618283 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.985676327 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.171248177 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.2626421 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.256817051 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.341927803 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.004447736 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 3.642940848 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 3.66538828 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.320127273 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.250685062 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.249035727 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.924321343 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 3.684312093 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.463862286 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.537144875 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.895663705 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.352243363 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.262327078 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.255777529 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.25503822 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.257894018 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.405201584 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.249806852 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.012532764 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.359025483 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.859948104 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.173698299 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.278528827 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.004349531 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.336620999 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.248786718 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 3.642821575 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.282407745 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.203650834 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.298679969 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.255688507 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.401175175 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.398435069 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.019652756 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 3.861609348 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.982677775 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.252189806 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 3.646783145 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.382996814 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.410231036 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.294230174 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.774714707 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.263185233 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.024459273 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.169698755 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.285073986 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.021450523 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.967265964 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.513870239 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.904879526 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.968742761 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.840463775 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.329338391 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.581861293 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.281148285 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.369415482 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.249346876 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.836176007 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.338165172 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.282550164 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 3.755126388 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.227428153 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.050485094 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 3.873008083 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.310819593 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 3.632679667 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.426107282 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.300066162 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.253619973 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.255065444 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.163050418 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.325751239 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.289673542 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.449775726 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.991268958 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.39740797 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.846390974 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.557379736 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 4.571658178 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.357365494 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.256469158 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.31899393 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.301986092 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 3.931290096 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.353915569 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.765502756 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.42419791 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.285396259 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 3.636837268 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.314940187 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.090523758 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.030014733 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.32193162 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.25144055 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.988383101 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.908160291 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.36597186 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.892689442 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.078404129 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.476800261 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.063291111 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 4.604267589 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.322148985 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.011578456 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.346255491 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.905941213 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.261702246 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.82026191 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.363435491 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.007038229 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.633417132 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.195140184 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.361096135 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.764438577 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.505755266 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.374131625 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.573410132 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.437336253 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.258818514 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 3.93866838 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.078871364 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 3.699679105 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.342844697 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.253714694 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.292164796 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.399221904 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.543923701 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 3.914569293 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.289296879 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.273406152 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 3.919900368 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.904581665 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.181587591 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.264785442 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.273643644 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 3.606351563 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.41066757 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.25314723 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.402503908 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.559402517 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.484545405 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.453534231 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 3.754585487 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.360253499 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.952702729 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 3.830517317 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.248558785 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.298881044 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.249977203 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.248266244 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.252003449 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.034418038 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.357590391 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.253973599 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.582973776 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.366587519 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.527976111 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.035881212 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.980123431 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.28353274 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.406549487 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.357060011 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.452823804 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.659037428 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.162125832 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.24012447 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.955116568 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.892690267 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.41945638 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.33539079 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.250875132 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.651143072 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 3.741543742 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.970822016 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.040534602 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 3.976264169 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.306232297 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.412808774 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.326241983 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 3.923853201 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.353333864 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.251522669 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.439719202 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.502537269 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.027178865 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.352273754 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.178348075 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.329100232 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.3087692 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 3.958021183 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.32172843 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.259557297 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.254490896 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.731958349 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.079961136 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.331501922 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 4.556116916 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.091742451 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.343520206 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.790292599 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 4.939332795 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 3.957124581 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.262920061 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.516959505 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 3.795434127 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.393970679 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.928134597 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 3.780633105 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.285684754 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.21841958 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.32943032 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.262428863 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.274809262 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.258539453 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.035893934 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.375308894 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.256146498 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.45001025 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.990450123 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.329455771 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.319976414 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.936954879 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.389756884 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.259859282 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.571953305 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.381073674 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.27963909 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.256233493 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.3589684 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.595187827 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.472896063 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.256822687 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.985488898 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.367034342 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.001516478 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.885621112 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.453990046 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.320292865 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.252996154 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.249574793 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.480715618 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 3.857408129 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.468505656 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.421527048 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.963200274 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.493132777 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.900078569 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.178327106 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.482669775 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.666285119 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.331107282 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.249988012 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.043987217 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.016448102 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.998325819 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.984966448 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 4.974512836 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.310509159 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.274594863 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.776958529 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.279973088 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 3.669156264 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.307111356 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.316620257 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.25034528 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.257435615 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.445761533 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.904342559 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.315016877 seconds)
  done (took 1365.213537873 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.494392783 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.276650261 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.268795011 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.267390675 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.316610001 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.276102368 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.268822318 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.277996695 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.278665748 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.290322591 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.268719235 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.266464235 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.297582218 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.48986359 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.331470137 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.293548451 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.269401937 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.277121468 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.270993103 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.276512406 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.304076993 seconds)
  done (took 28.57815302 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.271780285 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.279699073 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.328370987 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.306652018 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.330775481 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.273192687 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.328694894 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.274083073 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.307000434 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.279495651 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.306061578 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.273105595 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.276690702 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.280773992 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.276655671 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.279169722 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.307279851 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.331773154 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.270880708 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.329751215 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.277743487 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.32890186 seconds)
  done (took 29.734472194 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.254696438 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.252564157 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.441418009 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.332518743 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.252377228 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.331229329 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.250008113 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.321259037 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.95864104 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.903645514 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.1794588 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.955371995 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.265148937 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.241272428 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.326324736 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.252570661 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.251291643 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.253872045 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.253312919 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.251021597 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.259648046 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.910760891 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.343994392 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.262658004 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.795759605 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.396900267 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.251894325 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.260544157 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.256052235 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.024878597 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.162461219 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.261100285 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.571297821 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.241405746 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.263257019 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.911639581 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.177697016 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.261372574 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.264690096 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.252329611 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.19293302 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.73949441 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.271650506 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.261312387 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.032806523 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.326361666 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.252670138 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.333001297 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.947301577 seconds)
  done (took 88.232169245 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.296080634 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.431004094 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.457569714 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.291019281 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.420588157 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.291593554 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.383338213 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.289581589 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.28706248 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.288481949 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.431331279 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.562179271 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.296431052 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.289384081 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.38540303 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.289703695 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.296288573 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.294540821 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.29779872 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.293349297 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.294600089 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.338142716 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.410007386 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.553323272 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.295577045 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.290597669 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.295341302 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.289710627 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.555869207 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.298178695 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.291033299 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.29222436 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.431955015 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.532177785 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.295431582 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.278394784 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.420550938 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.28970728 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.295146109 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.283018774 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.286059064 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.291175737 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.340361776 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.434883509 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.296651297 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.491080466 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.293592619 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.281897471 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.552331273 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.277547575 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.302798517 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.562659543 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.295830649 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.289256794 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.301968338 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.415088117 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.292531335 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.288401412 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.285092998 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.555212844 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.286430428 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.29295011 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.562521106 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.278148595 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.290941949 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.5637854 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.490253706 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.291758919 seconds)
  done (took 93.311997498 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.299311912 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.356685159 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.404346085 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.405235955 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.35629016 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.346005777 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.357901798 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.35693953 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.355910023 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.36757866 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.355352328 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.323341135 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.329802593 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.318470125 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.360876245 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.343028993 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.346435934 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.343009583 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.358532924 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.358695018 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.348343034 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.403324577 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.357073671 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.404511399 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.565575292 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.333426777 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.355884295 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.358581682 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.406007603 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.357003365 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.564996115 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.359348481 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.356062525 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.406198715 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.564722796 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.353391052 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.301369128 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.356552794 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.358845846 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.355435125 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.3302366 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.405990919 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.353555163 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.331806878 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.345371414 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.354638565 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.407150975 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.563598843 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.319238993 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.370232773 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.359342614 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.408455398 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.355602272 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.347293746 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.406886429 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.387588228 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.406149593 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.406481073 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.362535939 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.406538039 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.407081755 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.39104084 seconds)
  done (took 86.554775755 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.321115445 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.319786722 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.347184585 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.267510554 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.265276485 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.355628565 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.266669307 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.266583815 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.318055004 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.319001227 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.186281091 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.345550668 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.426714501 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.18732856 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.356852682 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.428946827 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.344907774 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.356398243 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.319175595 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.359371257 seconds)
  done (took 31.576628757 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.303987286 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.347215255 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.304784172 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.409228469 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.301350802 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.346306272 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.298587627 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.081198888 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.083154364 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.150191721 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.374852508 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.377630081 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.089485296 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.409238271 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.348368227 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.346180636 seconds)
  done (took 25.788054024 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.303590152 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.295771119 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.268255761 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.26501991 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.30643605 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.256189451 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.257644375 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.258294925 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.30898907 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.620627768 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.258909945 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.297583005 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.259051475 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.258437543 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.25544927 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.297181364 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.313480309 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.264701184 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.258442073 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.259776675 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.888685465 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.258530374 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.296146015 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.258401273 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.305844002 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.891110545 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.268712471 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.304522103 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.263859543 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.295220968 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.30566587 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.6388561 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.305571013 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.265334787 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.262900283 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.264223038 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.258182215 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.294508755 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.297257298 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.258752583 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.256156491 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.303419264 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.257955554 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.255712409 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.313534388 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.292829132 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.307378144 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.625969807 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.253141017 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.303902491 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.255794398 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.267473055 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.260449698 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.633441744 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.265967253 seconds)
  done (took 74.11598903 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.318891799 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.342478732 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.272565444 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.275995835 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.292937813 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.372648706 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.318936306 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.167897661 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.374274735 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.275773461 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.442920849 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.181271673 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.372505465 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.341891117 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.44290994 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.32003663 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.275186654 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.338963929 seconds)
  done (took 26.944241777 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.290793846 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.339756301 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.277138981 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.291912292 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.290355857 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.319060795 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.271898278 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.283017229 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.685620061 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.289977877 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.750830048 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.279875305 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.685508131 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.279649871 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.339783307 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.750468394 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.277214669 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.275170345 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.290677276 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.274122145 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.31992026 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.273456207 seconds)
  done (took 31.35286282 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.250055468 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.258212763 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.227799171 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.226761968 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.227865247 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.244052711 seconds)
  done (took 8.650905649 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.289048906 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.302853873 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.271900435 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.282961621 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.303844324 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.31123184 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.310695175 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.309219528 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.301681286 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.510904783 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.313089168 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.307824862 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.301323277 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.356044328 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.29815573 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.301462444 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.306918308 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.31182187 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.282086434 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.370413225 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.319670366 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.302589615 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.316824858 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.311426842 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.30957849 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.356882555 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.305340018 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.51394457 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.311741141 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.302980927 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.297626302 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.309602128 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.308780501 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.511143337 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.283564834 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.302989533 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.311650666 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.371661339 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.298672232 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.35245758 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.268340002 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.305039047 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.30284474 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.319087139 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.303353949 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.319383188 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.319812782 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.309687055 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.316871983 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.571717902 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.302187654 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.356916874 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.300816662 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.308636647 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.303372116 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.567745164 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.51517221 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.353876708 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.30379276 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.513128655 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.357910527 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.297933491 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.355916166 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.516654942 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.300718549 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.3555656 seconds)
  done (took 89.619833468 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.356748162 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.272508671 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.310241622 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.518984175 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.355199176 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.314092075 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.311263299 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.306712074 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.307443698 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.290779994 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.370681893 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.316322195 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.358533385 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.35924029 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.31497491 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.314005741 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.312030849 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.354205448 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.292964457 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.57259139 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.316650165 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.355684177 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.356705018 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.354399512 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.509280743 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.302631176 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.309655707 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.314285301 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.314636888 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.314899267 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.325661543 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.315706684 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.359394517 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.275323327 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.356518788 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.314980013 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.314448374 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.324733509 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.314956727 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.303693209 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.358804078 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.371765826 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.314791255 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.315384607 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.509545649 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.307335496 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.306941299 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.291280533 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.314162868 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.291108741 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.510759178 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.509636773 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.518193931 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.354405494 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.314396661 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.315346568 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.312762429 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.309299636 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.314586804 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.303564745 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.354818051 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.315448346 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.572630157 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.316473884 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.309970285 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.359207254 seconds)
  done (took 90.154255752 seconds)
done (took 2483.032761912 seconds)
(12/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.258766145 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.326886591 seconds)
  done (took 13.802800174 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.242183324 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.227598573 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.42430642 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.22836117 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.23725901 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.262112776 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.263160536 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.2418572 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.244003757 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.327977572 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.227256427 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.39787143 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.349978222 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.241829529 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.240027434 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.230211506 seconds)
  done (took 41.637238134 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.733193421 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.37085272 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.864969579 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.658952336 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 5.059919852 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.936273411 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.191746195 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 4.156110362 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.5145342 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.5394041 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.426137171 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 3.72534952 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 4.665817406 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.75736464 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.735234555 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.698718245 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.722707799 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.780941961 seconds)
  done (took 51.756699582 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.220402106 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.31442845 seconds)
  done (took 8.770823459 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.223122919 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.253961851 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.246510619 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.242810957 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.227763369 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.227453018 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.244380415 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.239482665 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.235325176 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.234224359 seconds)
  done (took 63.60033859 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.582978298 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.669638518 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.486220877 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.523603644 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.102064402 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.561563991 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.375403087 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.588483174 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.311090475 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.217560442 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 3.895392551 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.629012755 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.583468906 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.748401264 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.759258922 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.447859971 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.533663914 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.613591587 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.499140292 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.272860679 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.210836362 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 4.031261778 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.478739915 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.997245688 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.227989998 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.009203532 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.21524303 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.332783999 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.303692584 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.704676753 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 3.882367619 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.319038322 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 4.036635183 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.30481106 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.288119054 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.517336607 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.756989892 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.397971347 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.399966737 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.481947707 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.528117925 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.908438975 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.354819827 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.920063024 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.45529858 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.021033373 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.080034971 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.44405999 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.323153878 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.344490029 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.537002357 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.344775131 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.361297993 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.335641866 seconds)
  done (took 142.475845812 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.218274085 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.345999176 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.375872553 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.219998851 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.458922611 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.410724701 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.702427631 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.500787665 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.228253895 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.420181383 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.360566147 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.314005415 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.220189614 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.220491921 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.222234758 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.218496247 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.383588947 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.568662471 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.229523767 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.219446467 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.425155571 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.369740021 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.330731737 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.22310218 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.370416966 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.445150848 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.573114849 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.315303897 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.708183156 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.218108321 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.565281224 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 5.545772055 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.218185608 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.03952551 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.557503563 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.474189592 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.548288639 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.22454929 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.221424673 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.218648719 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.880961889 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.403545113 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.477750193 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.368132386 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.463282422 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.449638864 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.734347483 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.218178409 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.752744135 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.391558482 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.426792185 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.431566818 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.486469783 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.224092901 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.15238256 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.218141535 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.766966606 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.45676009 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.441850466 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.306080224 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.219602048 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.218593886 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.217855235 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.443280326 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.220039028 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.29834434 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.220491729 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.218362134 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.301294666 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.307715668 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.433204269 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.453993738 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.451869056 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.5207822 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.654969514 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.400526673 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.556555255 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.429684853 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.220746482 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.217636271 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.555086687 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.803824819 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.350725968 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.440174474 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.446438226 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.41765853 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.808036163 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.219112331 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.353028889 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.393312568 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.435170653 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.466477704 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.559934739 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.152709113 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.217752872 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.218033391 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.202642933 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.352391599 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.282671957 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.369072564 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.467087632 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.62235546 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.473760885 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.500140927 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.322345999 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.220757871 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.810179986 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.218724879 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.427272296 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.510612971 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.227680307 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.217207199 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.372053455 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.014715121 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.218504429 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 4.693456229 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.523339081 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.228778603 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.377297735 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.221123344 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.4413229 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.173523473 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.431760031 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 4.937305 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.481597623 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.405039023 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.465695612 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 4.407799911 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.450789813 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.474432343 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.558528068 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.432147203 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.427768728 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.219984769 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.508979081 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.221879557 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.217148219 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.391702905 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.979330734 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.381805775 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.220408649 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.452374646 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.374088635 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.557151623 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.220003895 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.461214127 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.450728116 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.473775536 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.224534313 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.353633876 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.220818333 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.057018755 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.384383441 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.219564966 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.219053881 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.596215654 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.218647614 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.377693905 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.432216201 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.936540264 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.529278275 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.639502196 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.585907729 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.517618706 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.407833417 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.422477408 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.782252478 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.357322398 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.76951219 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.417134572 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.218703224 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.438864417 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.401524944 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.221792598 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.22074983 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.978191987 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.913481566 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.21872972 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.38402062 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 4.820599671 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.381725743 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.399553704 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.223176545 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.543494605 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.222697704 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.054763067 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.362425654 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.192742942 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.219218662 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.220224704 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.22043981 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.22127735 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.415529608 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.461575587 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.542079667 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.357381835 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.49786536 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.470051049 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.436079477 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.476823046 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.229310261 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.43183493 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.220074996 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.534866956 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.227000753 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.401649243 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.446486605 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.221047817 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.407583365 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.417177898 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 1.98962269 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.494253339 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.172487836 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.218737364 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.704491267 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.359893989 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.537968869 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.222846645 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.218716194 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.51425001 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.327898562 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.408403919 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.188829643 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.256433774 seconds)
  done (took 741.200527062 seconds)
done (took 1064.461119012 seconds)
(13/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 6.222234517 seconds)
  (2/4) benchmarking "arrays"...
  done (took 6.282990457 seconds)
  (3/4) benchmarking "structs"...
  done (took 6.277309954 seconds)
  (4/4) benchmarking "grow_array"...
  done (took 6.227763306 seconds)
done (took 26.227413535 seconds)
(14/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.218239003 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.218282111 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.225489502 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.219726106 seconds)
  done (took 26.100485356 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.859723903 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.883810213 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.422363833 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.411455429 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.201073895 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.35674508 seconds)
  done (took 11.354545866 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 5.684886228 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.219950955 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.220786036 seconds)
  done (took 19.342860287 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.659686985 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.683079604 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.361796007 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.309876226 seconds)
  done (took 7.233574253 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.268546856 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.261279504 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.260673392 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.262666906 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.261316482 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.255851676 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.275532594 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.265001056 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.2652532 seconds)
  done (took 12.601538351 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.107976599 seconds)
done (took 81.979956725 seconds)
(15/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.470239937 seconds)
    (2/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.411410835 seconds)
    (3/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.222674453 seconds)
    (4/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.357232029 seconds)
    (5/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.346202973 seconds)
    (6/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 1.911020853 seconds)
    (7/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.467051053 seconds)
    (8/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.33286671 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 1.317793248 seconds)
    (10/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 6.220324794 seconds)
    (11/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.270426163 seconds)
    (12/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.456421009 seconds)
    (13/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.533494348 seconds)
    (14/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.594279567 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.097530994 seconds)
    (16/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 2.047143342 seconds)
    (17/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.338442646 seconds)
    (18/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 1.918072499 seconds)
    (19/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.552710044 seconds)
    (20/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.479931939 seconds)
    (21/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.252289686 seconds)
    (22/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.25492807 seconds)
    (23/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.282749125 seconds)
    (24/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.487357426 seconds)
    (25/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.35535447 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 1.915027627 seconds)
    (27/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.321646352 seconds)
    (28/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.318918596 seconds)
    (29/434) benchmarking ("sort", "Float32", 0)...
    done (took 2.125499907 seconds)
    (30/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.258116156 seconds)
    (31/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 1.960710042 seconds)
    (32/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.2959109 seconds)
    (33/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.417245698 seconds)
    (34/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.86734448 seconds)
    (35/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.460158611 seconds)
    (36/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.268938486 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.33567769 seconds)
    (38/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.595985864 seconds)
    (39/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.323498539 seconds)
    (40/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.472519335 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 1.917983958 seconds)
    (42/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.316314487 seconds)
    (43/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 2.054755025 seconds)
    (44/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.963641457 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.523620337 seconds)
    (46/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.221844872 seconds)
    (47/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 1.995784924 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 6.225871093 seconds)
    (49/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.355875594 seconds)
    (50/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.602407396 seconds)
    (51/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.429535081 seconds)
    (52/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.299003772 seconds)
    (53/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 1.311521998 seconds)
    (54/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.224387127 seconds)
    (55/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.350796467 seconds)
    (56/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.507966054 seconds)
    (57/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.239805916 seconds)
    (58/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 1.934246665 seconds)
    (59/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.362401728 seconds)
    (60/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.389566172 seconds)
    (61/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.352792442 seconds)
    (62/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.531697808 seconds)
    (63/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.230913397 seconds)
    (64/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.650078704 seconds)
    (65/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.286909141 seconds)
    (66/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.314156036 seconds)
    (67/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.220409185 seconds)
    (68/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 7.814231475 seconds)
    (69/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 2.325175063 seconds)
    (70/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 1.914608493 seconds)
    (71/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.175592238 seconds)
    (72/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.312790968 seconds)
    (73/434) benchmarking ("perf_countequals", "Int8")...
    done (took 1.477035524 seconds)
    (74/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.25395047 seconds)
    (75/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.218017921 seconds)
    (76/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 1.930803248 seconds)
    (77/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.249710366 seconds)
    (78/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 2.329183907 seconds)
    (79/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 1.906233426 seconds)
    (80/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 6.221297684 seconds)
    (81/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 4.359821625 seconds)
    (82/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.558532928 seconds)
    (83/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.314869685 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.575231425 seconds)
    (85/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 1.440934876 seconds)
    (86/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.281571478 seconds)
    (87/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.254612639 seconds)
    (88/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.257436048 seconds)
    (89/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.82617348 seconds)
    (90/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.288664788 seconds)
    (91/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.21979443 seconds)
    (92/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.228218698 seconds)
    (93/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.443947936 seconds)
    (94/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 1.31307692 seconds)
    (95/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.039704969 seconds)
    (96/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.220925661 seconds)
    (97/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 1.34070857 seconds)
    (98/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 6.218378021 seconds)
    (99/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 4.267533384 seconds)
    (100/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.344184764 seconds)
    (101/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 1.914479631 seconds)
    (102/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.222683375 seconds)
    (103/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.345450436 seconds)
    (104/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.43769675 seconds)
    (105/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.310986804 seconds)
    (106/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.165548429 seconds)
    (107/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 2.169278339 seconds)
    (108/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 1.920158719 seconds)
    (109/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 2.028277612 seconds)
    (110/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.550048443 seconds)
    (111/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 2.056312798 seconds)
    (112/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.557372336 seconds)
    (113/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.623361099 seconds)
    (114/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.224360504 seconds)
    (115/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 8.349288967 seconds)
    (116/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 8.513407629 seconds)
    (117/434) benchmarking ("sort", "BigInt", 0)...
    done (took 8.025181337 seconds)
    (118/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.349347097 seconds)
    (119/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.228029741 seconds)
    (120/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 8.135975174 seconds)
    (121/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.408442785 seconds)
    (122/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.555159948 seconds)
    (123/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.344327441 seconds)
    (124/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.658405428 seconds)
    (125/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.277668946 seconds)
    (126/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.254110192 seconds)
    (127/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.365950228 seconds)
    (128/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.440587522 seconds)
    (129/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.908806984 seconds)
    (130/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.259254775 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.324141584 seconds)
    (132/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.244269712 seconds)
    (133/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 1.920796887 seconds)
    (134/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.311396521 seconds)
    (135/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.219440626 seconds)
    (136/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 8.54940689 seconds)
    (137/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.558075533 seconds)
    (138/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.227085559 seconds)
    (139/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 1.899573048 seconds)
    (140/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.327560903 seconds)
    (141/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 6.223221226 seconds)
    (142/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.673331041 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 1.902056791 seconds)
    (144/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 1.901446284 seconds)
    (145/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.223367938 seconds)
    (146/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 1.898722091 seconds)
    (147/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.449385661 seconds)
    (148/434) benchmarking ("perf_countequals", "Float32")...
    done (took 1.543197889 seconds)
    (149/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 1.896918853 seconds)
    (150/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.009698366 seconds)
    (151/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 2.28871691 seconds)
    (152/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.324506099 seconds)
    (153/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.348960754 seconds)
    (154/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.285544089 seconds)
    (155/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.315284521 seconds)
    (156/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.239889844 seconds)
    (157/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.47621957 seconds)
    (158/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.437952545 seconds)
    (159/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.221116622 seconds)
    (160/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.580973521 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.221155976 seconds)
    (162/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.384320559 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 2.059613464 seconds)
    (164/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.22678269 seconds)
    (165/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.626754334 seconds)
    (166/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.255798006 seconds)
    (167/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.417832106 seconds)
    (168/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.566051731 seconds)
    (169/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.224064045 seconds)
    (170/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.326333098 seconds)
    (171/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.350896604 seconds)
    (172/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.333202662 seconds)
    (173/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.321513048 seconds)
    (174/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.441073598 seconds)
    (175/434) benchmarking ("perf_countequals", "Int64")...
    done (took 1.484600843 seconds)
    (176/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.325883799 seconds)
    (177/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.220411204 seconds)
    (178/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.457235597 seconds)
    (179/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 4.052518114 seconds)
    (180/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.389488075 seconds)
    (181/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.445092901 seconds)
    (182/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.340458635 seconds)
    (183/434) benchmarking ("perf_countequals", "Bool")...
    done (took 1.489693767 seconds)
    (184/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.317059122 seconds)
    (185/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.247360752 seconds)
    (186/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.026309099 seconds)
    (187/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.53545489 seconds)
    (188/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.616245511 seconds)
    (189/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 1.451441308 seconds)
    (190/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.700108179 seconds)
    (191/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.380128953 seconds)
    (192/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 1.904432354 seconds)
    (193/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 2.033151717 seconds)
    (194/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.345843971 seconds)
    (195/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.563141793 seconds)
    (196/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.431005364 seconds)
    (197/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.907108 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 1.899921016 seconds)
    (199/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.883974312 seconds)
    (200/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.321497578 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 2.09715744 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.229348336 seconds)
    (203/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.310590649 seconds)
    (204/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.287654599 seconds)
    (205/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.284084071 seconds)
    (206/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 1.914603144 seconds)
    (207/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.225848718 seconds)
    (208/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.348821793 seconds)
    (209/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.353374088 seconds)
    (210/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.272071799 seconds)
    (211/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 2.211466332 seconds)
    (212/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 2.04614999 seconds)
    (213/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.701325642 seconds)
    (214/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 1.91231797 seconds)
    (215/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.90837913 seconds)
    (216/434) benchmarking ("sort", "Int64", 0)...
    done (took 3.989649111 seconds)
    (217/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.443299893 seconds)
    (218/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.321325913 seconds)
    (219/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 1.864459772 seconds)
    (220/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.608951367 seconds)
    (221/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.220599475 seconds)
    (222/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.439611604 seconds)
    (223/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 2.035416003 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 1.912510142 seconds)
    (225/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 1.409868374 seconds)
    (226/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.535886075 seconds)
    (227/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.042745524 seconds)
    (228/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.257338297 seconds)
    (229/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.220065713 seconds)
    (230/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.355588622 seconds)
    (231/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 2.037734112 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.824209953 seconds)
    (233/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 1.924964926 seconds)
    (234/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.254421137 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.480524309 seconds)
    (236/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 1.969897243 seconds)
    (237/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.43316129 seconds)
    (238/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.358213959 seconds)
    (239/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.558579225 seconds)
    (240/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.302824721 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.268522666 seconds)
    (242/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.495856101 seconds)
    (243/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.454748628 seconds)
    (244/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 2.303418738 seconds)
    (245/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.42572342 seconds)
    (246/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.438423674 seconds)
    (247/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.638723631 seconds)
    (248/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.299894181 seconds)
    (249/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.205248172 seconds)
    (250/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 1.990945083 seconds)
    (251/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 2.300192378 seconds)
    (252/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.428619888 seconds)
    (253/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.225549549 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.353345462 seconds)
    (255/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 2.05463988 seconds)
    (256/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 1.899987045 seconds)
    (257/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.565864684 seconds)
    (258/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.443442921 seconds)
    (259/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.041536232 seconds)
    (260/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.365567526 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.35830016 seconds)
    (262/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.432139034 seconds)
    (263/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.223030088 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 2.040450207 seconds)
    (265/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 6.221015065 seconds)
    (266/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 8.967469355 seconds)
    (267/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.532026108 seconds)
    (268/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 2.023657716 seconds)
    (269/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.258880345 seconds)
    (270/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 6.220828827 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 5.027449415 seconds)
    (272/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.225731882 seconds)
    (273/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.658056626 seconds)
    (274/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 1.917982769 seconds)
    (275/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.341454172 seconds)
    (276/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.351017358 seconds)
    (277/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.331729787 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.04503454 seconds)
    (279/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.158549998 seconds)
    (280/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 1.901027379 seconds)
    (281/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.26145497 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.413993032 seconds)
    (283/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 1.44769626 seconds)
    (284/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 2.037505612 seconds)
    (285/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.310444181 seconds)
    (286/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 1.898850296 seconds)
    (287/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.145936659 seconds)
    (288/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.388042232 seconds)
    (289/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.289537538 seconds)
    (290/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 1.973425104 seconds)
    (291/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.366890729 seconds)
    (292/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.404126001 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.38205361 seconds)
    (294/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.377690316 seconds)
    (295/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.89284585 seconds)
    (296/434) benchmarking ("perf_countequals", "Float64")...
    done (took 1.5429678 seconds)
    (297/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 6.220133134 seconds)
    (298/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 4.101862972 seconds)
    (299/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.219150703 seconds)
    (300/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.632212089 seconds)
    (301/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.267727382 seconds)
    (302/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.243919048 seconds)
    (303/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.420823713 seconds)
    (304/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 1.907089671 seconds)
    (305/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.355595955 seconds)
    (306/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.420768814 seconds)
    (307/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.073836892 seconds)
    (308/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.313797442 seconds)
    (309/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.222514129 seconds)
    (310/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.40609423 seconds)
    (311/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.607005363 seconds)
    (312/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.815945878 seconds)
    (313/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.256397329 seconds)
    (314/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 1.942362822 seconds)
    (315/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.261885334 seconds)
    (316/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.217914529 seconds)
    (317/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.535077468 seconds)
    (318/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.513193068 seconds)
    (319/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.320187704 seconds)
    (320/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.340830325 seconds)
    (321/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 1.230805961 seconds)
    (322/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 1.901576258 seconds)
    (323/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.332559621 seconds)
    (324/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.59375172 seconds)
    (325/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.367386799 seconds)
    (326/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.225331192 seconds)
    (327/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.222299353 seconds)
    (328/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.686247315 seconds)
    (329/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 2.397713112 seconds)
    (330/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.388405015 seconds)
    (331/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.404326724 seconds)
    (332/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.679050339 seconds)
    (333/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.222631961 seconds)
    (334/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.407405355 seconds)
    (335/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 6.22189403 seconds)
    (336/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.012490975 seconds)
    (337/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 6.221956274 seconds)
    (338/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 4.52610331 seconds)
    (339/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.906022079 seconds)
    (340/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.559800209 seconds)
    (341/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.277753383 seconds)
    (342/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.342560426 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.358776603 seconds)
    (344/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 6.219351913 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 4.974685156 seconds)
    (346/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 1.910243977 seconds)
    (347/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 2.091050858 seconds)
    (348/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.486758883 seconds)
    (349/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.259055539 seconds)
    (350/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.56842261 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.369175993 seconds)
    (352/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 1.907390078 seconds)
    (353/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 6.220415145 seconds)
    (354/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.444883298 seconds)
    (355/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 1.902573369 seconds)
    (356/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.335461309 seconds)
    (357/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.331744112 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.222346259 seconds)
    (359/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.260609624 seconds)
    (360/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.391892198 seconds)
    (361/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.28039752 seconds)
    (362/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.574982216 seconds)
    (363/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.260793478 seconds)
    (364/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.552978352 seconds)
    (365/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.223479804 seconds)
    (366/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 3.275433332 seconds)
    (367/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.245933784 seconds)
    (368/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.31493872 seconds)
    (369/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 1.339921251 seconds)
    (370/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.555563712 seconds)
    (371/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.335225694 seconds)
    (372/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.554711888 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.225638691 seconds)
    (374/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.411871034 seconds)
    (375/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.413733995 seconds)
    (376/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.300557188 seconds)
    (377/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 1.897260506 seconds)
    (378/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 1.240942806 seconds)
    (379/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 2.28577097 seconds)
    (380/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.35227111 seconds)
    (381/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 6.223094044 seconds)
    (382/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 8.677707581 seconds)
    (383/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 8.315313856 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 2.013848978 seconds)
    (385/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.361230075 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 2.093153781 seconds)
    (387/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.123221486 seconds)
    (388/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 1.913371828 seconds)
    (389/434) benchmarking ("sort", "Bool", 0)...
    done (took 1.25248385 seconds)
    (390/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.222168717 seconds)
    (391/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.343639922 seconds)
    (392/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.322657535 seconds)
    (393/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.308904525 seconds)
    (394/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.648061721 seconds)
    (395/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 6.224284961 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 4.826935121 seconds)
    (397/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.585831762 seconds)
    (398/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 2.337700979 seconds)
    (399/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 2.045697284 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 1.426781745 seconds)
    (401/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.220002334 seconds)
    (402/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.210965878 seconds)
    (403/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.220254881 seconds)
    (404/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.460796804 seconds)
    (405/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.246396012 seconds)
    (406/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 6.219652749 seconds)
    (407/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.417600456 seconds)
    (408/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.312949047 seconds)
    (409/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 1.485982869 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 1.240422468 seconds)
    (411/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.294759342 seconds)
    (412/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.220259728 seconds)
    (413/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 4.591539277 seconds)
    (414/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 1.256641313 seconds)
    (415/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.344213925 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.567854241 seconds)
    (417/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.066729613 seconds)
    (418/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.962136489 seconds)
    (419/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.227763273 seconds)
    (420/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.261704137 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 1.338915669 seconds)
    (422/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.343506196 seconds)
    (423/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.490743362 seconds)
    (424/434) benchmarking ("sort", "Float64", 0)...
    done (took 3.64699357 seconds)
    (425/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.328981424 seconds)
    (426/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 1.902989466 seconds)
    (427/434) benchmarking ("sort", "Int8", 0)...
    done (took 1.319505843 seconds)
    (428/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.123797325 seconds)
    (429/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.379929832 seconds)
    (430/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.277479135 seconds)
    (431/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.445179624 seconds)
    (432/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.225779684 seconds)
    (433/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.605491055 seconds)
    (434/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 1.343428356 seconds)
  done (took 1103.816926675 seconds)
done (took 1105.125564381 seconds)
(16/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 1.247753808 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 1.237612372 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 1.289305093 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.243731684 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 1.237204291 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 1.25459025 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 1.276428549 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 1.276826676 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.259763374 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 1.252599613 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 1.300192394 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 1.25075235 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.253515144 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 1.342869855 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 1.240386029 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 1.253275786 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.241538125 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 1.252566879 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 1.284273928 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 1.258089729 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 1.256779822 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 1.24921345 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 1.274176199 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 1.255010738 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.244097412 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 1.247343836 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 1.261304646 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 1.264167083 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 1.309132379 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 1.259308559 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 1.247584916 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 1.238282675 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 1.259663756 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.266972202 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 1.274587538 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 1.302939584 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 1.269764558 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 1.235954614 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 1.251357551 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 1.271235085 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 1.309503013 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.250590237 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 1.237206445 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.269663101 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 1.260782084 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.241884127 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 1.287819553 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.243658566 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 1.254629881 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 1.241783503 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 1.239896114 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 1.295221718 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 1.239259911 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 1.357710632 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 1.251112675 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.240184481 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 1.271890015 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 1.251341121 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 1.249540855 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 1.252292872 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 1.247821061 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 1.297235653 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 1.277219286 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 1.248098479 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.237066028 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 1.281915401 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 1.260253568 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 1.267506004 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 1.27690054 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 1.264884886 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 1.253281724 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.24334653 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 1.31774652 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 1.251785434 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.241804199 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 1.249441517 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 1.283210481 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 1.251639561 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 1.370891912 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 1.261395641 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.243608739 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 1.24354299 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 1.262022618 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 1.336440025 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 1.249646572 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.249944908 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 1.241491046 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 1.251979117 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 1.261252519 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 1.23644147 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.244850616 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 1.257908455 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 1.278574871 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.238913061 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.238728636 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 1.248067738 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 1.263737376 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 1.357989396 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 1.279800523 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 1.343914569 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 1.258088845 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.251192428 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.252953599 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 1.261562781 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 1.262937338 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 1.27898416 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 1.278037625 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 1.238409629 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 1.248502577 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 1.255862841 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 1.234374738 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 1.284942485 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 1.26553697 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 1.254551814 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 1.257219733 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 1.303628605 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 1.283604938 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 1.242561528 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 1.255413066 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 1.266328346 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.247356102 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 1.283497231 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.24366533 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 1.277736 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 1.251043517 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 1.251091977 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.240026129 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 1.235438337 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 1.400254352 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 1.289107009 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 1.273935154 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 1.305139585 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.253721796 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 1.258661872 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.2778315 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 1.247734822 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.250551246 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 1.36076116 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 1.304680889 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.240884765 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 1.259163101 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 1.25775115 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.260308881 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 1.248538597 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 1.239968202 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 1.25567961 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.240689956 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.238344962 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 1.246741717 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 1.278321859 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 1.355223522 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.236565868 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 1.256668077 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 1.249648149 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 1.24849257 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 1.25443595 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.25667771 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.242582431 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 1.245805312 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.248102033 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 1.292995484 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 1.276523109 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 1.260946043 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 1.258789836 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 1.257890746 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 1.263757421 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 1.272267247 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 1.248466245 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.238066718 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 1.382420545 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 1.292710163 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 1.267876764 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 1.248286008 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.239819617 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 1.263410364 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.242470195 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 1.236746125 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 1.269457249 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 1.400825227 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.255604487 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 1.243874677 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 1.251495512 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.238804795 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 1.252841922 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 1.258662076 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 1.255845184 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 1.316017737 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 1.249405878 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 1.254782208 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 1.304306613 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 1.261915715 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 1.243043965 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 1.254276957 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 1.277432594 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.359497844 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 1.257101 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.245772314 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 1.245926497 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 1.265687174 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 1.250565935 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 1.248882106 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 1.261765404 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 1.340076769 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 1.256522153 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 1.24359504 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 1.294678144 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 1.260989899 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.243193403 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 1.383808182 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 1.239767708 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 1.343208944 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 1.256122171 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 1.251097786 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 1.253555478 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 1.27735676 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.240281569 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.244646987 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.255566628 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 1.396295438 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 1.26349717 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 1.247596475 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 1.263343877 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 1.268924722 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 1.251800424 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 1.250848221 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.246157745 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 1.24523923 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.242235548 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 1.277101969 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 1.252369255 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 1.275632808 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 1.361088376 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 1.265255872 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 1.267850979 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.247681223 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 1.265160638 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.272137883 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 1.280058889 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 1.245533382 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 1.256458188 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 1.281035788 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.279865458 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 1.236432253 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.238377965 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 1.265572953 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 1.275909774 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 1.268988026 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.244613561 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 1.256563785 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.23970788 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 1.255949813 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 1.317615378 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 1.246245362 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 1.251855882 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.358965429 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 1.245270471 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 1.258442928 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 1.274958691 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 1.288311691 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 1.248067613 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 1.256113927 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.240019612 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 1.259269408 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 1.258633362 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 1.256135842 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 1.24161328 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 1.27520795 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.240555136 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 1.262605621 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.256384052 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 1.26948835 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.241716165 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 1.249638502 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 1.25652165 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 1.25682959 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 1.247904292 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 1.245146193 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.238398088 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 1.253641427 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 1.233519616 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 1.238687971 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 1.256675643 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 1.26431569 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 1.254552777 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 1.270623829 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 1.254601613 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 1.383117295 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 1.257237277 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.239571044 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 1.384813553 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.247510305 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 1.353466872 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 1.25030996 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.248523989 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 1.264573142 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 1.257667756 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.262024723 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 1.276211351 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 1.256506622 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 1.293050496 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 1.381040269 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.25289027 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 1.238449298 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 1.256269663 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 1.284630391 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.250616243 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 1.244237797 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.253987328 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 1.282408751 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 1.347131799 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 1.256991736 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 1.304508321 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 1.259506289 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 1.244717409 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 1.40422455 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.255789762 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 1.260160119 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 1.263948244 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.247693753 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 1.293282576 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 1.251783102 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 1.258662491 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 1.248815322 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 1.401138257 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 1.306424956 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 1.276198292 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 1.260472078 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 1.277541318 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 1.250520235 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.2415993 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 1.288675891 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.273846418 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.255514862 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.241375761 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 1.277374882 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.259257403 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 1.244910585 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.251417488 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 1.376806217 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 1.258179015 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 1.252114942 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 1.256999343 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.241055777 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 1.237863128 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 1.242463671 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 1.300460389 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.249353141 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 1.251690379 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 1.254045117 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 1.256951269 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 1.251515913 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 1.257819562 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 1.283876512 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 1.264692751 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.244833868 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 1.417801841 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 1.26720267 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.25055331 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 1.266425935 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 1.234391827 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.247845919 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.24119452 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 1.289031514 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 1.278090047 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 1.258448976 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 1.254958728 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 1.254340106 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 1.254385084 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 1.251466079 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 1.236228011 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 1.250520298 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 1.309133863 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.24124926 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.247205967 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 1.26126233 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 1.260929756 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 1.262808547 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 1.250625263 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 1.23693227 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.256365501 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.255351501 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.243638044 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 1.298541993 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 1.248696904 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 1.260053623 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 1.400383775 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 1.26395451 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 1.2502357 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.249096692 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.24632096 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 1.247980323 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 1.257855699 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 1.278600618 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.24032075 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.251811243 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 1.245630045 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 1.255980802 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 1.266250895 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 1.25886235 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 1.251110454 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.248026398 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 1.237122232 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.247923159 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.242789394 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 1.279946923 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.249482283 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 1.253628009 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 1.259983207 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 1.245693843 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 1.247334755 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 1.27587256 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.359462572 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 1.258574657 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 1.35958201 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.358990321 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 1.38099146 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 1.264321931 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 1.245304435 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 1.251186055 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 1.291699418 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 1.255167814 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.242948406 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 1.250963407 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.238096587 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 1.259174575 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 1.268484272 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.296600018 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.250433903 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 1.25176558 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.254667239 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 1.240655972 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.269184993 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 1.255676754 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 1.402505444 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 1.276142948 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 1.243609665 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.253251446 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 1.308376489 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 1.287832475 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.272900375 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 1.274827 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 1.244353362 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.275639029 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.255220009 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 1.316789757 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 1.253999603 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 1.236950857 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.25257195 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.252188602 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 1.280177135 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 1.27151031 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.24026463 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 1.248567196 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 1.237008519 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 1.253155418 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 1.272388011 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 1.256141739 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 1.294347897 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 1.25470882 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 1.263854067 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.247778519 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 1.260710579 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 1.252098366 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 1.250456872 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 1.273751636 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.243595915 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.241266984 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 1.260369594 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 1.419162816 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 1.266952729 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.246230024 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.245903517 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 1.267159724 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 1.256742507 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 1.288709424 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 1.269063527 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.243762758 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.25682846 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 1.250577461 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 1.271124515 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 1.26012924 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 1.377876796 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.2403172 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 1.270040568 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.241183654 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 1.258005515 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 1.382819243 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 1.270582293 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.247069763 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.259781138 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.245845892 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 1.26615844 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.259917498 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 1.255035575 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.256182241 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 1.293164875 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 1.289392778 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 1.248594385 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 1.418861528 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 1.258577106 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.245130774 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 1.236413119 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 1.256022361 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 1.252710498 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.255703807 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 1.247864134 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 1.26200612 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 1.251256126 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.258121759 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.240508372 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 1.266931645 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 1.25770106 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 1.250540674 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.241547333 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 1.281835995 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 1.243253961 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.239718235 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 1.419350615 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 1.280895052 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 1.283669135 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 1.255471842 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.246131749 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.252955161 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.24503854 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 1.273725263 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.249552171 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 1.26468058 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 1.244416455 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 1.239815948 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 1.280983665 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 1.265860084 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 1.266324484 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.245267142 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 1.371048153 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.243655297 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 1.259008601 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 1.291094956 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 1.246646221 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.26170553 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 1.253973379 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 1.277921047 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 1.254089255 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 1.289646004 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.255072829 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 1.298840913 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 1.259208127 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 1.236073373 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.250653218 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 1.260161588 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 1.270172638 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.253302308 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.258911725 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.256148575 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 1.258267618 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 1.257197503 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 1.261829333 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 1.266544508 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.241817487 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 1.313814482 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 1.401313784 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.264913319 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 1.249528249 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 1.249374297 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.248499737 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.240766377 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 1.350318327 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 1.282045998 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 1.360943078 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 1.257838005 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 1.253368798 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 1.295325906 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 1.340663203 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 1.261355716 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.243620008 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 1.252961799 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.278087288 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 1.26617682 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 1.253620837 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 1.265882332 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.240027239 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 1.265708434 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 1.264067132 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 1.255600367 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 1.259691413 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 1.257699935 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 1.269518852 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 1.287599367 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 1.340572213 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.255045554 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 1.286786573 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.248115846 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 1.318192178 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 1.258353119 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 1.360395812 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.263507532 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 1.252208698 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 1.357714542 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.261104413 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 1.253075444 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 1.260291899 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 1.239255325 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 1.261829219 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 1.269236338 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 1.249546287 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.241376557 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.246425909 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 1.251832142 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 1.234603131 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 1.252152746 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 1.251400347 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.278538394 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 1.259788388 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 1.235058926 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 1.260876961 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 1.289517315 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 1.26172612 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 1.258699665 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 1.346610458 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 1.257392088 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.242540353 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.263578538 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 1.259714277 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 1.254814396 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 1.238131863 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 1.266246174 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 1.256069778 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 1.25386135 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 1.273075643 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 1.380477121 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 1.244595859 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.253789789 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 1.238327017 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 1.255850849 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.25009195 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 1.27168496 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 1.247467554 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 1.261969463 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 1.263924542 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.240537358 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.257891533 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 1.259430712 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 1.278991156 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 1.260872863 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.25419303 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 1.257493028 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 1.25749407 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.254071259 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 1.248361603 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 1.277888585 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 1.259343381 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 1.258704349 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.249758858 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.244625093 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 1.25547216 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.265637515 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.257417201 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 1.246784632 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 1.253767169 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 1.247135506 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 1.39018934 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 1.251463276 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 1.288822539 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 1.27990225 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 1.248349954 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.241383272 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 1.255755683 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 1.403499527 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 1.27909216 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 1.282075558 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 1.24312246 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 1.248647699 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 1.260505571 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 1.255229353 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.245297736 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 1.269455515 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.256872404 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 1.260139776 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 1.320125911 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 1.277134353 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 1.262276797 seconds)
done (took 862.988465875 seconds)
(17/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.551177287 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 6.223708283 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.490042782 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.437636435 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.566933675 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.537667964 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.305214887 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.625679557 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.288476591 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.680393733 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.440025368 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 6.221675352 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 6.222777477 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.443124582 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.575245698 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.44855181 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.288983687 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.453211683 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.628846773 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.565599047 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 6.223010796 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.440413381 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.420714892 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.596097099 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.221729046 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 6.22367573 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.571809608 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.346958849 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.515192961 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 6.221383113 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 6.222403325 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.460510399 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.571167415 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 6.22217887 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 6.223479632 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 6.222943761 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.53520211 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 6.229873871 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.528519915 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.569380153 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.452776314 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.223432385 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 6.223377854 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 6.224165278 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.342665658 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.482400984 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.302903647 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 6.221367018 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.223138742 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 6.223672185 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.494865916 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 6.222595006 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 6.223386836 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.470835418 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.441775435 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 6.221741249 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.601252699 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.608486857 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.563417314 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.500996062 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.528593418 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.685407294 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.611056955 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.405336821 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 6.222555501 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.480028565 seconds)
  done (took 203.989536037 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.573062149 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.507578663 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.569330382 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.208674835 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.678304185 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.563042712 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.285145549 seconds)
  done (took 13.608187539 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.156866627 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.28124507 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.449719763 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.454828599 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.291436687 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.389200114 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.350759319 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 6.222623159 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.444048351 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.319467357 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.782114216 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.45256747 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 6.222802663 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 6.223114766 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.353607401 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.549768644 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.140350238 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.336578377 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.337447774 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.555587915 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 6.2257105 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 6.224421945 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.405764867 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.27181751 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.331187369 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.319730927 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.287277747 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.138899977 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.284434969 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.268826703 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.292616842 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.655959979 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.284033357 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 6.222594177 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.270250964 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.789451854 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.288973237 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.291490412 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.411853886 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.23039723 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.273872328 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.2839239 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.413201187 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.298498392 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.26811813 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.443382344 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.289143768 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.291429701 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.268909398 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.279876883 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.42583363 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.283313509 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.269568009 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 6.2235836 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.487441296 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 6.223163991 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.34481684 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.281601612 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.279423547 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.343185326 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.284899208 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.556888997 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.44614883 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.275614163 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.44468926 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.858495399 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.279101837 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.270027484 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.277324885 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.473004368 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.285923258 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.445909146 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.289983855 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.327482773 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.290210439 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.393125043 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.443719223 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.987399306 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.963995799 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 6.223627706 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.463653693 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.277979578 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.418478422 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.096982504 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 6.222480731 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.276296243 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.290891312 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.774426381 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.124128935 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.28231156 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.533089158 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.274938081 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.343991919 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.324189012 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.267136463 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.336967636 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.417142987 seconds)
  done (took 195.956847059 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.262221017 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.04475316 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.556157754 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 1.794733328 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 1.811548161 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.28959598 seconds)
  done (took 13.983239814 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.626268047 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.975637962 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.311732681 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.303184855 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.331432144 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.256682221 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.259100869 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.371955621 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.242188189 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.299086848 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.265282196 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.277494692 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.259468333 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.388486093 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.260857917 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.285420663 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.259988152 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.304561215 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.285270642 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.335189693 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.268099359 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.329596157 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.33577161 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.834248416 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.149353424 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.293450541 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.074683306 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.289990781 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.283449156 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.402129169 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.417864813 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.257445566 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.836442941 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.134692068 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.918304735 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.850066041 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.252630782 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.288323433 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.290045248 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.25676016 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.275606497 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.336389448 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.29907166 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.274906461 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.497773283 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.616658013 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.170183596 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.517734672 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.265807579 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.275775748 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.278843216 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.314045837 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.261586178 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.278444072 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.822417525 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.692902693 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.082726364 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.270962257 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.33459317 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.835109944 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.193832036 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.274443643 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.573584475 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.06212604 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 6.222233093 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.284356458 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.853749855 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.239202371 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.34673348 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.300470377 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.278254252 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.301728734 seconds)
  done (took 124.549737881 seconds)
done (took 553.310194075 seconds)
(18/23) benchmarking "inference"...
  (1/8) benchmarking "abstract interpretation"...
    (1/6) benchmarking "rand(Float64)"...
    done (took 32.114123772 seconds)
    (2/6) benchmarking "sin(42)"...
    done (took 32.035732061 seconds)
    (3/6) benchmarking "construct_ssa!"...
    done (took 32.001367422 seconds)
    (4/6) benchmarking "abstract_call_gf_by_type"...
    done (took 32.105743275 seconds)
    (5/6) benchmarking "println(::QuoteNode)"...
    done (took 31.342271853 seconds)
    (6/6) benchmarking "domsort_ssa!"...
    done (took 31.418517204 seconds)
  done (took 192.24136147 seconds)
  (2/8) benchmarking "rand(Float64)"...
  done (took 31.397351608 seconds)
  (3/8) benchmarking "sin(42)"...
  done (took 31.561073291 seconds)
  (4/8) benchmarking "construct_ssa!"...
  done (took 31.310972815 seconds)
  (5/8) benchmarking "abstract_call_gf_by_type"...
  done (took 31.82347291 seconds)
  (6/8) benchmarking "optimization"...
    (1/6) benchmarking "rand(Float64)"...
    done (took 31.257969895 seconds)
    (2/6) benchmarking "sin(42)"...
    done (took 31.388006015 seconds)
    (3/6) benchmarking "construct_ssa!"...
    done (took 31.743330092 seconds)
    (4/6) benchmarking "abstract_call_gf_by_type"...
    done (took 32.434810797 seconds)
    (5/6) benchmarking "println(::QuoteNode)"...
    done (took 31.413434481 seconds)
    (6/6) benchmarking "domsort_ssa!"...
    done (took 32.105168671 seconds)
  done (took 191.655498723 seconds)
  (7/8) benchmarking "println(::QuoteNode)"...
  done (took 32.593533106 seconds)
  (8/8) benchmarking "domsort_ssa!"...
  done (took 31.256214071 seconds)
done (took 575.062859069 seconds)
(19/23) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.292098628 seconds)
  done (took 7.514235675 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.267924708 seconds)
  done (took 7.592528058 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.225952498 seconds)
  done (took 7.461031227 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.243764401 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.254068435 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.243588669 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.244306177 seconds)
  done (took 26.237958922 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.534224533 seconds)
  done (took 7.757716467 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.222488505 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.240154831 seconds)
  done (took 13.732458613 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.342244525 seconds)
  done (took 7.582498994 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.371525756 seconds)
  done (took 7.614896859 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.226624609 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.226262499 seconds)
  done (took 13.705121713 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.223516337 seconds)
  done (took 7.446224062 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.968386928 seconds)
  done (took 9.287510849 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.224853906 seconds)
  done (took 7.547961013 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.269241932 seconds)
  done (took 7.492733057 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.521033421 seconds)
  done (took 7.744347699 seconds)
done (took 139.947487679 seconds)
(20/23) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.223433357 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.225844548 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.224349095 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.223866444 seconds)
  done (took 26.119676807 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.519737989 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.518836592 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.491506382 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.493111483 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.466275805 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.46755337 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.5198899 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.518947596 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.466399871 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.491883274 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.520527741 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.492302115 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.495212168 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.491287349 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.491321858 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.49249982 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.493055362 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.519852285 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.466320229 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.492508779 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.492828567 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.493363603 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.891141713 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.891715514 seconds)
  done (took 37.902689371 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.422971902 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.573645635 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.392409343 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.598671301 seconds)
  done (took 7.211340154 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.271105655 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.495905553 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.543890766 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.553522396 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.4580007 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.325972864 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.544021086 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.352803399 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.351585609 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.352764669 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.808392754 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.363793901 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.388615714 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.595884066 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.324737008 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.262578763 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.258691695 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.343532733 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.491704838 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.395579941 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.453780792 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.546102776 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.457107271 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.545656305 seconds)
  done (took 35.709062232 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.059534056 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 1.830957785 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.127963922 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.198152379 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.447810384 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.409000829 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.083008103 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.086899503 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.427957644 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.108207993 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.974564052 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.079851206 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.215000951 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.157021541 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.057406582 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.31895789 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.359659087 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.113023896 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.110645785 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.108786899 seconds)
  done (took 41.497827171 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.225688385 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 1.583835456 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.513001284 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.507230198 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.223780926 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 5.464562483 seconds)
  done (took 23.742082773 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.22526845 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.342339555 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.415224578 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.417979156 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.346733536 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.330321227 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.581921406 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.394013686 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.755462483 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.614376955 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.212506025 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.522236459 seconds)
  done (took 21.385321758 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.22928947 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.24260261 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.222725467 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.35331847 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.893185003 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.008538073 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.098934965 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.22379628 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.103202987 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.392075571 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.022415803 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.348694946 seconds)
  done (took 40.374433557 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.458060948 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.468983163 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.489095179 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.849487183 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.552613984 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.201566353 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.205404332 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 3.815788628 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.00562843 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.173954239 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.687677034 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.200330049 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.226587419 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.168161599 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.504539951 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.485524477 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.038015046 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.044236449 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.488869575 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.254635063 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.144607225 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.288894075 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.229029721 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.603456339 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.539808833 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.228747789 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.456933358 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.390798704 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.223734644 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.480257488 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.334581899 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.600995748 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.445244326 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.492017836 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.570921714 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.261362834 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.240630969 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 4.576341881 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.597459994 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.516703483 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.326619787 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.339513554 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.338346685 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.200706529 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.509654969 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.942930934 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.224904349 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.265994993 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.192296269 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.107313408 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.430538763 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.880291355 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.510094866 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.714659484 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.356261071 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.486373879 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.021153978 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.362499273 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.420625896 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.027585634 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.287831881 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.233152583 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.455886328 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.168521697 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.170997262 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.396279957 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.929289954 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.060350556 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.932188017 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.485024232 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.561603913 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.0943732 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.9340705 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.273667765 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.638224449 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.983866945 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.513156877 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.225010043 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.403675052 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.2498023 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.174012198 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.333837518 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.801330878 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.155603162 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.355635202 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.026105745 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.224007638 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.170594554 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.234339076 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.038811915 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.53452377 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.272981356 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.287917467 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.431157142 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.362882633 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.196240773 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.796341075 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.497878215 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.168921722 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.814469631 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.347524976 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.197685188 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.345439491 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.75439036 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.550340763 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.170717158 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.648633921 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.264495315 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.488922696 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.800945675 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.01539878 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.448396645 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.554746022 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.533396952 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.223316378 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.122511431 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.420506815 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.062196776 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.09404063 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.223538591 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.168659603 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.581802141 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.447535005 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.349298185 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.449259361 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.223778084 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.009528428 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.226276653 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.616684575 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.22393401 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.389721777 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.574978504 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.223452876 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.365733923 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.188551456 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.001214556 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.572923175 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 5.159339287 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.554103282 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.488168183 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.162303067 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.866092781 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.133673903 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.063452371 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.521384319 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.446362263 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.534653983 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.870643221 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.377047154 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.23561532 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.804128871 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.372733403 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.229460974 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.722666667 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 5.11938126 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.827637606 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.686007047 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.44239114 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.224148162 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.396210162 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.32820261 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.474729494 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.426449931 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.368828805 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.033122509 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.478449661 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.469327104 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.225195888 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.168512373 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.481116646 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.472777589 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.575127015 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.356145054 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.416658651 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.671067607 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.546702192 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.457195284 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.558490988 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.943426995 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.752465667 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.450326488 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 4.594620722 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 3.199391884 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.819616215 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.026875557 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.585948726 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.423004038 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.699796971 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 4.573165537 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.579377753 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.256470518 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.336862535 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.169748307 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.99859766 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.568726055 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 3.187698821 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.581396897 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.278602853 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.472955619 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.580350454 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.267780866 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.354741235 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.020345854 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.720762517 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.567025671 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.519552225 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.195005478 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.564345612 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.228898082 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.906131699 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.244737632 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.153266346 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.094941235 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.333519701 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.224880408 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.54293836 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.169124132 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.781809698 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.598237623 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.591512882 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.944955351 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.007656977 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.499504279 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.230958822 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.159891508 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.56177556 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.020309408 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.209312182 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.618018277 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.442189397 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.535026935 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.225373318 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.228997558 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.934474398 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.099633012 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.934996648 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.564959214 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.198445532 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.781023092 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.312468438 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.263763205 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.342411594 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.265398923 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.900992309 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.91195333 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.992161108 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.445478317 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.768745217 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.116455095 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 4.84576007 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.486103726 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.22540621 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.522030359 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.260161839 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.339378776 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 1.782677482 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.263119838 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.216397282 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.49578017 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.753996848 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.024756035 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.958564425 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.347670606 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.474799218 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.445415289 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.547737617 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.556049488 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.317610025 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.169523007 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.012348631 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.26867159 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.487613062 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.226032191 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.517682674 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.502866495 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.418497501 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.811844853 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.577558525 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.166511876 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.414982369 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.524221579 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.370633128 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.496189274 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 1.754119998 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.700616743 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.197359557 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.35560059 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.169376109 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.012368752 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.668681045 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.509546709 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.526912373 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.225529866 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.574480117 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.519241988 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.034618258 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.268788333 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.494880619 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.812389174 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.486957162 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.225575482 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.551758669 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.586093357 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.233659792 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 4.55561312 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.031125535 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.552335761 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.019520651 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.931622617 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.36758308 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.442067606 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.857738276 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.409848925 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.355977707 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.522316554 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.058939498 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.50834094 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.37275765 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.480228954 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.753045762 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.522687026 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.594865449 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.69372557 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.079436755 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.646640127 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.224963227 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.458778807 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.018001053 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.88320196 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.386599389 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.544082617 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.223238027 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.458324327 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.485842504 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.282001371 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.713271304 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.192610475 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.279591509 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.161352193 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.216690744 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.721533908 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.771975396 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.751128157 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.852670041 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.78631792 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.234335822 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.370744354 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.147001408 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.686943414 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.876370085 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.972703254 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.949660538 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.126295776 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.563014347 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.073151272 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.315188719 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.022180052 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.463623482 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.457197458 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.368176282 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.18448925 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.739184927 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.279438525 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.933333944 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.338927571 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.446022771 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.093455412 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.525284659 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.557604606 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.546713324 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.646507312 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.52599258 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.394399205 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.171557881 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.225346053 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.396256293 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.459699278 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.236591555 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.484991975 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.553114945 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 5.330466468 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.475861605 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.461564876 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.195784128 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.517518137 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.607883115 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.444699964 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.591057611 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.449758622 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.812632161 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.65474075 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.457817106 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.534665156 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.550149522 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.018947573 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.951428888 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.487825005 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.01313836 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.170788195 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.450070817 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.23441682 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 5.300580629 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.691471893 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.492404532 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.029534432 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.569473425 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.725211612 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.425057064 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.26691874 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.22517552 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.450910481 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.432413453 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.176021946 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.752364614 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.500726914 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.363348969 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.195655255 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.007298493 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.170741023 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.458372377 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.461317249 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.038380245 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.733064239 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.033512914 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.639769924 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.607943009 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.486640931 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.047536647 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.17158189 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.004864688 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 3.331796423 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.434359385 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.810832244 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.392438389 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.55072084 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.447866829 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.171833259 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.550732679 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.998902006 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.483299004 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.783473083 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.530501734 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.554057422 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.473748974 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.523435409 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.353370066 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.248142086 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.513746153 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.169930307 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.461923422 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.562033713 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.576124351 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.603911898 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.227269519 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.670482661 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.510312608 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.10014802 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.285413607 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.518102613 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.713028993 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.433377072 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.118599038 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.281185279 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.032936014 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.142799246 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.436897481 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.490041522 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.226737588 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.173297592 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.460137861 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.458665306 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.425296098 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.559751176 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.750726484 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.014283784 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.378793467 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.647628456 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.233543717 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.96133758 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.02947071 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.731011994 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.225292965 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.53475083 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.848235663 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.446564063 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.395256019 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.156573442 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.595582382 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.405131479 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.578687321 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.229805128 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.593946014 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.543410622 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.227289104 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.533282966 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.25653018 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.018958948 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.168954529 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.207627198 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.225582478 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.006069851 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.315523972 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.982514897 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.293359822 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.235583947 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.364026112 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.653488756 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 3.172769103 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.23191149 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.857309213 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.247857565 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.233648685 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.557764895 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.056232692 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.281057397 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.230364405 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.294789537 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.233386931 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.458216465 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.750404222 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.391789157 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.936860658 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.446225857 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.236282987 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.757733521 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.777837873 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.605761533 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.370713227 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.685034493 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.521953644 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.689586563 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.51045296 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.260070969 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.47193563 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.000132244 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.631264319 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.513642669 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.268791329 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.45681382 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.515875644 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.5382831 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.284018898 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.578391336 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.071467501 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.723096326 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.198263198 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.247438025 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.160646773 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.525671444 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.016077872 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.225943682 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.100973091 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.455402813 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.013918584 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.849965789 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.375109504 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.090656236 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.085596281 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.136365748 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.791514045 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 3.215723058 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.22494017 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.435675757 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.539532552 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.169387548 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.998491807 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.098156307 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.457868838 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.54698241 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.170730516 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.446584994 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.541002501 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 3.174260123 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.206090122 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.069033995 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.518000237 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.170198745 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.664038317 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.169018829 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.045113176 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.661810469 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.518796453 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.179402209 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.194820124 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.028348631 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.225908631 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.227721845 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.560514109 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.367236243 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.353948379 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.527795161 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.127074658 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.417060778 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.572953663 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.00996433 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.351538595 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.534429673 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.451096627 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.811703829 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.04716948 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.595147711 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.017871376 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.333250199 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.157577327 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.392969635 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.272994273 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.292445981 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.535314224 seconds)
  done (took 1809.105642639 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.26467497 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.299632874 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.292063605 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.283597013 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.251592768 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.256569442 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.265946476 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.237281677 seconds)
  done (took 51.377374219 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 5.672922414 seconds)
    (2/17) benchmarking "4467"...
    done (took 1.69262538 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 4.455261851 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.297172598 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.248141126 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 4.199264494 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.296706687 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 4.374287711 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.311697519 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 3.930148522 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.40101847 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 5.095104407 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.249643819 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.250584742 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 4.491634423 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.417777896 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.2279229 seconds)
  done (took 81.845309458 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.243952445 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.171985481 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.241645699 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.138719662 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.272554471 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.352513893 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.234637344 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.228206419 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.451059604 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 6.532921327 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.228325071 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.270337379 seconds)
  done (took 79.6164483 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.273614571 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.270145706 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.271777418 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.271081639 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.270882097 seconds)
  done (took 7.58378791 seconds)
done (took 2264.709742988 seconds)
(21/23) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.487393834 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.562134811 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.70797285 seconds)
  done (took 4.49549644 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.381879848 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.42987563 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.584992416 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.631177042 seconds)
  done (took 7.271942654 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.488727219 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.596495798 seconds)
  done (took 4.31062166 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.569600992 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.257320886 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.597749521 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.227013015 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.228672587 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.228840643 seconds)
  done (took 19.918178801 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.275618557 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.266696298 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.273329499 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.265863864 seconds)
  done (took 6.308161959 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.226960048 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.033120232 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.228625865 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 6.227616332 seconds)
  done (took 22.942817295 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.463429295 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.440178591 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.004069693 seconds)
  done (took 6.160472292 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.872800689 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.369665415 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.856760664 seconds)
  done (took 6.325159445 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.022254836 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.007825853 seconds)
  done (took 5.255617972 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.388040728 seconds)
  done (took 2.613972215 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.066216052 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.55175979 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.742608116 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.785197355 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 1.889126416 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.463669867 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.556180056 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.462496464 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.651807268 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.677439575 seconds)
  done (took 18.075702414 seconds)
done (took 115.815771818 seconds)
(22/23) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.513671774 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.731708278 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.288793542 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.449969332 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.357411964 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.287899331 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.641830118 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.586432658 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.023425652 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.024720156 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.46495008 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.358969321 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.644016242 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.720783855 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.641746028 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.722075879 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.440780768 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.509081526 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.063597238 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.071594854 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.65250831 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.015743724 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.451843994 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.024016023 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.434762369 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.286349659 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.514785958 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.732186141 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.066338257 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.521760224 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.293895171 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.076296947 seconds)
  done (took 145.840922374 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 5.650804624 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.236493891 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.238390845 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.229249329 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 4.148553709 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.236506176 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.229386935 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.227542702 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.119654003 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.120653847 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.23735346 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 4.148521554 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.23792939 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.227365977 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.239148986 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.227421342 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 4.22456469 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 5.663437248 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.236815426 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.235930294 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.237379739 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.044987947 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.236413463 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.044425498 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 4.2226965 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.239186488 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 5.675717791 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.236459675 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.236987309 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 5.679123727 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.239266702 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.227442649 seconds)
  done (took 181.672874917 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.13035633 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.238922399 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.236780602 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.228642755 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.23793216 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.237203266 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.230412938 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.230493168 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.558056658 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.561873418 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.237455279 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.237954289 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.24237568 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.228106753 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.237106392 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.227983714 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.235769697 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.14510173 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.237350214 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.237221077 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.237383256 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.691728121 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.23722108 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.701726814 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.236741355 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.238740087 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.149909668 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.240336171 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.236163777 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.157335958 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.237702964 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.228532321 seconds)
  done (took 197.988143887 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.473434416 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.273714975 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.21234488 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.888958344 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.237042607 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.26877707 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.88512711 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.476082691 seconds)
  done (took 14.952595362 seconds)
done (took 541.694437997 seconds)
(23/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.455327692 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 1.904182615 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.373353644 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.459454185 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.393749927 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.519083928 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.455968933 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.578938695 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.871081059 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.555951427 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.633452458 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.432778637 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.881700309 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.443422547 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.376824851 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.598464462 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.597838058 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.844129522 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.394039956 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.897247606 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.405072653 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 1.945958859 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.595933799 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.869293006 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.641805068 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 1.949262663 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.226721896 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.600095735 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.431705201 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.405792583 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.135043105 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.506979996 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.371075357 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.366766503 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.630569273 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.607189519 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.418990475 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 1.959952301 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.398230649 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.782347278 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.867141847 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.763435129 seconds)
  done (took 75.773648285 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.274706246 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.311157839 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.390328757 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.344083444 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.826259971 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.338332056 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.454269027 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.438121608 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.340515975 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.426007639 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.465108634 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.850159394 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.464418221 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.806928151 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.448014914 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.463012538 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.339159031 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.80196461 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.465209995 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.435604763 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.303823278 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.387674782 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.304058243 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.420761389 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.299104953 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.317410878 seconds)
  done (took 38.960945451 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.311653783 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.399140942 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.48221034 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.198022928 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.468303411 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.222256811 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.477030152 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.394492539 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.726395383 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.285447522 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.342435795 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.379150665 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.416047602 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.505284128 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 3.768034132 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.399140346 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.43855299 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.393035156 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.400672923 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.17613779 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.54636424 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.34248902 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.480911702 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.042321222 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.84245147 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.403211735 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.341608001 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.700178594 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 3.730845779 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.438380649 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.36308794 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.462423971 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.534618756 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.489525543 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.372474126 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.291791652 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.281406557 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.345632269 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.047012045 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.413244643 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.477498155 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.90222317 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.633107385 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.707086246 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.699654874 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.45778915 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.604253256 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.352745398 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.364480193 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.780669516 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.524106448 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.336496961 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.511492605 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.426017994 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.360151368 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.486803744 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.429225575 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.584443385 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.259033364 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.621517905 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.337992922 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.528624134 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.408910191 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.704026734 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.558006413 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.433911579 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.039369956 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.995354367 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.63259045 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 3.766878003 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.779503687 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.336042711 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.301434171 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.342365948 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.398959098 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.629183187 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.526685011 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.572445351 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.554788981 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.471784376 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.293004711 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.71019599 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.470871612 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.372545599 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.435724752 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.282121846 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.363923286 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.59596297 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.466392898 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.649865821 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.711466903 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.595643321 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.385587493 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.243322797 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.040026295 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.719444316 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.27412353 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.287908031 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.474409696 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.71377945 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.337549515 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.065783074 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.757562287 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.990045493 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.324035276 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.274546991 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.586928547 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.733123468 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.708322278 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.265391939 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.035509444 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.981345842 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.807740584 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.457930889 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.266402756 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.695445247 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.359046359 seconds)
  done (took 234.453864417 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.229537705 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.239226581 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.230511585 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.239920666 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.227953478 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 3.45975489 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.266884819 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.228588399 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.672539983 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.266767013 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.227951582 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.228538286 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.228774235 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.231124633 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.459239636 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.054561515 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.884407166 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.228570467 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.228893722 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.230804851 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.875635725 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.233222926 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.229475191 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.230847859 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.23045375 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.228768766 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.232092839 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.30245412 seconds)
  done (took 156.858971469 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.293302794 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.619304274 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.310578993 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.360136168 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.325837958 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.306376223 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.716003834 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.388504617 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.34712488 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.306252745 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.29873479 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.52985384 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.551630403 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.751844516 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.370173594 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.39488316 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.867841281 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.429318522 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.302410191 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.296745923 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.419618801 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.563501721 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.505886385 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.531890476 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.440754003 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.551394122 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.350153649 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.296596311 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.404941203 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.656196818 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.305582153 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.61204814 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.427510354 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.290968978 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.662262757 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.558425299 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.737445317 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.831992158 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.455529639 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.262141276 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.267940836 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.49096929 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.580086532 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.339819489 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.283908103 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.802688105 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.312315217 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.622213267 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.311515725 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.263581777 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.364503157 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.368481756 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.490126559 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.567828134 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.458776813 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.410753648 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.790003272 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.261358099 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.406429132 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.539245022 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.267438764 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.6586849 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.629932223 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.33844864 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.294934782 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.038318293 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.358815427 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.726376411 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.780848324 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.318202992 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.576067158 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.465459715 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.272772948 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.521093338 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.452408852 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.733113986 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.75026834 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.3972102 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.366584368 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.335152432 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.525153518 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.279399443 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.745369163 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.373819135 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.274212742 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.663183295 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.593589967 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.269084092 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.295809743 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.397918698 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.437831462 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.44062458 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.542241954 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.349175223 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.031092527 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.540025906 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.591866497 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.307563504 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.384124895 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.281923086 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.357992366 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.465007303 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.276024049 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.538295789 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.700852351 seconds)
  done (took 164.741220293 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.799827344 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.312027176 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.468366469 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.799409437 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.570624665 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.354264011 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.420386266 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.328785598 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.50160134 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.405183685 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.449197516 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.350539131 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.189732837 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.002273332 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.308264858 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.453916457 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.337925028 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.761464933 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.675599092 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 2.698059397 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.450084748 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.897010308 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.544428869 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.647163596 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.628499051 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.667264848 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.841674532 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.380735969 seconds)
  done (took 48.476976701 seconds)
done (took 720.492376191 seconds)
SAVING RESULT...
DONE!
