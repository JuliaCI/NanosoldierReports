cset: moving following pidspec: 3414040
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "shootout"... done (took 1.422691904 seconds)
loading group "string"... done (took 0.294774933 seconds)
loading group "linalg"... done (took 4.691418271 seconds)
loading group "parallel"... done (took 0.022150363 seconds)
loading group "find"... done (took 1.388785772 seconds)
loading group "tuple"... done (took 0.892569205 seconds)
loading group "dates"... done (took 0.247145259 seconds)
loading group "micro"... done (took 0.060189715 seconds)
loading group "io"... done (took 1.347646599 seconds)
loading group "frontend"... done (took 0.012493936 seconds)
loading group "scalar"... done (took 4.965588396 seconds)
loading group "sparse"... done (took 5.88094 seconds)
loading group "alloc"... done (took 0.016965773 seconds)
loading group "broadcast"... done (took 0.422544982 seconds)
loading group "union"... done (took 3.911149684 seconds)
loading group "simd"... done (took 3.010731247 seconds)
loading group "random"... done (took 3.822239846 seconds)
loading group "inference"... done (took 1.734643283 seconds)
loading group "problem"... done (took 1.136018981 seconds)
loading group "array"... done (took 4.470486482 seconds)
loading group "misc"... done (took 1.085572354 seconds)
loading group "sort"... done (took 0.383354392 seconds)
loading group "collection"... done (took 6.122262111 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/23) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.416163549 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.125909209 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.087444525 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.061637439 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.131393801 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.080007329 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.087049151 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.052121622 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.471335799 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.054015102 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.104365251 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.393869745 seconds)
done (took 3.893915141 seconds)
(2/23) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.1941388 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.02431297 seconds)
    (2/2) benchmarking "String"...
    done (took 0.02570906 seconds)
  done (took 0.769774822 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.02212449 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.021328897 seconds)
    (3/3) benchmarking "different"...
    done (took 0.021228518 seconds)
  done (took 0.78149482 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020477322 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.150476195 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.02296693 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.02372423 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.023726407 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.02294841 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.023100159 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.022932664 seconds)
  done (took 1.006355409 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.039846569 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.019943661 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020099244 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.020188751 seconds)
  done (took 0.814657525 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.020964011 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.03952621 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.019205721 seconds)
    (4/4) benchmarking "different"...
    done (took 0.019248947 seconds)
  done (took 0.813240908 seconds)
done (took 5.126414219 seconds)
(3/23) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.071277171 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.738763115 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 1.013993662 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.083768753 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.239391908 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.301913575 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.070744946 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.161629063 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.043687631 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.02812148 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.066598337 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.032358789 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.089473344 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.466299058 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.024248002 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.133878381 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.642081002 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.040451999 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.088802619 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.380458047 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.022014685 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.038777902 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.0399716 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.022057276 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.236019152 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.118918481 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.676544498 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.027833606 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.020852162 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.049911304 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.023458783 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.025471159 seconds)
  done (took 8.775561211 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.041990589 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.040689391 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.022324226 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.076960231 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.05290579 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.024087923 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.032928545 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.021680341 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.042269355 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.078490886 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.045223414 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.04075184 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.021306329 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.020506466 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.025322315 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.143612449 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.036764088 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.038012708 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.024093896 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.037979758 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.060651488 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.032158099 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.029910253 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.029203447 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.087919543 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.124572745 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.054589758 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.054590838 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.023716422 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.02864495 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.070086297 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.077994819 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.021844338 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.023403713 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.073418351 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.05189591 seconds)
  done (took 2.464934496 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.169749337 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.276036559 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.033644126 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.267221307 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.056244284 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.067903332 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.048047344 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.08142386 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.12191604 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.022282642 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.10085052 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.780649378 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.057773874 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.38932564 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.033012377 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.170613932 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.271527403 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.030222534 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.022038259 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.020079023 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.021969498 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.020724471 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.057392996 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.022808987 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088313718 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.119136185 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.023758662 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.022962761 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.082156351 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.045424231 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.02245466 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.099438088 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.046016376 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.025420607 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.134350774 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.021417026 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.019765146 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.046729511 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.032277535 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.020656353 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.020037889 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.028453425 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.019739163 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.060775876 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.028217106 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.600551961 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.021661716 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.693004044 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 6.141362352 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.020765388 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.021627396 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.077171908 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.020997077 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.021961279 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.576170673 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.027406306 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.028266956 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.264921261 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.024423771 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.022487099 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.022324652 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.046878133 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022093908 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023718651 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.022389438 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.048266366 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.725446171 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.026138135 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.048401303 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.021158015 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.022414271 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.021883541 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.385566334 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.023980767 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.114477147 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020779687 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.022002388 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021677862 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021162789 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.042185879 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.04276703 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.054372253 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.024993524 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.022025707 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022009227 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.619016262 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.124645192 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.022234922 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.022818046 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.1014318 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.021382565 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021412324 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.02378604 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.042722306 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.021895672 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.020420513 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.051595335 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.023329241 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.021700088 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.187404095 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.023104775 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.020798696 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.603174416 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.025908952 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.055426043 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072821553 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021122896 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.0210446 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.021814764 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.020409619 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.021716379 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.02166756 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.022082325 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.021378883 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.0206278 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020441892 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.022033804 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.021793685 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022004719 seconds)
  done (took 22.685698762 seconds)
done (took 36.813985052 seconds)
(4/23) benchmarking "parallel"...
done (took 0.95965871 seconds)
(5/23) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.117304926 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.050110197 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.020465865 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.09982994 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.020473971 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.098913099 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.110851807 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.101946822 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.020200191 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.020152901 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.020466534 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.111460473 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.103170471 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.020544119 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.096981786 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.106758166 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.020700562 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.020240754 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.020432827 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.020046114 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.020215854 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.019667886 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.020203596 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.020045589 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.098814388 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.020068917 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.019818897 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.0963823 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.020161533 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.095865691 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.02032187 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.019889322 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.019877288 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.098859148 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.01988377 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.098182845 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.019509512 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.019953461 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.019830968 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.019685409 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.019874209 seconds)
  done (took 2.848614153 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.03916327 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039831517 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.059777809 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018526503 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029436196 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039525165 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.01861313 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.039230064 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.062013223 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039707812 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039522231 seconds)
  done (took 1.238749906 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.0350433 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039376104 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.063244754 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.02188368 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029868637 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039268526 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.021854378 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.0392083 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.063693455 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039581655 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039510722 seconds)
  done (took 1.247047799 seconds)
done (took 6.138715283 seconds)
(6/23) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.039292035 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.021331979 seconds)
  done (took 0.872814471 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.365367128 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.12336525 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.028225224 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.082932022 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.022453856 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.038321049 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.323290521 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.037824222 seconds)
  done (took 2.872347399 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.055780812 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.023402533 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023307226 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.020550058 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.021057124 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.020814327 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.021966821 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.021080871 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.020327873 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.02233559 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.022216905 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.020375831 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022720492 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.022059276 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.02051145 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.020649984 seconds)
  done (took 1.242475648 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.033391678 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.02412501 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.02215545 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.020217472 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.023260271 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.021984764 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.023824593 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.023830184 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.02285385 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.023127574 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.021870596 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.025487559 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.023322696 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.022224766 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.025762213 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.020378862 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.023508582 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.022505773 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.023302386 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.023027635 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.022079083 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.02192526 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.026561559 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.023252795 seconds)
  done (took 1.384640588 seconds)
done (took 7.188707645 seconds)
(7/23) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.172815633 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.019811325 seconds)
  done (took 1.010234618 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.034429768 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.032463337 seconds)
  done (took 0.889364155 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.033631941 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.020359258 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.035516388 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.030291753 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.020836725 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.020461507 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.033265133 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.020675701 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.020820727 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.020622051 seconds)
  done (took 1.0805888 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.021988364 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022164735 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.022512961 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.020935868 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.022751966 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.021326045 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.02249942 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.02144618 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.026339012 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.020509136 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.023721927 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.030463221 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019802112 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.03023064 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.022268293 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.02148903 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.025291923 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.020354984 seconds)
  done (took 1.240100455 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.020181772 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.020993711 seconds)
  done (took 0.864727695 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.019618575 seconds)
    (2/7) benchmarking "second"...
    done (took 0.02116143 seconds)
    (3/7) benchmarking "month"...
    done (took 0.019055107 seconds)
    (4/7) benchmarking "year"...
    done (took 0.01894702 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.021058007 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.020189428 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.020789623 seconds)
  done (took 0.964509932 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.410490694 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.094192493 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.284118226 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.02001644 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.020173442 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.226509211 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.019763876 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.019555372 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.019849021 seconds)
  done (took 1.937584138 seconds)
done (took 8.809433443 seconds)
(8/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.04268161 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.210625841 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.038234589 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.376393468 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.041613475 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.023081395 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.074689469 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.119774806 seconds)
done (took 1.758938721 seconds)
(9/23) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.172331685 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 0.965235167 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.15979866 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.020640009 seconds)
  done (took 1.974860339 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.295816512 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.042918538 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.032117725 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.025731698 seconds)
  done (took 1.234849224 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.021132847 seconds)
    (2/2) benchmarking "read"...
    done (took 0.027638678 seconds)
  done (took 0.880884728 seconds)
done (took 5.096469768 seconds)
(10/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.022329163 seconds)
done (took 0.854705619 seconds)
(11/23) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.025856545 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.01879693 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.027502886 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018936727 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.019056099 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.019065425 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.019270105 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.018695319 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.018818735 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.018862176 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.018610097 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018794575 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.01905742 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019138624 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.019479798 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018808424 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.018839453 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.019281525 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019156135 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019002351 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.018752617 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018724624 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.019235243 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.018919532 seconds)
  done (took 1.3003545 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.035074374 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.019111312 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.018820244 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.018814344 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.019098454 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.018891213 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.01875637 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.019130005 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.018640229 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.018591024 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.019071498 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.019083731 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.018878823 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.019086249 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018728145 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.019125823 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.018862801 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019106786 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018985737 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.019080209 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.018792304 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019107539 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.019230393 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.018755225 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.019098251 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019213572 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.018791629 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.019197327 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.018768559 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.018963962 seconds)
  done (took 1.418811137 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.020619316 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015900123 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.019317785 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.021043675 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.015767892 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.019327689 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.019258673 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015530546 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.016066121 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.019887696 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.020006782 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.018770064 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.020192452 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.019645385 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015961212 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.019330947 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019242033 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.02177629 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015965756 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015837719 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.020084314 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.019273442 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015927927 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.019806766 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.020544445 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.019440474 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015473909 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.019044006 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.019269409 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.019135761 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.019318078 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.019642161 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.018966069 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.020639019 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.020626078 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.020418988 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.020662745 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.019738128 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.019388541 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.01558771 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015803545 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015634092 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.019021001 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015607745 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.019688525 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.019228518 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.019214331 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.019312095 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015613769 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.015744334 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015863748 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.019920782 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.019542464 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.019656539 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.015707108 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.019097529 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.01549496 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.019203321 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.019357996 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015530289 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.015727699 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019425361 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.019901232 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.019074918 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.027693449 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.019644453 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.019760439 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015639187 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.01929989 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.020455573 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.020876346 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.02536051 seconds)
  done (took 2.188010443 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.032082155 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.027618621 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.021057235 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.020909633 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.021071096 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.018469928 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.021038989 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018677274 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021218007 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.018545504 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018712441 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020934995 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021040608 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.01884809 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.018849147 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.020895762 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.018695717 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.020904302 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.018804313 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.018602676 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.018472289 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.020977857 seconds)
  done (took 1.293977532 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.062339646 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.018698757 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.07068681 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.018240326 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.018183264 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.018057909 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.018739925 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.018204983 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018767378 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.019043727 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019152865 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01867647 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.018071351 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019162873 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018942545 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.018278444 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018767648 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.018247507 seconds)
  done (took 1.268155718 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.025359397 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.019187893 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.047449217 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.019092397 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.018933556 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.018690189 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.01894827 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.019020393 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.018898624 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.019327418 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.018638688 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018785428 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.018815531 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019267702 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018791982 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.018791484 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.018925864 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018991721 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.018461032 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019089041 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.018907062 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.018562526 seconds)
  done (took 1.290738942 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.029063076 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.018831739 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.03162656 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.019068214 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.018914017 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018534074 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.018549616 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.018928289 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.018059951 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.073568018 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.019184555 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.018466297 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.01800299 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.018870534 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.01892726 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018997824 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.01864053 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.018882749 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018769626 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.018974258 seconds)
  done (took 1.291751564 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.049540743 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.049285284 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.049230141 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.049495631 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.049720825 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.049774991 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.04946451 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.052039912 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.049239329 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.050324918 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.049843592 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.049388431 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.04988483 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.05004001 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.049614621 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.051993992 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.049882179 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.049681407 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.049730712 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.049260346 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.050361922 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.04896353 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.049410773 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.049676317 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.049690993 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.049507297 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.049977275 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.049577469 seconds)
  done (took 2.2345147 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.0355405 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.018584731 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.018940262 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.018781367 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.018938968 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.018850773 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.018928839 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.018853023 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.018640976 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.018799491 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.018776714 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.018430878 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.018838585 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.018641474 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.018677366 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.018461025 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018746799 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.018982283 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.019127975 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.01894528 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.018702261 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018430311 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.018691264 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.020298091 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019143415 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.018532051 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018882054 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.018812123 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.01845919 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.018804454 seconds)
  done (took 1.42161039 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.020144814 seconds)
    (2/2) benchmarking "in"...
    done (took 0.023026218 seconds)
  done (took 0.883042721 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.029011159 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.027878963 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.018559828 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.01887197 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.019040707 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.018612176 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.018503009 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.020298916 seconds)
  done (took 1.010256436 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.022003249 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.036193314 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.020699392 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.021180597 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.020667385 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.091729445 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.02731725 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.029535453 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.029259834 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.021305691 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.020607238 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.022384125 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.020152597 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.029946679 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.022196563 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.026781355 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021772075 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.033844585 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.029032896 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.019233532 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.026069965 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.02106071 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.027563728 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.02123443 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.026873829 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.021905698 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.026905942 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.028612697 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.021814773 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.022184364 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028574949 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.019356285 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.022016955 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022101978 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.020522032 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.020757141 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.039282713 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.020495316 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.0219471 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.019743611 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.024105783 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.032984208 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.022151033 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.027973298 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.021725968 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.021589147 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.019721414 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020711508 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019699367 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.022353179 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.019741597 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021069279 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.019769109 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.020563557 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.023203125 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.020577817 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.021527471 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.023243652 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.025949652 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.02293911 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.021957305 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.026637398 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.021845593 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.034291544 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.020867677 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.032389044 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.020054191 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.029899304 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.029251359 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.021374827 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023103449 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.019304403 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.021551093 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.019748771 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.052229395 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.020481962 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.020267038 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.02054672 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.019452257 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.020894364 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021634077 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021859252 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020779618 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021049456 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.028759049 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.021708681 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.020325398 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.021744794 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.030525977 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.021097324 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.020002062 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.026259423 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.019875908 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.018860549 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.022122926 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.027423311 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.020633662 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.020376133 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019960669 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.024687804 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.020659336 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.019307551 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023607665 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.02042513 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.01908474 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.020951903 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021404479 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.020404298 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.023208832 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.021345071 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.020639733 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.021425271 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.02350995 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.019973742 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.018917278 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.021687923 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.019851625 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.02344613 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.021050202 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.028719039 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.026155238 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.02312887 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.028627908 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.01987718 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.018907057 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.027168807 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.026416833 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.020394161 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.026711829 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.019592228 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.022525766 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.019705722 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.020399675 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.022111516 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.019756912 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020364053 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.01913519 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.020808829 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.020546892 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020624507 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.020800618 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.022073881 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.022620483 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.020451454 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.022090563 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.020490652 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.026399551 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.023347937 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.019916771 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020708782 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.020401897 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.02278493 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.020867643 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.021386281 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.019396126 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.020383724 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.019845015 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.027427217 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.021921482 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.02024767 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.024201328 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.020633629 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.020345529 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.020158702 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.020143587 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.019650322 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.026315044 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.020202223 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021027944 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.021595222 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.022488234 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.030327711 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.022409275 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.019072864 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.019754701 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.019958424 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.019578676 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.019622863 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.021730591 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026033986 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.02730269 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.029220537 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.020159838 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.022440518 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.020212044 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.021693794 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.027836575 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.020006468 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021079297 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.02145849 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020690358 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.021795999 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.022364748 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.022780401 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.028335988 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.020101639 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.020501988 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.019426886 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.026018536 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.020128951 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021414657 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.021506882 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.021101016 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.020154326 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.020220361 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.021776011 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.019885774 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.026921227 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.026733055 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.021229321 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.019427273 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.028908795 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.020801258 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.022610199 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.019870646 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.019456276 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.020672601 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.021157202 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.022778981 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02612353 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.019043734 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.019913189 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025702589 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.020347694 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021358382 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.021824325 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.026563226 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.019751624 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.02114386 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.022790442 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.027396928 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.019768101 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.027113452 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.020413024 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.021518199 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.021340898 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.02550375 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.020242572 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026916696 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.019480316 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.026431363 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.022638586 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.022206516 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.019912855 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.021253702 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.020491894 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.02887932 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.020271152 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.020301898 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.022665233 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.019114525 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.021313542 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.019698416 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.020141451 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.020923666 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.0213121 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020265766 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022096893 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020350491 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.021914101 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.019589199 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.021779958 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.021289557 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.02008089 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.019195505 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.021592053 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.021728496 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.021229736 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.020888203 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.020747718 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.020102239 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.021494365 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.020336843 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.020247352 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.02102403 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.019815244 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021331477 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020852266 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.020334657 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.020252037 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020824303 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021369921 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026111902 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021624747 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.021128298 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.021463909 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.019303403 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.025514552 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.01957956 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.022746052 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.019168457 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022971837 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.021174371 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.020317025 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026873709 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.021338006 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.021045158 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022768795 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021225696 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019492516 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.022204025 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.02095268 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.021416485 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.021058328 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.019734401 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.020783371 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.020291435 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.022053766 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.021685623 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.026387401 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.021042369 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.022547252 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021824171 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020450296 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.037129338 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.020383509 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.022114353 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.021941467 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.019289854 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.019662852 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022913309 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.019787788 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.023685357 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.019781257 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.018781697 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.01995407 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.023772197 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020259179 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.021561625 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.025953221 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.019065537 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.019952122 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.018850836 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019836801 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026185643 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.021187331 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.021469839 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.019381195 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.018960951 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.020256563 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.020854678 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.019743023 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.020723815 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.02207391 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.018793933 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022688356 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.020300115 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.023104291 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019897978 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.020893273 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.022533561 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.020530797 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.019708811 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.020597486 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.019968246 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020483172 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.018989528 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.020145919 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.01962187 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.021463838 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.020078328 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.022687536 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.026597632 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.02065269 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.022425293 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.020478586 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.020959476 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028129669 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021748151 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020386981 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.022820054 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.019392401 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.02761758 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.022703455 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021483938 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.021693299 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.020097066 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.021739874 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.01957174 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.025647725 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025422562 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020834928 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.020831704 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.019397837 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.025736568 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.019698057 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.019072726 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.020534098 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021222586 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.02115276 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.022600197 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.019874532 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.021037652 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022927467 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.022825117 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.019795933 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.02108254 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.021221001 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.021621063 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.019940415 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.020720053 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.021144424 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.021390497 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.019376959 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027251519 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.02082062 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020282097 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.020402528 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.019302179 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.02057556 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.022382304 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020094627 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.01930289 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.019506515 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.019405517 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.020539718 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.021233727 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.021142933 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.021354913 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.019119561 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.018755499 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.026253779 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.019291057 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.02041515 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.020573852 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.022533621 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.02763968 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.021447171 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.021618909 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.020057485 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.021126035 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.027617871 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.019942352 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.019787516 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.019749726 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.020109403 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.021216392 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.021367757 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.020756821 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020598478 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.019250851 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.027976748 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.019886084 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.019670837 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.020381114 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.020162229 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.0222961 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.021038215 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.021501949 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.020321182 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.018944613 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.0210739 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.020693746 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.020806966 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.021129089 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020007751 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.023088677 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.022435016 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.022024863 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.02125806 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.019155675 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020897527 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.021997661 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.019383093 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.019427168 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.019562204 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.019444396 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.02132369 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.021765909 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.019439751 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.019479777 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.021649783 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.020490777 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.021297445 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.020282899 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.019977417 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020316047 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.0210425 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022506607 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.019274496 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.019978136 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.019481722 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.020034998 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.025903149 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.020475244 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025251954 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019835786 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.019171368 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.018998673 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.021522817 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.019728705 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.075767821 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.021425982 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.018571722 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.025174985 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.021736307 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.022393916 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.01894539 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.019948626 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.02050165 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.026169914 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.021031214 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.020899218 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.020406129 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.021288516 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.019957582 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.022333529 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.019127753 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.018680756 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.025131072 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.020967958 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.022957758 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.018984779 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.021633544 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.019664014 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.022635875 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.020274109 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.019633656 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019963802 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.021070639 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.021085215 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.019695818 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.021359698 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.019224431 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.025907136 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.019906008 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.026809151 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.021474434 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.022354046 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.027891517 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.021992562 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.020279109 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.019629418 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.02074607 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.020240479 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.019772499 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.02006 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.019990769 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027049223 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.021079568 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.020017202 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022287782 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.022372828 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.019731892 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.020938542 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.019556644 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.021521169 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.019709198 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.022367953 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.020419887 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.020285988 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.019343648 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.019167087 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.018674625 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.019247307 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.021247144 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.020985457 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.022379154 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.019521397 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026574957 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.019782789 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.021401888 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.021405986 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.020226831 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.019811445 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.018837076 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.019689012 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.025707562 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.02550539 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.022004534 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.022676418 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.020313761 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.021468098 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.018509191 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.021003628 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.020726337 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021050304 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.019371552 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019503815 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.025564194 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.025265077 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.019334923 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.030342959 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.020923818 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.020124045 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.02770077 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.02131344 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019709843 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.02118045 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019116342 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.021434149 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.018254522 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.019831153 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.026498805 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.018708054 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.019277895 seconds)
  done (took 14.026572359 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.058824813 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.018722486 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.018951044 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.018686144 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.018864793 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018599685 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.018597409 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.018750933 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.018803819 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.018521783 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.018722004 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.01862781 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.018724036 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.01861873 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.018726006 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.018803706 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.018791288 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.018823745 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.019051279 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.01878575 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.018659946 seconds)
  done (took 1.315963357 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020864768 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.024368076 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.018430632 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020176285 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.01829226 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.020208061 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018727488 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020166605 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020158237 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.01859964 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019859981 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020018472 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.018453375 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.018556876 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018351181 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.019859738 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.020477031 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.020802814 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.020314265 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018673226 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.020257791 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018698752 seconds)
  done (took 1.301453585 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.020529617 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.020408551 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.021152624 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.018931961 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.01887195 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.01922677 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.018766431 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.019412751 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.019324652 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.020797729 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.022977064 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.020074696 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.018845325 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.020398684 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.018478053 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.019582242 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.047584159 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.019664234 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.019559679 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.018737577 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.02105618 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.02056965 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.018907676 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.019362823 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019460949 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.019532893 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.018867762 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.021278343 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.019922898 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.020085472 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.019602032 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.018566113 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.021073627 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.020709388 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019422998 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.020822146 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.020344369 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.019634706 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.01896779 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.018939539 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.020847344 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.020636352 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.019581771 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.02038337 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.020899587 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.019036547 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.018620693 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.023237633 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.018743519 seconds)
  done (took 1.871008511 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.028568481 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.038653408 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.026238112 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.039676111 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.026105591 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.026132777 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.026296611 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.041441051 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.026341176 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.02668981 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.026342819 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.026644057 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.026307645 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.026345065 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.025936397 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.026552022 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.026190573 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.026512126 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.026452491 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.026761848 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.026507835 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.026028668 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.026124481 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.026601298 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.026037432 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.026338188 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.026379509 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.026169301 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.026334752 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.026492275 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.02619575 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.026147342 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.026160219 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.026468632 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.026487599 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.025962041 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.026313368 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.026404926 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.02635895 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.02624355 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.026009513 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.026236424 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.026044136 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.026223651 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.026692426 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.02631099 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.026502331 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.026375228 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.026295052 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.025963846 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.02610933 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.026476588 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.026068904 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.026406032 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.026158662 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.02647734 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.026697002 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.026290288 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.026072077 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.026195457 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.026657728 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.026432354 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.026756718 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.026128701 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.026125124 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.026898676 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.026372132 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.026183829 seconds)
  done (took 2.804255374 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062699903 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.019262437 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.019068697 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.019346874 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.018999374 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.019302389 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.019265782 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.019365954 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.019100447 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.019042534 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.019232264 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.033594035 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.01911318 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.019364051 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.019193172 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.019218004 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.019103534 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.0193705 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.018977871 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.019327396 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.019119472 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.019203819 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.019065547 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.019096391 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.019080347 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.019063085 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.019407009 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.019291884 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.01917652 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.019092239 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.0190543 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.019070119 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.01899093 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.019075616 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.018970137 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.0192735 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.01916164 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.019362704 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.019021879 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.019026456 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.019479225 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.019220805 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.019249983 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.019214425 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.019167461 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.019209537 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.019116994 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.019163754 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.019325881 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.019391141 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.019134528 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.019105744 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.019208018 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.019162361 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.019480371 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.01939668 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.019335896 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.019308049 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.019384263 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.019144511 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.019248234 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.019258442 seconds)
  done (took 2.119895385 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.050731767 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.018176091 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.033812861 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.01859182 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.018107927 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.018490069 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.018247629 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.017952588 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.018131112 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.018060012 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018052 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018340205 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018565593 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018208655 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.018508937 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018555904 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018293789 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.018315311 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018350537 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.018327397 seconds)
  done (took 1.282656835 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.024996705 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.02412407 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.020442854 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.02056469 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.020333052 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.020612814 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.020235912 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020232156 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020844706 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020246856 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020139356 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020236103 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020869016 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020369405 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.020605992 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.020629638 seconds)
  done (took 1.20431781 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019019336 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.018438108 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.022900744 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.022094238 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.018459139 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.020090049 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.018270312 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.023132672 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.018928205 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.029940151 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.023026439 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.018067822 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.018225308 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.021924557 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.020189754 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.018307747 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.018660176 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.022959839 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.018348223 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.022870949 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.018749222 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.019908551 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.018308386 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.020762296 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.018434018 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.018628576 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.02327288 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.018795602 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.020755894 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.018229338 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.01862359 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.022965481 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.018608898 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.023221059 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.022118232 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.020655881 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.018129748 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.018672622 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.018109786 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.018281821 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.023118958 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.018582817 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.018209309 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.020163526 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.018465281 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.018529541 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.018918247 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.023201691 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.020546248 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.018760578 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.018305086 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.021890604 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.023023298 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.022858509 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.022721215 seconds)
  done (took 1.985585001 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.032030133 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.018088652 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.018423528 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018127697 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.018424313 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.018579299 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.018216301 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.017943038 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018742272 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.018211904 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.018559993 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.017912488 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018521673 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.01840906 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.018586871 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018171185 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.018574821 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.018476694 seconds)
  done (took 1.214192607 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.025453311 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018883392 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.021733473 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.018600732 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.018521196 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020398308 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018509647 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.02045478 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020266222 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.018408064 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018272501 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.020143031 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020256699 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.020408272 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.018394184 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018434022 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.020127446 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.020384444 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.018396868 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018508909 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020477379 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.020298644 seconds)
  done (took 1.306410218 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.085679168 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.040325058 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.045573335 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.034565288 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.036325614 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.050978667 seconds)
  done (took 1.163456198 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06271149 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030283678 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.018603572 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018206673 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018200173 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018680106 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018610173 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018692077 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018412195 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018587698 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018862132 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018468208 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018129991 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.01844367 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018446005 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018216549 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018685428 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018705237 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018801896 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018287429 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018722753 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018088838 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018514505 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018403301 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018698213 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018657027 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018434548 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018464122 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018678157 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018243379 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018331562 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018469769 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018505183 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018656849 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018345902 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018239263 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018382416 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018412602 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018356617 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018746009 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.018118141 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018194292 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018280492 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018600024 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018126832 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.01870864 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.01850034 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018528339 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018626138 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018005728 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018244083 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018659018 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018548231 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.01826097 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018159138 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.01826515 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018632363 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018440374 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018220148 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.01875259 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018456307 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018134612 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018429171 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018508112 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018353869 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018516973 seconds)
  done (took 2.153875544 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.060947929 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.018800656 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018454625 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018501086 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018535552 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018473621 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018639432 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018468651 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018725139 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018613739 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.033234576 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018530635 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018614385 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018353232 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018603235 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018519649 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018421508 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018372945 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018568862 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018253137 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018463527 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018448967 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018354365 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018541275 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018650815 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.01805679 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018439284 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018857101 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018514661 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018471365 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018427398 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018406658 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018742758 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.01838914 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018665548 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018436133 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018559346 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018279202 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018602235 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018281663 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018475856 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018481399 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.01847938 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018540983 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018508151 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.01848918 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018620879 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018519573 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018647434 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018493241 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018780813 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018592096 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018577934 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018701489 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.01854036 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018588752 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018674629 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018572478 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018697706 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018451566 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018590867 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018372729 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018161825 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018655822 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018679018 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018697959 seconds)
  done (took 2.157650848 seconds)
done (took 52.343067479 seconds)
(12/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.120485721 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.142259024 seconds)
  done (took 1.13646236 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.021311391 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.021044106 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.071792278 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.02082578 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.060322038 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.123002681 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.11096958 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.021237098 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.020981054 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.021667736 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.020954315 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.021281024 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.021386413 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.021068813 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.063530779 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.02123512 seconds)
  done (took 1.541158306 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.088773719 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.119081686 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.039003853 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.021188721 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.085565142 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.021556057 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.021823772 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.021554831 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.021596561 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.02101665 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.08547468 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.110945088 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.02120793 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.021311174 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.021930487 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.021412522 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.021299815 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.021122855 seconds)
  done (took 1.663210863 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.049732902 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.02175109 seconds)
  done (took 0.953699049 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.235605766 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.054164977 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.104107945 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.30879438 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.062931264 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.478789243 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.060722543 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.063524592 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.057567553 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.057423508 seconds)
  done (took 2.367996952 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.053555777 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.04723468 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.271895333 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.046494021 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.028696877 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.024340805 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.030337846 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.022062334 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.032098131 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.027313274 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.072850227 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.025511488 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.022535566 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.07405834 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.022112944 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.056412208 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.022008996 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.02224233 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.02997692 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.021539764 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.021263058 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.021861426 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.117253409 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.022047004 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.023215878 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.021614263 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.021333867 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.024894516 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.024873285 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.021409387 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.021244354 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.021327828 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.021601596 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.031513053 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.02128663 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.020793375 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.021134569 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.02168316 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.021339304 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.02194979 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.021241891 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.021089776 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.021709553 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.021277837 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.027690922 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.024064161 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.021832914 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.021619554 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.027832577 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.021404824 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.022412997 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.021073119 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.021018196 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.021268857 seconds)
  done (took 2.720363901 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.947539087 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 1.456262493 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.022863243 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.027419918 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023816012 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022493098 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 1.042522833 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.022819428 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.023582548 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022791527 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022599921 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.021311169 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.022389864 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.024328066 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.028565655 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.022852331 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023025642 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.022062658 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.023610152 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.022461177 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.021177076 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022711151 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022518221 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.024085852 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.021136598 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.021984221 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.021188814 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.021061214 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.020291295 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.022059324 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.021004441 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.021673751 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.025409791 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.021128328 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.020813842 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.020944827 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.021099872 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.021815541 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.022221794 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.021554175 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.020418941 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02066501 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.020767123 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.020982702 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.021873664 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.02054401 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.020480057 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.021182131 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.020177506 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.021017242 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.020930952 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.020897088 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.020484298 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.020821735 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.021008614 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.021342691 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.021021618 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.020840239 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.020591218 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.021859335 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.021995747 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.022616009 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.021916367 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.022035878 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.02087175 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.021062967 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.021911481 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.025613293 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.020865245 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.020844966 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.020648672 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.020770753 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.021055033 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.020527726 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.02073973 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.02068912 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.020494745 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.020723247 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.021771499 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.020960571 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.020402837 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.01999947 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.02051203 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.0207047 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.020471166 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02044686 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.019821293 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.021485968 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.020707501 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.020861434 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.020595939 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.020495486 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.020328049 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.020367352 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.020688897 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.021337111 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.020368001 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.020697295 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.020549682 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.020642878 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.020628482 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.020161388 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.020386424 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.020885517 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.020566396 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.020295333 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.020103629 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.022153011 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.020652149 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.020634786 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.020751848 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.023852352 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.020623298 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.020042177 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.021985586 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.020667827 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.020810967 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.024080196 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.020787553 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.02083309 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.020674698 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.020468923 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.020798985 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.020304401 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.020500623 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.020413533 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.020425522 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.020369287 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.020628035 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.020876958 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.020318345 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.020732226 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.020461785 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.023247076 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.020950642 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.02079594 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.020580128 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.020437601 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.020428032 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.020711232 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.020765696 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.020610715 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.020385018 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.020267762 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.021424826 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.020732951 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.020753122 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.020388166 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.022139168 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.020738254 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.022796762 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.020389512 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.020592838 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.021327295 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.022442808 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.020440853 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.023045215 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.020634939 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.020664316 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.020404791 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.02031806 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.019814365 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.020426192 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.02040063 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.020271257 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.020041564 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.020370348 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.020691109 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.020726695 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.020284652 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.020450483 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.020558172 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.020572582 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.023475932 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.021376363 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.020252714 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.020339502 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.020617594 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.020595149 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.020364478 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.020612201 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.020480939 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.02487583 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.020892698 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.023603449 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.020229587 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.019794031 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.020513266 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.020918189 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.021529904 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.022439099 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.023724677 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.020536312 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.020287953 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.019901683 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.020444446 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.02040865 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.020009308 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.020250041 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.020272384 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.023934374 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.020663163 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.020858979 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.020505836 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.020666031 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.020253113 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.020269128 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.024740034 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.02069684 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.020457537 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.019984323 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.02069626 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.020347637 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.022924906 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.020554382 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.02054731 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.020323266 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.020617658 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.020364063 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.020304214 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.02011004 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.020239259 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.020149326 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.019986785 seconds)
  done (took 9.0256969 seconds)
done (took 20.286435124 seconds)
(13/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 0.082587936 seconds)
  (2/4) benchmarking "arrays"...
  done (took 0.055388442 seconds)
  (3/4) benchmarking "structs"...
  done (took 0.053631797 seconds)
  (4/4) benchmarking "grow_array"...
  done (took 0.027888008 seconds)
done (took 1.124252112 seconds)
(14/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.102317538 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.060087151 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.263474425 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.073181778 seconds)
  done (took 1.385401272 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.04833375 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019388501 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.041065732 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.048215209 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.019070949 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.032153389 seconds)
  done (took 1.103236253 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.470908684 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.140338347 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.190791892 seconds)
  done (took 1.697343912 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.138263154 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.1841281 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.321925287 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.174985786 seconds)
  done (took 1.721302302 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.038538188 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.03267521 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.024230771 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.036206199 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.026282902 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.020716033 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.110988212 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.021096305 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.030103036 seconds)
  done (took 1.2854138 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.056134353 seconds)
done (took 8.144983152 seconds)
(15/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.159502972 seconds)
    (2/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.029306429 seconds)
    (3/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.028395532 seconds)
    (4/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.026158557 seconds)
    (5/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.122479688 seconds)
    (6/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.02822693 seconds)
    (7/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.02063438 seconds)
    (8/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.112865189 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.032066081 seconds)
    (10/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.035209077 seconds)
    (11/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.032029431 seconds)
    (12/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.107131335 seconds)
    (13/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.200123962 seconds)
    (14/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.175388076 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.041294143 seconds)
    (16/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.035514456 seconds)
    (17/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.034678666 seconds)
    (18/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.028973323 seconds)
    (19/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.042730721 seconds)
    (20/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.112324028 seconds)
    (21/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.028393624 seconds)
    (22/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.031319216 seconds)
    (23/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.024301512 seconds)
    (24/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.13331414 seconds)
    (25/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.100395604 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.02870782 seconds)
    (27/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.149008316 seconds)
    (28/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.030203551 seconds)
    (29/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.864736491 seconds)
    (30/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.032645347 seconds)
    (31/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.094057627 seconds)
    (32/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.087930704 seconds)
    (33/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.178255761 seconds)
    (34/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.174901635 seconds)
    (35/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.131766888 seconds)
    (36/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.031706748 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.116901226 seconds)
    (38/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.039358207 seconds)
    (39/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.105324367 seconds)
    (40/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.12092377 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.028481274 seconds)
    (42/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.02099942 seconds)
    (43/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.034835376 seconds)
    (44/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.040519072 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.019681087 seconds)
    (46/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.114306181 seconds)
    (47/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.030673922 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.042736639 seconds)
    (49/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.094240714 seconds)
    (50/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.149417298 seconds)
    (51/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.127803654 seconds)
    (52/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.025517743 seconds)
    (53/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.030277545 seconds)
    (54/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.12156827 seconds)
    (55/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.031625182 seconds)
    (56/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.020978153 seconds)
    (57/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.033116801 seconds)
    (58/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.028419753 seconds)
    (59/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.031904987 seconds)
    (60/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.034711695 seconds)
    (61/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.025251681 seconds)
    (62/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.039383579 seconds)
    (63/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.031856088 seconds)
    (64/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.116584903 seconds)
    (65/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.023387791 seconds)
    (66/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.082522256 seconds)
    (67/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.021210456 seconds)
    (68/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.038495101 seconds)
    (69/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.033942476 seconds)
    (70/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.160565942 seconds)
    (71/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.089489351 seconds)
    (72/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.031265546 seconds)
    (73/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.041670471 seconds)
    (74/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.031343772 seconds)
    (75/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.126757909 seconds)
    (76/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.03843954 seconds)
    (77/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.026439902 seconds)
    (78/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.034612677 seconds)
    (79/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.028522221 seconds)
    (80/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.032139151 seconds)
    (81/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.021091778 seconds)
    (82/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.020440482 seconds)
    (83/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.030835252 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.021199738 seconds)
    (85/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.030715592 seconds)
    (86/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.031462026 seconds)
    (87/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.03057805 seconds)
    (88/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.085711899 seconds)
    (89/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.029195636 seconds)
    (90/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.067184076 seconds)
    (91/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.02784252 seconds)
    (92/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.271815985 seconds)
    (93/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.081485901 seconds)
    (94/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.026044227 seconds)
    (95/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.03653552 seconds)
    (96/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.037548359 seconds)
    (97/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.028552016 seconds)
    (98/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.030582912 seconds)
    (99/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.025852839 seconds)
    (100/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.020172986 seconds)
    (101/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.030035527 seconds)
    (102/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.17869164 seconds)
    (103/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.020276858 seconds)
    (104/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.032694495 seconds)
    (105/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.025158495 seconds)
    (106/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.043211871 seconds)
    (107/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.029031326 seconds)
    (108/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.030303031 seconds)
    (109/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.034674098 seconds)
    (110/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.020557837 seconds)
    (111/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.027811738 seconds)
    (112/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.035645864 seconds)
    (113/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.133289312 seconds)
    (114/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.124548596 seconds)
    (115/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.070818245 seconds)
    (116/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.021476462 seconds)
    (117/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.162983575 seconds)
    (118/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.020466883 seconds)
    (119/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.03819047 seconds)
    (120/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.022684911 seconds)
    (121/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.021105721 seconds)
    (122/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.174943057 seconds)
    (123/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.020634281 seconds)
    (124/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.021052465 seconds)
    (125/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.031092707 seconds)
    (126/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.030372421 seconds)
    (127/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.020640401 seconds)
    (128/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.129677446 seconds)
    (129/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.089959361 seconds)
    (130/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.030341077 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.025257952 seconds)
    (132/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.019444447 seconds)
    (133/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.030405474 seconds)
    (134/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.024625711 seconds)
    (135/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.021799092 seconds)
    (136/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.019554093 seconds)
    (137/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.019423626 seconds)
    (138/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.170502127 seconds)
    (139/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.027000608 seconds)
    (140/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.02792484 seconds)
    (141/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.028876788 seconds)
    (142/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.020737377 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.027850028 seconds)
    (144/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.027782079 seconds)
    (145/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.232736779 seconds)
    (146/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.028143989 seconds)
    (147/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.117745832 seconds)
    (148/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.035437655 seconds)
    (149/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.028496925 seconds)
    (150/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.030179579 seconds)
    (151/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.040816178 seconds)
    (152/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.06591531 seconds)
    (153/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.030250011 seconds)
    (154/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.032423591 seconds)
    (155/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.029043547 seconds)
    (156/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.123479586 seconds)
    (157/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.025296948 seconds)
    (158/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.121425075 seconds)
    (159/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.023191298 seconds)
    (160/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.038330984 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.262879044 seconds)
    (162/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.084216383 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.031470993 seconds)
    (164/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.219826757 seconds)
    (165/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.021221197 seconds)
    (166/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.031038694 seconds)
    (167/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.020678201 seconds)
    (168/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.10336123 seconds)
    (169/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.042055806 seconds)
    (170/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.029232375 seconds)
    (171/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.02722621 seconds)
    (172/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.027903537 seconds)
    (173/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.026832812 seconds)
    (174/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.10216326 seconds)
    (175/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.039487683 seconds)
    (176/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.024537056 seconds)
    (177/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.263362734 seconds)
    (178/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.020351579 seconds)
    (179/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.245623427 seconds)
    (180/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.087156502 seconds)
    (181/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.119662691 seconds)
    (182/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.031275584 seconds)
    (183/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.038077021 seconds)
    (184/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.081502672 seconds)
    (185/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.042414295 seconds)
    (186/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.041287649 seconds)
    (187/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.039829395 seconds)
    (188/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.020078077 seconds)
    (189/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.029742617 seconds)
    (190/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.021051659 seconds)
    (191/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.020579161 seconds)
    (192/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.02656181 seconds)
    (193/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.03360036 seconds)
    (194/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.028318412 seconds)
    (195/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.019907844 seconds)
    (196/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.02092489 seconds)
    (197/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.02819483 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.028191418 seconds)
    (199/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.027888513 seconds)
    (200/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.025012746 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.03082722 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.44694764 seconds)
    (203/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.027965105 seconds)
    (204/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.032786577 seconds)
    (205/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023422888 seconds)
    (206/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.030305393 seconds)
    (207/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.267629413 seconds)
    (208/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.028327301 seconds)
    (209/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.104386309 seconds)
    (210/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.033503845 seconds)
    (211/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.031747495 seconds)
    (212/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.027475393 seconds)
    (213/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.021087013 seconds)
    (214/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.029665401 seconds)
    (215/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.089655337 seconds)
    (216/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.019634413 seconds)
    (217/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.031657243 seconds)
    (218/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.083446859 seconds)
    (219/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.019491909 seconds)
    (220/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.081223377 seconds)
    (221/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.021311141 seconds)
    (222/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.021079664 seconds)
    (223/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.034443403 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.02966077 seconds)
    (225/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.028892962 seconds)
    (226/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.029032884 seconds)
    (227/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.0207878 seconds)
    (228/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.03101418 seconds)
    (229/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.028457287 seconds)
    (230/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.021309034 seconds)
    (231/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.033538059 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.027859504 seconds)
    (233/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.028288177 seconds)
    (234/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.029676326 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.019217807 seconds)
    (236/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.033483473 seconds)
    (237/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.088979579 seconds)
    (238/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.021121925 seconds)
    (239/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.173438386 seconds)
    (240/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.086276722 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.11077076 seconds)
    (242/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.019413522 seconds)
    (243/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.033118048 seconds)
    (244/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.031856391 seconds)
    (245/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.020547948 seconds)
    (246/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.121764741 seconds)
    (247/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.021026047 seconds)
    (248/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.074594315 seconds)
    (249/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.097169767 seconds)
    (250/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.029714107 seconds)
    (251/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.032070799 seconds)
    (252/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.031532367 seconds)
    (253/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.021445205 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.085130786 seconds)
    (255/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.033887668 seconds)
    (256/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.028031073 seconds)
    (257/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.027944522 seconds)
    (258/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.083348895 seconds)
    (259/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.028768001 seconds)
    (260/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.119511605 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.106783449 seconds)
    (262/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.024890059 seconds)
    (263/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.44994508 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.034657526 seconds)
    (265/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.032004545 seconds)
    (266/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.01957117 seconds)
    (267/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.028190819 seconds)
    (268/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.033652134 seconds)
    (269/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.030491294 seconds)
    (270/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.020730049 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.030145975 seconds)
    (272/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.086411269 seconds)
    (273/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.028084183 seconds)
    (274/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.020585871 seconds)
    (275/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.020575456 seconds)
    (276/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.020753085 seconds)
    (277/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.019879256 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.035744795 seconds)
    (279/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.020049642 seconds)
    (280/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.026925335 seconds)
    (281/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.02954194 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.024144194 seconds)
    (283/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.030531726 seconds)
    (284/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.03379262 seconds)
    (285/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.029666833 seconds)
    (286/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.026245874 seconds)
    (287/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.020754771 seconds)
    (288/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.019790379 seconds)
    (289/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.029834536 seconds)
    (290/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.031856834 seconds)
    (291/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.086577001 seconds)
    (292/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.115764395 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.024335407 seconds)
    (294/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.030832693 seconds)
    (295/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.028395638 seconds)
    (296/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.034657752 seconds)
    (297/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.075879482 seconds)
    (298/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.031268157 seconds)
    (299/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.118011134 seconds)
    (300/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.019966722 seconds)
    (301/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.030758514 seconds)
    (302/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.043360666 seconds)
    (303/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.020415642 seconds)
    (304/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.027837427 seconds)
    (305/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.019900655 seconds)
    (306/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.027546838 seconds)
    (307/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.031454402 seconds)
    (308/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.029809403 seconds)
    (309/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.020033527 seconds)
    (310/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.030612314 seconds)
    (311/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.020883491 seconds)
    (312/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.01919397 seconds)
    (313/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.02073963 seconds)
    (314/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.021081057 seconds)
    (315/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.030392064 seconds)
    (316/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.02176287 seconds)
    (317/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.02034754 seconds)
    (318/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.020584555 seconds)
    (319/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.026858722 seconds)
    (320/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.028070676 seconds)
    (321/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.030302786 seconds)
    (322/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.027606603 seconds)
    (323/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.028247443 seconds)
    (324/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.020075992 seconds)
    (325/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.031126754 seconds)
    (326/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.932899789 seconds)
    (327/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.02028702 seconds)
    (328/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.021754635 seconds)
    (329/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.034739449 seconds)
    (330/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.028522768 seconds)
    (331/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.028392308 seconds)
    (332/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.021513577 seconds)
    (333/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.021672922 seconds)
    (334/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.020969786 seconds)
    (335/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.03790905 seconds)
    (336/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.021065372 seconds)
    (337/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.031684772 seconds)
    (338/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.021285208 seconds)
    (339/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.028289306 seconds)
    (340/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.020430491 seconds)
    (341/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.043743615 seconds)
    (342/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.020266882 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.030379396 seconds)
    (344/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.019547484 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.027353071 seconds)
    (346/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.028283612 seconds)
    (347/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.027593852 seconds)
    (348/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.160086983 seconds)
    (349/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.035764527 seconds)
    (350/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.036993057 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.121226608 seconds)
    (352/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.030686334 seconds)
    (353/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.039079838 seconds)
    (354/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.034445715 seconds)
    (355/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.029876141 seconds)
    (356/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.021857192 seconds)
    (357/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.021456964 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.268016417 seconds)
    (359/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.088009186 seconds)
    (360/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.035364532 seconds)
    (361/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.035040646 seconds)
    (362/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.021057864 seconds)
    (363/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.029567377 seconds)
    (364/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.020788032 seconds)
    (365/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.022817679 seconds)
    (366/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.021498156 seconds)
    (367/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.047177292 seconds)
    (368/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.0211451 seconds)
    (369/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.030007364 seconds)
    (370/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.020632024 seconds)
    (371/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.021185356 seconds)
    (372/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.021883337 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.073179309 seconds)
    (374/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.028314825 seconds)
    (375/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.02177524 seconds)
    (376/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.028935173 seconds)
    (377/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.029683499 seconds)
    (378/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.029715288 seconds)
    (379/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.03342419 seconds)
    (380/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.021848178 seconds)
    (381/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.051585579 seconds)
    (382/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.02081869 seconds)
    (383/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.021020812 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.032908697 seconds)
    (385/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.021103952 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.031735423 seconds)
    (387/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.032667835 seconds)
    (388/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.029038049 seconds)
    (389/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.052003283 seconds)
    (390/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.034760012 seconds)
    (391/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.030742011 seconds)
    (392/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.074090728 seconds)
    (393/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.020777682 seconds)
    (394/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.021035932 seconds)
    (395/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.033695692 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.033437943 seconds)
    (397/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.019908547 seconds)
    (398/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.032705475 seconds)
    (399/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.033112392 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.030070145 seconds)
    (401/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.26633706 seconds)
    (402/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.032244733 seconds)
    (403/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.022344527 seconds)
    (404/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.021346526 seconds)
    (405/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026607342 seconds)
    (406/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.029520026 seconds)
    (407/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.031576063 seconds)
    (408/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.079406594 seconds)
    (409/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.032285149 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.029418793 seconds)
    (411/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.025250225 seconds)
    (412/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.022010781 seconds)
    (413/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.033382232 seconds)
    (414/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.027165705 seconds)
    (415/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.020604931 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.019714853 seconds)
    (417/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.040060374 seconds)
    (418/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.039912431 seconds)
    (419/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.022003029 seconds)
    (420/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.023239994 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.02781052 seconds)
    (422/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.021343896 seconds)
    (423/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.019928647 seconds)
    (424/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.860132499 seconds)
    (425/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.03328839 seconds)
    (426/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.028226721 seconds)
    (427/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.293226985 seconds)
    (428/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.022184954 seconds)
    (429/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.02947899 seconds)
    (430/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.031382592 seconds)
    (431/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.021026495 seconds)
    (432/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.927788083 seconds)
    (433/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.021524974 seconds)
    (434/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.028762615 seconds)
  done (took 26.260708954 seconds)
done (took 27.169321289 seconds)
(16/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 0.100148095 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 0.034031053 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 0.073801031 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 0.039505044 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 0.030827726 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.036922967 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 0.040400626 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.064693907 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 0.119726138 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.056938245 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 0.111288817 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 0.048338184 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 0.043706087 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 0.106473276 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 0.033160208 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 0.023104165 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.080655847 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 0.051417353 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.083623326 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 0.068084442 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.041465301 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 0.051659611 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.08369704 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 0.053065462 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.067506536 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 0.101766327 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 0.062347714 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 0.085201188 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 0.022807079 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 0.06082999 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 0.033074034 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 0.029182609 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 0.035114478 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 0.054231551 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 0.039255223 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 0.029030948 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 0.076025339 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.032788231 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 0.051052779 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 0.065975129 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 0.04478953 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 0.050609632 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 0.036534635 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.07286566 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 0.062010397 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 0.067856779 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 0.041142714 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.073595953 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 0.072041979 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 0.033177557 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 0.047828745 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 0.047784665 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.034118215 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 0.063079401 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 0.075023604 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.070427786 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.0618105 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 0.190022166 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.033897871 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 0.069961885 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 0.019339198 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 0.067751495 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.028640118 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 0.046109291 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.033914875 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.070789529 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 0.070574621 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 0.067313952 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.026482632 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 0.059186348 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 0.066118896 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 0.06010723 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 0.057956532 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 0.022572883 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.069248901 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 0.067026194 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 0.070349187 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.030577725 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 0.074200469 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 0.074826887 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 0.044979497 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.028793459 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 0.054891231 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 0.072058048 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 0.033838894 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 0.020042395 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 0.029272224 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 0.019887696 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.069463856 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.023306565 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 0.019290536 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 0.067000324 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.06814069 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.023324195 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.030475943 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 0.050611428 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 0.022670001 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 0.063745611 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.077450283 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 0.029467065 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.050208537 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 0.056785753 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.055953514 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.06369437 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 0.068616892 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 0.055395838 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 0.028197886 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 0.032157337 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 0.039683958 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 0.019770568 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.031309687 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 0.057045302 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 0.057965956 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 0.061882406 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 0.019755222 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 0.022024665 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 0.026436941 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 0.019483182 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 0.031108481 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 0.019901791 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 0.019151228 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 0.018826781 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.02831774 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 0.028473457 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 0.067197187 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.059300044 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.033211913 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 0.032053747 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.057244074 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 0.019081767 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 0.027669481 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 0.0631604 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 0.053707136 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 0.022606386 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.029875598 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.054788689 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 0.019879078 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 0.054549213 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 0.019290332 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 0.047023043 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 0.019600106 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 0.022054878 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 0.063381358 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.034037748 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 0.031666088 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 0.05408581 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.055635324 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.030382753 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 0.022439975 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 0.019617501 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 0.024563605 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.049396562 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 0.02235774 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 0.053276863 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 0.050314645 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 0.06448961 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 0.022384457 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 0.028637846 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 0.029894166 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 0.022036877 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 0.054100956 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 0.063912882 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 0.062519478 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 0.032482645 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 0.066158367 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 0.022659611 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 0.019751754 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 0.032843501 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.029989644 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 0.060028986 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 0.037381681 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 0.024873063 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 0.053805599 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.058387177 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.076139731 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.030034965 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.032380101 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 0.027574928 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 0.0601725 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 0.019189263 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 0.059960318 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 0.053927834 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.035910546 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 0.026478562 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 0.049870094 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 0.06227329 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 0.024631947 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 0.026521917 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 0.061004703 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 0.019372898 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 0.02769759 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 0.027986455 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 0.031908134 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 0.038167878 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.019781522 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 0.019171061 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 0.019587606 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 0.02244502 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 0.07395876 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 0.019647875 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 0.021989551 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 0.022014581 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 0.019492105 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 0.019307716 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 0.027186251 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 0.019610753 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 0.019301056 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.02978853 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 0.062239324 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.032751143 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 0.024622379 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 0.022003909 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 0.022540461 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 0.066573474 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 0.070395193 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 0.023491222 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 0.022107818 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.022262906 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.032300636 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 0.022628813 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 0.025904798 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 0.019466596 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 0.01939365 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.022621325 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 0.061205933 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 0.018714966 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 0.018926175 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.029636032 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 0.019390878 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 0.021891882 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 0.019999436 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 0.025936195 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.055188401 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 0.019585077 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 0.026149428 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 0.027267692 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 0.019428293 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 0.022006483 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 0.018831083 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 0.022062804 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.022071494 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.027976238 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 0.030802548 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.029891624 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 0.021955989 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 0.021764451 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 0.019932283 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.055279077 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 0.054734277 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 0.021724154 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 0.027287401 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 0.019351946 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 0.024551245 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 0.057367384 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.03808263 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 0.058624125 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 0.019476917 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 0.053230825 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 0.019153677 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 0.018612147 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 0.019519912 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.021662314 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 0.019315802 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 0.057758324 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 0.043496789 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 0.031009713 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 0.027461654 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.028090411 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 0.022071517 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 0.022280654 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 0.064583708 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.021737362 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.05480184 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 0.019049056 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 0.073677425 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 0.030922447 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 0.031646752 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 0.0304725 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 0.019908854 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.032469767 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 0.028558696 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 0.019845333 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 0.019550579 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 0.019413805 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 0.02760101 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 0.022046628 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 0.059895177 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 0.019402893 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 0.019975546 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 0.032067836 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 0.01924987 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 0.024222258 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 0.054543569 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 0.019617585 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 0.060216673 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 0.019475132 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 0.137891314 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 0.019394437 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 0.021986778 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 0.029845224 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 0.035243023 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 0.019438884 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 0.022970194 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 0.025835812 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 0.061464186 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 0.030809201 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 0.028959578 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.021593791 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.029606419 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 0.024289509 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 0.02424796 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 0.021680026 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 0.02215174 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 0.029647419 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 0.05827907 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 0.029613008 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 0.019439616 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 0.02223501 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 0.01846544 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 0.024213063 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 0.052069534 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 0.027442907 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 0.032008189 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.057615093 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 0.018519518 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 0.061797546 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 0.019750331 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 0.022448463 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 0.019302365 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.048857121 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 0.021967854 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.021937247 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 0.021597362 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.030055951 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 0.036309374 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 0.018794099 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 0.03048083 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 0.019400753 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 0.080326586 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 0.019621717 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 0.044974677 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 0.019212129 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 0.034360377 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 0.031689942 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 0.018640239 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 0.026426627 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.034070183 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 0.029747034 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 0.019910517 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.022529915 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 0.019500863 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 0.021975686 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 0.022356506 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 0.026111108 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 0.024180714 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.057477344 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 0.019274629 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 0.021798727 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 0.022225965 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 0.031042953 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 0.022447495 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.028125625 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.021934829 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 0.021823024 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 0.019621874 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 0.019913889 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 0.01957715 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.056429571 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 0.029413397 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 0.027867068 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 0.021785692 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 0.019591328 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 0.030932847 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 0.024362484 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 0.022116166 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 0.068245549 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 0.024436975 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 0.024280178 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 0.027702191 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 0.019282966 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 0.022203146 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.032703922 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 0.019404116 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 0.019650172 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 0.019797982 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 0.019466756 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 0.01964699 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 0.018908456 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 0.02421255 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 0.019075059 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 0.019353189 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 0.027206465 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.06063062 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 0.018647142 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 0.018480498 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 0.019564587 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 0.054064631 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 0.026208854 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 0.019153606 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 0.05011687 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.031247234 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 0.027316035 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.031282946 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.029994543 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 0.01872142 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 0.018953052 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 0.019063874 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 0.019795746 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 0.029241558 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 0.033293177 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 0.019791485 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.01970949 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 0.027383459 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 0.030940316 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.019787079 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 0.019410267 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 0.025760105 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 0.025913662 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 0.019411473 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 0.027064782 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 0.020291999 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 0.019047539 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 0.024086403 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.021825064 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 0.024055813 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 0.01887318 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 0.028886167 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 0.022050294 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 0.025784008 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 0.02194791 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 0.031292877 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.029454282 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 0.022273193 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.019205856 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 0.02425493 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 0.019748745 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 0.021650072 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 0.019481846 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.021735099 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 0.026367103 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 0.018702196 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 0.02968421 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.021921475 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 0.029500477 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 0.025873901 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 0.02594979 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 0.01970221 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 0.018416909 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 0.01959172 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.021899311 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 0.027067763 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 0.031239812 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 0.019927752 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.028101051 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 0.023947734 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 0.01978236 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 0.02405978 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.069746841 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 0.01885273 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 0.019545659 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 0.019309912 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 0.024364692 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 0.050715827 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 0.024146651 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 0.018731262 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.026283535 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 0.033118863 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 0.021836587 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 0.056512337 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 0.021976032 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.061556676 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.021840903 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 0.027120893 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 0.019366213 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 0.019557708 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 0.019342191 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.021978971 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 0.027404083 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 0.027415389 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 0.034632411 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 0.022319043 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 0.024112604 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 0.027240252 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 0.019107651 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 0.019278385 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 0.019219204 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 0.019249818 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 0.018878273 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 0.02406659 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 0.019190679 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 0.019062932 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 0.018812206 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 0.019436606 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 0.021854775 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 0.022133169 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 0.028873113 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 0.027967346 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 0.022153304 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.019105674 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 0.018599316 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 0.020125705 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 0.030444408 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.019622097 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 0.019546754 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 0.030242729 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 0.028820866 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 0.018502968 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 0.019457119 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 0.024419236 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 0.026118134 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 0.026960307 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 0.019877047 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 0.019345157 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.022082608 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.021589285 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 0.018576292 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.026083646 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 0.019308074 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 0.027234089 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.029478181 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 0.019574969 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.022072114 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 0.021430327 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 0.01893259 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.021833076 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.030906999 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 0.022305502 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 0.027598594 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 0.031135435 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.026247678 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 0.018937123 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 0.022379789 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 0.019405294 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 0.030344397 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 0.018641375 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 0.034067787 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.028235246 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 0.019647905 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 0.01909234 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.01965322 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 0.019493251 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 0.021701891 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 0.021722051 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 0.019061642 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 0.018583619 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 0.022006001 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.030303332 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 0.029250663 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 0.03308974 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 0.020058866 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 0.019710065 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 0.021999995 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 0.018983083 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 0.019506449 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 0.022358731 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 0.019473127 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 0.026065991 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 0.021909725 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 0.02943506 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 0.019154423 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 0.022383799 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 0.031998219 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 0.022313238 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 0.021767887 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 0.034197513 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 0.029644095 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 0.021914206 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 0.024249243 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 0.019118567 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 0.026122612 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 0.022377932 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 0.021988899 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 0.019245312 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.026160393 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 0.01959222 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 0.036513904 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 0.022531883 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 0.021979229 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 0.026011929 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.021940344 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.022027213 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 0.01976355 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 0.026039211 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.022067158 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 0.025787992 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 0.019858088 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.019103213 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 0.028311435 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 0.030328467 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.021907391 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 0.02222962 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 0.019414333 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 0.019255717 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 0.03048628 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 0.022071051 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 0.032189593 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 0.027140584 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 0.026057034 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 0.019453806 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 0.019572525 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 0.028086685 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 0.01924078 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 0.019446196 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 0.022228259 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.021834332 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.030071462 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 0.029412619 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 0.030306283 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 0.024438937 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 0.025976996 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 0.021796659 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 0.019693236 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 0.030668546 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 0.019420807 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 0.021750511 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 0.019667959 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 0.019480783 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 0.028602808 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.019227211 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 0.030129365 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.021727884 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 0.031926803 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 0.021953415 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 0.027724795 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 0.018532159 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 0.030726243 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 0.01921664 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.026161278 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 0.023963328 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 0.027447594 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.02612302 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 0.030661808 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 0.030827134 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 0.018529818 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 0.0192344 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 0.021949265 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 0.025788937 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 0.018949204 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.029832256 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 0.024182788 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 0.019434923 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 0.027117757 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 0.019459608 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 0.022283257 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 0.019641766 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 0.018942865 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 0.021867745 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 0.030270649 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 0.019695501 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 0.01909317 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 0.018495141 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 0.019634853 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.022008215 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 0.01942414 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 0.027185194 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.027789212 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 0.020093466 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 0.018791191 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.018580566 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 0.023838781 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 0.019672167 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 0.025503003 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 0.027111443 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.030819891 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.023116502 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 0.019360799 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 0.019126211 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 0.01943531 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 0.036274791 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 0.022864128 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 0.022112759 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 0.019472359 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 0.02438307 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.029619617 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 0.018896539 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 0.018960253 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 0.021926653 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 0.019301803 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 0.019401251 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 0.018986504 seconds)
done (took 23.182615251 seconds)
(17/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067518419 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.048782299 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.04775856 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.030228796 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.030983181 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.03121732 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.023281437 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.031537843 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.023690191 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.033987963 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.047531057 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.040170849 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.035999336 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.039414558 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.019893324 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.029254294 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.021417658 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.035290528 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.031580643 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.045140812 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.048995598 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.022699272 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.022741723 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.034833273 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.025915229 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.031283156 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.045101385 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.02235892 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.03614798 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.030804005 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.045888078 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.022875966 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.020215052 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.030832886 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.02984765 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.023493941 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.019944637 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.021000277 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.029381702 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.019948688 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.048498788 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.031095258 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.020279576 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.020309863 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.021167608 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.030785413 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.021243478 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.018744172 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.025517946 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.020964837 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.023089078 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.024001864 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.022602338 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.030340718 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.022645848 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.019411661 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.018634011 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.019380785 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.020369314 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.019547608 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.019629443 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.022928263 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.023210674 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.02384254 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.020851719 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.018905673 seconds)
  done (took 2.973633815 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.040598 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.068624929 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.031626829 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.031651521 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.019913935 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020080168 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.019983753 seconds)
  done (took 1.306660046 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.078458879 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.023645216 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.028986588 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.030151513 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.037446996 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.027208586 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.03103634 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.041468727 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.05114967 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.039714396 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.038687749 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.029890112 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.030161043 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.023471309 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.046339277 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.03104944 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.03083533 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.025026262 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.030219628 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.030080489 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.018784045 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.045105764 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.031844942 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.021764121 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.03048523 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.023911543 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.023315464 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.063844024 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022198084 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.020985597 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020627717 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.050562488 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.023009118 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.023019686 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020782043 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.019730437 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.021884774 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020535321 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.021612212 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.023903489 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.021089228 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023021851 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.023217077 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.021368375 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.021652936 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.02095804 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.02130499 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.020465244 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.021083315 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.023265307 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.030900372 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.02428709 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.024688435 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.029952807 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.028856362 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.022921877 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.024763513 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.021851208 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.024270785 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.030060842 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022375628 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.029463637 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.03286753 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.021158833 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.028916185 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.029357305 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.022796401 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.020947555 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.020859526 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.028587119 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.021863069 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.029086007 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.023316304 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.022945239 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.018691793 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.028447416 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.03049286 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.030480117 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.030419994 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.028727314 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.021348992 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.020746781 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.029832317 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.030513426 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.021411429 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.02053118 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.020669369 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.03839842 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.046557586 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.022733752 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025820343 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.020745359 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.029790959 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.022851645 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.024921756 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.030246089 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.019347232 seconds)
  done (took 3.785794274 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.030998791 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.020719654 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.020291124 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.019382892 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.019520997 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.019323004 seconds)
  done (took 1.217585205 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.050994459 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.019536308 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.019693112 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.018942194 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.036191183 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.021627716 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.0215485 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.020418181 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.033111913 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.029527391 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.021193494 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.022826173 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.022110818 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.019522266 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.021484168 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.028576432 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.02162662 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.021940555 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.028461631 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.019720249 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.025674259 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.019883569 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.019617498 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.025551509 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.021250851 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.028791635 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.025374547 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.028800386 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.028618542 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.020233646 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.019868339 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.021190128 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.025463266 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.020358372 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.02158168 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.0256169 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.018954565 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.022540845 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.02119438 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.021195983 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.02269289 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.019701926 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.020707126 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.022481682 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.020129716 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.025564034 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.022799751 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.02572991 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.021737188 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.022537541 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.022617778 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.019075738 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.021099705 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.022559203 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.025341657 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.02032305 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.022578244 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.02174021 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.01946268 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.025747497 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.01883439 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.021104465 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.020233621 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.021382274 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.021748618 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.022763986 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.025280891 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.019695969 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.019806534 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.019023533 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.022563853 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.019147568 seconds)
  done (took 2.742930768 seconds)
done (took 13.131179378 seconds)
(18/23) benchmarking "inference"...
  (1/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 5.421743214 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 0.078985614 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 0.232267589 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.039706023 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 0.575040704 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 1.125109205 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 0.033026145 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 0.081967782 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 0.139552584 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 0.034357178 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 0.035864004 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 0.182665263 seconds)
  done (took 9.060858673 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 4.480391272 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 0.120797212 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 0.316655138 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.139931197 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.425164308 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 0.125652375 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 0.068359115 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 0.366761845 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 0.194864634 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 0.062897623 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 0.060383031 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 0.475813122 seconds)
  done (took 8.95812885 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 0.439394462 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 0.12754192 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 0.366294577 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.1419586 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.426550353 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 0.060378069 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 0.067206939 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 0.236116901 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 0.310701541 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 0.055527777 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 0.052958307 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 0.47216754 seconds)
  done (took 4.870896039 seconds)
done (took 23.977620639 seconds)
(19/23) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.513348777 seconds)
  done (took 1.615968161 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.791086484 seconds)
  done (took 1.894569668 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.057532775 seconds)
  done (took 1.166713392 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.553795046 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.476646601 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.766766969 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.080617605 seconds)
  done (took 2.983358916 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.656552096 seconds)
  done (took 1.779383335 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.244769235 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.214891544 seconds)
  done (took 1.596052857 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.35866745 seconds)
  done (took 1.478505725 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.229911183 seconds)
  done (took 2.34673118 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.155753011 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.119773442 seconds)
  done (took 1.392801649 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.446266739 seconds)
  done (took 1.566237578 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 3.15169626 seconds)
  done (took 4.268989044 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.164994284 seconds)
  done (took 1.286238319 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.268541076 seconds)
  done (took 1.391501484 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.561483855 seconds)
  done (took 1.68396827 seconds)
done (took 27.560144564 seconds)
(20/23) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.04804998 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.043690673 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.042771717 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.040447892 seconds)
  done (took 1.296057913 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.025752551 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.024451567 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.024974709 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.025034406 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.022926488 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.023766608 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.02434593 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.023921434 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.023353556 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.024050027 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.022924236 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.023860241 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.024009808 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.023838191 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.02380443 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.025252813 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.023994133 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.023905427 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.023807855 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.023867972 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.024029017 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.023921367 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.023277529 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.024353571 seconds)
  done (took 1.703430628 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.037846965 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.040247844 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.031900789 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.036981415 seconds)
  done (took 1.276116972 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.026140031 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.025769231 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.031368196 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.029112382 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.026444276 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.027257173 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.030516441 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.031318043 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.033290368 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.03269735 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.021897371 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.021655894 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.020940083 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.026236477 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.030325414 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.020372124 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.025326807 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.026904379 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.025802532 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.028298584 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.023365903 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.025317266 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.026140396 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.026267264 seconds)
  done (took 1.770107201 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.041949707 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.019701473 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.043913492 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.051717954 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.045843735 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.019670457 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.041634169 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.050344799 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.192183308 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.020571259 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.026568606 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.020332711 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.053599873 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.020166317 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.033926155 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.052168966 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.058575771 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.026387356 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.050380278 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.020216099 seconds)
  done (took 2.019641336 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.029229226 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.030631018 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.021410241 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019478234 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.034190215 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.037661432 seconds)
  done (took 1.311525925 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.034716433 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.020294973 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.029896702 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.023640274 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.020318433 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.020586035 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.019667759 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.023097636 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.023268741 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020022211 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.019814807 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.019766891 seconds)
  done (took 1.41097358 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.16453642 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.023903999 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.022609156 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.020094275 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.020218532 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.019874779 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.039030245 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.021534505 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.040594804 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.020252115 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.020858399 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.02169301 seconds)
  done (took 1.575286243 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.051706133 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.051212656 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067753572 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053094799 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062384408 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.036837881 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.066745014 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.031419995 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.105052006 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.074055396 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057003065 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040677651 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039067453 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.026051648 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028951066 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047774285 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101171602 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.023740519 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.052184728 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105083874 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.057013589 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.064116162 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063804513 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056902152 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03438869 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063120407 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.047360176 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033946836 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.059617775 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054650681 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05467385 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.048735829 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.029338052 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.022719877 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086804212 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.040433689 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051847682 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.041457806 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.049774295 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.035987769 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041441278 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.025977978 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.033030319 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.049568607 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.028667682 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061684145 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.033068626 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051933006 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033574717 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.067848187 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.050723539 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050312073 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.034066238 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056726528 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.168406555 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044427485 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050826283 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.048888254 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.029452918 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.069802159 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.036827522 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059976811 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039991282 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031915858 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097117073 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035607662 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.061808666 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042689219 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.033415784 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.044172841 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.05016724 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078740815 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058355258 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.036504948 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053738522 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.037189812 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054270998 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.034961161 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.091016917 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042939777 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.028663684 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.049760699 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094272171 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037104917 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.051891263 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049625062 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.044466902 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.025797935 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.031047264 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.068843216 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033395863 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.052012585 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.02307316 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.051359589 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.052855801 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034374725 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047070065 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.051289817 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.030495432 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077015825 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.049478455 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.02394884 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.057127263 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053035514 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.069337056 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030507158 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.033664385 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.056549362 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0381244 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.102388399 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034574698 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.026451215 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045637626 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.188669595 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.036764438 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.153311731 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.038431443 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075283771 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047350028 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.058957243 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025729489 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.041640376 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048485809 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044202145 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049179714 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047053541 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.03240982 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.037589971 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069514176 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046092011 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.028968099 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.056218352 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.046537884 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.021871038 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03096302 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.029311769 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06959766 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.035992088 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.080044481 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065497852 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.030371675 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082360034 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.04272155 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060747399 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.048426453 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052411497 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079216526 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.141976415 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.038419424 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.025169674 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044565374 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079379187 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057807986 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033650523 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.035093289 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.068088571 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056373542 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.039540059 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049551788 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037767206 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045756595 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.04650274 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074431062 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058456073 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039158797 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.043981888 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043714425 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.072153918 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.026057432 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096933234 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038509032 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06056773 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.039922986 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074817348 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.061605962 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.030621384 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.038467562 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.043396099 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.037471507 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05928905 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076373789 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.041920208 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.027986818 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027683929 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075613285 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.025980374 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046229094 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.04589027 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.041119544 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053282353 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.032270161 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.02762086 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.024627608 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.043411151 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078623544 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.025472499 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.053923491 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.053048182 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040436846 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.033417026 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.021293478 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044368881 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073049642 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050788872 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.057952283 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.18407403 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047918141 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053608691 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.070071053 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.052921512 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029410475 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.068837092 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07098135 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032984332 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.042633026 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.073842958 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07356912 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.0692983 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.038674399 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060664073 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.039261582 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046494752 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.031222344 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.040813614 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07534681 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077846448 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.074038425 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.030110558 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045944146 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.05101779 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.180977386 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.032198762 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057053718 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.029587988 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054250022 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.026174758 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04765679 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.02927421 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.069459693 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.044724314 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.055078949 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.025580987 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.021593337 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076649156 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.055377006 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037827134 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034751541 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.069129601 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078242627 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.030781586 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.184242606 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.056028988 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.045081789 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048055804 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.049892171 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.036669546 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033197547 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050952893 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.033581856 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.023696233 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041293835 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029487052 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.052209811 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.035033044 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029981195 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.05770309 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045849949 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037628123 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024472846 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039243922 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.072079803 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.0449678 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.060339643 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053581638 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075249281 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075131506 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.046436472 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.048223885 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.055335244 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.026860811 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.043118199 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.025594702 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.037344852 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.030988362 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079201389 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.027875414 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.04846421 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.025403814 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.069253921 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.022534781 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.04414799 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045446927 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047043892 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.06960653 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.045380661 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074820935 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031776236 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.050203701 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044255649 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.032467883 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.038360687 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046346859 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044482382 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054162168 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.04246442 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047345539 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.083621441 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043239144 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.079509757 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03343295 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.071640093 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082584629 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.054294373 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.048842049 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.186534833 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071383182 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049092944 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052037344 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028956644 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047745384 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046346718 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052981162 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122540565 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.048289153 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.029493191 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047598041 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046105695 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.045554825 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041680916 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033357626 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.062906378 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038265659 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.046140599 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039568842 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.019490367 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.045585334 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028090727 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044494506 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.041355554 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.039493248 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.04186446 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055522759 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068442833 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050766701 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08153359 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.053125504 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.049420963 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.064580293 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051820954 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046972695 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033823952 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033706193 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069832265 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049287059 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.065173279 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.052910115 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04472787 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.04552909 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0366699 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078069617 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045156113 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.051548621 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0297833 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.025846079 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.024870449 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.029237435 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.067180169 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046203879 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046629142 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041594637 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.029892021 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046050512 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046179785 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.02578402 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04758521 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037743933 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04264872 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.026182639 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039036409 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.058805058 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.042823766 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.041654676 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042555025 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069387621 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.064751944 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040936924 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076759813 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07145818 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034729562 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028070524 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.029816145 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034159122 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048139419 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061721223 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054819668 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.027682861 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.039156731 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.03283818 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02880458 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.029837767 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.033305343 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.037376519 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074565302 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044536755 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.064518541 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056703623 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030392384 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046170258 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037753705 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.044922187 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.048455987 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049121694 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04988203 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.057037985 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050833568 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045168446 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027856626 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.023075855 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.028434322 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.0338793 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045541041 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.02994666 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033113888 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074514814 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.043681969 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045810433 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045423289 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.034700844 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026510303 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067475165 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.024724838 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068325811 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.028774343 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.028306999 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.036860647 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031131157 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.030468019 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.198967633 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045502437 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038485084 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05872321 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045277957 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.178478197 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097523743 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030158597 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.07710636 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0274895 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.026107727 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.027419683 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047488035 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041268675 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.052548432 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.058710028 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051241001 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044504761 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.019148343 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073999542 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.040389174 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.040591947 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.030620372 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.030325745 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.181192817 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045190185 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.019645446 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.035887743 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.051187337 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.030419806 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045706793 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.031578694 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033559108 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.186754525 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.197537035 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.035281728 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.0245718 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.039452837 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078289402 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065722505 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037842965 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044427746 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.065438608 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.040177834 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039580247 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0482168 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.14038407 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029947109 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.038789006 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.040306399 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041554449 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039983914 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.047007622 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.033165909 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.043160875 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.044274252 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.030341169 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048138834 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030386787 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.038165916 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.045524167 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.032533259 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.031201417 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.069488016 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.038425561 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.026699435 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034545148 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.049579086 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030505768 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062777946 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.025525311 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04881259 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.036326274 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049935251 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.033988248 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.050391532 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067308507 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044166239 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055067042 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.035480821 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054317695 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039104517 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.025356444 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047837795 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.033639788 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031424555 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058517912 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.019593285 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.047250362 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041234427 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.050650246 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051762492 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042291673 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075981914 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040938352 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034378708 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035761224 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.03087614 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030528005 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031071 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.02248722 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.033808321 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044275007 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.021958675 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.039834298 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.054990377 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.032648376 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046201595 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.040539539 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05367437 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041002872 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.0460323 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078053354 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034618258 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050442475 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.069606885 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.067645509 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120800154 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079704691 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07297624 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069400728 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.030395709 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.019416166 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.025508861 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.058859881 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.029918361 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.039946758 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.026424979 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068098805 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.034774168 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044643307 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.193940175 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029725125 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.033981664 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039950975 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.025265499 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.032002458 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044638305 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.038262245 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026732168 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.038058219 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.030949391 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.067527248 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048147811 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034937523 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.039392415 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026743155 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034695738 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.057118206 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.097124181 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.038417753 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.022045957 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15184874 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.04570968 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069531291 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.028001399 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030154046 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.067611436 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041768788 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.194353518 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.026683106 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.072548691 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.080334102 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.039592812 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06789941 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025529852 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039678948 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032038808 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.083661915 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.022285946 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041319247 seconds)
  done (took 31.834850862 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.126734832 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.259476326 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.12237354 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.078445124 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.057050476 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.070341281 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.159145071 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.064986202 seconds)
  done (took 2.23347126 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.024083283 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.024186249 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.055493607 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.172665679 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.044824434 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.021165888 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.019586873 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.035003868 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.023317997 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.020969693 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.057066517 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.021226099 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.023553261 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.444103395 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.020189558 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.019622502 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.022917363 seconds)
  done (took 2.354253013 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.30590465 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.235390289 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.863912165 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 2.984792354 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.094633654 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.38441566 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.034222419 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.035344285 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.439162073 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.326264796 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.090651234 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.114983742 seconds)
  done (took 17.191618278 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.032237089 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.03232003 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.032020518 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.031888173 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.03241479 seconds)
  done (took 1.444610616 seconds)
done (took 68.590643669 seconds)
(21/23) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.043742297 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.120053012 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.022736472 seconds)
  done (took 1.45699775 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.027994904 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.035305955 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.035218815 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.035811514 seconds)
  done (took 1.421355238 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.029851236 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.031135419 seconds)
  done (took 1.347023648 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.1765723 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.119113647 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.068069305 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.037700199 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.035198115 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.037897463 seconds)
  done (took 1.404717348 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.022909863 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.022493791 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.022595179 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.022704962 seconds)
  done (took 1.382048748 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.022114975 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.021441642 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.021750636 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.044716969 seconds)
  done (took 1.400589774 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.05687588 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.050094122 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.135031442 seconds)
  done (took 1.529728416 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.040861575 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.031470157 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.032669134 seconds)
  done (took 1.397161113 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.047031218 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.043355803 seconds)
  done (took 1.381051084 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.032666722 seconds)
  done (took 1.32530114 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.041563068 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.051658294 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.080673032 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.045744344 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.09342387 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.07226568 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.019851717 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.020034643 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.030515319 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.019955109 seconds)
  done (took 1.766772198 seconds)
done (took 17.507011727 seconds)
(22/23) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.089838954 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.170437311 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.314654223 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.059364856 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.601383996 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.302209566 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.836517575 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.045594601 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.051006795 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021526144 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.042243073 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.590661068 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.80897883 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.137838854 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.802133802 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.135580556 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.590457346 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.020176525 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.020766589 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021088814 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.80075363 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021057732 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.020943536 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.020136951 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.591313206 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.341097516 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.021125088 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.120221576 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.036664012 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.02962073 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.301464475 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.037646936 seconds)
  done (took 13.296569531 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.116555494 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.089169518 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.035819762 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.041353535 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.033576669 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023569698 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.128380093 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.04618636 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.072207973 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022434371 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.043528962 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021922941 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.050869094 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.038914458 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.043315412 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.037286443 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.020413839 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.020279559 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.020983396 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021544102 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.042529329 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021594976 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.02133896 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.020213161 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.021951821 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.032475557 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.021033156 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.020880331 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.036559447 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.029955692 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.022206232 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.037978634 seconds)
  done (took 2.557752589 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.172509154 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.114840879 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.036048537 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.087297633 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.084662853 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024033519 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.166299127 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.046468194 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.091245362 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022403928 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.042616685 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.02190513 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.051537096 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.038897534 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.043657128 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.037113239 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.02056178 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.020199589 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.020870668 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021337462 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.042722147 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021529685 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021212183 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.020315081 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022415179 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.033174171 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.02132538 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.020916884 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.036245493 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.029210016 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.022436666 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.037519017 seconds)
  done (took 2.796115362 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.023264533 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.024895207 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.026731079 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.041204025 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.019572702 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.022597111 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.023879404 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.019549462 seconds)
  done (took 1.507446032 seconds)
done (took 21.462024655 seconds)
(23/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.036160632 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.023983467 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.028305746 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.036486481 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.02962639 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.021753204 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.020891863 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.027275516 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.028068899 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.024881747 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.030142115 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.023616969 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.02451539 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.020876507 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.028237408 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.026069257 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.023896654 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.024944325 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.023337047 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.024012064 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.02280372 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.02689014 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.02626359 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.022324234 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.022721202 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.022246389 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.033804276 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.028257266 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.021546072 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.023997724 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.023470421 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.022386831 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.029917955 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.030141335 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.026127062 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.024475152 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.02685978 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.02354635 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.023243589 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.028712456 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.024161206 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.029116579 seconds)
  done (took 2.390126197 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.025524933 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.029973789 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.023525497 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.029877927 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028074616 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.030616766 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.026826013 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028031885 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.028524446 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.026143365 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.025210832 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.02724231 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.028999493 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.022568022 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.028875252 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.026317227 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.028674033 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022853394 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.028664781 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027751839 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.02700606 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022634003 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028246994 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.029636142 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.024416658 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029104798 seconds)
  done (took 2.012267083 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.033044534 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.043838941 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.055624361 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.098195905 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.062718733 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.035302933 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.033816751 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.045418201 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.04861029 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021560219 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.039932763 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.041032346 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.089731146 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.030264804 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.065070599 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.040541775 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.029483689 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.024030108 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.023600377 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.142285835 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.047356384 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.047315119 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.058142114 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.066695287 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.021844049 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.060259679 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.027905862 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.027287765 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.028631087 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.028089341 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.023814822 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.022100049 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.021561083 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.033123428 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.023784847 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019145589 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.038425454 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.029683419 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.035129962 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.065447681 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.028828558 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.026224456 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.046398733 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.11353211 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.022164569 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.020054792 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.025072762 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.029928893 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.0240414 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.064055481 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.035777963 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.02533852 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.036760591 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.023414799 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.023887825 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.035053936 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.024420952 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.021107466 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.031910104 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.0256232 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.043044274 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.026475022 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.030329326 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.022214274 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.027302882 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.023453257 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.020090211 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019583966 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.050359451 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.030124359 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.04627488 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.02349048 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019162173 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.027917085 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.027479235 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.026668962 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.022312891 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.033195647 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.025899353 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.022144619 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.035599044 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.021449959 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.022442145 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.093193485 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.01999333 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.019011621 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.018995842 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.019985759 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.021613786 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.023439379 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.032577884 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020194088 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.022488976 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.033350586 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.029387268 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.021079074 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.020150915 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.019173242 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020103971 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.024003328 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.02365043 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.021833529 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.023990334 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.024953829 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.022617806 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.05850569 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.030458419 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.022070195 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.019062581 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.019923687 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.02074751 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.026996483 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.022336425 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.024323214 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.025214871 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.028906284 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.022805395 seconds)
  done (took 5.267952563 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.104870722 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.101724161 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.056140268 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.132678936 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.027226191 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.037895341 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.097126346 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.108481696 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.020720448 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.03698262 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.060484389 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.050652397 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.041729738 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.054299413 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.047962232 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.02092395 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.038762945 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.046967324 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.097708709 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.134987151 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.039007737 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.034622952 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.037832044 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.037301205 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.03548733 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.033995913 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.039184296 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.027003174 seconds)
  done (took 2.925427807 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.027039966 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.062184917 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.024756276 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.040463177 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.033626752 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.02177764 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.021950944 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.021128358 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.033616038 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.019193206 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.024519817 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.027509302 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.02354421 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.021816525 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.02146629 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.027233299 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.02715707 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.02003635 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.028958765 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.024640491 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.038039387 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.040398306 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.027259112 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.020158115 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.021763585 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.020353421 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.021090846 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.029313408 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.02189347 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.020411911 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019310682 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.025012829 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.033906296 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.022349828 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.020471749 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.021140533 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.021245618 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.021288702 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.022343123 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020061999 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.019949587 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026625133 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.020235544 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.019556391 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.029912061 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.024307587 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.021594616 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.02217503 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.024253508 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.018891893 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.023376366 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.023392311 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.022779442 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.030752837 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.022631017 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024008367 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.0215409 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.036459952 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.026642027 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.020955202 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.022115355 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.020503194 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.022694713 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.022810971 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.033306519 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.022749595 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.019760551 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.021563161 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.021611174 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.030069408 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.021184881 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.03126568 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.0188999 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.021370963 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.021244086 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.022885689 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.02160261 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.019749684 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.020334708 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.019857361 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.022501697 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.020812051 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.020768712 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.022076994 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019634783 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.020157959 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.021075327 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.021127079 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.025731586 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.019190376 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.023589733 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.021648339 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.01987423 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.022263544 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.026759558 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.02251849 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.042948594 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.02664197 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.0217683 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.01859368 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.038224042 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.02219997 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.020508719 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.023587163 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.024130878 seconds)
  done (took 3.894807891 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.051304678 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.022029339 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.042620965 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.053757931 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.032635767 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.027153212 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.034421037 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.021157785 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.042781578 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.020732367 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.033178615 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020332854 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.036864795 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.038237862 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.021979048 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.036446964 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.023365962 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.044054692 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.041314216 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.020695854 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.034308597 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.038612835 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.035460855 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.036614609 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.035688357 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.037574771 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.034861761 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.023685674 seconds)
  done (took 2.276408283 seconds)
done (took 20.072216879 seconds)
RUNNING BENCHMARKS...
(1/23) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.36900866 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.46162697 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.334621897 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.750593107 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.367290548 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.773570854 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.361689162 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.322993239 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.382392879 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.326207529 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.650904567 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.097810557 seconds)
done (took 60.600497428 seconds)
(2/23) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.374058239 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.473235146 seconds)
    (2/2) benchmarking "String"...
    done (took 1.547230261 seconds)
  done (took 4.342661083 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.633562761 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.368499664 seconds)
    (3/3) benchmarking "different"...
    done (took 1.390006993 seconds)
  done (took 5.714547397 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.427779986 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.322673585 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.580313266 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.324053616 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.326360551 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.664425528 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.180074969 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.202975335 seconds)
  done (took 28.924545621 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 3.717253007 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.522802688 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 2.449061181 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 2.525678019 seconds)
  done (took 11.625022839 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.633340382 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.495062944 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.511393336 seconds)
    (4/4) benchmarking "different"...
    done (took 1.406561904 seconds)
  done (took 7.47402822 seconds)
done (took 68.260320643 seconds)
(3/23) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.324904511 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.766378752 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.335089902 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.481014071 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.352280531 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.431200495 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.330840139 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.358877647 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.324835894 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.325928124 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 5.258633796 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 5.690838442 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 2.063003851 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.3325356 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.322858305 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.343198774 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.739910228 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.324652331 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.384391512 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.674457049 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.730991303 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.329820295 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.332728691 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.382389126 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.388764912 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.370352893 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.936880015 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.322358052 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.617740698 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.338293531 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.322660239 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.327861966 seconds)
  done (took 184.890477318 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.323890213 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.698440238 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.742547925 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.361746891 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.151152734 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.543248704 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.24103785 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.186979507 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.323021984 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.324043062 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 2.803863055 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.322065194 seconds)
    (13/36) benchmarking "trsv"...
    done (took 2.839916279 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.282826826 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.353776003 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.422131092 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.775700737 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.7827405 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.377127009 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.520606341 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.349254712 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.693670787 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.626023065 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.729600909 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.352154218 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.403851839 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.33346637 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.344855204 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.090515514 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.75909463 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.323922671 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.353591768 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.466387503 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.189176451 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.331807489 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.337994634 seconds)
  done (took 156.386913705 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.459852023 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.330598771 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.381640848 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.449090564 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.995126237 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 5.970352051 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.321404048 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.322677735 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.322915825 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.328812047 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.323911473 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.395250559 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.323544629 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.410072546 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.337879697 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.322775652 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.323283983 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.409334855 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.323265757 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.32632506 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.323195037 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.383004328 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.697048206 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.447514841 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.322472082 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.326652287 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.453555241 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.329402724 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.323496152 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.323398832 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.446490177 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.322818535 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.399268957 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.450070493 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.328251378 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.400450325 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.328735009 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.832134068 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.325838669 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.324005764 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.326286523 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.382297178 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.32419777 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.452068436 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.412211346 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.328315358 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.336894403 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.357644326 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.902660554 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.325519391 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.323304329 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.322487493 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.326326926 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.324669283 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.83223602 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.325945806 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.351598673 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 9.985205926 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.321818633 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.324037798 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.323315476 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.323134055 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.323910129 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.329089978 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.368631363 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.023783514 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.703074305 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.712533554 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.050826064 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.322709407 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.32461916 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.323672451 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 10.906383141 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.363538416 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.32404752 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.323441977 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.405199304 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.323894259 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.324130731 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.392026341 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.391019207 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.324224151 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.453844308 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.324309162 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.324519754 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.758765276 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.409681403 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.323507394 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.337807772 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.365762856 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.326229466 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.324062768 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.329864601 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.391706773 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.326999001 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.333958966 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.388118192 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.323312701 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.324273596 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 17.773394314 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.54583413 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.324496958 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.521138999 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.56846089 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.596137845 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.322228615 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.32362139 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.374698826 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.32525436 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.332551512 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.329311702 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.324595086 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.323753478 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.331311499 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.323920361 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.323668426 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.32356279 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.337028598 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.323566779 seconds)
  done (took 349.445638489 seconds)
done (took 693.50663236 seconds)
(4/23) benchmarking "parallel"...
done (took 1.322763797 seconds)
(5/23) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.485896409 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.863432184 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 3.74536931 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.566628394 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.466503405 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.481256283 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.587806918 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.580898539 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.566523683 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.466643395 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.556881279 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.464077432 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.49428548 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.574363673 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.553731629 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.495460581 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.484773176 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.628499721 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.552058205 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.464998074 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.471892979 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.474602757 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.476469128 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.546303542 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.579638999 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.481950516 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.671587075 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.537660886 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.468665904 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.535366845 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.591344251 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.514887773 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.594660651 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.569050343 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.554885865 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.562951816 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.47168602 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.614336965 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.472304294 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.594738008 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.548209476 seconds)
  done (took 67.73713874 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.447561681 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.496901955 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.600637332 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.603470589 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.114632392 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.582623233 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.695543669 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.496762411 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.502189095 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.588613271 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.597085105 seconds)
  done (took 20.050204326 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.548459199 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.508561277 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.591468055 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.616689464 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.699360271 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.616459581 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.652664489 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.506777154 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.502439031 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.598585961 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.603205169 seconds)
  done (took 19.779637323 seconds)
done (took 108.890538011 seconds)
(6/23) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.694258686 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.390330779 seconds)
  done (took 4.407080079 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.338995815 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.335194677 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.334196973 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.335019096 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.334750842 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.342252647 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.349964532 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.338350492 seconds)
  done (took 12.03180017 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.334273355 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.334569898 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.333727863 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.333953554 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.333753253 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.333345323 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.334151246 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.334429177 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.334218839 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.334037505 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.335031765 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.335124804 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.335477616 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.333806903 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.333490386 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.333586742 seconds)
  done (took 22.670177336 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.3334504 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.334327661 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.334326892 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.334081806 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.334110963 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.33408771 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.335107872 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.33844074 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.334490321 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.334254648 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.333733316 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.33475309 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.334210702 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.334623821 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.334645682 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.333804663 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.335230961 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.334834204 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.333891349 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.334097495 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.3342715 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.333739659 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.336075066 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.33582862 seconds)
  done (took 33.353775543 seconds)
done (took 73.79792127 seconds)
(7/23) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 4.296329496 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.021879606 seconds)
  done (took 8.641248159 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.349331915 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.348566676 seconds)
  done (took 4.077588078 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.689843779 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.362687351 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.845452056 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.615179001 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.363742116 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.365455225 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.766602868 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.362777547 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.363248905 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.362699348 seconds)
  done (took 16.422319909 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.374305838 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.535180661 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.507244705 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.467259596 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.517553749 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.381420215 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.390415481 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.375212967 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.555973312 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.369588334 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.498940924 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.532901032 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.503379538 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.564981988 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.390175483 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.528263521 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.544534895 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.499904214 seconds)
  done (took 27.861684653 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.362737034 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.367384112 seconds)
  done (took 4.054134332 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.488906924 seconds)
    (2/7) benchmarking "second"...
    done (took 1.378753336 seconds)
    (3/7) benchmarking "month"...
    done (took 1.467791543 seconds)
    (4/7) benchmarking "year"...
    done (took 1.458027505 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.380619655 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.369814384 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.3781242 seconds)
  done (took 11.247278944 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.775256693 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.369541159 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.393311647 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.770129363 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.919747347 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.269332835 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.912831464 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.266343195 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.040571726 seconds)
  done (took 18.041507626 seconds)
done (took 91.669675928 seconds)
(8/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.444399961 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.329437977 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.366194874 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.388146834 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.356087811 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.756782453 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.341325876 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.675907851 seconds)
done (took 37.986359721 seconds)
(9/23) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.378093647 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 5.332983721 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 5.330567383 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.358523062 seconds)
  done (took 18.347318247 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.32557296 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.522047174 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.362560096 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 2.964902474 seconds)
  done (took 19.520113089 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.546295589 seconds)
    (2/2) benchmarking "read"...
    done (took 1.650645691 seconds)
  done (took 4.527772737 seconds)
done (took 50.098844991 seconds)
(10/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 6.323782763 seconds)
done (took 7.646742298 seconds)
(11/23) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.413005493 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.372900662 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.412082351 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.412246059 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.412537024 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.420054566 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.335014799 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.412141721 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.380385859 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.412546145 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.411718766 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.2324441 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.412616339 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.730028322 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.334787501 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 4.233216043 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.334754511 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.413078085 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.732461674 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.413218141 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.333257696 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.41227572 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.420302191 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.412247021 seconds)
  done (took 45.133528677 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.426920075 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.417261059 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.435285218 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.427414842 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.471419491 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.427611325 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.427656154 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.383639227 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.428311063 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.395975607 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.381395868 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.467538923 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.38680025 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.46781134 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.381081053 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.468228259 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.436032576 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.383559589 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.380862789 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.471326234 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.427726398 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.384473271 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.466030423 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.378438177 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.458171242 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.382129295 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.396807855 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.416887221 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.378851661 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.457977316 seconds)
  done (took 43.938015847 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.375554722 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.34655038 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.357473299 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.443384876 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.347262754 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.363249241 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.362638174 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.346723191 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.346753134 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.35907206 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.362808019 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.363116177 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.362626671 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.365080166 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.34642837 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.362692599 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.360466351 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.40249129 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.347208891 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.381829526 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.478444796 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.360382997 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.346918052 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.36024597 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.359613415 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.361490985 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.34698048 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.356842116 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.368927337 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.360867464 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.362674982 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.403866307 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.360373419 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.365148724 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.365009458 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.397913036 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.362618592 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.375558565 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.360222635 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.347111565 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.347047814 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.347050789 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.358069958 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.348023116 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.365316216 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.362719834 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.366886028 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.367647133 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.346681139 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.348732303 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.358313067 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.444585169 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.467732339 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.466109721 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.424720133 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.363661344 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.347621858 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.357990882 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.42278146 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.347407649 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.380624337 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.377069909 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.369321786 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.363877025 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.518567161 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.417618954 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.376901335 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.350206124 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.364728148 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.471566801 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.415240874 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.448816384 seconds)
  done (took 100.444541063 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.398039354 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.431820877 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.425308351 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.424972801 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.421704235 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.397126911 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.432025817 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.785001155 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.943693531 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.467373176 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.784721868 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.43305866 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.944334627 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.467399968 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.405640043 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.425336442 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.466645559 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.422317074 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.39442309 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.467654017 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.408491472 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.432029 seconds)
  done (took 34.503829764 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.378895291 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.319653611 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.382038111 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.304331063 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.318623804 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.291536574 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.383876734 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.288260588 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.383927193 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.382330632 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.382113945 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.378872293 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.255747695 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.381722426 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.381934456 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.241459292 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.384231405 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.323842723 seconds)
  done (took 33.487582074 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.534114701 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.49312495 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.428435687 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.38432641 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.568250208 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.522096898 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.437315543 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.49205414 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.387208299 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.49322801 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.490950056 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.386712827 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.521640952 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.384463479 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.386504266 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.568403241 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.428638077 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.384318289 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.449291723 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.436497551 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.534679812 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.449524925 seconds)
  done (took 33.490442637 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.387530455 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.392464631 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.429865776 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.429956775 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.382281805 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.38216243 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.402722786 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.385415999 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.278014798 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.387319828 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.384764538 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.380772248 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.25741021 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.411546998 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.453834734 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.385314043 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.392072038 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.411842241 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.387301195 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.382086664 seconds)
  done (took 31.028998508 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.419940695 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.390196145 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.387065166 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.420603779 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.390474103 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.391898744 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.419995409 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.392587874 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.395324786 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.579371596 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.389095095 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.390126125 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.419191936 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.398251334 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.389812479 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.421057134 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.419591697 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.420120671 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.390128485 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.395594186 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.585645427 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.388051438 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.420430288 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.387690527 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.39600043 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.387915309 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.389767425 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.397179495 seconds)
  done (took 40.898653275 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.41585145 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.381939022 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.384765357 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.434058685 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.434313784 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.424050022 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.434205909 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.434182571 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.38158267 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.384554322 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.420840513 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.387512743 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.381821562 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.416221095 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.376664469 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.420803979 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.925078804 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.435093176 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.424630689 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.324939451 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.421389998 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 4.928489112 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.420419312 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.382104023 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.325559017 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.429752693 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.434059329 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.433434116 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.424649849 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.385160114 seconds)
  done (took 60.534035372 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.359681058 seconds)
    (2/2) benchmarking "in"...
    done (took 1.36375976 seconds)
  done (took 4.047866291 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.377045698 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.44387872 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.380104609 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.519408074 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.536127983 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.496236906 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.48520862 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.428936855 seconds)
  done (took 12.991639375 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.368896661 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.757057667 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.414664863 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.36287784 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.360864658 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.66233203 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.915677635 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.117595947 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.102985082 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.006233373 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.156944682 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.561146547 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.519647081 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.28747926 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.377365903 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.698337041 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.468482489 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.917843498 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.383470714 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.446010863 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.701087009 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.376700311 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.50691553 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.373470876 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.464235533 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.082340835 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.103036881 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.392979067 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.395195647 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.534763364 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.641337856 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.366374141 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.372818457 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.620550552 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.447480507 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.363644277 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.600647831 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.444004723 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.518332938 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.362999286 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.866606306 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.894235248 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.249358975 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.579967161 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.436993272 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.374131289 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.361360442 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.362634407 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.151242932 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.539535255 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.516857161 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.925149416 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.377745223 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.363185631 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.903672916 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.408536101 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.42635105 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.083118463 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.655196781 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.654033018 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.396667407 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 3.769457094 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.078479484 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.494270182 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.376449442 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.268836467 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.709649941 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.815868505 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.03445774 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.453140759 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.679387179 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.479962867 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.417469539 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.364879278 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.934724642 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.564578588 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.374057448 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.367427854 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.364971409 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.368996338 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.621537741 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.521311928 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.738239015 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.386038424 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.243351183 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 3.377839853 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.462919032 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.411292996 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.024825962 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.951476676 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.151502902 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.861744623 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.071808539 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.367657768 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.352327238 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.39232628 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.380008192 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.364121978 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.751470194 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.554849455 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.479805097 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.362460336 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.390015613 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.572817948 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.368918437 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.498800597 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.097674912 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.456249872 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.826109784 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.44618306 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.368779513 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.465361012 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 3.002491518 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.162802728 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.370654815 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.517601763 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.527489794 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.597721629 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.940896506 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.236750719 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.315083028 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 3.009025363 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.282567537 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.713203114 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.371295268 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.413036829 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.940439974 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.951489392 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.278550494 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.457227677 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.94972367 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.383724528 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.362938357 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 3.082817073 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.385886117 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.37435984 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.366461443 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.413423207 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.3659871 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.370992515 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.200686498 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.728855207 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.99124394 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.415299285 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.241513229 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.36613576 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.958831004 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.702902568 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.583453144 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.380708952 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.368404848 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.968528296 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.9094126 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.068490211 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.456484011 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.36234374 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.365105867 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.701351266 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.242567213 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.44463512 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.44151745 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.82858825 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.164280262 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.368690697 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.368124572 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.431582707 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.45063163 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.373918955 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.459566085 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.145432934 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 3.055556036 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.505943123 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.29196663 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.363621091 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.367220558 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.36372723 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.361665217 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.72505847 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.538220931 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.895963144 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.585141765 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.888175332 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.389080296 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.648615106 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.439028382 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.605582983 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.098946506 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.374837254 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.438734726 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.52124222 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.36994596 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.559771185 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.036259283 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 3.14848297 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.232001302 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.166865758 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.844996534 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.154533382 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.328026152 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.38979592 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.050412192 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 3.306338742 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.487090455 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.4687319 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.364404846 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.209116988 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.056244727 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.471459871 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.431296048 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.532903985 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.361209097 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.067035017 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.461298869 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.008192516 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.449133229 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.742372822 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.304760502 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.466208085 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.748762862 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.966264091 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.406534386 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.364917675 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.941976106 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.420177092 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.377749447 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.39894618 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.531175945 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.845118456 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.524404601 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.66985978 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.952729373 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.379888229 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.027759782 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.370679711 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.224421694 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.441239698 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.373901471 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.877886485 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.84787336 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.363895708 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.362188609 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.465057619 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.912759688 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.414819938 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.365797885 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.454796127 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.801222352 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.452281057 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.365699 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.661921338 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.435859506 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.05920894 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.456110246 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.199693222 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.862163416 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 3.218073536 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.440019361 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.292707627 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.876910273 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.510340283 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.88761165 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.11118489 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 3.236804317 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.139987615 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.171789222 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.125201113 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.080516842 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.058531025 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.376707051 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.36614836 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.366079632 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 3.530314721 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.439710398 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.366501843 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.674837463 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.802030868 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.076452485 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.160913658 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.373031689 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.368803841 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.582658837 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.48295052 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.824251135 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.722292916 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.531753376 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.065603738 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.456223358 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.917885887 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.408692538 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.895351645 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.162418839 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.446852775 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.058955827 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.459732497 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.529154033 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.472501688 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.028562475 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.684273836 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.538851658 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.164069204 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.353421879 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.456164151 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.116805649 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.469439481 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.036289676 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.917778029 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.373769521 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.533593754 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 4.919260099 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.590299528 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.837090134 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.904494499 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 3.37965108 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.425987527 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.454597405 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.375997429 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.532153073 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.821151237 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.377369658 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.732617917 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.610832361 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.95225749 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 3.10567763 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.176970722 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.370463914 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.362935775 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.434501475 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.089879347 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 3.143218191 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.85245234 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.398277687 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.366107301 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.360783024 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.929103936 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.748723141 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.071868441 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.19027965 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.806574578 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.367308044 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.37305906 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.366136267 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.366055916 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.368724047 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.72921386 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.360893061 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.672370608 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.481657511 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.942115275 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.157092285 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.382862996 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.769094899 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.483593057 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.362664221 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.674353958 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.368505514 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.194306102 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.397915577 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.366020807 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.367120571 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.516982452 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.115149293 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 3.347707254 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.701625202 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.140757019 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 3.009016357 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.377746923 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.379731498 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.241668599 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.770065343 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.375529465 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.090044286 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.152956982 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.634807776 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.089074477 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.463474096 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.579062702 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.831524355 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.622636185 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.827542714 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.355318517 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.105243401 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.429963902 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.481837355 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.366965256 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.559118445 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.39224759 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.38424526 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.853818623 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.209924486 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.111694105 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 3.453445259 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.450228755 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.754837208 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.666824515 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.4709891 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.369460771 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.36957977 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.818233106 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.830777756 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.379875713 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.507040664 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.078612887 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.923849241 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.839127501 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.563500577 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 4.287561764 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.377632113 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.374156767 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.356414451 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.399963059 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.916251788 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.372253298 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.73475757 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.344321369 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.389939466 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.678920267 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.347503712 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 3.564039926 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.728802259 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.448869904 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.362981913 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.411184261 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.889391258 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.375335345 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.829771699 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.806961655 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.60686195 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 3.988544917 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 4.068365969 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.459329864 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.074550651 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.358424987 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.840427308 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.374886493 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.773172858 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.378681371 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 3.657046684 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.317965358 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.148647858 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.377260011 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.8421958 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.335051926 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.392517612 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.523728303 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.406887024 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.366057448 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.93227908 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.132508753 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 3.193710007 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.4716666 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.36344245 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.405779677 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.066069042 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.536870119 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 3.475936836 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.428570271 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.392012527 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.899293935 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.89792478 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.184174423 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.370428437 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.373579956 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.967949079 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.404735011 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.375159829 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.377863554 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.443627239 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.487013247 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.538544905 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 3.499936259 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.378445314 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.630070908 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.91621716 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.244171007 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.402841749 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.367695936 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.366883079 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.365135342 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.600022415 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.476801684 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.36704463 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.52705416 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.376763418 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.368149436 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.854633033 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.596478177 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.425214789 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.386419287 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.369843165 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.49581387 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.544789852 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.169995285 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.34483525 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.871969067 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.589878579 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.082400427 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.461098719 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.36559372 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.306330956 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.774586812 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.298141666 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.728809205 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 3.635915973 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.438998346 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.04815893 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.45227851 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.812598854 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.420899121 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.364189625 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.527390157 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.915806032 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.637478632 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.47362361 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.815515202 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.454255221 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.361207669 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 3.604540745 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.426265343 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.373227297 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.375687048 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.384041896 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.177256076 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.314480369 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 4.282359818 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.321051265 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.466537916 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.868856122 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 3.127127813 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.972707593 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.302402577 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.980336459 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 3.078178095 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.369100677 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.932838282 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.695002856 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.375078735 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.17050524 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.422785922 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.663252773 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.376574234 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.367375585 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.600820242 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.50236713 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.367611631 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.504097659 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.07525164 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 3.831753364 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.454385188 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.638100431 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.47844702 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.367462827 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.515968914 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.314378595 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.38093288 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.364553847 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.432554209 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.237176792 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.525032502 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.367215441 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.548240054 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.484863618 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.702074125 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.891811527 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.262107846 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.426462272 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.364937071 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.371916529 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.419159013 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.817952144 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.519513139 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.349282667 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.876269368 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.512553667 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.822440717 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.844243452 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.471427037 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.253993396 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.456739986 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.36763678 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.026327138 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 3.011084291 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.874010671 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 3.001263004 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 4.495823966 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.451066873 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.634752261 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.510506629 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.420160632 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 3.124423626 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.422392628 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.54096701 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.364612155 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.370506556 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.527092772 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.820388985 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.433200759 seconds)
  done (took 1290.255021547 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.595288799 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.401265134 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.387807347 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.387560141 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.448189463 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.400777282 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.388255506 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.401315884 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.403686288 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.418169936 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.388498453 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.387802134 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.42520977 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.595537689 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.451135346 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.424147926 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.387983846 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.401411775 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.388192253 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.401328755 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.427041972 seconds)
  done (took 31.238898564 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.376746105 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.395834228 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.436548609 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.44387972 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.425934276 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.377786114 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.436623796 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.381773985 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.444037842 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.395433638 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.443961745 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.377246067 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.395636261 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.396438591 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.395455867 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.398148986 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.443520774 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.4266085 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.382612338 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.436100346 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.392676456 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.43683889 seconds)
  done (took 32.368153298 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.368798677 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.366169764 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.06061058 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.458062244 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.366214528 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.445680406 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.365335705 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.358885595 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.960018951 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.886631272 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.139649586 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.859344545 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.371728 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.178928987 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.417060649 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.365152824 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.361914247 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.367530811 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.366130992 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.365286978 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.373202818 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.582007727 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.468401674 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.373000254 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.757385706 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.414152969 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.363830027 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.369193299 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.366453362 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.121283692 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.158413237 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.370911326 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.238700858 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.774131787 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.201537513 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.892160562 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.172386503 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.371240916 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.365487913 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.364631119 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.267786794 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.670282342 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.377674048 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.365878815 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.656561206 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.453786916 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.365657778 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.367739932 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.866028868 seconds)
  done (took 89.247936525 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.393548702 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.483681251 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.403550051 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.388915152 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.484484005 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.399219919 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.396619842 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.392261296 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.384451876 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.384846061 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.490031628 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.533802003 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.393951505 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.394892994 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.449167032 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.392052239 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.391492705 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.392302313 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.399209232 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.394527963 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.399385317 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.394162322 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.487271535 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.622281301 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.393005189 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.393145973 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.392263266 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.391284048 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.53048994 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.403113282 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.392079334 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.392869932 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.486749265 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.438657066 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.392184802 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.379169996 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.481444632 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.393286135 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.390223426 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.381495453 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.384304724 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.391895722 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.394192957 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.484880348 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.392648806 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.477025216 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.392167975 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.384918347 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.526967133 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.380839075 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.402204075 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.542999013 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.44045636 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.488119019 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.483960945 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.5888586 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.405043408 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.385295199 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.40468431 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.60562591 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.43456296 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.395321593 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.536925232 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.379440402 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.399417996 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.575700911 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.478928786 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.395474996 seconds)
  done (took 98.761502327 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.424421813 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.494229826 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.547044655 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.542752577 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.478088601 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.470532388 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.483603486 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.47843278 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.47457521 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.490489548 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.481634235 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.441407678 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.452487144 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.441730384 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.478842931 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.470727657 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.467775977 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.470977327 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.477658771 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.478613753 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.468191546 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.528202461 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.478427337 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.52966824 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.675039268 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.452507668 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.476101433 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.479140662 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.531255183 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.477854596 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.678780828 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.478503182 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.478148189 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.53073228 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.674371747 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.473291163 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.423694732 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.476281645 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.478378737 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.478739735 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.452499657 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.530861086 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.473177566 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.45216011 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.469326526 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.472982286 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.529756061 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.674829451 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.441327181 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.491349864 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.478269427 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.530715984 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.473625741 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.468925144 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.530110833 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.435490108 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.527655459 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.530174674 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.478920142 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.527661609 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.530270713 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.436519264 seconds)
  done (took 94.08434699 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.440272554 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.440384502 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.460618942 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.381718058 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.383102554 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.473203161 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.379095894 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.385418463 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.441602944 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.441325922 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.295388566 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.461025013 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.542603272 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.296717482 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.475032985 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.541965399 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.461057861 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.471933092 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.440954929 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.472051289 seconds)
  done (took 34.015164386 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.397437486 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.455029411 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.415758208 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.517822976 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.412534235 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.455842569 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.403180872 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.192645125 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.247498477 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.192934061 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.481869472 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.481992022 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.248037924 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.518414407 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.455896092 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.455455162 seconds)
  done (took 27.662565429 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.395526274 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.408002246 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.379952799 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.376315724 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.39618979 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.370500634 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.386887959 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.371673413 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.398550148 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.739598959 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.375037881 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.408292155 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.387098112 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.368275774 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.372473218 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.407273611 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.400033713 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.376406863 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.386537559 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.379225565 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.853713633 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.372216891 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.407648291 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.369060633 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.395580133 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.852481692 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.387508151 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.398038664 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.373713946 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.420762996 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.399174699 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.753895449 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.395020907 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.383346772 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.37385608 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.379766141 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.384887748 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.420978793 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.408346619 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.381792639 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.368640682 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.395626629 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.387259411 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.371304693 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.401351363 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.421119366 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.401123522 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.741015734 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.371829363 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.39568094 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.380032981 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.37998563 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.371000498 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.748308075 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.38585563 seconds)
  done (took 80.046713789 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.392638641 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.405653891 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.388136298 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.394435035 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.405316833 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.392640595 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.3954431 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.280458412 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.390037184 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.393808743 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.425571539 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.226555218 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.390437479 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.405204759 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.425135366 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.387262737 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.387706912 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.452333994 seconds)
  done (took 28.273914352 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.411389202 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.449767061 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.389677245 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.410434657 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.411659252 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.453211254 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.392482479 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.389967302 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.796064416 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.411086973 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.870459066 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.38961914 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.795909551 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.38973376 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.445856709 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.870568732 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.389823536 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.379377219 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.411019499 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.393141169 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.455249929 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.379750704 seconds)
  done (took 34.01658149 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.364791365 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.373434783 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.341513001 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.350355124 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.350851949 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.358267624 seconds)
  done (took 9.469673359 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.411718736 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.418106306 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.389557339 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.400282131 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.423894277 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.441884228 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.439507536 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.434042044 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.418976936 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.63206353 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.442658511 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.422910436 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.418595052 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.479677292 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.418810649 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.42331974 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.434826675 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.442342443 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.405835836 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.418451908 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.444637591 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.416028118 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.437407121 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.439045136 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.439289107 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.481372852 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.41843848 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.633070559 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.439209698 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.415749338 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.415926545 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.439540868 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.423228164 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.631686761 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.400670792 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.418780952 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.432325658 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.419388831 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.417712623 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.482241135 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.387220721 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.418678048 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.418300805 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.449157532 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.416761569 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.441415981 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.450564515 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.439318255 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.437129244 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.619916103 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.423679171 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.477324187 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.419299589 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.423699521 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.418028306 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.617853078 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.633583621 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.480654263 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.419608759 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.631862767 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.481286889 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.415735623 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.477653335 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.633888604 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.418559104 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.480871463 seconds)
  done (took 97.440310486 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.479838506 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.395750102 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.431813874 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.632553124 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.481915908 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.4418631 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.439622001 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.437319842 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.439100655 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.416166295 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.417867801 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.441931898 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.477377704 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.4807608 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.437559634 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.445792046 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.434759956 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.47840288 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.415982932 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.61763426 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.442146315 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.479885711 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.479123879 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.479057326 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.630252261 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.423751629 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.431252562 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.43885625 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.444570123 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.44384014 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.454691914 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.439933607 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.480207809 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.395404084 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.478653949 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.437061743 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.444578938 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.452784289 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.442049465 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.423969698 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.47981244 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.418834206 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.439575353 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.444292727 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.631749528 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.439847639 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.437231073 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.418795404 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.435188021 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.419266381 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.631232343 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.630558066 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.635358064 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.480006883 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.437454215 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.446316758 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.434933272 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.432046032 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.437617791 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.424327716 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.483742038 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.442992915 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.622006341 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.439626176 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.432254038 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.47734789 seconds)
  done (took 98.170615853 seconds)
done (took 2486.875849384 seconds)
(12/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.339794113 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.349088158 seconds)
  done (took 14.018658628 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.340823999 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.340028939 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.536501426 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.340103789 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.367095625 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.397863198 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.417477341 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.344655851 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.341103862 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.443472366 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.341146655 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.513995258 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.464552248 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.341522085 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.353878771 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.340948239 seconds)
  done (took 43.556170079 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 3.519949991 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.981090961 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.720704704 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.661696778 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 3.476634046 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.801665741 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.006117235 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 3.369030271 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.489748221 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.598389898 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.502248372 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 3.076576084 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 3.402217432 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 3.585558683 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.696007699 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.694515193 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.743138263 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.835722144 seconds)
  done (took 44.49170166 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.333368759 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.406654607 seconds)
  done (took 9.106109333 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.35440552 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.362661658 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.365258112 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.356204143 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.371966042 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.350798532 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.330602497 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.361716508 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.33835848 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.35402161 seconds)
  done (took 64.885089479 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 3.504186516 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.457954326 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.653002758 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.375118988 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.654751986 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.618829194 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.48478276 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.6187583 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.429457065 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 5.694068505 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 3.096790783 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.648670341 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.370278794 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.474860299 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.792264255 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.341915304 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.424355334 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.632047262 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.602809777 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.847503875 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.37165429 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 3.259406859 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.344477884 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.993717195 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.333103259 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.728633955 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.285119922 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.43421833 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.416917013 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.389656769 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 3.032435682 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.4198263 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 3.149624053 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.421987027 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.564095435 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.712685212 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.840619038 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.465049431 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.512030445 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.550230086 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.641631369 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.502938077 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.314789792 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.560400489 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.572449038 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.531296997 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.064193439 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.544653843 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.443029493 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.436592742 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.625977139 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.456330105 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.445885352 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.43986692 seconds)
  done (took 134.85790235 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.331661934 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.564074521 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.472177738 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.334534502 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.586839259 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.543385022 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.051146511 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.732201449 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.350926579 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.521442836 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.473153584 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.448629478 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.336915364 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.333169248 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.331158683 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.330733195 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.510631989 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.735204737 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.341291578 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.331968658 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.550656002 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.54465894 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.46327987 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.334563967 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.48686068 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.581954901 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.683745267 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.450100114 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.822771339 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.330299248 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.73125943 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.340553066 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.334585976 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.094238269 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.621659633 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.631983649 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.682360441 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.334835978 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.33179183 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.331849311 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.974456516 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.530266046 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.63763606 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.483315109 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.478706407 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.563511406 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.907909404 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.332235111 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.04208313 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.495803953 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.507935163 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.529961381 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.532251852 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.339311385 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.171975481 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.334621283 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.331872435 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.592649751 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.473556872 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.442267961 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.334976061 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.333191389 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.332488946 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.573302034 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.334078714 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.432966683 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.334632386 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.333692849 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.436319252 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.446274465 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.475635632 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.56873686 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.612357417 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.015312693 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.323438623 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.554979952 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.721004466 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.562293776 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.337203651 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.186166153 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.678672471 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.917742972 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.468908588 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.571096774 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.54595781 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.587842882 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.929518518 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.332226234 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.529025464 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.516068912 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.540404124 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.476721488 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.648108538 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.372648592 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.330517055 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.330515585 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 2.981747413 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.47782227 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.333637284 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.642193286 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.613582867 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.881416593 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.501140842 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.620089057 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.411392587 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.284098417 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.907360765 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.330795166 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.534696295 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.6048344 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.339114563 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.331907286 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.501444856 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.146158808 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.332545647 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 4.679847677 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.712670009 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.34209755 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.504486875 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.335315594 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.565888915 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.334712761 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.565203966 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 4.985472966 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.601888031 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.505602204 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.477525462 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 5.971610444 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.591730985 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.606864894 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.608555225 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.549977618 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.417022785 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.334757934 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.629246208 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.334760799 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.331851274 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.485626554 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.333714568 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.505815278 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.334277654 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.575500284 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.456650222 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.662923338 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.338131158 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.555156732 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.573124798 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.698688612 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.343928233 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.447249292 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.334080993 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.147474686 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.492235453 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.332649814 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.332153629 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.573146088 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.332870481 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.467157199 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.565423501 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.022717607 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.717061935 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.726483906 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.332835981 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.696181006 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.529562527 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.625519262 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.922710493 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.471781738 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.702621603 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.156826459 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.331250836 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.568032902 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.506077739 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.333475671 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.330030616 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.100604653 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.767386268 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.332615795 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.475003793 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 4.692073665 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.318705993 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.537306551 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.344747517 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.650369918 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.340760305 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.091686029 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.63498476 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.33307732 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.332834476 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.332887968 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.333931383 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.335927076 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.533310487 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.586445373 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.803923911 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.459807126 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.618912919 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.638490648 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.549572415 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.674592397 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.342696483 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.560281481 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.335245705 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.729348281 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.340246801 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.541475489 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.571160684 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.335580572 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.540169964 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.579238038 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.226645182 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.734138945 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.345408595 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.334281032 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.739849116 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.482922321 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.694713819 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.335886782 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.331140228 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.593389875 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.464280117 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.484049097 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.152306394 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.432744625 seconds)
  done (took 770.083150253 seconds)
done (took 1082.328669715 seconds)
(13/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 6.339462574 seconds)
  (2/4) benchmarking "arrays"...
  done (took 6.379307619 seconds)
  (3/4) benchmarking "structs"...
  done (took 6.432587226 seconds)
  (4/4) benchmarking "grow_array"...
  done (took 6.333434707 seconds)
done (took 26.816957275 seconds)
(14/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.332110968 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.332560237 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.332418464 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.331024719 seconds)
  done (took 26.66036527 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.99807858 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.867381944 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.543656247 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.632017826 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.110851006 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.533391096 seconds)
  done (took 12.015435242 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 5.27401711 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.330510094 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.3307052 seconds)
  done (took 19.26584413 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.72639833 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.734555954 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.46684956 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.416475993 seconds)
  done (took 7.674262783 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.377349033 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.377360394 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.372310261 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.381605243 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.376328024 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.372591059 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 6.332280395 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.400081821 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.379556655 seconds)
  done (took 18.704929212 seconds)
  (6/6) benchmarking "26942"...
  done (took 3.515247735 seconds)
done (took 89.169620394 seconds)
(15/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.703115978 seconds)
    (2/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.526589817 seconds)
    (3/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.331602945 seconds)
    (4/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.51767432 seconds)
    (5/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.469071225 seconds)
    (6/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 2.00058242 seconds)
    (7/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.527814029 seconds)
    (8/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.430941774 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 1.4266195 seconds)
    (10/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 6.332809046 seconds)
    (11/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.390958572 seconds)
    (12/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.54102585 seconds)
    (13/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.575457767 seconds)
    (14/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.630973781 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.203929378 seconds)
    (16/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 2.101223199 seconds)
    (17/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.493399957 seconds)
    (18/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 1.994255162 seconds)
    (19/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.585070334 seconds)
    (20/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.54619853 seconds)
    (21/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.360850887 seconds)
    (22/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.352978561 seconds)
    (23/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.396063692 seconds)
    (24/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.675288869 seconds)
    (25/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.48335631 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 2.012520727 seconds)
    (27/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 1.547306328 seconds)
    (28/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.427236851 seconds)
    (29/434) benchmarking ("sort", "Float32", 0)...
    done (took 2.05415113 seconds)
    (30/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.356616196 seconds)
    (31/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.02896751 seconds)
    (32/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.409874373 seconds)
    (33/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.469552617 seconds)
    (34/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.335539734 seconds)
    (35/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 4.497880064 seconds)
    (36/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.417743951 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.434516322 seconds)
    (38/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.621442143 seconds)
    (39/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.304059553 seconds)
    (40/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.568612212 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 2.111977922 seconds)
    (42/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.43619154 seconds)
    (43/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 2.175293345 seconds)
    (44/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.047658378 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.572842132 seconds)
    (46/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 5.540906645 seconds)
    (47/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 2.008404999 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 6.338036962 seconds)
    (49/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.42136295 seconds)
    (50/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.647275722 seconds)
    (51/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.642349531 seconds)
    (52/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.431807628 seconds)
    (53/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 1.42656287 seconds)
    (54/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.331886405 seconds)
    (55/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.370470275 seconds)
    (56/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.565071177 seconds)
    (57/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.343935261 seconds)
    (58/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 1.981207627 seconds)
    (59/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.373923545 seconds)
    (60/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.505579428 seconds)
    (61/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.454358248 seconds)
    (62/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.556131248 seconds)
    (63/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.345406715 seconds)
    (64/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.64269312 seconds)
    (65/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.399539523 seconds)
    (66/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.41580572 seconds)
    (67/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 5.312674078 seconds)
    (68/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 6.336984864 seconds)
    (69/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 3.316914725 seconds)
    (70/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 1.689323078 seconds)
    (71/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.331035483 seconds)
    (72/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.367736817 seconds)
    (73/434) benchmarking ("perf_countequals", "Int8")...
    done (took 1.434619418 seconds)
    (74/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.354013907 seconds)
    (75/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 5.520976415 seconds)
    (76/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 1.709327599 seconds)
    (77/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.359873957 seconds)
    (78/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 2.49741426 seconds)
    (79/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 1.993449563 seconds)
    (80/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 6.339201805 seconds)
    (81/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.837868301 seconds)
    (82/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.565305919 seconds)
    (83/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.417860706 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.750138387 seconds)
    (85/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 1.473715937 seconds)
    (86/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.359472744 seconds)
    (87/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.353414674 seconds)
    (88/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.367063479 seconds)
    (89/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.872749123 seconds)
    (90/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.396883742 seconds)
    (91/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.332840673 seconds)
    (92/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 4.581449657 seconds)
    (93/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.605098265 seconds)
    (94/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 1.422940615 seconds)
    (95/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.133017334 seconds)
    (96/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.339195828 seconds)
    (97/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 1.469171473 seconds)
    (98/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 6.333115092 seconds)
    (99/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 2.649285079 seconds)
    (100/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.436288353 seconds)
    (101/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 2.00441526 seconds)
    (102/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.338825233 seconds)
    (103/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.454359118 seconds)
    (104/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.544327642 seconds)
    (105/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.42440372 seconds)
    (106/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.43480743 seconds)
    (107/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 2.262119621 seconds)
    (108/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 2.005193993 seconds)
    (109/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 2.124817347 seconds)
    (110/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.602803968 seconds)
    (111/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 2.16208162 seconds)
    (112/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.628434612 seconds)
    (113/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.727163415 seconds)
    (114/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.3333508 seconds)
    (115/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 8.702632168 seconds)
    (116/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.38127083 seconds)
    (117/434) benchmarking ("sort", "BigInt", 0)...
    done (took 9.377874208 seconds)
    (118/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.335019858 seconds)
    (119/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.343645697 seconds)
    (120/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.032837621 seconds)
    (121/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 1.738833313 seconds)
    (122/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.668618487 seconds)
    (123/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.44896025 seconds)
    (124/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.775518327 seconds)
    (125/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.36128339 seconds)
    (126/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.354670739 seconds)
    (127/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.553948012 seconds)
    (128/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.647003584 seconds)
    (129/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.967456252 seconds)
    (130/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.363890248 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.474539549 seconds)
    (132/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.334889727 seconds)
    (133/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 2.025828295 seconds)
    (134/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.429039114 seconds)
    (135/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.334688713 seconds)
    (136/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 9.333221187 seconds)
    (137/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.584440324 seconds)
    (138/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.337986244 seconds)
    (139/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 1.994592055 seconds)
    (140/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.462114443 seconds)
    (141/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 6.334176148 seconds)
    (142/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.594262034 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 1.982039162 seconds)
    (144/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 1.997915615 seconds)
    (145/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.34006692 seconds)
    (146/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 1.98411682 seconds)
    (147/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.531401128 seconds)
    (148/434) benchmarking ("perf_countequals", "Float32")...
    done (took 1.435168356 seconds)
    (149/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 1.991527475 seconds)
    (150/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.098641934 seconds)
    (151/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 2.398514244 seconds)
    (152/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.337441905 seconds)
    (153/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.383200376 seconds)
    (154/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.34923107 seconds)
    (155/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.424863823 seconds)
    (156/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.328633232 seconds)
    (157/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.576477741 seconds)
    (158/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.539643674 seconds)
    (159/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.469078907 seconds)
    (160/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 1.664456267 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.334726553 seconds)
    (162/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.51790034 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 2.113572298 seconds)
    (164/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.340302377 seconds)
    (165/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.68507129 seconds)
    (166/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.361456273 seconds)
    (167/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.475353507 seconds)
    (168/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.669035444 seconds)
    (169/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.33704363 seconds)
    (170/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.464423413 seconds)
    (171/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.458923742 seconds)
    (172/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.458800155 seconds)
    (173/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.424823888 seconds)
    (174/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.5434295 seconds)
    (175/434) benchmarking ("perf_countequals", "Int64")...
    done (took 1.448796719 seconds)
    (176/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.497908804 seconds)
    (177/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.332989345 seconds)
    (178/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.557337573 seconds)
    (179/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 4.062677597 seconds)
    (180/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.532911554 seconds)
    (181/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.525723039 seconds)
    (182/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.359094943 seconds)
    (183/434) benchmarking ("perf_countequals", "Bool")...
    done (took 1.435639824 seconds)
    (184/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.417376035 seconds)
    (185/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.357399707 seconds)
    (186/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.07767434 seconds)
    (187/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.576900584 seconds)
    (188/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.625042664 seconds)
    (189/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 1.472093176 seconds)
    (190/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.791911262 seconds)
    (191/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.523812696 seconds)
    (192/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 1.985107286 seconds)
    (193/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 2.104094625 seconds)
    (194/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.482136388 seconds)
    (195/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.659789395 seconds)
    (196/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.613569369 seconds)
    (197/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.991949465 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 1.988610725 seconds)
    (199/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.946112149 seconds)
    (200/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.428016047 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 2.103974736 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 1.696945184 seconds)
    (203/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.458082878 seconds)
    (204/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.346535747 seconds)
    (205/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.396410815 seconds)
    (206/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 2.003676305 seconds)
    (207/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.339680255 seconds)
    (208/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.332931806 seconds)
    (209/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.392149739 seconds)
    (210/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.405996052 seconds)
    (211/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 2.265108447 seconds)
    (212/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 2.148852935 seconds)
    (213/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.738857122 seconds)
    (214/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 2.004240951 seconds)
    (215/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.969714529 seconds)
    (216/434) benchmarking ("sort", "Int64", 0)...
    done (took 3.900220668 seconds)
    (217/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.607171028 seconds)
    (218/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.431483156 seconds)
    (219/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 1.697674968 seconds)
    (220/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.664979648 seconds)
    (221/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.340395288 seconds)
    (222/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.678793537 seconds)
    (223/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 2.145869628 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 2.011336624 seconds)
    (225/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 1.480503987 seconds)
    (226/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.617253994 seconds)
    (227/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.144532616 seconds)
    (228/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.360057107 seconds)
    (229/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.332950974 seconds)
    (230/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.373936495 seconds)
    (231/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 2.136746812 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.891783308 seconds)
    (233/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 2.00801179 seconds)
    (234/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.361955171 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.522257426 seconds)
    (236/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 2.099523679 seconds)
    (237/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.564116313 seconds)
    (238/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.499838585 seconds)
    (239/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.591033836 seconds)
    (240/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.246176128 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.366790417 seconds)
    (242/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.535640992 seconds)
    (243/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.5361512 seconds)
    (244/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 2.347926232 seconds)
    (245/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.61936275 seconds)
    (246/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.541730017 seconds)
    (247/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.751893504 seconds)
    (248/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.400111485 seconds)
    (249/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.265668759 seconds)
    (250/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.095526411 seconds)
    (251/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 2.431576858 seconds)
    (252/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.610721184 seconds)
    (253/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.358820962 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 1.507809584 seconds)
    (255/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 2.122618771 seconds)
    (256/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 2.019698114 seconds)
    (257/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.62890581 seconds)
    (258/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.545615936 seconds)
    (259/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.178934571 seconds)
    (260/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.478353273 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.365579729 seconds)
    (262/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.540503533 seconds)
    (263/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 4.314509574 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 2.111509781 seconds)
    (265/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 6.339405608 seconds)
    (266/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.69953677 seconds)
    (267/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.551113214 seconds)
    (268/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 2.097720154 seconds)
    (269/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.360287122 seconds)
    (270/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 6.332966909 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 2.518876019 seconds)
    (272/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.338056062 seconds)
    (273/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 3.996036446 seconds)
    (274/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 1.74692601 seconds)
    (275/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.445960279 seconds)
    (276/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.511777429 seconds)
    (277/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.426359188 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.131167386 seconds)
    (279/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.279400576 seconds)
    (280/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 1.996267655 seconds)
    (281/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.358432771 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.52009725 seconds)
    (283/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 1.46830347 seconds)
    (284/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 2.104658222 seconds)
    (285/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.362791866 seconds)
    (286/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 1.993832938 seconds)
    (287/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.20317483 seconds)
    (288/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.478622523 seconds)
    (289/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.359703426 seconds)
    (290/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 2.090057522 seconds)
    (291/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.48928487 seconds)
    (292/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.475591841 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.484813603 seconds)
    (294/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.521088444 seconds)
    (295/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.590092833 seconds)
    (296/434) benchmarking ("perf_countequals", "Float64")...
    done (took 1.463217263 seconds)
    (297/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 6.333398202 seconds)
    (298/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.466714497 seconds)
    (299/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.33366441 seconds)
    (300/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 4.047234064 seconds)
    (301/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.359155143 seconds)
    (302/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.353730443 seconds)
    (303/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.466292622 seconds)
    (304/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 1.997339206 seconds)
    (305/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.500902071 seconds)
    (306/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.533236367 seconds)
    (307/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.143901043 seconds)
    (308/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.373859356 seconds)
    (309/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.333234507 seconds)
    (310/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.363605933 seconds)
    (311/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.697344855 seconds)
    (312/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.66866877 seconds)
    (313/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.336258376 seconds)
    (314/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 1.862571963 seconds)
    (315/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.358959398 seconds)
    (316/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.333998111 seconds)
    (317/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.61856564 seconds)
    (318/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.583629252 seconds)
    (319/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.453784649 seconds)
    (320/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.426290379 seconds)
    (321/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 1.343336931 seconds)
    (322/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 1.992030889 seconds)
    (323/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.373523518 seconds)
    (324/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.666030849 seconds)
    (325/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.484279876 seconds)
    (326/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 2.601484002 seconds)
    (327/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.335637906 seconds)
    (328/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.737935829 seconds)
    (329/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 2.462176888 seconds)
    (330/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.490865531 seconds)
    (331/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.522360923 seconds)
    (332/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.749303627 seconds)
    (333/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.504187478 seconds)
    (334/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 1.596156205 seconds)
    (335/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 6.338008799 seconds)
    (336/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.101424953 seconds)
    (337/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 6.340731079 seconds)
    (338/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 2.065599606 seconds)
    (339/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.989071854 seconds)
    (340/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.579436142 seconds)
    (341/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.424017723 seconds)
    (342/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.464850577 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.480358003 seconds)
    (344/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 6.33279001 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 3.387217225 seconds)
    (346/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 2.000599891 seconds)
    (347/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 2.165508676 seconds)
    (348/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.604323772 seconds)
    (349/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.358051457 seconds)
    (350/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.651979603 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.446406834 seconds)
    (352/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 1.989615952 seconds)
    (353/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 6.339709558 seconds)
    (354/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.540649255 seconds)
    (355/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 1.996927829 seconds)
    (356/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.46766981 seconds)
    (357/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.433432697 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.33719656 seconds)
    (359/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.368411792 seconds)
    (360/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.496901398 seconds)
    (361/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.408119582 seconds)
    (362/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.626643724 seconds)
    (363/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.360353257 seconds)
    (364/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.573838192 seconds)
    (365/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 5.926512092 seconds)
    (366/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 4.174817654 seconds)
    (367/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.358999073 seconds)
    (368/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.417526573 seconds)
    (369/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 1.447923605 seconds)
    (370/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.57127474 seconds)
    (371/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.436488949 seconds)
    (372/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.572539734 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.338948655 seconds)
    (374/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.363465657 seconds)
    (375/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.504010701 seconds)
    (376/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.371132036 seconds)
    (377/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 1.99558494 seconds)
    (378/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 1.359581093 seconds)
    (379/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 2.412532269 seconds)
    (380/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.468357331 seconds)
    (381/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 6.341012192 seconds)
    (382/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 6.516013584 seconds)
    (383/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.255883458 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 2.129870174 seconds)
    (385/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.494812498 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 2.202765974 seconds)
    (387/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.15368718 seconds)
    (388/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 1.989909376 seconds)
    (389/434) benchmarking ("sort", "Bool", 0)...
    done (took 1.370045764 seconds)
    (390/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.635371358 seconds)
    (391/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 1.433787 seconds)
    (392/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.424257436 seconds)
    (393/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.415307834 seconds)
    (394/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.629160008 seconds)
    (395/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 6.338461752 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 2.487522209 seconds)
    (397/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.648122685 seconds)
    (398/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 2.523916376 seconds)
    (399/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 2.12238642 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 1.497589362 seconds)
    (401/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 3.760890992 seconds)
    (402/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 2.608572324 seconds)
    (403/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.33351581 seconds)
    (404/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.5877492 seconds)
    (405/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.359083065 seconds)
    (406/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 6.333999337 seconds)
    (407/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.358463356 seconds)
    (408/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.42453448 seconds)
    (409/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 1.500297561 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 1.355509306 seconds)
    (411/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.421731523 seconds)
    (412/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.335187297 seconds)
    (413/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 3.149736987 seconds)
    (414/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 1.359808257 seconds)
    (415/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.457628911 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.628845516 seconds)
    (417/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.12729691 seconds)
    (418/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.037730043 seconds)
    (419/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 5.837789905 seconds)
    (420/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 4.144120714 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 1.445691072 seconds)
    (422/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.439947561 seconds)
    (423/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.533449539 seconds)
    (424/434) benchmarking ("sort", "Float64", 0)...
    done (took 3.474796568 seconds)
    (425/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.350841423 seconds)
    (426/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 1.995804087 seconds)
    (427/434) benchmarking ("sort", "Int8", 0)...
    done (took 1.424846323 seconds)
    (428/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.204438068 seconds)
    (429/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.424095874 seconds)
    (430/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.358490559 seconds)
    (431/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.533977286 seconds)
    (432/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 3.945209037 seconds)
    (433/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.687423158 seconds)
    (434/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 1.448092744 seconds)
  done (took 1086.849011549 seconds)
done (took 1088.204677293 seconds)
(16/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 1.359407873 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 1.349584658 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 1.376914876 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.354151821 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 1.348713328 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 1.363441967 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 1.387154305 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 1.392757117 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.371077789 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 1.363093692 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 1.406048503 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 1.364053675 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.364451443 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 1.457550371 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 1.351804988 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 1.370957371 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.352825746 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 1.361364079 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 1.389038215 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 1.36862296 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 1.366630937 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 1.357718568 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 1.384735714 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 1.369246163 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.356965822 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 1.358133767 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 1.372435294 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 1.372333577 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 1.420484572 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 1.381125431 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 1.360665629 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 1.348614374 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 1.369663938 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.375515782 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 1.384880494 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 1.411561839 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 1.38083581 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 1.347140843 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 1.365338408 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 1.373412865 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 1.421888261 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.364674789 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 1.347625058 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.387675611 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 1.369500313 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.353205173 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 1.399650542 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.355209289 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 1.367425649 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 1.351967019 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 1.361001861 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 1.407254222 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 1.352560339 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 1.468654006 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 1.364716983 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.359730118 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 1.382571708 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 1.36199148 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 1.372126613 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 1.362374887 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 1.360398899 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 1.373709169 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 1.386401247 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 1.35984622 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.353098413 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 1.391350349 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 1.381681662 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 1.381066887 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 1.388167554 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 1.373981214 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 1.366240503 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.355267346 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 1.427216359 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 1.362665417 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.352246508 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 1.362359909 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 1.395767338 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 1.362386423 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 1.395348867 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 1.370903019 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.3546112 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 1.356879018 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 1.373170511 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 1.447956369 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 1.361017633 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.363401589 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 1.352826635 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 1.365105499 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 1.369266413 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 1.347129842 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.359153433 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 1.370287531 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 1.390908811 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.34772792 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.354053618 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 1.362480833 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 1.382818675 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 1.409226285 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 1.392436749 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 1.402871059 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 1.36806962 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.365571472 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.368509267 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 1.377337382 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 1.384838837 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 1.385914183 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 1.391695792 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 1.349564725 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 1.362817953 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 1.367886745 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 1.34794305 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 1.401315033 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 1.383828923 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 1.365951644 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 1.371070282 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 1.421804229 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 1.394039546 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 1.355568183 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 1.362755485 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 1.378964045 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.357268745 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 1.395117771 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.358914027 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 1.38708917 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 1.359507079 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 1.360233606 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.353637678 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 1.347072008 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 1.508656833 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 1.395921663 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 1.379319546 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 1.416534037 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.365004701 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 1.371819417 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.388030092 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 1.361108697 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.360187681 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 1.476763024 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 1.416267602 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.357793517 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 1.367822076 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 1.372341178 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.373560074 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 1.373129615 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 1.350190386 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 1.368838283 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.359582873 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.353520469 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 1.365594976 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 1.390822531 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 1.382527714 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.35456598 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 1.36744535 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 1.360441342 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 1.359533475 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 1.366048754 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.369797385 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.355742089 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 1.357774074 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.360269515 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 1.399210754 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 1.387024674 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 1.371323767 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 1.376460518 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 1.371746491 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 1.374388468 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 1.384762551 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 1.372130022 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.353281611 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 1.466153426 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 1.400440394 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 1.37629678 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 1.360385761 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.352181872 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 1.375671191 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.362889301 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 1.348063006 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 1.371935746 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 1.538571062 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.357953137 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 1.357433562 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 1.363896766 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.360134297 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 1.364221953 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 1.369520577 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 1.366370364 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 1.427156328 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 1.36114998 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 1.362598045 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 1.415200941 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 1.364306479 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 1.35395101 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 1.362228516 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 1.357368965 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.470455525 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 1.367253415 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.356496625 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 1.360676927 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 1.374683284 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 1.366902552 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 1.36216772 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 1.376327089 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 1.45126321 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 1.366765568 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 1.356690928 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 1.407184217 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 1.371482125 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.353625084 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 1.411640101 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 1.362504281 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 1.381240726 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 1.369411384 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 1.364080364 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 1.362808432 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 1.392163684 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.361821245 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.364185176 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.364919659 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 1.418484032 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 1.367223631 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 1.358095363 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 1.377943564 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 1.380610213 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 1.360624381 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 1.359894119 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.35841081 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 1.353115755 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.351410164 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 1.387139942 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 1.361706054 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 1.383980596 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 1.471827846 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 1.375201449 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 1.377744697 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.365725751 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 1.372098183 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.383216512 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 1.398939919 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 1.356987244 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 1.369906506 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 1.392945617 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.372860987 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 1.345591456 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.351850234 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 1.378062403 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 1.388154315 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 1.378790481 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.356119777 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 1.36651171 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.350933009 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 1.361857794 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 1.428486029 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 1.357710663 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 1.364104117 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.471842818 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 1.35576661 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 1.374563752 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 1.388638622 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 1.397786163 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 1.358882126 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 1.367525217 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.352419068 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 1.37227744 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 1.367297007 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 1.368699597 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 1.352396773 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 1.378732025 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.352481689 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 1.374071778 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.363320203 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 1.379102456 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.353493993 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 1.363097262 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 1.367238842 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 1.368660417 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 1.357842008 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 1.356701738 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.349100225 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 1.363329194 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 1.344648699 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 1.350143588 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 1.368305982 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 1.378759753 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 1.365719101 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 1.378251745 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 1.366977848 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 1.465745701 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 1.363122262 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.362335679 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 1.411467617 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.359027407 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 1.379491475 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 1.360307066 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.35855228 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 1.376276079 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 1.367318313 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.366964438 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 1.384803452 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 1.366677215 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 1.402391791 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 1.415748621 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.362279612 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 1.34791779 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 1.368294763 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 1.39663286 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.366165186 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 1.356597999 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.371891286 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 1.394648574 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 1.38628361 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 1.366353924 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 1.419547419 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 1.368840471 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 1.353657044 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 1.536433772 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.358310346 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 1.370357121 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 1.373535464 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.360339596 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 1.373392667 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 1.363417522 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 1.368933534 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 1.381279238 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 1.511165172 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 1.414757357 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 1.386389027 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 1.371905054 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 1.386468544 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 1.361496333 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.355448642 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 1.403993719 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.386595648 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.366132257 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.35452796 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 1.357233341 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.371719168 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 1.357779694 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.362449704 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 1.385399206 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 1.368989811 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 1.36565317 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 1.37009856 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.352631999 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 1.34887694 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 1.356687132 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 1.412665315 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.365032361 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 1.36320965 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 1.364593642 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 1.36825268 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 1.365378732 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 1.370229046 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 1.385990471 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 1.375985938 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.357375405 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 1.58089236 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 1.371441352 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.368706981 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 1.378204253 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 1.345096197 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.356890181 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.352195037 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 1.40650578 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 1.39280801 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 1.371406936 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 1.365362563 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 1.364581566 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 1.367468891 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 1.363807373 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 1.348055807 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 1.363355422 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 1.418690246 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.351492216 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.357736004 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 1.37434749 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 1.37167204 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 1.372471977 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 1.363094082 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 1.348906312 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.368278529 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.364047419 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.356769929 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 1.403052919 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 1.360396179 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 1.372125529 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 1.50913071 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 1.371793063 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 1.364121944 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.359977297 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.357594973 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 1.360635758 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 1.367417967 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 1.389879238 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.352803793 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.362425059 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 1.358517972 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 1.368423653 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 1.376652596 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 1.371404521 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 1.369082826 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.360843371 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 1.349106277 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.360548443 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.357018829 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 1.39325935 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.360692631 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 1.366872813 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 1.380818563 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 1.354942285 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 1.360249896 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 1.387224029 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.470641621 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 1.363619894 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 1.408123221 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.472171431 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 1.466411072 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 1.374982142 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 1.35783246 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 1.363652344 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 1.401996175 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 1.367763685 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.354287422 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 1.361931876 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.357312201 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 1.366386347 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 1.379376616 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.37755481 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.361666271 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 1.363258825 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.374575024 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 1.351167351 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.384342255 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 1.36959485 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 1.535759369 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 1.38205618 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 1.356417198 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.368982882 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 1.407266795 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 1.402499664 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.383198229 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 1.389232841 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 1.357701237 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.389337064 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.374234647 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 1.429400735 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 1.368041295 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 1.348246333 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.364435396 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.365017368 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 1.396299719 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 1.382294135 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.352624174 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 1.359177252 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 1.351652358 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 1.366994832 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 1.382957041 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 1.369168677 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 1.402351208 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 1.365770494 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 1.381127294 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.360430296 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 1.372986609 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 1.369545185 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 1.364147996 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 1.382889645 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.357059637 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.353394545 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 1.372470074 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 1.571802193 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 1.373574679 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.360270793 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.354590267 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 1.375385545 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 1.368578373 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 1.40022853 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 1.377917382 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.353291852 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.367047688 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 1.361172756 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 1.38249337 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 1.36936828 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 1.381861311 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.351701583 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 1.38024812 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.352246109 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 1.370045041 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 1.466393962 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 1.377321205 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.358131437 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.369151001 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.356513049 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 1.378059784 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.370156969 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 1.366162483 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.374581402 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 1.403120975 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 1.399154617 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 1.35820466 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 1.570756065 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 1.364904794 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.358671659 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 1.34807367 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 1.366865348 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 1.367337 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.363757757 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 1.360224187 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 1.375787267 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 1.36280573 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.368523561 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.352665857 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 1.374440448 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 1.369458097 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 1.36207384 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.365410939 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 1.392885865 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 1.356825801 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.35943957 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 1.580129941 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 1.385141289 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 1.393038827 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 1.362376548 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.369479126 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.36919634 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.354986769 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 1.391950172 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.361632216 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 1.373222165 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 1.353081102 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 1.352203086 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 1.394784408 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 1.374900842 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 1.378054473 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.357410997 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 1.413871863 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.353446814 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 1.367398267 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 1.403307248 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 1.354805796 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.372110987 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 1.367593017 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 1.431528899 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 1.437740547 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 1.401146644 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.37049661 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 1.41175125 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 1.369717821 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 1.351616399 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.363505109 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 1.370656229 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 1.385945136 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.368223313 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.369219256 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.367804245 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 1.370174236 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 1.367344361 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 1.37276993 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 1.381481232 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.357084775 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 1.420153905 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 1.510448399 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.371898506 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 1.361835231 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 1.365501938 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.358840768 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.353166301 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 1.452870636 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 1.390356933 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 1.404445109 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 1.368243275 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 1.37010792 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 1.439940517 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 1.575082645 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 1.485514815 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.44250634 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 1.379708246 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.357126942 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 1.414126662 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 1.440113133 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 1.429019072 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.408679214 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 1.382400446 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 1.371589162 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 1.366149577 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 1.376404206 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 1.368508267 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 1.379175746 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 1.398235239 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 1.443688494 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.363706354 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 1.40095583 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.361160267 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 1.42921396 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 1.372238516 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 1.412050773 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.38304418 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 1.363444455 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 1.46907445 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.368769886 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 1.367148742 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 1.376732367 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 1.35040121 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 1.375286965 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 1.381351797 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 1.368029574 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.355586411 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.362037046 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 1.363800106 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 1.346682655 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 1.362198155 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 1.363061009 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.38753401 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 1.369162632 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 1.347963897 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 1.371805903 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 1.402764759 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 1.37467459 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 1.370926463 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 1.406628455 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 1.369178772 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.351915911 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.376107724 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 1.376390644 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 1.367819715 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 1.349289305 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 1.377053376 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 1.363338613 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 1.366997758 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 1.386333456 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 1.399003897 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 1.356062445 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.372994302 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 1.351467231 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 1.36463425 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.362471624 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 1.380798519 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 1.362208381 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 1.370512793 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 1.373816378 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.353847449 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.368627028 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 1.365078663 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 1.387158661 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 1.373468445 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.366919075 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 1.372824896 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 1.370163959 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.37891246 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 1.357692124 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 1.387266573 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 1.370248494 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 1.371072 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.360732307 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.354516771 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 1.366036076 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.371397853 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.365600774 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 1.356257117 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 1.364479129 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 1.357704032 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 1.400278563 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 1.364044725 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 1.400201006 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 1.387467259 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 1.35857838 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.362120942 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 1.369848181 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 1.538423856 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 1.38493097 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 1.359959702 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 1.363649487 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 1.36213982 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 1.372101799 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 1.365590905 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.359027019 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 1.382082073 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.370134223 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 1.367954667 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 1.430474961 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 1.38828319 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 1.37360202 seconds)
done (took 938.179667887 seconds)
(17/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.728699949 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 6.339651819 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.68084933 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.533764252 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.71811766 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.610050725 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.43078204 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.785684181 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.410346402 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.785153033 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.512462582 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 6.33692638 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 6.338042184 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.529923877 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.752380471 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.573247555 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.411369836 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.547757101 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.799946192 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.763845326 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 6.337610848 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.511561132 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.560712551 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.656269353 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.338039079 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 6.338218311 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.636707919 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.471241875 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.608503056 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 6.337223448 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 6.337882088 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.541989564 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.643419263 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 6.338222902 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 6.337561807 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 6.346817133 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.612768658 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 6.341229362 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.612231172 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.728922066 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.596616121 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.337889131 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 6.337948963 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 6.341564348 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.450836369 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.592211523 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.430680378 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 6.338582797 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.338196621 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 6.338269245 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.61260271 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 6.337312511 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 6.338115553 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.585427412 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.530975479 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 6.337855024 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.703166554 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.707153177 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.764870858 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.64418607 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.61156487 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.779428832 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.671786094 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.543420806 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 6.337658662 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.628715352 seconds)
  done (took 211.801289175 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.669041248 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.613908754 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.699141458 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.241189277 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.688381861 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.701467934 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.296211508 seconds)
  done (took 14.245767607 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.277017784 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.401032064 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.640367944 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.639497983 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.406278323 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.50555011 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.468964341 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 6.338421719 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.560281032 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.430925101 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.674537669 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.637448745 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 6.33957725 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 6.338704458 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.480574872 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.68239397 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.285350653 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.416028318 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.39380911 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.673876044 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 6.339174269 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 6.339637253 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.514900576 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.397158967 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.41183545 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.438433511 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.403719752 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.246074917 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.395201792 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.388307123 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.410731089 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.402898445 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.403186413 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 6.339597263 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.380642846 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.684394125 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.404023008 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.405355328 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.525065288 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.344672358 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.390743807 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.401283133 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.521695001 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.411455899 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.385178156 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.558638294 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.387885719 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.411148871 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.389672947 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.40080599 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.538669127 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.40536457 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.382899311 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 6.338697968 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.588617127 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 6.339239662 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.41571681 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.405401215 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.402551357 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.456942229 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.398337389 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.671473155 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.634211484 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.385422671 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.643238954 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.699219786 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.400294572 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.38702624 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.388685468 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.668730772 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.40438689 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.635449612 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.407410287 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.444172066 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.403044752 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.506254398 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.559733301 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.113592392 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.088545781 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 6.339392672 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.579674207 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.385825923 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.592835632 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.232216822 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 6.339086201 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.387149844 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.4063924 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.803629401 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.231907294 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.39753979 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.643858689 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.386653696 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.458808231 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.447976793 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.381798344 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.395081403 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.532379021 seconds)
  done (took 206.421358948 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.477945608 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.120744562 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.513444336 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 1.908642421 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 1.933715857 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.500815822 seconds)
  done (took 14.793434925 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.721039983 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.994962223 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.413229877 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.414984514 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.445320926 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.381412215 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.380640234 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.466296035 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.252461638 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.405859539 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.380683104 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.405202515 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.386795673 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.513241592 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.381659526 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.405349477 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.38277968 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.427497252 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.408353677 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.460111191 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.219921896 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.443412967 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.461089291 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.925388411 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.163803312 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.406593595 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.955096352 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.402948463 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.407248556 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.431174155 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.570547613 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.381344103 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.933035817 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.133097912 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.951766897 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.942062334 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.26459243 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.406290856 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.414572105 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.381964714 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.405010828 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.461341478 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.422798685 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.408219898 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.609059729 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.618765943 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.191638307 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.62681248 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.383822007 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.406379694 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.406045227 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.432164157 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.386341785 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.405548281 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.923241657 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.722890891 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.118925909 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.381522577 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.445561746 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.914963081 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.209012464 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.380491611 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.66919315 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.090067749 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 6.336901746 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.404720423 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.946351991 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.265477418 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.4610047 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.420846765 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.407209479 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.423037868 seconds)
  done (took 130.270500196 seconds)
done (took 578.869119577 seconds)
(18/23) benchmarking "inference"...
  (1/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 31.370961356 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 31.913344939 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 32.544426262 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 32.483718984 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 31.951374724 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 32.669216865 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 32.254580651 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 31.996821629 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 31.782447624 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 32.324307571 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 32.316489016 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 32.536356126 seconds)
  done (took 387.480645414 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 32.857731275 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 31.367868796 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 32.505956405 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 31.946427389 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 31.849872049 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 31.506084493 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 32.599524931 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 32.613949012 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 31.457296466 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 32.626895474 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 31.338743485 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 31.43179452 seconds)
  done (took 385.443748259 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 32.104671851 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 31.483853585 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 31.818358489 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 32.432001503 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 31.444691939 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 31.701277977 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 31.464114084 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 31.824854377 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 32.072879389 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 32.034233856 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 31.475183067 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 32.504296859 seconds)
  done (took 383.698357308 seconds)
done (took 1157.959604262 seconds)
(19/23) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.544646982 seconds)
  done (took 7.884017813 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.427276281 seconds)
  done (took 7.796619145 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.33826326 seconds)
  done (took 7.676480413 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.348105911 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.36526409 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.34264217 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.339525637 seconds)
  done (took 26.732034405 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.5647419 seconds)
  done (took 7.902152146 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.262205319 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.339519685 seconds)
  done (took 13.985385576 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.414543341 seconds)
  done (took 7.752328751 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.561035835 seconds)
  done (took 7.900122941 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.34710199 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.34452907 seconds)
  done (took 14.049732067 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.33722132 seconds)
  done (took 7.674245911 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.464032678 seconds)
  done (took 8.875658283 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.349172577 seconds)
  done (took 7.70767275 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.382448302 seconds)
  done (took 7.719259947 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.338935188 seconds)
  done (took 7.675650013 seconds)
done (took 142.686260909 seconds)
(20/23) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.33703995 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.338171107 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.336625872 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.336716617 seconds)
  done (took 26.685362489 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.635315209 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.632612631 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.604315755 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.608892343 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.579655299 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.58227617 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.633369851 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.635607287 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.579027813 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.605979046 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.631961045 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.606379552 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.606537153 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.604536781 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.604257048 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.605212036 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.606342364 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.631860243 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.578477772 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.604903913 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.605821696 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.607993276 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.005764731 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.993356601 seconds)
  done (took 40.72715854 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.559580006 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.609364994 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.531686716 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.548850067 seconds)
  done (took 7.587074739 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.375493869 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.606925321 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.656275016 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.663554185 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.569660272 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.427960317 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.656459463 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.490052346 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.468359627 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.469135569 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.921032091 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.47701043 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.499873758 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.663174792 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.424867777 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.373158892 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.375301343 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.454659046 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.605319875 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.500385653 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.543652971 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.658170032 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.569900415 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.656360828 seconds)
  done (took 38.445097719 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.128229856 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 1.903737267 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.231963659 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.301039091 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.549556742 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.506954144 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.197091191 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.183577661 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.486890626 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.224008766 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.052942808 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.215342205 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.852016381 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.256740395 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.126088883 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.42516548 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.424856981 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.20567884 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.195031068 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 1.755554201 seconds)
  done (took 42.56061244 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.338440873 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 1.694526388 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.62550706 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.617769059 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.338801631 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 5.349389441 seconds)
  done (took 24.302146272 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.346926892 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.4407747 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.540384491 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.520015236 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.449563076 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.435839867 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.570376043 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.485002374 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.854192488 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.589854757 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.370950322 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.636877039 seconds)
  done (took 22.577347425 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.339968922 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.33805807 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.337511377 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.447640018 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.014878859 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.95132671 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.212453921 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.337982821 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.213887642 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.485250119 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.948978495 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.458757797 seconds)
  done (took 41.425823394 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.565612995 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.579780688 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.542491469 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.910335954 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.625419293 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.306558559 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.317289845 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 3.924288028 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 2.368075157 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.550410103 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.797294075 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.303640173 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.281771595 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.27968409 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.279194431 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.602240174 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.711127953 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.157302471 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.549324894 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.363217109 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.236993807 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.414562508 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.347094913 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.733079805 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.516583394 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.340143888 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.566401791 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.501860518 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.322704577 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.578985066 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.660526587 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.661890758 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.555834265 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.609013805 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.632064503 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.363906957 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.636747126 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 4.965196141 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.532428364 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.584576247 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.439876937 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.453086094 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.290689517 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.04570336 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.604940045 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.054793132 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.341571409 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.360218346 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.301208578 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.87793303 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.330940192 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.468030746 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.603560557 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.499300502 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.447242826 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.599159627 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.131436519 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.664898755 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.521612056 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 2.808077929 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.450019923 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.412804794 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.567021605 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.279104639 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.031887528 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.485716595 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.611358294 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.217049207 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 2.779822949 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.594733677 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.651713668 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.897230512 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.333954494 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.383210728 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.794385838 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.641750902 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.608846731 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.33984149 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.578193225 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.301696428 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.280782596 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.369189067 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.97623429 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.236493103 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.465189168 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.133445394 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.337983014 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.277927148 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.348690776 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 2.844671728 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.676741724 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.381524217 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.413760372 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.519497204 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.249336986 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.301365647 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.861289909 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.615957637 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.27943105 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.897809897 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.664854749 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.299969844 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.646168833 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.77170155 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.612965547 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.992727176 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.760839756 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.352312708 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.598966635 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.953449719 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.133933082 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.43475415 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.655456533 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.618562852 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.338728389 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.841844123 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.686923346 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.839565683 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.240133406 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.338123841 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.279020781 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.64154884 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.555431505 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.660869522 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.512575642 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.339813378 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.133693853 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.33939763 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.256418133 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.343565805 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.503902534 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.628574932 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.088571763 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.486557932 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.291950505 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.130150213 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.611681572 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 5.191665748 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.499000152 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.555001236 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.269527695 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.871123528 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.923045215 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.114596732 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.588656122 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.577642722 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.599195268 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.903506886 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.402575325 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.349234425 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.859112267 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.480470757 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.345452569 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.777849316 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 5.187238566 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.992438237 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.527918881 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.623815226 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.280359289 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.451470006 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.656464047 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.570563009 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.987465783 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.358710783 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.13706364 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.585153955 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.581248526 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 2.106823515 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.280519895 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.572339423 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.582479435 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.602878308 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.518350109 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.984089176 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.597185004 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.672930455 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.56730989 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.659462244 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.889202553 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.86882426 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.540350777 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 4.996701966 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 3.287097403 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.921958975 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.847489441 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.711694001 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.494525338 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.807014706 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 4.977740069 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.752023446 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.365849288 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.311514774 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.279037933 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.089420166 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.674989082 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 3.294292938 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.631473608 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.450251401 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.480650799 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.709120159 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.382842563 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.314999013 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.389090371 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.843887627 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.632956909 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.624026352 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.302939227 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.72790081 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.160074303 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.684054907 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.418757565 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 2.98892519 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.490949931 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.465236104 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.33963904 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.593657585 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.024047043 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.890468097 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.720487107 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.184770404 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.988152718 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.110689016 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.267633646 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.338932245 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.568569539 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.812185641 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 2.831852521 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.810077227 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.738043441 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.571351826 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.622471412 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.342188888 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.346287676 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 2.781447931 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.219403274 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.917605663 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.636110911 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.285031411 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.72515097 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.408197607 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.354269965 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.452805624 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.386415511 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.240147354 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.657033518 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.138283821 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.556768262 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.870229316 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.895882708 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 4.414347812 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.589057029 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.479339042 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.590840762 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.308903389 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.652292193 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 1.763117702 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.361600576 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.3127147 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.596434956 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.351100338 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.090810242 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.014967763 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.279859246 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.578565849 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.55557744 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.602837393 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.61471065 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.591196391 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.279598331 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.127413699 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.409618288 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.599018382 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.33909431 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.608578929 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.896982058 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.982626214 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.775614283 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.615530347 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.966564616 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.421567425 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.60048945 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.474251476 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.561413242 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 1.749875757 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.820908921 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.28996322 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.446579251 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.280114095 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.36774371 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.789219123 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.56912047 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.588708852 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.324962502 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.635795019 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.62376418 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.849457127 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.391614047 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.616128926 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.885853225 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.564878612 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.581069391 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.720132904 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.674824058 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.340712983 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 4.968716186 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.095009931 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.48558111 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.130232005 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.258197106 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.523501848 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.701237873 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.858990025 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.549666773 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.45069073 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.627596881 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.428561181 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.843263956 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.659304081 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.573263681 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.226513119 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.586916419 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.559114639 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.735578757 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.722623811 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.758976451 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.477676248 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.567803103 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.125421135 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.974495611 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.385271571 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.613807145 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.325663305 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.566680236 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.539709895 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.383903513 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.73701246 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.302330294 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.447102224 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.333033432 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.318719483 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.753926936 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.890479885 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.173653226 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.863067959 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.193683116 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.378246991 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.449101708 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 2.988764651 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.817730061 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.977152726 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.08023036 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.056158153 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.939177775 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.724060685 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 2.834233655 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.447850606 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.133760496 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.591311604 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.568647117 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.439393552 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.296413999 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.852247907 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.563811917 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.915259446 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.450871897 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.55639391 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.894289667 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.756831888 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.53223924 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.659771252 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.760161941 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.590674955 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.46624567 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.281613766 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.339181919 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.567508511 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.644911469 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.350415858 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.595603429 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.612951172 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 5.313608995 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.667137657 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.671406285 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.065358783 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.710324653 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.297147641 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.536193319 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.684562909 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.584462096 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.925754449 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.76849958 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.568971838 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.617184297 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.609191986 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.115674992 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.05145052 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.600422213 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.124046464 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.282004255 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.561562227 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.341367243 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 5.202625857 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.06884367 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.601324499 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 2.84165331 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.541719811 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.581182828 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.638564241 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.363393699 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.564023222 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.536624574 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.566582384 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.320371522 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.852597186 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.599650095 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.443115221 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.301324835 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.350036898 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.281256779 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.571313734 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.673525459 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.135728048 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.201294392 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.875257475 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.701791365 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.702310758 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.678210627 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.150185735 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.281400673 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.371377453 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 3.46750411 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.989877347 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.775888067 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.501925218 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.514214354 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.557273078 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.281726228 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.559634723 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.113417443 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.550055231 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.90361049 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.592327829 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.652610054 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.568183477 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.50917196 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.315393966 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.292299175 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.610789263 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.282460744 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.680536332 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.332950254 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.749613612 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.646137989 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.340901955 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.785595049 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.628124095 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.927669738 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.448806073 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.751511092 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.767485393 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.541389929 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.895364831 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.454805895 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.190661871 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.211018967 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.681426862 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.651699904 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.327783312 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.301353257 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.571473507 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.570082177 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.371135381 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.673422294 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.959126529 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.135589567 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.340348087 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.220708454 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.287028832 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.983305304 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 2.408491551 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.822226405 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.282786143 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.594377522 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.947206338 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.558534883 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.56800937 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.380154122 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.65213254 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.471082057 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.614536456 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.339439939 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.699349782 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.637991717 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.340802263 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.596509827 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.363985626 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.132127105 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.281875985 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.318593409 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.342602368 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.367720445 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.562998942 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.916728568 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.568738722 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.441264172 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.342470435 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.26835349 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 3.283558517 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.315306947 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.795292023 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.306897813 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.344201931 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.639817369 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.856618359 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.439373035 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.344769147 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.415141965 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.342805616 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.569580612 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 6.34132494 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.505093457 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 2.781629631 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.558352758 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.34499601 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.851869857 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.731766862 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.719163263 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.466832632 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.650373985 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.564382247 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.495518355 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.66234999 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.29980475 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.582266029 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.057491341 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.497003886 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.607679263 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.38582184 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.568401581 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.673147824 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.624151535 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.494674433 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.628349683 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.182154501 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.747631591 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.404181972 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.347143719 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.196187242 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.590236863 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.880970151 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.339940639 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.220719982 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.963810577 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.405341007 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.937583065 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.454145697 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.920891536 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.465735451 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.105783567 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.612662498 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 3.36546557 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.34402957 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.539209383 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.509334738 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.278954477 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.401643172 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.269408679 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.568686891 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.662872728 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.28255895 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.557872193 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.293771458 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 3.282683388 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.319513271 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.974997543 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.626304099 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.280509419 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.769033639 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.280456263 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.862573967 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.815924194 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.612602792 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.317621776 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.305520378 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.133021617 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.340305398 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 3.320093528 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.661474087 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.488958087 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.4811903 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.610454252 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.967779948 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.564786949 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.524189242 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.373200353 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.480684427 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.558814462 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.436037174 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.894653802 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.858639585 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.714854449 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.368059207 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.4661862 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.197040063 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.504446652 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.395593551 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.418013878 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.519555939 seconds)
  done (took 1769.878280986 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.339651393 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.347585705 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.347399482 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.355577406 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.347112953 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.475564432 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.352408386 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.368397224 seconds)
  done (took 52.27275672 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 5.81341781 seconds)
    (2/17) benchmarking "4467"...
    done (took 1.668126905 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 3.416825589 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.36155037 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.341492985 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 3.071826793 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.462639527 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 3.313475596 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.366335726 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 3.074196095 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.419006357 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 3.463387515 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.434753399 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.349187728 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 3.332425586 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.443051881 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.345040976 seconds)
  done (took 76.018435281 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.384177564 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 7.788234358 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.347165644 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 6.886338486 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.360647789 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.443887642 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.34679238 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.342406832 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.664781284 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 6.638901864 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.37349926 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.380686493 seconds)
  done (took 80.298471681 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.386225035 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.387391052 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.391140067 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.387426065 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.385501869 seconds)
  done (took 8.279402994 seconds)
done (took 2232.401729886 seconds)
(21/23) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.605556108 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.612059683 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.781203835 seconds)
  done (took 4.734352112 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.495773795 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.545407939 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.684750535 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.591807094 seconds)
  done (took 7.675865836 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.626331879 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.710332447 seconds)
  done (took 4.676641358 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.588159208 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.352918723 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.686798194 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.343485146 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.341197493 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.340573808 seconds)
  done (took 20.371582337 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.382951947 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.38283138 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.384695701 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.377838935 seconds)
  done (took 6.867231208 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 3.6277005 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 1.958748889 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.347539181 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 6.350099575 seconds)
  done (took 19.625072746 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.51624838 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.427858873 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.103521399 seconds)
  done (took 6.408732542 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.976757098 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.405776131 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.952147843 seconds)
  done (took 6.67476298 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.458320843 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.173637606 seconds)
  done (took 5.972107123 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.511117581 seconds)
  done (took 2.851484367 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.191611663 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.663290867 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.750384187 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.851976848 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 1.950255819 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.454700391 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.636441487 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.572018686 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.702082495 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.742248174 seconds)
  done (took 18.857782916 seconds)
done (took 117.290717084 seconds)
(22/23) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.312650158 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.838361432 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.399653733 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.557876212 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.472534968 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.400770584 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.671232434 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.722993693 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 1.974132166 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 1.974988482 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.558405826 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.474615417 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.670416121 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.839281414 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.670217881 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.840708042 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.473904637 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.311978684 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.04273228 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.040384077 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.672883408 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 1.972945517 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.580236521 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 1.974287829 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.477545716 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.404022285 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.328499984 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.839773323 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.019636654 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.325502128 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.404854998 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.017934919 seconds)
  done (took 146.60681519 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 5.182528273 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.34286698 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.342142628 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.342429842 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 4.342958185 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.343431185 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.341132991 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.342060973 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.245821595 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.261536898 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.341970485 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 4.307630596 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.343308926 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.342620435 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.344556591 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.343288716 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 4.338812511 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 5.183342584 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.341841867 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.341814428 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.340707645 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.204437954 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.341630283 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.198457171 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 4.34105435 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.342913102 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 5.262634652 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.342820919 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.342400251 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 5.260754258 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.343387383 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.340922002 seconds)
  done (took 183.320156009 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.34252105 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.342662381 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.343536259 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.342310828 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.3422219 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.343258454 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.346492242 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.347779139 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.959529148 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.956572388 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.342087646 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.341722121 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.342096063 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.343053518 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.345096834 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.343668481 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.342289064 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.343139179 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.343597918 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.342600602 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.346276158 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.964938816 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.341918748 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.963746932 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.342627241 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.345058036 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.345737458 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.343530262 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.343706341 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.342901376 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.342559202 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.342354282 seconds)
  done (took 202.803637804 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.587087708 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.388855983 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 1.552880297 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.000245079 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 1.574836352 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.382598185 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.999120567 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.586699827 seconds)
  done (took 14.414036298 seconds)
done (took 548.497770714 seconds)
(23/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.650718592 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 1.997936995 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.49789442 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.558354769 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.609711603 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.558138186 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.56097466 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.698862119 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.977440328 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.695195382 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.73071303 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.530742911 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.98849602 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.531596183 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.504551551 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.747390721 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.690403581 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.905124426 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.514119815 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.979949414 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.518767157 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.071242941 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.698465943 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.986606869 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.776729418 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.071217234 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.352645137 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.698609607 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.539512507 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.524143427 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.2283533 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.564016957 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.483007459 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.513610852 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.737344523 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.709771741 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.603005997 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.486900881 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.48980481 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.903035848 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.984120007 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.868165293 seconds)
  done (took 81.079828641 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.384710113 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.430900234 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.457287512 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.451263277 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.910648734 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.455047836 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.508920965 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.504113261 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.444841736 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.492190326 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.520416321 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.925980541 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.518290265 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.902160744 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.506084625 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.522816278 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.452480308 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.869506892 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.50658069 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.493653381 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.416429136 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.455847143 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.419510152 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.485900534 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.409941078 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.425672408 seconds)
  done (took 41.235042104 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.429768506 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.524848287 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.618789939 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.590871579 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.56420897 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.304024266 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.553888208 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.50192551 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.8900131 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.422778481 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.466349119 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.504395755 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.47734332 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.634210729 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 3.599808708 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.467499392 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.561099274 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.525732244 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.534234654 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.812832123 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.869281923 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.462515139 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.556505818 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.636904254 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.942982021 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.642219429 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.415622676 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.782759065 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 3.600010019 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.518570756 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.507833515 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.524658631 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.671173255 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.626250377 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.508417956 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.417808016 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.401777176 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.470022608 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.167881092 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.533213155 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.550360479 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.493344046 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.75765026 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.002705608 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.320738634 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.547770882 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.696397159 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.472285681 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.495059892 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.904548016 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.632930503 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.414968177 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.501676599 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.555448521 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.492379499 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.526746856 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.533237249 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.732836529 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.44389045 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.763431427 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.452409749 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.66679226 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.547472723 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.332543551 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.663743335 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.562124311 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.662027438 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.611023521 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.757889348 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 3.643060676 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.03812384 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.465827473 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.416238672 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.465233288 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.533420248 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.726263006 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.788542874 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.652093865 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.671751361 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.529775352 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.424135991 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.812491681 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.739767616 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.424453696 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.465214689 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.401805348 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.457982625 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.617523676 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.525213231 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.927479201 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.058574815 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.742624427 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.674580472 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.667845684 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.617516432 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.857699538 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.392543625 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.405037532 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.616385166 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.029661168 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.470230009 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.633038194 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.063510444 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.847447526 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.528775565 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.292887864 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.648840006 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.335416711 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.730792036 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.382219765 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.641469568 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.00871015 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.076310457 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.551949085 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.385140368 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.001663988 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.47909198 seconds)
  done (took 232.547379559 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.341895667 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.343917318 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.344096824 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.342898408 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.342149231 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.986462177 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.375349663 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.342850886 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.717746873 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.376332979 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.342403352 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.343728091 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.342406985 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.346421561 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 5.748943973 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.767609554 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.992695893 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.34295121 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.343221083 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.344076786 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.057406502 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.460865953 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.432915866 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.348525585 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.344467368 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.342349581 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.344205283 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.362078005 seconds)
  done (took 160.465830468 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.417407679 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.729758977 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.418181687 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.484043511 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.469001206 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.417516093 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.890062525 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.516539463 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.4584362 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.426406954 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.385196352 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.641705198 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.585954793 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.791468263 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.480138467 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.436945371 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.923159777 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.567742049 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.427685831 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.419635769 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.570645679 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.698887705 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.630973435 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.650713466 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.552238293 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.671977598 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.480327869 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.421000886 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.54708739 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.586132902 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.391646334 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.749377642 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.581819315 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.407763248 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.764408213 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.663332438 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.647228787 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.704219381 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.568864645 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.382289803 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.379394553 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.517381059 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.667469698 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.459538943 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.405116177 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.920394254 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.388377371 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.7187634 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.717797883 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.377110859 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.480505746 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.481601528 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.565265683 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.118081684 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.602180979 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.637818823 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.702816801 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.345476974 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.438865689 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.688602829 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.386937278 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.585868019 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.752166388 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.467963191 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.415750757 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.200734581 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.49153896 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.780239754 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.899649721 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.407129305 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.694904803 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.613459291 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.388866227 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.654337869 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.579801538 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.889169464 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.633814404 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.494974534 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.49079832 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.466568675 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.651331738 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.394944064 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.870609951 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.506838135 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.384562151 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.674936816 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.687568922 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.384694146 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.419243288 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.537278897 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.554196426 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.478075782 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.634504829 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.487453124 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.184625171 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.606788514 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.693780396 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.427895131 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.419767489 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.379361005 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.960923562 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.594403686 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.39352205 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.605649443 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.848493366 seconds)
  done (took 176.592466216 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.9525657 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.422221278 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.609925475 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.898400884 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.664755223 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.47348421 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.544970775 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.430974316 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.628318915 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.56189288 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.548465547 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.487363608 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.432191359 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.010364077 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.422682595 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.584954477 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.474749637 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.895136818 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.628953691 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.518268979 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.628751798 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.052861973 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.660538352 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.748509341 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.741646057 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.711175899 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.932182492 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.52948145 seconds)
  done (took 53.541126946 seconds)
done (took 746.804104236 seconds)
SAVING RESULT...
DONE!
