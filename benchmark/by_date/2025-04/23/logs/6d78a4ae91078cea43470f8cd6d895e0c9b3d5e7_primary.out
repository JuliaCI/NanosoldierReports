cset: moving following pidspec: 29844
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "shootout"... done (took 2.551723735 seconds)
loading group "string"... done (took 0.284799997 seconds)
loading group "linalg"... done (took 3.329995888 seconds)
loading group "parallel"... done (took 0.019308027 seconds)
loading group "find"... done (took 1.14185961 seconds)
loading group "tuple"... done (took 0.679257835 seconds)
loading group "dates"... done (took 0.146290838 seconds)
loading group "micro"... done (took 0.073699357 seconds)
loading group "io"... done (took 1.312170525 seconds)
loading group "frontend"... done (took 0.022378145 seconds)
loading group "scalar"... done (took 1.075904362 seconds)
loading group "sparse"... done (took 0.400924708 seconds)
loading group "alloc"... done (took 0.01571227 seconds)
loading group "broadcast"... done (took 0.308752617 seconds)
loading group "union"... done (took 2.983524141 seconds)
loading group "simd"... done (took 0.998166162 seconds)
loading group "random"... done (took 2.155727008 seconds)
loading group "inference"... done (took 2.470724547 seconds)
loading group "problem"... done (took 1.055433736 seconds)
loading group "array"... done (took 2.317301979 seconds)
loading group "misc"... done (took 0.383181562 seconds)
loading group "sort"... done (took 0.257045298 seconds)
loading group "collection"... done (took 5.602610939 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/23) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.617471636 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.125953505 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.095498493 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.078221783 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.115641891 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.089928571 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.072452283 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.049837781 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.861962479 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.064736075 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.12281341 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.455453553 seconds)
done (took 5.526172557 seconds)
(2/23) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.294971124 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.023190661 seconds)
    (2/2) benchmarking "String"...
    done (took 0.023480931 seconds)
  done (took 0.726880878 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.023076452 seconds)
    (2/3) benchmarking "different length"...
    done (took 7.281e-6 seconds)
    (3/3) benchmarking "different"...
    done (took 4.0e-6 seconds)
  done (took 0.701168583 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.021378278 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.145211632 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.2397e-5 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.000954833 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.00090286 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.00020479 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.944e-6 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 3.325e-6 seconds)
  done (took 0.826535402 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.037909235 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.025597107 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.021778625 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.022022039 seconds)
  done (took 0.785794493 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.021505491 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.040839779 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.0693e-5 seconds)
    (4/4) benchmarking "different"...
    done (took 4.129e-6 seconds)
  done (took 0.741454205 seconds)
done (took 4.781916789 seconds)
(3/23) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.044221421 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 1.33382316 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 1.25009612 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.190379681 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.259607787 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.499376091 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.127005068 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.21146294 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.039389786 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.011825036 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.06807078 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.040472803 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.182445763 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.37098785 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.004627707 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.248412559 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 1.24913764 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.056810762 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.128971568 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.597132472 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.000582218 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.032861116 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.031883275 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 3.3646e-5 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.415160897 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.166135378 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 1.277345849 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.002476405 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.913e-5 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.049886247 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.003683595 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.008288072 seconds)
  done (took 13.632748954 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.040069789 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.038183997 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.025771078 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.120569521 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.04898737 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.024184936 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.028964839 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.025649631 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.041936716 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.107636083 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.041804159 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.047036492 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.026209104 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.023059446 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.025208117 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.249113893 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.040935646 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.041583514 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.024604621 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.03856703 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.108532124 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.03634408 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.027296752 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.026469472 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.144613725 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.228265781 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.089691321 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.087562948 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.024236908 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.026469063 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.121795206 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.120122376 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.028865356 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.022570702 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.100626637 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.08078697 seconds)
  done (took 3.027810357 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.629442547 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.22891916 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.123933409 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.102683675 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.121862686 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.119101446 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.052781552 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.08970354 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.121287978 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.000125331 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.148095215 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.229581664 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.063737813 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 4.406224997 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.049201538 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.177862808 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.266174354 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 3.787160702 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 4.8303e-5 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.5012e-5 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.03447884 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001270786 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.0628006 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.211426297 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.144758543 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.224688484 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.073400783 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.080603278 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.091874544 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.045952734 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.020580819 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.118659314 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.098780243 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.00136901 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.347296141 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.001785209 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.000139301 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.06594606 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.031659496 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 4.3082e-5 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 4.8557e-5 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.099353446 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.020400686 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.126472465 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.076522782 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.177319856 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.049453776 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.089825501 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 3.071738573 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 9.7982e-5 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.6439e-5 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.069354353 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.020695859 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.026408709 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.101499396 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.6606e-5 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.048723211 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.397979077 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.03447603 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.1041e-5 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.9843e-5 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.113402146 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 6.556e-5 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.000102274 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.000732074 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.053679988 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.703261653 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.007853481 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.054249709 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.1147e-5 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.8734e-5 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.3248e-5 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.546424125 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.000729539 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.118969558 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020666138 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001763058 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021580394 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.0018e-5 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.061658218 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.051443764 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.057162587 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070104457 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 7.742e-5 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.8265e-5 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 1.205250766 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 3.851422403 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.8221e-5 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.000652383 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.23412583 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.1733e-5 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021000918 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.000164283 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.050695187 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 3.7243e-5 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.205e-5 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068206239 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.025672963 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.020954178 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.327738636 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.004376434 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.7203e-5 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.023300146 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.0052688 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.062894577 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.108587271 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.4369e-5 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.001170816 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.7274e-5 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.020301392 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 8.5207e-5 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.6517e-5 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.0718e-5 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.000115938 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.1068e-5 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.047e-5 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.6217e-5 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000739311 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.6811e-5 seconds)
  done (took 27.944506468 seconds)
done (took 45.91443287 seconds)
(4/23) benchmarking "parallel"...
done (took 0.800922311 seconds)
(5/23) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.093004712 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.049416792 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019684099 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083283355 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.4731e-5 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.082879551 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.091404989 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.087388919 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.0735e-5 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.2124e-5 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.8104e-5 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.089045627 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.087937972 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.239e-5 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084007865 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.088809279 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.8689e-5 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.9363e-5 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.2574e-5 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 9.194e-6 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.0596e-5 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.8066e-5 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 8.002e-6 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.094e-5 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08409559 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.015e-5 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.4305e-5 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084967843 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.891e-5 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.083448224 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 3.5715e-5 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.3671e-5 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.3485e-5 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084370688 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 3.0356e-5 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08190753 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.1565e-5 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.8337e-5 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.1521e-5 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.6758e-5 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.2241e-5 seconds)
  done (took 2.059454217 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.02840764 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.04102335 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.051842504 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.5205e-5 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.031445967 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.04099523 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.019e-5 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.040800336 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.052918995 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.041200686 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.041496294 seconds)
  done (took 1.122380935 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.038921309 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039804176 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.054797395 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.4315e-5 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029104831 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.040883927 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.3573e-5 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.041529751 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.057043383 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.041410852 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.041162468 seconds)
  done (took 1.132986548 seconds)
done (took 5.056450907 seconds)
(6/23) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.045069309 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.021481923 seconds)
  done (took 0.811506188 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.363423854 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.133530397 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.028750466 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.082606503 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.022759476 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.038835627 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.816324727 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.038930562 seconds)
  done (took 4.320084658 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.073078017 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.022755885 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.022967426 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.020879648 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.021051653 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.020904649 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.021735178 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.021196383 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.020430412 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.02215377 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.022079867 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.020517536 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022754398 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.021763166 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.020642634 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.020866141 seconds)
  done (took 1.208247083 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.0231219 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.02396938 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.021522896 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.020361605 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.023599645 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.022602151 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.023973024 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.028072826 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.023123963 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.022499814 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.021729307 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.021943333 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.022988279 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.02218047 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.022259387 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.020189981 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.026242753 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.021783833 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.021609742 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.023244981 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.022642691 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.021912256 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.026632072 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.023265388 seconds)
  done (took 1.308334617 seconds)
done (took 8.402220562 seconds)
(7/23) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.16597347 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.019568181 seconds)
  done (took 0.936486569 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.035302497 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.030481301 seconds)
  done (took 0.823756099 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.035044717 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.020483936 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.036688885 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.030970652 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.020971335 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.020610612 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.035012167 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.021739448 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.021267161 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.021619575 seconds)
  done (took 1.021695416 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.021950799 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022260758 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.022105152 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.020613903 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.02301717 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.021744118 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.022511856 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.02158261 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.027092078 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.021082026 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.024671425 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.030230115 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.020834717 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.031387334 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.023231905 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.022062349 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.026489785 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.020885954 seconds)
  done (took 1.178860929 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.019905368 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.020731532 seconds)
  done (took 0.799580258 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.019369811 seconds)
    (2/7) benchmarking "second"...
    done (took 0.020946415 seconds)
    (3/7) benchmarking "month"...
    done (took 0.019015693 seconds)
    (4/7) benchmarking "year"...
    done (took 0.019111661 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.02132173 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.020451803 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.021961214 seconds)
  done (took 0.899435387 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.511501398 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.202817038 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.287878512 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.022322473 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.026670694 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.208486094 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.022146342 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.026423618 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.026506439 seconds)
  done (took 2.092269961 seconds)
done (took 8.507327206 seconds)
(8/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.037803018 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.140550513 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.038931695 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.80127767 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.060756914 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.024393254 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.130194977 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.094637166 seconds)
done (took 2.095315586 seconds)
(9/23) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.245675708 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.889479563 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.896519355 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.738652664 seconds)
  done (took 4.297358971 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.893508317 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.138721548 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.034389271 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.022900247 seconds)
  done (took 1.886589718 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.023802722 seconds)
    (2/2) benchmarking "read"...
    done (took 0.032478514 seconds)
  done (took 0.833626914 seconds)
done (took 8.037855113 seconds)
(10/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.022874992 seconds)
done (took 0.796678316 seconds)
(11/23) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.019158591 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.116e-5 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.019376433 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.7981e-5 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 7.263e-6 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 5.928e-6 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 5.812e-6 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 5.667e-6 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 5.964e-6 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 5.246e-6 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.0806e-5 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.286e-6 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.177e-6 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.468e-6 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 5.163e-6 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.511e-6 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 5.113e-6 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 4.637e-6 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.388e-6 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 4.963e-6 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 5.375e-6 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.187e-6 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 5.247e-6 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 5.067e-6 seconds)
  done (took 0.807888752 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.019193818 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.019139788 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.4059e-5 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 6.476e-6 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 4.5796e-5 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 6.482e-6 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 5.931e-6 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.2614e-5 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 6.141e-6 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 6.059e-6 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 9.849e-6 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 5.639e-6 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 6.098e-6 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 5.432e-6 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.042e-6 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 6.226e-6 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 5.39e-6 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.673e-6 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.497e-6 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 5.548e-6 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 5.731e-6 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.205e-6 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 6.101e-6 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.642e-6 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 5.413e-6 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.733e-6 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 6.2e-6 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 5.543e-6 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 6.717e-6 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 5.723e-6 seconds)
  done (took 0.812583636 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.020412096 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015972861 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.019267151 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.02484956 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.016552242 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.020095598 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.019790236 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015983618 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.016634622 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.02034088 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.020890859 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.019535107 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.020689056 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.020371069 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.016374084 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.020279551 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.020093282 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.022700142 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.016212072 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.016072211 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.021133951 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.019918032 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.0162679 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.020268432 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.021269605 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.019980296 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.016326546 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.019798243 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.019752515 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.019461218 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.019839353 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.021202417 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.019940569 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.021381309 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.021603686 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.021027155 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.021576606 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.020667549 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.020009393 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.016031411 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.016193432 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.01607026 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.01954345 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.016252319 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.020594145 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.019688831 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.019852599 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.020114496 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.016011756 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.016159554 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.01604697 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.020649882 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020324331 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.020568586 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.016350446 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.019819184 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.016041251 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.020055997 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.019805032 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.016018359 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.015929469 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.020604267 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.020535089 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.019908892 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.029789404 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.020336344 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.020592284 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.016051348 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.020103209 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.023397115 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.021228075 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.024029736 seconds)
  done (took 2.175163166 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.018993163 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.021191543 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.0502e-5 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.1746e-5 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.864e-6 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.046e-5 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 6.503e-6 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.222e-6 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.35e-6 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 6.153e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.0424e-5 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 5.817e-6 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.825e-6 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.955e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.198e-6 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.791e-6 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.556e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.208e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 6.089e-6 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 5.559e-6 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.386e-6 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 5.744e-6 seconds)
  done (took 0.818569325 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.019042625 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.017887336 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.019334733 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.01768669 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.01772633 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 7.9916e-5 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.5547e-5 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.017716697 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.6161e-5 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.1687e-5 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.2323e-5 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 7.249e-6 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 7.6745e-5 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.76e-6 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.255e-6 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 5.3782e-5 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 8.456e-6 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 5.1317e-5 seconds)
  done (took 0.885369076 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.01948254 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.0169e-5 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.018697035 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.6732e-5 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 7.583e-6 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 6.894e-6 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.599e-6 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 6.498e-6 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 6.562e-6 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 6.017e-6 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 9.725e-6 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.879e-6 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 5.744e-6 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.735e-6 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.836e-6 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 5.759e-6 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 5.583e-6 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.708e-6 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.887e-6 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.39e-6 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 5.741e-6 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.739e-6 seconds)
  done (took 0.815354491 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.018977479 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.0529e-5 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.019127029 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.0463e-5 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 7.05e-6 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.0538e-5 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 5.673e-6 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.0457e-5 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.017721071 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.8352e-5 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.6739e-5 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 8.815e-6 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 7.3445e-5 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 7.962e-6 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 6.927e-6 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.212e-6 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 6.627e-6 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 6.12e-6 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.993e-6 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 6.507e-6 seconds)
  done (took 0.831339848 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.054901335 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.0387e-5 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 6.732e-6 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 6.606e-6 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 6.128e-6 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.993e-6 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.876e-6 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 6.087e-6 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.91e-6 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.956e-6 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 9.173e-6 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.888e-6 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.841e-6 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.65e-6 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.4e-6 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.564e-6 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.867e-6 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 9.374e-6 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.798e-6 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.638e-6 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.891e-6 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.403e-6 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.231e-6 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.59e-6 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.847e-6 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.589e-6 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.356e-6 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.995e-6 seconds)
  done (took 0.829903297 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.019204036 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 9.646e-6 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.019028524 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 9.627e-6 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 9.68e-6 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 5.472e-6 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 5.61e-6 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 6.656e-6 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 8.562e-6 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.449e-6 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.0155e-5 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 5.161e-6 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 4.903e-6 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 5.417e-6 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.443e-6 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 4.928e-6 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.805e-6 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 5.441e-6 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.12e-6 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.992e-6 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 4.911e-6 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.481e-6 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 5.246e-6 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 5.381e-6 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.813e-6 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 4.789e-6 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 4.917e-6 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 4.831e-6 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.205e-6 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 5.305e-6 seconds)
  done (took 0.813433277 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.02036459 seconds)
    (2/2) benchmarking "in"...
    done (took 0.020085573 seconds)
  done (took 0.815637205 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.019466024 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.018839876 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.3643e-5 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.0435e-5 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 6.89e-6 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 6.686e-6 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 6.294e-6 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.945e-6 seconds)
  done (took 0.815445369 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.022055324 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.027987278 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.021535653 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.021765669 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.021391845 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.053637682 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.021676792 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.022507244 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.023237708 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.020553502 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.021558513 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.022501765 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.02090381 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.022916891 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.022780691 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.021104699 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022176615 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.027062667 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.023140014 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.019874944 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.026178741 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.02211263 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.02870967 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.021599767 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.008722441 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.022478759 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.027611637 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.022490931 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.023097942 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.022218076 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.029583605 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.019759186 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.02254822 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023359584 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.021310762 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.021551748 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.033759084 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.021381254 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.022359093 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.020477485 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.02538411 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.026890826 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.022813487 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.024191462 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.022297951 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.022187493 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.020257157 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.021659537 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.020866405 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.022698334 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.020201428 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021785566 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.020885285 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.023753983 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.024185876 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.0215551 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.022489345 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.023880694 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.027315607 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.023571038 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.022416761 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.027119432 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.023440821 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.021901294 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.021925741 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.027558232 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.020974032 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.023023753 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.023289375 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.022048646 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023877078 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.020073508 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.021773963 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.020418934 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.036448539 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.021818843 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.020772598 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.020698892 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.020081236 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.021910596 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.022702902 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.022874079 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021478733 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.02182319 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027926619 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.022835507 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.021233194 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.022407999 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.023532734 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.020179779 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.020628735 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.023077141 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.0213775 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.019692973 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.022728088 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.021877582 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.021999398 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.020931118 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.02129323 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.025508017 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.021666923 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.02006335 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021729273 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.020940437 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.01961573 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.021704406 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021653189 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.021100798 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.024269867 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.021970573 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.02175887 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.003400474 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.003192381 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.020826741 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.019630291 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022645519 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.020547993 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.024031527 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.022266258 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.022049564 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.027101312 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.023295556 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.027275349 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.020522433 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.019299717 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.026855585 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.022547745 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.021290498 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.027758894 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.020684695 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.023288193 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.020398484 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.02118853 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.022754412 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.02044762 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021277131 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.019851578 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.021717057 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.021055774 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021735619 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.022077386 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.022604347 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.023230008 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.021115268 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.02226591 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.021394962 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.023863253 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.023301733 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.02109678 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021939823 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.02055069 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.023096199 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.021498691 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.022441137 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.020466279 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.020706423 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.020623863 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.021744393 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.023095767 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.021210218 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.022273292 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.020768085 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.021306816 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.02137915 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.02082923 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020814686 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.026939849 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.021013232 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021298029 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.022840504 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.022567165 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.030144081 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.022159548 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.019500671 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.020424143 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.020758419 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.020293904 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.021054972 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.022175899 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026963973 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.02312464 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.022836477 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.02058938 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.022641708 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.020975761 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.022352685 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.021866928 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.021069326 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021846028 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.003374537 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021173248 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.021855858 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.024028346 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.022311987 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.023045637 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.0208119 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.020813874 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.019959872 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.026955732 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.020411644 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021809833 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.022301809 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.021786143 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.02056565 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.020910958 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.022636062 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.021668343 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.009285841 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.026119928 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.022104661 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.020042769 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.022468998 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.021663355 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.023160063 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.020358804 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020697397 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.021385548 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.021672021 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.023722556 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.027212154 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.019928041 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.020937715 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.026865621 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.020954917 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021828057 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.022142271 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.026774139 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021190944 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.022340742 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.022889645 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.02154483 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.020729656 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.021599698 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.021043743 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.022026997 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.021853913 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.023557666 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.020713608 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027213332 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.019908039 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.026077015 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.023261733 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.022222633 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.020746496 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022288828 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.021160379 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.02203349 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.020847687 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.020856586 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.022834443 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.019687072 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.021956041 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.020747015 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.02102846 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.021964228 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.021974822 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020701622 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022310719 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.021408425 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.023289969 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020876012 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.02200722 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.021734396 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020391422 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.019929322 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.021691938 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02305034 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.021911897 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.020986796 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.021471723 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.020818015 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.022332115 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.020837456 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.021000325 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.02109848 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020700759 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021298315 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021364439 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.020895841 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.020834492 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021029156 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.022381662 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026781007 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021708881 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.021166606 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.021762967 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.019699747 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.029590142 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.020577741 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.021829836 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.019952392 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.023083237 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.022003456 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.020742001 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.023633316 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.021678401 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.021647546 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.023294679 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021772315 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.02038668 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.022511109 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.021153433 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.021785377 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.021783963 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.02093008 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.021457089 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.020985759 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.021514549 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.022980243 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.022322539 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.021621622 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.021101682 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022176227 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021333524 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.021145764 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.021039924 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.0216189 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.021834624 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.019940269 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020706167 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.023457335 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.021058545 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.004207161 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.020495761 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.019349584 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.020661951 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.023561336 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020411429 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.022203318 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026944326 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.019316863 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.020562986 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.019335839 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.020287554 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026864874 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022199653 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.021388108 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020566181 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.019307815 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.021394741 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.021382352 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.020421214 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.021233262 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.003951952 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.019225472 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022402532 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.020767929 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.003415928 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020232192 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.021600001 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.023074862 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.021351182 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.020754936 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.021235485 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.020458478 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.021106155 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.019529532 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.020496291 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020710482 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.003661087 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019799731 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.022805129 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.022451165 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.021681257 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.023016216 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.020559255 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.02162542 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.026282115 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.022461416 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.021045105 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.022928301 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.020224495 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.027928315 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.022884527 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021560958 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022556089 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.020502437 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.021736555 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020720576 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.021812272 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.02649821 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021315213 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.021571626 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.019460449 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.026760157 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020761604 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.019399499 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.021039431 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021198427 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.020995841 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.022634939 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.020574538 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.021810957 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022902414 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.022625743 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.020540003 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.020674282 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.02199575 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.022302332 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.020747304 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.021241747 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.021746864 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.021369559 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.020513064 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.024132632 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.021559539 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.021238667 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.02076063 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.02013658 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.020985489 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.022647383 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020360784 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020554953 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020606836 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.019531697 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.021434317 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027836458 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.022261567 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022462956 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.019746323 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.019325952 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.025861632 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020355483 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.021141319 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.02167514 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.022950148 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.02411171 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.02216815 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.021617599 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.020687355 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.020781366 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.023990366 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.020507112 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.020209215 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020088429 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.020605268 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.02200568 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022150895 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.020807947 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020959101 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.021584029 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.021385806 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.020666607 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.02075718 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.021189683 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.020726242 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.022574655 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.021598425 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.021508898 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.021214298 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.019542008 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.003201659 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.021826633 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.02088518 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.021802113 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020489496 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.023448392 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.022052336 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.021018799 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021480434 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.019899421 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.02143005 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.022617824 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.019981564 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.019833249 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.020635048 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.02028845 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021648422 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.02204244 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.020389696 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.019640803 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.021530833 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.021151016 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.021582483 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.020720083 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.020346517 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020490154 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.019539697 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022966461 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.019794114 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.020155213 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.020793584 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.020763717 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.025542767 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.021524922 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026918675 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020348572 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.020563995 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.019556321 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.021999534 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.020006982 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.020054431 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.023249375 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.019456462 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026489318 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.021653808 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.023134689 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.019776547 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.020959805 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.021203878 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.026406348 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022168583 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.021785815 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.02106306 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022295298 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.02029992 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.02199706 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.019326801 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.019123051 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.021703544 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021332728 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.023512416 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.019912703 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.021746483 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.02036232 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.021202506 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.021087463 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.020436843 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020863451 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.021394788 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.0219217 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.019826051 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.021301315 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020634972 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.026184338 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.020579232 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.02305565 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.022007683 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.022060396 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.025633379 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.023007252 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.021166709 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.020445169 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020791788 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.021108139 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.020799518 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021161695 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.021028901 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.028033265 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.021094478 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.020666009 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022972873 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.02297921 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.020407888 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.021406455 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.019935382 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.021718483 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.020334655 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.022203139 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.020983496 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.020448268 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020475067 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020567568 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.019114427 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.019787139 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.003473151 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022048594 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.004137649 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.020420321 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.023437717 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.020622261 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.021320986 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.022977807 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.021278064 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.020286517 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.019348218 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.020394428 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.025244391 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.025993186 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.004540616 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021152682 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.021061099 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.021950072 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.019282295 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.022032844 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.021486657 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021442409 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.019590201 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020087912 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.025980382 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026214232 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020516547 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.009411854 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.022086443 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.020917116 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.027839197 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.022484453 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.0205082 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.021662263 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019813443 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.003900814 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.019109869 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.020428765 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.022730723 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.019206779 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.019844529 seconds)
  done (took 13.640457022 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.01921729 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.0353e-5 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 6.269e-6 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.549e-6 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.768e-6 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.457e-6 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.275e-6 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.113e-6 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.17e-6 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.023e-6 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 9.275e-6 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.342e-6 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.46e-6 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.922e-6 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.039e-6 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.196e-6 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.799e-6 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.388e-6 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 4.984e-6 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.133e-6 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.191e-6 seconds)
  done (took 0.863527059 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020580153 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.018879388 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.5634e-5 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.0847e-5 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.069e-6 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 6.899e-6 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 6.17e-6 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.634e-6 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.64e-6 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.307e-6 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.0673e-5 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.352e-6 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 5.593e-6 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 5.113e-6 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.239e-6 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.324e-6 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.418e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.472e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 5.554e-6 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 5.351e-6 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.576e-6 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 5.721e-6 seconds)
  done (took 0.865832408 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.020755647 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.019904852 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.020954215 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.019257548 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.01933974 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.020373055 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.01951637 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.021090721 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.020514207 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.020293503 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.021594835 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.020553712 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.019769733 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.021547439 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.019424837 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.020393952 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.036676572 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.02044853 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.020541407 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.019480666 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.021317598 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.021075212 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.019660106 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.020413166 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020829827 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.020303272 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.019778766 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.021100867 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.020684582 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.020178741 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.020743556 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.019449095 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.021389177 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.021044043 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.020707861 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.02025406 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.020677223 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.020597361 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.019625668 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.019700759 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.021169362 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.020723665 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.020634281 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.021230953 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.021248292 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.019816949 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.019372824 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.021514113 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.019915484 seconds)
  done (took 1.846188405 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.02605939 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.008510407 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.026170965 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.009081481 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 3.1609e-5 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 9.325e-6 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 8.932e-6 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.009065239 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 3.2021e-5 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.6857e-5 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.1254e-5 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.7701e-5 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.148e-5 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 8.201e-6 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.2175e-5 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.0011e-5 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 7.846e-6 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.627e-6 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 7.118e-6 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.403e-6 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 6.035e-6 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 6.358e-6 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 5.981e-6 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 6.14e-6 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 6.504e-6 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 5.969e-6 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 5.853e-6 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 5.836e-6 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 6.031e-6 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 6.088e-6 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 6.134e-6 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 6.456e-6 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 6.679e-6 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 7.462e-6 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 6.841e-6 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 6.599e-6 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 6.569e-6 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 6.238e-6 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 6.063e-6 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 6.219e-6 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 5.702e-6 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 5.808e-6 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.3019e-5 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 7.926e-6 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.1284e-5 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 6.183e-6 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 6.333e-6 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 9.657e-6 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 6.224e-6 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 5.965e-6 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 5.547e-6 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 9.386e-6 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 6.737e-6 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 5.771e-6 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 6.101e-6 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 6.109e-6 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 5.919e-6 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.0961e-5 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 6.407e-6 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 6.165e-6 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 5.67e-6 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 7.743e-6 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 6.087e-6 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 6.001e-6 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 6.319e-6 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 5.69e-6 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 5.623e-6 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.357e-6 seconds)
  done (took 1.050305702 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.019755366 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.0521e-5 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 6.859e-6 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 6.462e-6 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 6.297e-6 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 6.441e-6 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 6.049e-6 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 5.612e-6 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 6.117e-6 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 6.121e-6 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.0994e-5 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.019614686 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.3195e-5 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 6.58e-6 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.865e-6 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.7e-6 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 4.979e-6 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.325e-6 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.143e-6 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.213e-6 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 5.076e-6 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.541e-6 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.67e-6 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.43e-6 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.604e-6 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.221e-6 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.772e-6 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.41e-6 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.335e-6 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.38e-6 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.543e-6 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 4.835e-6 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.453e-6 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 4.96e-6 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 5.524e-6 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 5.249e-6 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 5.427e-6 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.218e-6 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 5.627e-6 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 5.181e-6 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.233e-6 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.607e-6 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.8214e-5 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 6.412e-6 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.357e-6 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.225e-6 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.118e-6 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 5.387e-6 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 5.393e-6 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.107e-6 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 4.815e-6 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.055e-6 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.017e-6 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.348e-6 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.078e-6 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 5.298e-6 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.159e-6 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.588e-6 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 4.974e-6 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.242e-6 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.678e-6 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 5.12e-6 seconds)
  done (took 0.872551734 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.018782325 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.0402e-5 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.018871572 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 9.938e-6 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.4826e-5 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 6.465e-6 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.11e-6 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 5.241e-6 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.393e-6 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 5.027e-6 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 9.364e-6 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.238e-6 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.369e-6 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.298e-6 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 5.36e-6 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.226e-6 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.151e-6 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 5.006e-6 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.917e-6 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 4.919e-6 seconds)
  done (took 0.869081885 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.020975534 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020760003 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.5214e-5 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 8.227e-6 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 7.414e-6 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 7.243e-6 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 5.316e-6 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.374e-6 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.243e-6 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.847e-6 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.0128e-5 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 6.355e-6 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.898e-6 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 5.64e-6 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 5.516e-6 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 5.602e-6 seconds)
  done (took 0.872110235 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019043303 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.018453247 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.02191937 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.1353e-5 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.018886969 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.020957071 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.9546e-5 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.024105661 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.787e-5 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.023933416 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.1965e-5 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.1941e-5 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.019099431 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.894e-5 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.021021615 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.7204e-5 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.2387e-5 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 9.779e-6 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 7.671e-6 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.02269204 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.824e-5 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.3613e-5 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.128e-5 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.021059075 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.8378e-5 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 8.543e-6 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.0289e-5 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 9.817e-6 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.021218026 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.9683e-5 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.0211e-5 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 7.946e-6 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 6.626e-6 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 5.916e-6 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.0414e-5 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 7.39e-6 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 7.04e-6 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 5.998e-6 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 8.234e-6 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 6.129e-6 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 7.973e-6 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 7.62e-6 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.7835e-5 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 8.438e-6 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 6.678e-6 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 5.824e-6 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 6.505e-6 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 6.632e-6 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.013e-5 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 5.96e-6 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 5.642e-6 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 6.95e-6 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 5.779e-6 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 5.284e-6 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 5.387e-6 seconds)
  done (took 1.083249391 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.019023627 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 9.747e-6 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.019006762 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.1949e-5 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 6.052e-6 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.1842e-5 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 6.382e-6 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.01725835 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.1116e-5 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.0457e-5 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.1921e-5 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 5.9215e-5 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 8.097e-6 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 6.452e-6 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 5.71e-6 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 6.105e-6 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 5.712e-6 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 5.24e-6 seconds)
  done (took 0.890025678 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.018958682 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.1273e-5 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.020579176 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.1424e-5 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 9.26e-6 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 6.56e-6 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.686e-6 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 5.388e-6 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.35e-6 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 5.386e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 9.543e-6 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 5.775e-6 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.232e-6 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 4.87e-6 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 5.839e-6 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.07e-6 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 5.759e-6 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.062e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.129e-6 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.296e-6 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 5.184e-6 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.013e-6 seconds)
  done (took 0.872403532 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "Int64", "+")...
    done (took 0.026124377 seconds)
    (2/6) benchmarking ("#6", "BigInt", "+")...
    done (took 0.045825565 seconds)
    (3/6) benchmarking ("#8", "BigInt", "+")...
    done (took 0.04954087 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 0.042811847 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 0.037831759 seconds)
    (6/6) benchmarking ("#8", "UInt64", "+")...
    done (took 0.044480566 seconds)
  done (took 1.076703321 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019248314 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018579909 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.0675e-5 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 7.991e-6 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.837e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.847e-6 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.319e-6 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.031e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.539e-6 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 6.265e-6 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.047e-5 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.992e-6 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.994e-6 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.054e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.931e-6 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.974e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.436e-6 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.772e-6 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 5.695e-6 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.686e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.598e-6 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.89e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.965e-6 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.661e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.529e-6 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.715e-6 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.606e-6 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.532e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.564e-6 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.832e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.812e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.781e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.49e-6 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 6.007e-6 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 5.874e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.982e-6 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.871e-6 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.721e-6 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.079e-6 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.983e-6 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 6.503e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.994e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.5603e-5 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.746e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.173e-6 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.8327e-5 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.001e-6 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.198e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.158e-6 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.762e-6 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.051e-6 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.259e-6 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.285e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.234e-6 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.245e-6 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 5.61e-6 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.445e-6 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.366e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.762e-6 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.197e-6 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.215e-6 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.366e-6 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.739e-6 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.079e-6 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.416e-6 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.105e-6 seconds)
  done (took 0.872740844 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.01914569 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.7173e-5 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 7.358e-6 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 6.964e-6 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.12e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.417e-6 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.057e-6 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.211e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 4.995e-6 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 5.105e-6 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018502675 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.1835e-5 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.437e-6 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.984e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.388e-6 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.325e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.374e-6 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.137e-6 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 5.095e-6 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 6.584e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.303e-6 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.403e-6 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.661e-6 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.035e-6 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 5.625e-6 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.55e-6 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.391e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.617e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.379e-6 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.087e-6 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.508e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.069e-6 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.12e-6 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.2251e-5 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.14e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.07e-6 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.276e-6 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.25e-6 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.607e-6 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.441e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.329e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.212e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.4315e-5 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.18e-6 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.335e-6 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.161e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.136e-6 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 5.28e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.604e-6 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 4.841e-6 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 5.747e-6 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.127e-6 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 4.982e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.099e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.196e-6 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.423e-6 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.048e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.82e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.024e-6 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.404e-6 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 4.935e-6 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 4.794e-6 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.463e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.129e-6 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.708e-6 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.062e-6 seconds)
  done (took 0.871041638 seconds)
done (took 37.741280502 seconds)
(12/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.524172235 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.447160978 seconds)
  done (took 1.80135729 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.0257878 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.216766998 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.182392959 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.266579352 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.317470302 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.765067807 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.714039959 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 9.0983e-5 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.1176921 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.000143752 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.000198524 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.000176898 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.000195336 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.044673846 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.29164516 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.10923238 seconds)
  done (took 3.90085691 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.124489669 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.145048886 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.133321288 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.1634e-5 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.105135226 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 5.454e-5 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.058957472 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.0155e-5 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.1993e-5 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.000262809 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107707834 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.15282413 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.7327e-5 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.2813e-5 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 4.0773e-5 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.8775e-5 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.4855e-5 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.9393e-5 seconds)
  done (took 1.661033664 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.203604254 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.026574785 seconds)
  done (took 1.07214196 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.627578052 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.197061299 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.152471888 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.386235928 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.149291713 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.823414693 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.111485069 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.129030986 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.096678689 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.113091685 seconds)
  done (took 3.635091447 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.078062706 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.066744612 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.29633741 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.06879949 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.055884202 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 5.8633e-5 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.040830392 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.070408645 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.041918791 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.038502153 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.088902055 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.000123735 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.054673182 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.084334487 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.030757996 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.081653572 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.052070758 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.027452184 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.052946008 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.5415e-5 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 4.5315e-5 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.7422e-5 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.213810068 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.000896693 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.002679063 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.5199e-5 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 4.0302e-5 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.5022e-5 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 7.932e-6 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.1487e-5 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.000730513 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.0017409 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.3154e-5 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.012816233 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.7405e-5 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.1906e-5 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.000132519 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.7805e-5 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 4.4479e-5 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 5.5069e-5 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.00074314 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.5678e-5 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.001110221 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.7256e-5 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 3.752e-5 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.4333e-5 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.000870339 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.000760089 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.000729261 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.000765802 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.000991102 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.332e-5 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.000762712 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.000781785 seconds)
  done (took 2.313721108 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.332742153 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.30466255 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.0354041 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.090876954 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.085880919 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.033669219 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.097228009 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.078503206 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.127719752 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.035009752 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.032773109 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 6.3386e-5 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.032352876 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.01287724 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.092116516 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076052013 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.035547063 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.033040993 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.080581019 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.075939165 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 8.2845e-5 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07451999 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.127120946 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.096125967 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 5.8171e-5 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.034357086 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 5.7039e-5 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 6.1976e-5 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001200083 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.002615415 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 4.1943e-5 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.030925876 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.013308945 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002012507 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 6.5411e-5 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 6.8345e-5 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.1404e-5 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.00215443 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.031100319 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.002686826 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.00088906 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000131449 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 6.0431e-5 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000121636 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.032899521 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000107444 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000753855 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.002438114 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.00075597 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000102917 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000182894 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000145599 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 4.737e-5 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001667778 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.028422839 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.003334201 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.002733573 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000106541 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 7.6197e-5 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.034654224 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004998427 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.008030913 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002283354 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.033001346 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.002407647 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 7.617e-5 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005577906 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.010065013 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.2075e-5 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 4.4845e-5 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 6.0927e-5 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 9.7968e-5 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 5.1024e-5 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.002471376 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.002757402 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.00011139 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 4.7235e-5 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000109057 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.006172976 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002599034 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.3295e-5 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.002391336 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000115006 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000170558 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000172671 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.000108632 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.001489916 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.004009819 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.00010223 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.000146036 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000289301 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000223315 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 5.8894e-5 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.002960749 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.002599171 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.002754583 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.002890093 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000150023 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.002724133 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.029563081 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000502983 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.000620808 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 5.6315e-5 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000214497 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 5.5801e-5 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001723372 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.000765218 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.008227493 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000117596 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 7.7406e-5 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.001774552 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008149524 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 7.9999e-5 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.000428477 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004625247 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.001489801 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 6.269e-5 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.013098835 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000126667 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.004070707 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000143653 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002297645 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000153738 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001409229 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.9838e-5 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.000199637 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000135933 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.0012803 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000212442 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000118116 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 4.8905e-5 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000209229 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.001852491 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.007471468 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000128566 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002341643 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.002755208 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000183635 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.001791901 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 7.2747e-5 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.00460738 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000253738 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 4.4911e-5 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 5.3062e-5 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.006556072 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000222917 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 7.4183e-5 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.9923e-5 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.007030566 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 9.5791e-5 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.00888224 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000368534 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000107118 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005571441 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.007436732 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.001428176 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.012180799 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 9.9416e-5 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 9.0782e-5 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 5.7367e-5 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 3.9124e-5 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000753149 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002070194 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.3561e-5 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 4.2565e-5 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.00059346 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.001139809 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.000144862 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.002170778 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001408841 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.002846013 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000194851 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000193714 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.023092348 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.005141027 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.000344034 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.001377611 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003509808 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000182152 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001275675 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.001613176 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000117041 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011678674 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 8.9881e-5 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.008886526 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001434735 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.000711929 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.002451501 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.002590069 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.003752495 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.00934049 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.00916886 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000225092 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 7.6391e-5 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.00053195 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000185047 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000123561 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.000192368 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000157964 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 7.2466e-5 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.014317392 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000248314 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.003930255 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 4.7901e-5 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.00294731 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 5.7307e-5 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000128641 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.01108393 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000234738 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000206745 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000352814 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.0817e-5 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.001976791 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008127157 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.006248905 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.00015936 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.231e-5 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002161623 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.001728793 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 4.2183e-5 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000108152 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000104177 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.001157181 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.001486271 seconds)
  done (took 3.491846197 seconds)
done (took 18.708677939 seconds)
(13/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 0.09510344 seconds)
  (2/4) benchmarking "arrays"...
  done (took 0.05602341 seconds)
  (3/4) benchmarking "structs"...
  done (took 0.063231882 seconds)
  (4/4) benchmarking "grow_array"...
  done (took 0.032199304 seconds)
done (took 1.090598371 seconds)
(14/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.122792052 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.074034377 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.237739726 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.09601173 seconds)
  done (took 1.375465038 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.063418438 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.1211e-5 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.042937013 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.050821026 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.8943e-5 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.034235906 seconds)
  done (took 1.050983974 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.318211021 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.175697899 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.263151672 seconds)
  done (took 1.616914656 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.117008902 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.169010844 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.282180569 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.139319839 seconds)
  done (took 1.574313747 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.038352002 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.031783878 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.024494612 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.033700585 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.026658181 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.021270613 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.10453819 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.021369772 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.02944216 seconds)
  done (took 1.252450614 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.061556861 seconds)
done (took 7.783975758 seconds)
(15/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.161682382 seconds)
    (2/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.030371959 seconds)
    (3/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.031442271 seconds)
    (4/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.031861271 seconds)
    (5/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.119064497 seconds)
    (6/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.032112383 seconds)
    (7/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 8.3176e-5 seconds)
    (8/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.118197723 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.033505881 seconds)
    (10/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.039155078 seconds)
    (11/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.02975487 seconds)
    (12/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.115409949 seconds)
    (13/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.20430689 seconds)
    (14/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.158495364 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.04876981 seconds)
    (16/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.040448693 seconds)
    (17/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.065129703 seconds)
    (18/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.032406052 seconds)
    (19/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.038904665 seconds)
    (20/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.119170939 seconds)
    (21/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.029282302 seconds)
    (22/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029275432 seconds)
    (23/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.026328831 seconds)
    (24/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.233668622 seconds)
    (25/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.110208692 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.031967484 seconds)
    (27/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.131249036 seconds)
    (28/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.029641582 seconds)
    (29/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.883819822 seconds)
    (30/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.028524516 seconds)
    (31/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.181992385 seconds)
    (32/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.077249669 seconds)
    (33/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.185766233 seconds)
    (34/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.190480721 seconds)
    (35/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.138267684 seconds)
    (36/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.028109558 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.112724952 seconds)
    (38/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.037358531 seconds)
    (39/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.209092996 seconds)
    (40/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.114535629 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.031416569 seconds)
    (42/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 4.8026e-5 seconds)
    (43/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.039353097 seconds)
    (44/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.046924498 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 8.0775e-5 seconds)
    (46/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.130164823 seconds)
    (47/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.033842926 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.06502805 seconds)
    (49/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.094077638 seconds)
    (50/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.164460177 seconds)
    (51/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.129521993 seconds)
    (52/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.030444386 seconds)
    (53/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.025883143 seconds)
    (54/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.139994171 seconds)
    (55/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.026908311 seconds)
    (56/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 8.0448e-5 seconds)
    (57/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.029627825 seconds)
    (58/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.032267811 seconds)
    (59/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.02768727 seconds)
    (60/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.060620396 seconds)
    (61/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.030604438 seconds)
    (62/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.035577746 seconds)
    (63/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 2.5763e-5 seconds)
    (64/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.117647558 seconds)
    (65/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 4.0416e-5 seconds)
    (66/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.089840366 seconds)
    (67/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.000885084 seconds)
    (68/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.038521728 seconds)
    (69/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.039476556 seconds)
    (70/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.169187353 seconds)
    (71/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.093993185 seconds)
    (72/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.0269203 seconds)
    (73/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.031440306 seconds)
    (74/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.028098807 seconds)
    (75/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.146197258 seconds)
    (76/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.04118544 seconds)
    (77/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.027483945 seconds)
    (78/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.038454353 seconds)
    (79/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.031494883 seconds)
    (80/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.030767232 seconds)
    (81/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 7.3946e-5 seconds)
    (82/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 8.2299e-5 seconds)
    (83/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.03220203 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.000103078 seconds)
    (85/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.034827527 seconds)
    (86/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.027637732 seconds)
    (87/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 2.268e-5 seconds)
    (88/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.087583798 seconds)
    (89/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.050792458 seconds)
    (90/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.058986834 seconds)
    (91/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.030177768 seconds)
    (92/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.245541567 seconds)
    (93/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.090574127 seconds)
    (94/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.027284065 seconds)
    (95/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.043006979 seconds)
    (96/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.039594151 seconds)
    (97/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.027271744 seconds)
    (98/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.029644396 seconds)
    (99/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.027149487 seconds)
    (100/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 5.2391e-5 seconds)
    (101/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.033170724 seconds)
    (102/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.182895186 seconds)
    (103/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 5.3828e-5 seconds)
    (104/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.03495528 seconds)
    (105/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 5.1392e-5 seconds)
    (106/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.04799539 seconds)
    (107/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.03451986 seconds)
    (108/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.033202732 seconds)
    (109/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.038898155 seconds)
    (110/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 8.9793e-5 seconds)
    (111/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.031186605 seconds)
    (112/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.036178781 seconds)
    (113/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.138362462 seconds)
    (114/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.149429291 seconds)
    (115/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.077405458 seconds)
    (116/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.001972139 seconds)
    (117/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.178010611 seconds)
    (118/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.002339424 seconds)
    (119/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.038496235 seconds)
    (120/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.002569826 seconds)
    (121/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 9.8651e-5 seconds)
    (122/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.175768644 seconds)
    (123/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 5.3631e-5 seconds)
    (124/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.000107863 seconds)
    (125/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.027291525 seconds)
    (126/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.6059e-5 seconds)
    (127/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.000109373 seconds)
    (128/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.137443785 seconds)
    (129/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.255452569 seconds)
    (130/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 3.3223e-5 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.031139976 seconds)
    (132/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.000954862 seconds)
    (133/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.035042602 seconds)
    (134/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 4.2877e-5 seconds)
    (135/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.002239874 seconds)
    (136/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.000908658 seconds)
    (137/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 7.3435e-5 seconds)
    (138/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.203079628 seconds)
    (139/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.030592064 seconds)
    (140/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.029373949 seconds)
    (141/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.033709281 seconds)
    (142/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.000114527 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.032328266 seconds)
    (144/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.032385869 seconds)
    (145/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.251804909 seconds)
    (146/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.032486862 seconds)
    (147/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.116595978 seconds)
    (148/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.035695233 seconds)
    (149/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.032436644 seconds)
    (150/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.034309534 seconds)
    (151/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.0487036 seconds)
    (152/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.07974061 seconds)
    (153/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 4.7564e-5 seconds)
    (154/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.03039393 seconds)
    (155/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.030809137 seconds)
    (156/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.122589945 seconds)
    (157/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.030067601 seconds)
    (158/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.121779444 seconds)
    (159/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.00272488 seconds)
    (160/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.037917242 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.27751301 seconds)
    (162/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.095427065 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.035172149 seconds)
    (164/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.235010756 seconds)
    (165/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.000106877 seconds)
    (166/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.028471321 seconds)
    (167/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 7.9056e-5 seconds)
    (168/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.116334733 seconds)
    (169/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.047823636 seconds)
    (170/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.029212011 seconds)
    (171/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.02843553 seconds)
    (172/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.029424023 seconds)
    (173/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 5.0321e-5 seconds)
    (174/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.115176011 seconds)
    (175/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.034732312 seconds)
    (176/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 5.2763e-5 seconds)
    (177/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.277024627 seconds)
    (178/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 8.6406e-5 seconds)
    (179/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.236384618 seconds)
    (180/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.094886661 seconds)
    (181/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.11807913 seconds)
    (182/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.02738769 seconds)
    (183/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.031128649 seconds)
    (184/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.092769111 seconds)
    (185/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.044527051 seconds)
    (186/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.049002609 seconds)
    (187/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.038491539 seconds)
    (188/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 9.9772e-5 seconds)
    (189/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.034417701 seconds)
    (190/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.000145225 seconds)
    (191/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 7.4036e-5 seconds)
    (192/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.030400623 seconds)
    (193/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.039589679 seconds)
    (194/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.029190733 seconds)
    (195/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.000124409 seconds)
    (196/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 6.2862e-5 seconds)
    (197/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.032274792 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.032269826 seconds)
    (199/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.03216011 seconds)
    (200/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.031966339 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.035924864 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.486143397 seconds)
    (203/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 3.9864e-5 seconds)
    (204/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.029810025 seconds)
    (205/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.025359988 seconds)
    (206/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.034216241 seconds)
    (207/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.299485195 seconds)
    (208/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.031607487 seconds)
    (209/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.093966476 seconds)
    (210/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.040527929 seconds)
    (211/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.037508949 seconds)
    (212/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.031465934 seconds)
    (213/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.000128174 seconds)
    (214/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.033889078 seconds)
    (215/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.18320798 seconds)
    (216/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.02099891 seconds)
    (217/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.034836357 seconds)
    (218/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.07408241 seconds)
    (219/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.000116633 seconds)
    (220/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.093394243 seconds)
    (221/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.001899703 seconds)
    (222/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 6.1004e-5 seconds)
    (223/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.040209314 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.034135012 seconds)
    (225/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.034341402 seconds)
    (226/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.029759706 seconds)
    (227/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.000120744 seconds)
    (228/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.029188387 seconds)
    (229/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.034119878 seconds)
    (230/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.002348963 seconds)
    (231/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.040280687 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.032538123 seconds)
    (233/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.032407628 seconds)
    (234/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 3.372e-5 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.2832e-5 seconds)
    (236/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.040910079 seconds)
    (237/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.164815785 seconds)
    (238/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.000118828 seconds)
    (239/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.159562218 seconds)
    (240/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.19424581 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.093417331 seconds)
    (242/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 7.2261e-5 seconds)
    (243/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.035956306 seconds)
    (244/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.036755636 seconds)
    (245/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 9.5783e-5 seconds)
    (246/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.119645499 seconds)
    (247/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.000116431 seconds)
    (248/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.069097911 seconds)
    (249/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.187685077 seconds)
    (250/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.033591106 seconds)
    (251/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.037147845 seconds)
    (252/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.034944951 seconds)
    (253/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.002637195 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.092141217 seconds)
    (255/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.038468334 seconds)
    (256/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.031458572 seconds)
    (257/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 9.1833e-5 seconds)
    (258/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.09024916 seconds)
    (259/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.032641831 seconds)
    (260/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.116623365 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.091901151 seconds)
    (262/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.028758928 seconds)
    (263/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.580185845 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.040749434 seconds)
    (265/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.032358578 seconds)
    (266/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.001027183 seconds)
    (267/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.02939022 seconds)
    (268/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.039872907 seconds)
    (269/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 3.497e-5 seconds)
    (270/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.001943569 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.034193272 seconds)
    (272/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.096606504 seconds)
    (273/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 5.3808e-5 seconds)
    (274/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.000110676 seconds)
    (275/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 4.141e-5 seconds)
    (276/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.000105584 seconds)
    (277/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.8865e-5 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.043608467 seconds)
    (279/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.000232715 seconds)
    (280/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.029579025 seconds)
    (281/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 4.1525e-5 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 8.7604e-5 seconds)
    (283/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.034724436 seconds)
    (284/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.038935108 seconds)
    (285/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 3.9886e-5 seconds)
    (286/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.029947818 seconds)
    (287/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.00016062 seconds)
    (288/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 6.1263e-5 seconds)
    (289/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 3.7226e-5 seconds)
    (290/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.037270622 seconds)
    (291/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.094059008 seconds)
    (292/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.115230577 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 3.7677e-5 seconds)
    (294/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.032520811 seconds)
    (295/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.032376445 seconds)
    (296/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.034830797 seconds)
    (297/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.06711599 seconds)
    (298/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 2.5407e-5 seconds)
    (299/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.139030803 seconds)
    (300/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 6.5183e-5 seconds)
    (301/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.028190679 seconds)
    (302/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.042181727 seconds)
    (303/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 8.74e-5 seconds)
    (304/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.031406589 seconds)
    (305/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 8.3678e-5 seconds)
    (306/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 6.9388e-5 seconds)
    (307/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.039538552 seconds)
    (308/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 4.1943e-5 seconds)
    (309/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.001729987 seconds)
    (310/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.0671e-5 seconds)
    (311/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.000113838 seconds)
    (312/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 8.9691e-5 seconds)
    (313/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.0002392 seconds)
    (314/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.000135314 seconds)
    (315/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.8169e-5 seconds)
    (316/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.001725603 seconds)
    (317/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 7.7598e-5 seconds)
    (318/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 7.3885e-5 seconds)
    (319/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 3.2142e-5 seconds)
    (320/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 3.7396e-5 seconds)
    (321/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.02883726 seconds)
    (322/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.031252978 seconds)
    (323/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.028743548 seconds)
    (324/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.000126925 seconds)
    (325/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.033284743 seconds)
    (326/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.979106826 seconds)
    (327/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.001593024 seconds)
    (328/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.00015848 seconds)
    (329/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.039355782 seconds)
    (330/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 6.7146e-5 seconds)
    (331/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 5.4929e-5 seconds)
    (332/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.000106858 seconds)
    (333/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.002665009 seconds)
    (334/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 7.2525e-5 seconds)
    (335/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.040353493 seconds)
    (336/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 9.8469e-5 seconds)
    (337/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.030576815 seconds)
    (338/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.000114904 seconds)
    (339/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.031607801 seconds)
    (340/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 9.5285e-5 seconds)
    (341/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.047107247 seconds)
    (342/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 7.0364e-5 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.027988251 seconds)
    (344/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001217032 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.030602425 seconds)
    (346/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.031141247 seconds)
    (347/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.030791061 seconds)
    (348/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 8.6877e-5 seconds)
    (349/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.02796088 seconds)
    (350/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.040060919 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.110394314 seconds)
    (352/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.031090262 seconds)
    (353/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.038598085 seconds)
    (354/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.034306507 seconds)
    (355/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.030912121 seconds)
    (356/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 5.0574e-5 seconds)
    (357/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 3.897e-5 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.268545435 seconds)
    (359/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.085809502 seconds)
    (360/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.040396943 seconds)
    (361/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.039814548 seconds)
    (362/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 9.2031e-5 seconds)
    (363/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.027619284 seconds)
    (364/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 9.2106e-5 seconds)
    (365/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.001023276 seconds)
    (366/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 4.1699e-5 seconds)
    (367/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.043961827 seconds)
    (368/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 4.5433e-5 seconds)
    (369/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.025702569 seconds)
    (370/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 7.8247e-5 seconds)
    (371/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 3.5169e-5 seconds)
    (372/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 6.528e-5 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.067707401 seconds)
    (374/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.8599e-5 seconds)
    (375/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 8.4098e-5 seconds)
    (376/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.9106e-5 seconds)
    (377/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.030998362 seconds)
    (378/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.025456927 seconds)
    (379/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.035201236 seconds)
    (380/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 5.3314e-5 seconds)
    (381/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.044655806 seconds)
    (382/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.001152746 seconds)
    (383/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.000760463 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.036344279 seconds)
    (385/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 7.0964e-5 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.032674908 seconds)
    (387/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.038414569 seconds)
    (388/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.031104922 seconds)
    (389/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.048459651 seconds)
    (390/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.030941401 seconds)
    (391/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.6747e-5 seconds)
    (392/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.064580391 seconds)
    (393/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 4.6292e-5 seconds)
    (394/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 8.6393e-5 seconds)
    (395/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.030925225 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.035148661 seconds)
    (397/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 8.5222e-5 seconds)
    (398/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.035551793 seconds)
    (399/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.035168836 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.032022873 seconds)
    (401/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.22216864 seconds)
    (402/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.033506192 seconds)
    (403/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.001769048 seconds)
    (404/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 8.1815e-5 seconds)
    (405/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.027266173 seconds)
    (406/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.032044837 seconds)
    (407/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 2.9521e-5 seconds)
    (408/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.066974232 seconds)
    (409/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.033529269 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.025872032 seconds)
    (411/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 3.6273e-5 seconds)
    (412/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.002657376 seconds)
    (413/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.035481787 seconds)
    (414/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.0227e-5 seconds)
    (415/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 4.8437e-5 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 8.0557e-5 seconds)
    (417/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.044953897 seconds)
    (418/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.044812693 seconds)
    (419/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.000974219 seconds)
    (420/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.8576e-5 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.024412357 seconds)
    (422/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 4.5828e-5 seconds)
    (423/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 5.5231e-5 seconds)
    (424/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.959030305 seconds)
    (425/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.0722e-5 seconds)
    (426/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.031095149 seconds)
    (427/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.336259478 seconds)
    (428/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.000166238 seconds)
    (429/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 4.5721e-5 seconds)
    (430/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 2.25e-5 seconds)
    (431/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 6.0817e-5 seconds)
    (432/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.990061514 seconds)
    (433/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.000103612 seconds)
    (434/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.027242432 seconds)
  done (took 24.783571939 seconds)
done (took 25.657279501 seconds)
(16/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 0.120403543 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 0.0321765 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 0.078648227 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 0.03707856 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 0.02880941 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.034488085 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 0.039066638 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.069112125 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 0.119078926 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.057555354 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 0.120678938 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 0.047819614 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 0.04240946 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 0.115779207 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 0.032518821 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 3.2876e-5 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.090365091 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 0.050582148 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.088284935 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 0.061530988 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.042400768 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 0.050722365 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.089139152 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 0.051239634 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.068644831 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 0.098403436 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 0.060320734 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 0.091531864 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 4.5004e-5 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 0.06172267 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 0.035136557 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 0.027683775 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 0.040851044 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 0.057187605 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 0.039205496 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 3.9749e-5 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 0.091228644 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.029354844 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 0.050780528 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 0.074953296 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 0.043753503 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 0.054635006 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 0.03333788 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.073084374 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 0.0601777 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 0.060978733 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 0.042041061 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.073438145 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 0.077579049 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 0.036899869 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 0.048324296 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 0.05040291 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.035131723 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 0.073032382 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 0.064933734 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.068987252 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.062168063 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 0.065895796 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.031847948 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 0.076187505 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.6178e-5 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 0.067489367 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 5.1369e-5 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 0.047973308 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.034349927 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.078222108 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 0.07738615 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 0.072595809 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 3.5626e-5 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 0.06328383 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 0.070186011 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 0.066022136 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 0.060495335 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.8714e-5 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.068974963 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 0.072792687 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 0.076384252 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.02812399 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 0.074869296 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 0.078020386 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 0.044047212 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.03017486 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 0.057700864 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 0.085462551 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 3.7774e-5 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.3792e-5 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 0.028180542 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 3.3633e-5 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.070811523 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.6314e-5 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.0802e-5 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 0.077196326 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.076966888 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.6053e-5 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.8089e-5 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 0.050452068 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 3.2986e-5 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 0.067712407 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.088253473 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 3.6776e-5 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.046577787 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 0.054655412 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.059743376 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.068773947 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 0.078313876 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 0.053783274 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 4.6334e-5 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 0.03158912 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 0.039035451 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 3.6986e-5 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.027495283 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 0.062653649 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 0.059453214 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 0.069392451 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 3.3653e-5 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 3.3321e-5 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 3.0264e-5 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 1.6442e-5 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.4713e-5 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.6524e-5 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.4944e-5 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.3241e-5 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.6985e-5 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.2529e-5 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 0.060972081 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.058594107 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.033459956 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 0.029702726 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.058758145 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 3.7516e-5 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.717e-5 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 0.075795601 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 0.055479655 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.7976e-5 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 4.2087e-5 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.053818903 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.6681e-5 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 0.063318837 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 5.1763e-5 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 0.047958969 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.9948e-5 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.3638e-5 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 0.065892871 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.032003598 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.3034e-5 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 0.05539642 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.054930631 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 3.6314e-5 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 1.9084e-5 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 3.2597e-5 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 3.6077e-5 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.053076949 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.9638e-5 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 0.054954437 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 0.04684668 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 0.064586941 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 3.0409e-5 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.8804e-5 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 3.1275e-5 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.8756e-5 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 0.056959412 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 0.076930378 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 0.068896941 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 3.4741e-5 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 0.066525749 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 3.472e-5 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 0.000112082 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.8719e-5 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.010126478 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 0.060894294 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 0.039873449 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 3.8595e-5 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 0.056996962 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.060416863 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.089185181 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.7036e-5 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.029748422 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 3.7888e-5 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 0.06153431 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 3.8895e-5 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 0.066188613 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 0.056634365 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.03377068 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 4.1941e-5 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 0.055423597 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 0.06393992 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 5.3724e-5 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.413e-5 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 0.061356401 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 5.0084e-5 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.3353e-5 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.4347e-5 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 0.031971469 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 0.043865321 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 4.5015e-5 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 3.4714e-5 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.5263e-5 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 1.656e-5 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 0.066011101 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.8984e-5 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.372e-5 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.3524e-5 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 3.9639e-5 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 1.8079e-5 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.6525e-5 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.615e-5 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.2754e-5 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.7283e-5 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 0.071440591 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.025974803 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 4.0549e-5 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.4505e-5 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 1.8793e-5 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 0.066227223 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 0.077212186 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.7636e-5 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.9406e-5 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.7706e-5 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 3.0822e-5 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.1647e-5 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.0118e-5 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.5274e-5 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.4956e-5 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 1.7115e-5 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 0.067867274 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.7508e-5 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 3.4257e-5 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 3.1639e-5 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.606e-5 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.4952e-5 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.3106e-5 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 4.3642e-5 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.058694926 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 4.4839e-5 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.2074e-5 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.635e-5 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.3947e-5 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 3.2029e-5 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 1.5981e-5 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 1.563e-5 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.692e-5 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.7566e-5 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 0.027979593 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.010100643 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 3.7155e-5 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 3.6094e-5 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.7349e-5 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.055017843 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 0.057542931 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.5206e-5 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 3.4715e-5 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 3.7276e-5 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.1607e-5 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 0.064526475 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.040597794 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 0.066131802 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 3.7023e-5 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 0.057292162 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 4.3897e-5 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.7955e-5 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.6436e-5 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.7514e-5 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.5213e-5 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 0.064407803 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 0.044333488 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 3.3236e-5 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.6649e-5 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.7133e-5 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.4028e-5 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.9034e-5 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 0.065515759 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.7456e-5 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.054515454 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.8945e-5 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 0.086132035 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 0.037317767 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 0.031799238 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.4705e-5 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.0801e-5 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.029566086 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 0.028216047 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 3.6992e-5 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.7603e-5 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.3862e-5 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.3431e-5 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.2725e-5 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 0.060435559 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.8898e-5 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.7658e-5 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 3.0183e-5 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.9259e-5 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.6809e-5 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 0.059172244 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.4149e-5 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 0.062896401 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 3.2453e-5 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.2021e-5 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.2394e-5 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.0345e-5 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.5687e-5 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.9211e-5 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.6773e-5 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 1.9509e-5 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.0865e-5 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 0.065630762 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 0.029307456 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 3.5623e-5 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.2655e-5 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.8562e-5 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.9382e-5 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.0544e-5 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 3.0352e-5 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 3.1472e-5 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 1.3908e-5 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 0.060235516 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 3.0768e-5 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 3.852e-5 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.1423e-5 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.8761e-5 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.0126e-5 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 0.057514416 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.933e-5 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.9729e-5 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.05884769 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 4.1318e-5 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 0.066629372 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 3.12e-5 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 3.0774e-5 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.3118e-5 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.053681898 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 5.098e-5 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.2905e-5 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.0067e-5 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 3.1076e-5 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.4763e-5 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.0717e-5 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.1265e-5 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.1977e-5 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 0.08506865 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 4.0325e-5 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 0.04515297 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 3.0255e-5 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.5054e-5 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 0.026162917 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.8726e-5 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 4.5982e-5 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.034006952 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 4.076e-5 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 3.8845e-5 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.5824e-5 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.247e-5 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.0998e-5 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.8677e-5 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.2087e-5 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.6553e-5 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.059517879 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 3.5669e-5 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.21e-5 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.6521e-5 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 1.5556e-5 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.4378e-5 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.374e-5 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 3.0022e-5 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.6723e-5 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.0443e-5 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 1.931e-5 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.0957e-5 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.058995973 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 3.3037e-5 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 1.5986e-5 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 3.3933e-5 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 3.7352e-5 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.3598e-5 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.4749e-5 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.8376e-5 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 0.071343191 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 4.5486e-5 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.5292e-5 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.6112e-5 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.0581e-5 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.8215e-5 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.033566276 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 4.428e-5 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.0332e-5 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.3042e-5 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 5.8814e-5 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.1623e-5 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 1.8028e-5 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.9827e-5 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.3589e-5 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.2757e-5 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.9928e-5 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.065574889 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.8453e-5 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.2574e-5 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 1.9069e-5 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 0.057198812 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 4.3382e-5 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.2666e-5 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 0.047247156 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.010492433 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 4.3461e-5 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.335e-5 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.0101556 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 3.3727e-5 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.9136e-5 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.2563e-5 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.7692e-5 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.263e-5 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.1069e-5 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.8967e-5 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 4.1663e-5 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 1.9982e-5 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 3.0709e-5 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 4.1838e-5 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 4.8748e-5 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.4451e-5 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 1.8681e-5 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 1.9378e-5 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.5726e-5 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 1.5595e-5 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.4374e-5 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 1.3721e-5 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.4063e-5 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.3121e-5 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.5796e-5 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.1634e-5 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.7193e-5 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 1.8846e-5 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.0833e-5 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 0.031607177 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 3.1328e-5 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.3787e-5 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 6.2092e-5 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.9365e-5 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 1.7698e-5 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.284e-5 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 3.2526e-5 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.3874e-5 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.4261e-5 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.1388e-5 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.168e-5 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.5764e-5 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.4323e-5 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 3.6554e-5 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 1.9076e-5 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 1.2281e-5 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.5282e-5 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.7666e-5 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.6264e-5 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.6408e-5 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.4092e-5 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 1.4912e-5 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 1.2748e-5 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.273e-5 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.4481e-5 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 1.845e-5 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.079335561 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.6302e-5 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.9552e-5 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.0524e-5 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.4678e-5 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 0.047878688 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 3.4774e-5 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.2258e-5 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.0272e-5 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.1921e-5 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.3685e-5 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 0.057579939 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 3.0835e-5 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.064752895 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.4163e-5 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 3.1432e-5 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 1.7918e-5 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.9665e-5 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.6833e-5 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.561e-5 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.2387e-5 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 1.7115e-5 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 0.033848594 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 3.2392e-5 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 3.8401e-5 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.6137e-5 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.8026e-5 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.4952e-5 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 1.8124e-5 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 5.2403e-5 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 1.8139e-5 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.969e-5 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.9186e-5 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.3188e-5 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.6064e-5 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.7271e-5 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.0451e-5 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.1181e-5 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 0.035233511 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 5.0457e-5 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.1885e-5 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 6.6461e-5 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 1.9298e-5 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.1316e-5 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 1.3752e-5 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 1.811e-5 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.1142e-5 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.7402e-5 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.199e-5 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 1.9982e-5 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 1.4848e-5 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.5542e-5 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.5888e-5 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.0183e-5 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 1.8774e-5 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 1.5322e-5 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.6537e-5 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.2718e-5 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 1.4196e-5 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.7066e-5 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 5.325e-5 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.5027e-5 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.1476e-5 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 1.615e-5 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.4126e-5 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.1441e-5 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.1209e-5 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.5565e-5 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.8646e-5 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 1.9157e-5 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 1.5117e-5 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 1.1695e-5 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.2003e-5 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 1.5446e-5 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.3207e-5 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.6207e-5 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.7797e-5 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.2128e-5 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 1.451e-5 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 1.6178e-5 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 1.5286e-5 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.9203e-5 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 1.7551e-5 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.2944e-5 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 1.7354e-5 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.514e-5 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.6864e-5 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.5426e-5 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.1088e-5 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 1.049e-5 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.4655e-5 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 1.6283e-5 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.1538e-5 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.6868e-5 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.6866e-5 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.9294e-5 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.0241e-5 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 1.6515e-5 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 1.6192e-5 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.6641e-5 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.5395e-5 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.6396e-5 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 4.5148e-5 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.7864e-5 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 1.817e-5 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 1.7933e-5 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.4604e-5 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.1987e-5 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.1597e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.6443e-5 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.9012e-5 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 1.9143e-5 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 1.7381e-5 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.4255e-5 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.6393e-5 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 1.826e-5 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.4927e-5 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 1.4779e-5 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.2807e-5 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.2181e-5 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 1.7494e-5 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 1.9422e-5 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.4137e-5 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.5083e-5 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 1.4945e-5 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 1.6289e-5 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.4174e-5 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 1.5493e-5 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.3476e-5 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.1619e-5 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.0268e-5 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.5408e-5 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.3208e-5 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.5612e-5 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 4.1105e-5 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.1713e-5 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.249e-5 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.7332e-5 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 1.4929e-5 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 3.9003e-5 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.6667e-5 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 1.8383e-5 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.1245e-5 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 1.1271e-5 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 1.8934e-5 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.0699e-5 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 1.1943e-5 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.1075e-5 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.1434e-5 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 1.287e-5 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 9.386e-6 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 1.5621e-5 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.1797e-5 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.9707e-5 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 1.5078e-5 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 9.473e-6 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.0117e-5 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.6721e-5 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 1.7553e-5 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 1.888e-5 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.0249e-5 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 1.5702e-5 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.2896e-5 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.8137e-5 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 1.6531e-5 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 1.7004e-5 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 8.938e-6 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 1.763e-5 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 1.1727e-5 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.0159e-5 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 1.9835e-5 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 3.321e-5 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 1.1393e-5 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.4106e-5 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 9.1e-6 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 1.9234e-5 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.3174e-5 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 1.9187e-5 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 1.1307e-5 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 1.5779e-5 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 1.722e-5 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.0789e-5 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.4335e-5 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 1.6097e-5 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.3304e-5 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 1.8611e-5 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.6598e-5 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 1.7131e-5 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 1.4535e-5 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.2038e-5 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 1.498e-5 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 1.8683e-5 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 1.7835e-5 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 1.578e-5 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.1028e-5 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.3585e-5 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 1.3961e-5 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.6902e-5 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.3956e-5 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 1.0827e-5 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 1.2046e-5 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 1.2669e-5 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 3.1142e-5 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 1.1812e-5 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 3.3119e-5 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 1.5563e-5 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 1.4102e-5 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.2545e-5 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 1.6813e-5 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 4.8655e-5 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 1.8551e-5 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 1.392e-5 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 9.106e-6 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 1.3333e-5 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 1.832e-5 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 1.6844e-5 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.9274e-5 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.3308e-5 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.5404e-5 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 1.5362e-5 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.7263e-5 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 1.7338e-5 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 1.906e-5 seconds)
done (took 11.729206379 seconds)
(17/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.042603795 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.05587895 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.050887553 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.03306991 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.036719552 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.036964711 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.025770536 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.035448218 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.026338731 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.038327946 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.043571611 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.042785864 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.041360251 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.043465333 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 3.6257e-5 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.031702374 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.9436e-5 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.039746275 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.035400317 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.051709851 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.052799036 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.1067e-5 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.024935373 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.038641044 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.005749411 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.03785947 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.048408959 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.1395e-5 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.037823603 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.032459651 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.050251839 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 6.3438e-5 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.0234e-5 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.034728382 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.033024688 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.026432254 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 3.828e-5 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 1.5165e-5 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.030906352 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 3.2424e-5 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.051365336 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.035400859 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.001096825 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.001077193 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.3617e-5 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.03478003 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.0195e-5 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 3.1923e-5 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.005724888 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 1.2811e-5 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 6.5704e-5 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.02611802 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.0158e-5 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.034080113 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.8487e-5 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.0234e-5 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 9.043e-6 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 9.093e-6 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.7487e-5 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 9.195e-6 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.9093e-5 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 9.6892e-5 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 6.5989e-5 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.025883744 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.001075411 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.4448e-5 seconds)
  done (took 2.367041237 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.040954941 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.076188017 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.036231174 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.03652709 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.021513925 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.022551457 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.022568666 seconds)
  done (took 1.248981017 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.023506541 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.025808932 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.036737515 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.035996559 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.024150993 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.027283326 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.023017615 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.053971717 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.059986447 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.02700946 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.042375902 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.035822667 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.033594048 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.032412092 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.022407154 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.038479455 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.023328042 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.027914757 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.037522518 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.03707606 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.02317126 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.05103047 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.03548858 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.02357596 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.034507382 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.026001875 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.02583367 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066188029 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.024300045 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.023145835 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.02235156 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.052656199 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.025321425 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.033637033 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.02215274 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.021379147 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.023800804 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021936666 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.023539056 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.02640245 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.023190215 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.025970066 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.025301847 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.023560595 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.023759215 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.022966836 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.023368825 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.022600349 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.022813274 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.025758235 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.033902553 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.025517878 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.026769299 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.033077926 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.032302792 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.025566433 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.027875996 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.0236458 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.025728628 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.033654107 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.024383437 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.036176746 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.035854952 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.023121138 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.035352958 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.031644752 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.025440957 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.022962062 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.023028241 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.031713042 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.023831341 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.035395083 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.028686708 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.025166161 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.020562787 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.031658938 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.023518714 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.023220178 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.023201311 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.032345998 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.022997008 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.022390257 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.023137065 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.022990992 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.023517664 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.02228663 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.022036065 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.041683318 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.051661233 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.024925237 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025892252 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.022618148 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.033413647 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.024934201 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.027111686 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.037582644 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.033911077 seconds)
  done (took 3.838414915 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.03458239 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.023284054 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.022849608 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.02085637 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.020880117 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.020717822 seconds)
  done (took 1.15227023 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.059588022 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.02167582 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.021379159 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.5015e-5 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.040738833 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.022964665 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.023369271 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.7199e-5 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.035965718 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.032134325 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.022944047 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.024415976 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.023666595 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 5.1593e-5 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.023289498 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.031827016 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.023408539 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.024128599 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.03154885 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.154e-5 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.028163714 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.6655e-5 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.2129e-5 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.026749648 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 1.837e-5 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.031570681 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.027933135 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.031773743 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.03205102 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.8071e-5 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.3123e-5 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.9357e-5 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.2625e-5 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 9.249e-6 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.023287289 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.1076e-5 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.7913e-5 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.34e-5 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.023051729 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.7229e-5 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.024452506 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.4388e-5 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.022886482 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.7499e-5 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.0028e-5 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 1.4758e-5 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.1124e-5 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.028315364 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.02321406 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.9264e-5 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.3786e-5 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.6253e-5 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.0363e-5 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 7.379e-6 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.0756e-5 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.6911e-5 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 7.069e-6 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.023152726 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.2644e-5 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.6654e-5 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.2737e-5 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.3364e-5 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.5153e-5 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.2824e-5 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.023458301 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.562e-5 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.5054e-5 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.2572e-5 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 7.531e-6 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.0444e-5 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.1585e-5 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 8.954e-6 seconds)
  done (took 1.838930911 seconds)
done (took 11.455420235 seconds)
(18/23) benchmarking "inference"...
  (1/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 12.731532022 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 0.130364173 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 0.389890085 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.064838156 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.959541267 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 2.1093463 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 0.045966082 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 0.322877944 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 0.160164788 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 0.099537709 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 0.048545379 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 0.420679178 seconds)
  done (took 19.484640574 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 14.965374462 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 0.285550999 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 0.746223908 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.402888758 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 9.683637392 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 0.16874273 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 0.113160838 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 0.710622255 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 0.385074447 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 0.270058665 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 0.083529102 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 1.830469299 seconds)
  done (took 30.930524463 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.307725044 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 0.27930148 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 0.598060374 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.401058724 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 9.461873339 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 0.10434914 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 0.103167972 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 0.69431429 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 0.384125025 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 0.260517598 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 0.080573717 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 1.569431875 seconds)
  done (took 23.933842002 seconds)
done (took 75.357929798 seconds)
(19/23) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.962942116 seconds)
  done (took 3.018268376 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.972848244 seconds)
  done (took 3.052986569 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.05886259 seconds)
  done (took 2.123553051 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.747973281 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 1.167105393 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.946554798 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.125763836 seconds)
  done (took 5.053765123 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.995258533 seconds)
  done (took 3.110127354 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.247217739 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.195308926 seconds)
  done (took 2.546360683 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.657981667 seconds)
  done (took 2.723924266 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.546810637 seconds)
  done (took 3.623671194 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.209186217 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.16159921 seconds)
  done (took 2.444578465 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.701173218 seconds)
  done (took 2.771144023 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 5.460995848 seconds)
  done (took 7.535644134 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.246594466 seconds)
  done (took 2.326916258 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.342413591 seconds)
  done (took 2.486746979 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.910395063 seconds)
  done (took 3.172835029 seconds)
done (took 48.193712575 seconds)
(20/23) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.051050853 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.052621204 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.052473409 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.048922064 seconds)
  done (took 2.284228789 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.044942399 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.043365247 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.035301458 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.04238759 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.02519514 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.026103703 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.045298922 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.030070797 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.024364865 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.04043198 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.028828908 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.039844487 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.040961218 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.034608325 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.034873529 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.041946249 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.040363422 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.044661782 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.02488099 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.034355661 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.040657636 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.040395112 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.029370191 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.031522268 seconds)
  done (took 2.952172284 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.222408788 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.095879302 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.034372845 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.03648654 seconds)
  done (took 2.609013337 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.041579483 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.045324911 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.057871946 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.03995317 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.033437633 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.046053514 seconds)
    (7/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.045358111 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.050863361 seconds)
    (9/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.053164795 seconds)
    (10/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.046454219 seconds)
    (11/24) benchmarking ("isequal", "BitArray")...
    done (took 0.033153096 seconds)
    (12/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.046162727 seconds)
    (13/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.036431221 seconds)
    (14/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.036930796 seconds)
    (15/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.038898198 seconds)
    (16/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.046944257 seconds)
    (17/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.022932773 seconds)
    (18/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.028352575 seconds)
    (19/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.045379624 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.046802472 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.034827626 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.040562026 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.034303798 seconds)
    (24/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.046788612 seconds)
  done (took 3.151782044 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.064605225 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.040663773 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.070715921 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.067220202 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.063982332 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.028567648 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.06792749 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.056879508 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.102244324 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.037304244 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.045659144 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.103290441 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.074634551 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.038444903 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.058213176 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.128263174 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.175799996 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.045101447 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.060518301 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.093177437 seconds)
  done (took 3.576828297 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.037490236 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.026535261 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.025964191 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.026809736 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.060052134 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.048030372 seconds)
  done (took 2.371573483 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.045945582 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.033653171 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.046192051 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.042455704 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 4.7783e-5 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 9.678e-6 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 3.0194e-5 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 3.1612e-5 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 8.087e-6 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.6731e-5 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 1.8559e-5 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 6.948e-6 seconds)
  done (took 2.295256823 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.197262714 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.033920596 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.037178851 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.028107415 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.040742179 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.039644762 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.049102535 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.03506114 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.054841943 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.03037374 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.030235086 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.034372748 seconds)
  done (took 2.704919293 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.210591726 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.178054156 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.346668959 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.244023246 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.327565284 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123735361 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053037821 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.084644196 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.423035714 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.073413601 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05721304 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029430953 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118203851 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.106309415 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033903579 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139448528 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.310690351 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013741796 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058661801 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109472742 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047820857 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.138319458 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06909037 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059251655 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.7303e-5 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070609228 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.031635603 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0244646 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.058575169 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.040783826 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061908378 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.251055999 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.100365931 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 8.0483e-5 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097550594 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.020250709 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042904581 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.040695138 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.163419566 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.023955557 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.035864828 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.01241617 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.001429894 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.4124e-5 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 6.1454e-5 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.052670763 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.015208965 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041154092 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023996532 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.360642697 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045286071 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033336095 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.018181554 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053867807 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.613635312 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.030017603 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.03991713 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.054386513 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.020640574 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.068607727 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.026217943 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069063814 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027919533 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020630773 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090663474 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.029647864 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.3473e-5 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035563241 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.000317792 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028403292 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.047451554 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.075611361 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042770545 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.3492e-5 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.042341901 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.03407152 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088173283 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.006643869 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.059137786 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032311167 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.023861048 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.038603654 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.073831724 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.025209814 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049028275 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045059181 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114388464 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015399351 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.6394e-5 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.068980721 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.012992105 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.2512e-5 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.435e-5 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.061940535 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040180418 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.022454132 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051458922 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.038533607 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.018827476 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.071904881 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.052390079 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.013399475 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.060619767 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.035350239 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120885323 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027241529 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.017501485 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046452553 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025017697 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.226365563 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020551604 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.019369145 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045862753 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.040349223 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034881584 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10605406 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.090667301 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075389729 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039503525 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.071385455 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.013521178 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.03796819 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035233729 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049588469 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078492767 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058641942 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.021873233 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032325113 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057163874 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.023801726 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.017760631 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.05712975 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 5.022e-5 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.7031e-5 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02473085 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.018663936 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060229001 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.039635074 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102119426 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067163323 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.000148964 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078248344 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.033526511 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052397658 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.040405011 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04097254 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.040540247 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000347554 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.021402302 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.6935e-5 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05257524 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 7.872e-5 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062078576 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.022694127 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.036827723 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052162437 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054421407 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.027896781 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.046191932 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.051973151 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047553108 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030454502 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077343301 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059605154 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029017218 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.037143302 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027773768 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.074339946 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015507176 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095381967 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02668207 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061198149 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.023938497 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105745546 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.000370794 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022137377 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.021282157 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.03815777 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.00032831 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056504437 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077427847 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.04189091 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.0153806 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02209052 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082371747 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 8.6169e-5 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051912168 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.029899174 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.041579341 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05183824 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.006697836 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.021751577 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.012059639 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061141014 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082981848 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.017001608 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.055569166 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.000119475 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.023272051 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 4.0297e-5 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.7024e-5 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045579058 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074259694 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05507156 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.049819949 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.231577451 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036225541 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.050345974 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.5066e-5 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.81e-5 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.024052005 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.06920745 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067924068 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019431784 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062958153 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.033697285 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.050657178 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.000129659 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.5001e-5 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073101856 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.0003188 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.037638146 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.026134257 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.020133112 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07457817 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.058425957 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.073320352 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.021398125 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046576172 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.07226003 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.034004327 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.026095472 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061067517 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000319623 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.036067276 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.000479103 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058213154 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.00012185 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 6.6268e-5 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.064618987 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045891255 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.011809051 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.0341e-5 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077504065 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.2742e-5 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.021774392 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017769818 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.00012422 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074668507 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 9.8488e-5 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.044505936 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.064399887 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.039843436 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034987247 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.050541175 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.018267194 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.018370305 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.046390704 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.015436442 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.3568e-5 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.8568e-5 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025048069 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056570065 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.01522474 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.012168663 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117536279 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042001013 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018048035 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016211111 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025185393 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.089338838 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.025776557 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.068976895 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047548161 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054727273 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073282627 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.050958585 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.042713917 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.061485228 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.018698009 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.033569105 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.01095177 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.031498136 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.014808538 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 4.1903e-5 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.014137371 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.053952023 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.012325538 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.06319377 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 7.8007e-5 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.04371244 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040451541 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034282269 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097967591 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.027260773 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072237287 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020476773 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.038560574 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050667562 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022848256 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024308698 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040976638 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.037846206 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055450935 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.040642808 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058505719 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.07107252 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028495502 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.077671831 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033650071 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.057607941 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076064091 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.072177776 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.043583513 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.211072901 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066961729 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051818009 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054878584 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.015543842 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024676353 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043008518 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.034875258 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1130204 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.031988571 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.014847916 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.029814725 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.026990646 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.031511238 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044670336 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.01809366 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09744493 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045001336 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.023465126 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056077461 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.00023009 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034530626 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016597566 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.023805433 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.00018467 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.023670964 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.029875455 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043430121 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088129121 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061011384 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.077700255 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.062317144 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.048918254 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.063650322 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051883001 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049773249 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.01690857 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040300454 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069768854 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037614672 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.000231905 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.04477684 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031215213 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.033790958 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021372728 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.052069435 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03146845 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.000119464 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017900237 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000486177 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.010737431 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.034528322 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.061331504 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046867206 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027908345 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049053241 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.015405472 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041159103 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044772412 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011879705 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057527192 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.017523082 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.02306383 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 3.0067e-5 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025222144 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 8.478e-5 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.068205552 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.047720463 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04446576 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057513151 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.05083279 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026701094 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.073731847 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070858864 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02014389 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020952912 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.038013608 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.014558803 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052804026 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113877 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.043406266 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.000560478 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021115676 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.018141521 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.018645583 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.012409844 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.018259432 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.0401487 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054815197 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053989785 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.065200053 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049307553 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014666732 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.045817252 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034351606 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.023144231 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.03321286 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.036939199 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036811535 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.000124486 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057766724 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042910086 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017919196 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 3.1096e-5 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.014996987 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.0158783 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044743311 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.015746476 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.021372852 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077035604 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.028910345 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046089878 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050003406 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.020339748 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.013754612 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089046302 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.011185781 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067385493 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.014377061 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.018257429 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.017951475 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0134255 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.017069688 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.45225341 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034978999 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055678246 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074681553 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043006291 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.204504892 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091878214 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.9549e-5 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.076635341 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014921305 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 6.9618e-5 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.01439288 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060051479 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019704622 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.072716791 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.048173953 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074849174 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026455674 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.4687e-5 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072621089 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.021133389 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.047719808 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.018247994 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.015056011 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071770694 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.064477626 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.9913e-5 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.022390445 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052552976 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.012350295 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.064196321 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.021296617 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.01194344 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.206195002 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.308849354 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.036881922 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.000125599 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.027783341 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.079036838 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0566479 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024118891 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05024776 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.059831962 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.063460292 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.027728444 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046656917 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.208575641 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.011719045 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.017854838 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.000154341 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041027063 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040594549 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.031723315 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.014136425 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.060629032 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.022365744 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.023161357 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046710564 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028351594 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.023802159 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.035390017 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.016881217 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.006610186 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.063231972 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.000163439 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000493295 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016484893 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.000106505 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025195339 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045108305 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.037599805 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.044227979 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.028997898 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036185943 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.018118873 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045458015 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066008944 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091212678 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056411527 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 3.9744e-5 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.055308728 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.020600997 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.000455076 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032003584 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.000298237 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.013106419 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059542089 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000114276 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 9.1192e-5 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042151338 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.027849353 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061516679 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060924008 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061908097 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.039776323 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018881331 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043793946 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.3707e-5 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 4.3937e-5 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 6.5233e-5 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.3624e-5 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.014622924 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047103339 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.000105046 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.021992546 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.052316903 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.01849756 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.041921274 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.000265705 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.057631832 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016507734 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.039945456 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087951268 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029269364 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.030650261 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052563813 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.062979407 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088809145 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.165160826 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.065660297 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064843371 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.000484588 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.5387e-5 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.015416702 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.052311965 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.01533939 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.021051815 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016525129 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088946797 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.048296188 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.027331937 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.264824519 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.015902349 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.017193139 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.021178193 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.015302313 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.016701454 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049354738 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.020501094 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014995699 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023278511 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.045431381 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.068751049 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060368172 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021252498 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.025305806 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017661283 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.019980639 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.000331398 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.051516663 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.032019365 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 3.0204e-5 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.587392661 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041680877 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093750995 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.019814134 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020715107 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062914618 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02862153 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.442469747 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.018812825 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.064377212 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.076405028 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.061951395 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064959134 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011454404 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016332162 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022817495 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.0489283 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.1797e-5 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.022479581 seconds)
  done (took 31.243940649 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.254426117 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.474254813 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.286758826 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.091687929 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.156602543 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.16465283 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.335913391 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.085697878 seconds)
  done (took 4.065670955 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.041034978 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.029879782 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.076006683 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.203222992 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.066054288 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 1.417e-5 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.4926e-5 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.053229964 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.007267251 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.034402018 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.081736085 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 1.3717e-5 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.009338028 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.550605167 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.1018e-5 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 3.8027e-5 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.007405622 seconds)
  done (took 3.414201026 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.446284076 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 7.325675231 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.849942096 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.548144541 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.104855823 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.673524239 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.009355893 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.007125069 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.793415135 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.604774513 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.088693357 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.170521585 seconds)
  done (took 28.84507537 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.051248473 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.014235716 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.015000977 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.009989632 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.013993257 seconds)
  done (took 2.327838339 seconds)
done (took 94.18822829 seconds)
(21/23) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.062702981 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.150035089 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 9.3357e-5 seconds)
  done (took 2.396452397 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.05721678 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.034008495 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.02652713 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.058217468 seconds)
  done (took 2.41085195 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.099132802 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.039994428 seconds)
  done (took 2.369445796 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.210993363 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.174871171 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.062063866 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.064446484 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.047969326 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.055225296 seconds)
  done (took 2.401558065 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.023171428 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.022579099 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.022794892 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.022486579 seconds)
  done (took 2.328498201 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.021141211 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.020244404 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.03028157 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.046318081 seconds)
  done (took 2.348474875 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.241257265 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.099858664 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.152315049 seconds)
  done (took 2.725001947 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.040878794 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.036127323 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.036186626 seconds)
  done (took 2.348103845 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.0544053 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.053243097 seconds)
  done (took 2.340613392 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.039259246 seconds)
  done (took 2.274792424 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.1013622 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.077146284 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.165170904 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.03902756 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.124089466 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.089529762 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 5.1951e-5 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 3.5143e-5 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 8.278e-6 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.3974e-5 seconds)
  done (took 2.829157683 seconds)
done (took 29.50239595 seconds)
(22/23) benchmarking "sort"...
  (1/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 0.142504943 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 0.061081987 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 0.078912054 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 0.061463852 seconds)
  done (took 2.579895341 seconds)
  (2/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 0.26055097 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 0.218255662 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 0.047500634 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 0.067660382 seconds)
  done (took 2.843864692 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 0.02507086 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 6.554039854 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 0.030789815 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 0.110079365 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.031357217 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 0.026492089 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.609848865 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 1.8079e-5 seconds)
    (9/17) benchmarking "all same"...
    done (took 0.030882041 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 1.4435e-5 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 0.13932117 seconds)
    (12/17) benchmarking "ascending"...
    done (took 0.031884184 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.3654e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 0.036255223 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 0.099680616 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 1.2563e-5 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.027500445 seconds)
  done (took 11.00049159 seconds)
  (4/11) benchmarking "length = 10"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 4.2162e-5 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.0886e-5 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 1.0254e-5 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 9.263e-6 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.8703e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 6.424e-6 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.001028585 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 1.759e-5 seconds)
    (9/17) benchmarking "all same"...
    done (took 6.221e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.588e-6 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 1.337e-5 seconds)
    (12/17) benchmarking "ascending"...
    done (took 6.32e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 1.0794e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 6.254e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 9.508e-6 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.552e-6 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.79e-6 seconds)
  done (took 2.290138088 seconds)
  (5/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 0.000151471 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.9345e-5 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 7.7214e-5 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 9.121e-6 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.4657e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 6.454e-6 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.007726389 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 7.4876e-5 seconds)
    (9/17) benchmarking "all same"...
    done (took 1.5483e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.1717e-5 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 9.8087e-5 seconds)
    (12/17) benchmarking "ascending"...
    done (took 4.7904e-5 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.4178e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 4.7776e-5 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 8.3743e-5 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.8475e-5 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.6702e-5 seconds)
  done (took 2.27640527 seconds)
  (6/11) benchmarking "issues"...
    (1/13) benchmarking "sortperm on a view (Float64)"...
    done (took 0.420157467 seconds)
    (2/13) benchmarking "sort(rand(10^8))"...
    done (took 8.638853434 seconds)
    (3/13) benchmarking "sortperm(rand(10^5))"...
    done (took 0.037582937 seconds)
    (4/13) benchmarking "small Int view"...
    done (took 0.039681176 seconds)
    (5/13) benchmarking "sortperm(rand(10^7))"...
    done (took 8.626022507 seconds)
    (6/13) benchmarking "small Float64 view"...
    done (took 1.4997e-5 seconds)
    (7/13) benchmarking "inplace sorting of a view"...
    done (took 0.035164962 seconds)
    (8/13) benchmarking "sortperm on a view (Int)"...
    done (took 0.185135526 seconds)
    (9/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 0.391684379 seconds)
    (10/13) benchmarking "sortslices sorting very short slices"...
    done (took 1.802807326 seconds)
    (11/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 0.041811392 seconds)
    (12/13) benchmarking "Float16"...
    done (took 1.019561024 seconds)
    (13/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 0.18273213 seconds)
  done (took 23.690352236 seconds)
  (7/11) benchmarking "length = 30"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 4.6656e-5 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.1701e-5 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 1.2926e-5 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 8.958e-6 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.7627e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.54e-6 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.007675219 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.344e-5 seconds)
    (9/17) benchmarking "all same"...
    done (took 9.81e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.653e-6 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 1.672e-5 seconds)
    (12/17) benchmarking "ascending"...
    done (took 8.323e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 1.6841e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 7.802e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 1.3715e-5 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.388e-6 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 9.643e-6 seconds)
  done (took 2.32358831 seconds)
  (8/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.035886025 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.039572189 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.051435235 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.060257744 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.02627098 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.035514729 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.03040864 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.025745066 seconds)
  done (took 2.576179873 seconds)
  (9/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 0.144360477 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 0.118326969 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 0.046836945 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 0.066479795 seconds)
  done (took 2.657701847 seconds)
  (10/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 0.001019213 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 0.000438756 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 0.000739419 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 1.5409e-5 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.000547142 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 1.3364e-5 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.017639366 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 0.000445682 seconds)
    (9/17) benchmarking "all same"...
    done (took 9.4988e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 0.000421171 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 0.001163596 seconds)
    (12/17) benchmarking "ascending"...
    done (took 0.000729896 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 0.000564064 seconds)
    (14/17) benchmarking "descending"...
    done (took 0.00079031 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 0.00109648 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.000446761 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.00071005 seconds)
  done (took 2.308369938 seconds)
  (11/11) benchmarking "length = 100"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 4.9892e-5 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.3328e-5 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 1.8161e-5 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 9.012e-6 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.7679e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.703e-6 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.000221919 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 8.865e-6 seconds)
    (9/17) benchmarking "all same"...
    done (took 6.939e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 7.546e-6 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 2.272e-5 seconds)
    (12/17) benchmarking "ascending"...
    done (took 1.3831e-5 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 1.1611e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 1.2338e-5 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.0963e-5 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 6.954e-6 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 1.2936e-5 seconds)
  done (took 2.273684327 seconds)
done (took 59.069389038 seconds)
(23/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.043799248 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.02502631 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.031347942 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.071967563 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.033065491 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.02197949 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.021309836 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.032214566 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.036130413 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.029348836 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.032001302 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.2279e-5 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.027197041 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.301e-5 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.029483577 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.030069959 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.025389529 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.010854556 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.023033409 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.025442765 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008496678 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.018435167 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.013577201 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.003602838 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.023138068 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.003353555 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.021726052 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.013155205 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.2073e-5 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.009077838 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.025556538 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.0054782 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.012430462 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.012553083 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.030043986 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.011596679 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.005329331 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.028861392 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.005537723 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.00881077 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.009876132 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.008854582 seconds)
  done (took 3.104952931 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.025151275 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.031462421 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.02400886 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.030140473 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028203426 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.033006831 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.029240455 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028472695 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.031060617 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.027720939 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.026890299 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.027063932 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.030642645 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.022554622 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.030592238 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.028078003 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.02827977 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.023207277 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.030210052 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027282712 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.027023368 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022820482 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.02870051 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.031185332 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.024289577 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.031605794 seconds)
  done (took 3.022591033 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.034150729 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.050427981 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.060176684 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.062692869 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.026678124 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.040681102 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.049217431 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.043109417 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.057987216 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.02640162 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.047386702 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.020022225 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.090146431 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.033373965 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.020440219 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.042649463 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.032040008 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.030448547 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.038075142 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.126021724 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.043593039 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.0456341 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.056534075 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.072529664 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.026182733 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.048548081 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.033866024 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.031215946 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.036487717 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.030427536 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.02778578 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.020915313 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.026363226 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.034038702 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.027779806 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.6808e-5 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.040083003 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.032305849 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.040531186 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.027522588 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.025159854 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.027868786 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.054551999 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.134944263 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.026976861 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.020864564 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.027392129 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.03196921 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.027974359 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.069496504 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.03735269 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.027610454 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.02108834 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.03197222 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.02799265 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.038516369 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.026380677 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.026094174 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.037619452 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.024934178 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.043231767 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.032382618 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.034913546 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.027588509 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.029766048 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.031969743 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.021273439 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.020527215 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.0577206 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.041450303 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.068383293 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.023291252 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019913498 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.030230749 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.031622744 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.03505072 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.022408973 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.041364815 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.029774263 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.021230126 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.040479717 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.026316196 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.021558694 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.102139611 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.6013e-5 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 7.954e-6 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 8.301e-6 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.020940189 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.020732396 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.030738238 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.037288669 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020808526 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.02156896 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.040458513 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.035413871 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.026382267 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.7381e-5 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 9.093e-6 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.021421098 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036987933 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.023175144 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.020657217 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.028935938 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.027534946 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.021536023 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.057925859 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.031840461 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.026629451 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 4.008e-5 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 9.908e-6 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.022695191 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.033927794 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.022187533 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.029922569 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.027786763 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.041610447 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.031751134 seconds)
  done (took 6.285615645 seconds)
  (4/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.098419029 seconds)
    (2/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.096088501 seconds)
    (3/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.097367991 seconds)
    (4/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.177463822 seconds)
    (5/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.022298141 seconds)
    (6/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.033328858 seconds)
    (7/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.098088208 seconds)
    (8/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.099421593 seconds)
    (9/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.027148682 seconds)
    (10/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.044425995 seconds)
    (11/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.024329832 seconds)
    (12/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.048143412 seconds)
    (13/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.041105621 seconds)
    (14/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.05662503 seconds)
    (15/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.053959461 seconds)
    (16/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.022657965 seconds)
    (17/27) benchmarking ("BitSet", "Int8")...
    done (took 0.046614267 seconds)
    (18/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.039952503 seconds)
    (19/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.098060116 seconds)
    (20/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.168307043 seconds)
    (21/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.022887592 seconds)
    (22/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.044020688 seconds)
    (23/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.042794851 seconds)
    (24/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.02777994 seconds)
    (25/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.025547293 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.036100805 seconds)
    (27/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.023000468 seconds)
  done (took 3.919805573 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.028510779 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.036492442 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.028410728 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.037984506 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.036083836 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.022229377 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.034634966 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.030038421 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.036179006 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.027660697 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.025486175 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.041483484 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.025547087 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.037946348 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.029772489 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.041019421 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.041334616 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.029053235 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.026690307 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025854524 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.035612952 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.042274243 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.040114982 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021712675 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.022348642 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 4.4879e-5 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.1949e-5 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.030074292 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021114435 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021358529 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019602953 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.032598612 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.035901714 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.027581501 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 4.3516e-5 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.033445 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 4.4337e-5 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.033906607 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.024375438 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.021077098 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020663551 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.027752738 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.021741583 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.6133e-5 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.040818578 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.033109115 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.022048088 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.2672e-5 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.024377488 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019551508 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.032933352 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.031606474 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.6325e-5 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.035891399 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.022132074 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 3.0733e-5 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.9253e-5 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.038052065 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.029089028 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.033895336 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021917996 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.021620863 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.024112037 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.023355247 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.044061598 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.5336e-5 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.021704035 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.7964e-5 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.033523541 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.4813e-5 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 5.246e-5 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.036407072 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019544692 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.023609403 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.9677e-5 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.039801662 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 7.7085e-5 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 3.4004e-5 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.5728e-5 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.027784377 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.023606939 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.024658255 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.3436e-5 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.021438445 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020521343 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 7.9639e-5 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 6.4543e-5 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.1526e-5 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 7.707e-6 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 7.449e-6 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.024485357 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.028692951 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 4.9874e-5 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.7723e-5 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.038700331 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.9946e-5 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.037118739 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.573e-5 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.027192082 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.01952237 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.041373034 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.7531e-5 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.025890295 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000132799 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.0391603 seconds)
  done (took 4.55497209 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.058569569 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.032636148 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.038526859 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.048919696 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.042041624 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.026074548 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.034164756 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.034993118 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.044942221 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.022946409 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.040246815 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.022346697 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.03272027 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.037743585 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.033991608 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.044036296 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.022908395 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.041042853 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.051475012 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.022948469 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.035114413 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.047080207 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.045381363 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.047202196 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.03831641 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.039619183 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.052986083 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.022812858 seconds)
  done (took 3.367902967 seconds)
done (took 26.529514137 seconds)
RUNNING BENCHMARKS...
(1/23) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.384170552 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.429926639 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.30886911 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.575925005 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.398659224 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.328581419 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.340108855 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.314228193 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 9.03465536 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.317459446 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.63280683 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 6.111716571 seconds)
done (took 74.548671003 seconds)
(2/23) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.396046458 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.426409295 seconds)
    (2/2) benchmarking "String"...
    done (took 2.513643693 seconds)
  done (took 7.252551081 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.616865968 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.350166224 seconds)
    (3/3) benchmarking "different"...
    done (took 2.368235852 seconds)
  done (took 9.639664048 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.333379131 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.053546653 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.497581144 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.135674177 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.789977736 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.28345437 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.020177758 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.996872318 seconds)
  done (took 33.108086123 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 4.833814853 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.441860624 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.669661155 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.571209535 seconds)
  done (took 16.821304946 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.611545729 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.47535621 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.476246007 seconds)
    (4/4) benchmarking "different"...
    done (took 2.405902228 seconds)
  done (took 12.279929706 seconds)
done (took 92.165226729 seconds)
(3/23) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.308861035 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 8.420379807 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.377772931 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.463661891 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.440380094 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.443335977 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.339106914 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.391337131 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.306395745 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.313662227 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.449810916 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 2.343519044 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 3.588728328 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.310027496 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.308852407 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.43616362 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 8.440612378 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.335186528 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.371703747 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 8.85754709 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.28279287 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.336126283 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.325634263 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.361531019 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 9.610124233 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.416772559 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 8.017096896 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.30589614 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.326927742 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.346681394 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.317352116 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.311852806 seconds)
  done (took 217.512503397 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.307790003 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.768787542 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.808379581 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.393925935 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.399407101 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.536399871 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.229531363 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.405043409 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.308333557 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.373336739 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.944931846 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.309257439 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.945500204 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.275724263 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.348501212 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.476830588 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.801582512 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.879006351 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.351222351 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.515117924 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.35854734 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.686849429 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.647195494 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.81738941 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.38249204 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.448633117 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.358449789 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.341022148 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.070396254 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.76856302 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.369889317 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.409248591 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.464095074 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.175904715 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.359039246 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.336465272 seconds)
  done (took 194.679680579 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.430742035 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.314871957 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.364654825 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.453138723 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.090733641 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 7.168361597 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.319865488 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.308857782 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.309783681 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.31322624 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.307917888 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.37880172 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.308041365 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 25.277376183 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.339374486 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.308514696 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.308633663 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 25.264978855 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.32423551 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.309932845 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.309496577 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.369681399 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.68786285 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.508974928 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.316288486 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.306324395 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.464772548 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.319540385 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.327507032 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 2.317880832 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.510243778 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.319255094 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.389396501 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.46084762 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.322842613 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.388153265 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.315532724 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.920455779 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.324207089 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.306318821 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.310009448 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.369128072 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.308972888 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.459552642 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.406625143 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.313954048 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.326425419 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.692684029 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.948800358 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.312249147 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.30976789 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.308829503 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.310984556 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.309109095 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 23.217561221 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.319696224 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.337039284 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.052887333 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.308991033 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.30892636 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.308677353 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.307208279 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.308393053 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.311338924 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.445778477 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.108938476 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 23.004442355 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.695319742 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.136443291 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.31810028 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.309076598 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 2.307333608 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.951766654 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.445452639 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.319509529 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 2.308066989 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.38507548 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.308446379 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.307937323 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.917666207 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.916114846 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.306291127 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.468059929 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.318623951 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.307559351 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 23.262271674 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 25.319975034 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.323812172 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.325108643 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.45323242 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.324640296 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.306963177 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.313278355 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.916875575 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.309417501 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.317790744 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.438888 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.319871027 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.312273552 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 19.039363566 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.535291634 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.311534157 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.510286937 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.550700511 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.534909356 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.316488695 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.309636504 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.361556933 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.308607531 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.317341772 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.31502822 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.308403376 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.310721218 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.317188018 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.308171938 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.309054236 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.308021269 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.328595594 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.308997361 seconds)
  done (took 479.476493838 seconds)
done (took 896.404357002 seconds)
(4/23) benchmarking "parallel"...
done (took 2.305629395 seconds)
(5/23) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.381284076 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.806059746 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 4.90405402 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.401134216 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.376691207 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.347712913 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.463221041 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.429466092 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.420830763 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.363758814 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.405713902 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.367483686 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.365815193 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.426100917 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.430632944 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.393045325 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.367001807 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 3.98795142 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.417492602 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.364761121 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.348361066 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.413635011 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.367276786 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.419647029 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.446710175 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.359672113 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.722507531 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.42688191 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.37689455 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.406624568 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.485905581 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.374999394 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.470871088 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.429919871 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.423761157 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.438699754 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.454632534 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.480150466 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.354524299 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.482067396 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.433886893 seconds)
  done (took 105.847444884 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 3.211022894 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.493342754 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.589026854 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.524616069 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 3.059335681 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.580840419 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.595973105 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.487180958 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.486427389 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.585110147 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.578389676 seconds)
  done (took 31.509913509 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.880002209 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.503411137 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.583037343 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.453588819 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.562282083 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.591176909 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.468516624 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.489636109 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.486454106 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.588600887 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.585890924 seconds)
  done (took 30.502042103 seconds)
done (took 170.166485268 seconds)
(6/23) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.73002672 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.364471625 seconds)
  done (took 7.404625041 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.322662024 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.317568324 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.319751474 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.319942339 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.319600501 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.319830381 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.336982455 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.322579777 seconds)
  done (took 20.889296675 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.317197574 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.318182712 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.31803802 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.317584557 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.317303694 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.31833287 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.319070566 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.31862048 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.316921445 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.319622909 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.317718956 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.319375723 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.317114466 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.317704472 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.318790737 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.33327927 seconds)
  done (took 39.413764526 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.324082615 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.318611637 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.320943985 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.318880361 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.320152616 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 2.326884755 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.320511576 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.322486423 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 2.318299804 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.320005986 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.318868368 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.319572761 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.316253134 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.320195085 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 2.320536572 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 2.318579435 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.321224601 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 2.319315664 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 2.320016937 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 2.32007092 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 2.319132489 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.319447137 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.322455537 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.321735595 seconds)
  done (took 57.999321928 seconds)
done (took 128.013069524 seconds)
(7/23) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.483498256 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.61359286 seconds)
  done (took 9.407264169 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.334217572 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.331585974 seconds)
  done (took 6.976785369 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.66462126 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.345852627 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.860135573 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.606098275 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.347506972 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.34812136 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.782186242 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.347137514 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.347862809 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.34583258 seconds)
  done (took 27.305303644 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.356521849 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.523377237 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.50569216 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.442296717 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.5098994 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.36440516 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.37550846 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.358446323 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.553142167 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.352187301 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.479953604 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.528503508 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.48863506 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.559849071 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.374431897 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.515897305 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.548164282 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.487652434 seconds)
  done (took 46.633558374 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.343440133 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.34963335 seconds)
  done (took 7.001664048 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.474512309 seconds)
    (2/7) benchmarking "second"...
    done (took 2.363829927 seconds)
    (3/7) benchmarking "month"...
    done (took 2.449391908 seconds)
    (4/7) benchmarking "year"...
    done (took 2.435832151 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.363428417 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.351248861 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.362065184 seconds)
  done (took 19.114105419 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.7980867 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.347367705 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.370947207 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.806625649 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.997713011 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.211976719 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.997439155 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.220974783 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 3.113337578 seconds)
  done (took 28.174968244 seconds)
done (took 146.922988822 seconds)
(8/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.227579225 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.316874757 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.319334513 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.364087636 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.347871115 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.713321626 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.381397311 seconds)
  (8/8) benchmarking "mandel"...
  done (took 4.246599454 seconds)
done (took 47.224297606 seconds)
(9/23) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.475736198 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.870707565 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.920701983 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 8.178824895 seconds)
  done (took 26.284474482 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.395144795 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.850254258 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.323620942 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.695610656 seconds)
  done (took 27.711632338 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.771703948 seconds)
    (2/2) benchmarking "read"...
    done (took 2.83465903 seconds)
  done (took 7.924410917 seconds)
done (took 71.711174528 seconds)
(10/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 7.312260828 seconds)
done (took 9.622510597 seconds)
(11/23) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.374334367 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.358847919 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.376699408 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.375607827 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.377912037 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.376557458 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.31892855 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.375212605 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.357022447 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 2.376872175 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.378009409 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.18024382 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.377678706 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.698471646 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.31986453 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.181493525 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.320285349 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.379726963 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.696703284 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.376145487 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.319129919 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.376820957 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.382720039 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.378562024 seconds)
  done (took 69.344074375 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.394965016 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.384493919 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.399597844 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.390213344 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.445866482 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.39733454 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.394261778 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.364692241 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.395515266 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.374460836 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.359465472 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.442346823 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.370341574 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.441038485 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.371678563 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.441646748 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.400519493 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.36792175 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.372728503 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.450637654 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.38934199 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.362421104 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.44232883 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.366550169 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.433815047 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.358450621 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.375618075 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.384114497 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.367037988 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.433212566 seconds)
  done (took 74.18260212 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.364601215 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.334099528 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.340680255 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.410754546 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.332400525 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.344166084 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.34706044 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.333122157 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.334547351 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.345310026 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.349569732 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.347899736 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.354181009 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.348706844 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.332211508 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.343707238 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.347893979 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.395453414 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.332166575 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.333986654 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.371599837 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.350081258 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.332860217 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.347714479 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.34890964 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.343323377 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.332625345 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.346316015 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.346015261 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.346374018 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.348113322 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.374108973 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.345448377 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.347285413 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.348700107 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.392567345 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.348701893 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.357722186 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.348118321 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.333117827 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.333419447 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.333392356 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.348363903 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.332111436 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.350613408 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.35191221 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.348007976 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.347854588 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.338339332 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.350549365 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.333842564 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.357291558 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.343706775 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.355012005 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.343077868 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.348350462 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.337361868 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.346294675 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.352976843 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.332899924 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.33225432 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.349075147 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.352210845 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.346851593 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.511134152 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.350322507 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.35113188 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.33583521 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.350364635 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.431780237 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.3489053 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.433417142 seconds)
  done (took 171.673236688 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.371631127 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.416971135 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.402009991 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.400295138 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.407178839 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.369909017 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.417497793 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.760729913 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.927542935 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.430509451 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.758889848 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.418621519 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.917498756 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.429170645 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.378435295 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.399976447 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.426330592 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.405363901 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.369629108 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.430845963 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.376800052 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.416934588 seconds)
  done (took 56.946291907 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.362919898 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 3.202699698 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.367904887 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 3.275449709 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 3.17840663 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 3.228879574 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.365682015 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 3.245315889 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.365470526 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.368599681 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.367225912 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.364507026 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 3.160723976 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.36886294 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.3699098 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 3.204715686 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.364677467 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 3.172877182 seconds)
  done (took 51.648282694 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.540467947 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.45502549 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.386829508 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.370930739 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.549509518 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.501090863 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.434747994 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.493371121 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.362840772 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.452735791 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.492322683 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.358860741 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.499249306 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.368364908 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.362490062 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.551246155 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.388130347 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.368071002 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.425480423 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.43700523 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.541823921 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.431382243 seconds)
  done (took 56.083566252 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.367626176 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.369614658 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.423476553 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.416431202 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.369502276 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.367544205 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.387381459 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.370370318 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 3.23591997 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.371152889 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.372236951 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.369106628 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 3.223086776 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.390024788 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.432864804 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.373438655 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.372550994 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.392006847 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.370260743 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.369876446 seconds)
  done (took 51.65542211 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.40097781 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.372313073 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.37466268 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.402843987 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.375172641 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.372487974 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.401774812 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.374276015 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.375414368 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.562609149 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.380059075 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.374092492 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.420370444 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.380581701 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.381002441 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.404109261 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.408285557 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.400866413 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.370728982 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.375039851 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.560464835 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.384446595 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.400334292 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.370221903 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.373966503 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.371266764 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.375445761 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.380367962 seconds)
  done (took 69.439882858 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.391308762 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.36655606 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.37026444 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.396929513 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.394953156 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.41081477 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.393432486 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.390759449 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.371286455 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.370605083 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.39158594 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.367351082 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.366366885 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.394743195 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.371398682 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.393962566 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.853070963 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.395061149 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.412626165 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.314954344 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.394516673 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.855389567 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.393200969 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.369878416 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.315527013 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.392129634 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.394026239 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.39112216 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.393168911 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.36993994 seconds)
  done (took 90.705287939 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.347335931 seconds)
    (2/2) benchmarking "in"...
    done (took 2.349665347 seconds)
  done (took 7.014330537 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.364199328 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.427343714 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.372874562 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.503260528 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.550537438 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.478589915 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.494043013 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.434628038 seconds)
  done (took 21.939637186 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.359218666 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 3.942807594 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.37689058 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.358613077 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.360840763 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.946819942 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.837868667 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.341540118 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.193521244 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.929475901 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 3.173700169 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.510529481 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.879526901 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.274831779 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.422352197 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.70893242 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.695604248 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.12415759 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.580975996 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.365853936 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.930791304 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.360796255 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 3.35778965 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.358678523 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 3.380879516 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.778074708 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 4.128607027 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.350986576 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.651662872 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 3.391469892 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.897722478 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.355195411 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.358866584 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.812458393 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.360219555 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.354132822 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.854441274 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.364007084 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.512276807 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.358082736 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.176249152 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.208032477 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.219535692 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.863585057 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.372878138 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.372425628 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.369372824 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.365804711 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.125654365 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.533501187 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.877052785 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.880764036 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.431398083 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.365606072 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.122754328 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.382870348 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.415789818 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 3.055785505 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.990661161 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.884059565 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.254563023 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.67812928 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.448174321 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.384388691 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.364929536 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.21981287 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.74366846 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.90675265 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.319710946 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.36081779 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.954012748 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.387947384 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 3.361771516 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.357099619 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.975174875 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.517651924 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.3603596 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.364798599 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.35817024 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.363467654 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.831154849 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.411453143 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.704490267 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.432282115 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.213956705 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.659495248 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.35982703 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.397670193 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 4.125883714 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.82613631 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 3.165740098 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.030955351 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 3.082084007 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.419199266 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.515958492 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.33009384 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.371678747 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.359597427 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.734504155 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.922233266 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.378189199 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.351563374 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.303279466 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.925501509 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.351136948 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.480172919 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.290191772 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.362170642 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.876524012 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.487331479 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.362082481 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 3.404263258 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 3.97611692 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 3.187965568 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.355436802 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.2122698 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.881753925 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.868513916 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 3.858510449 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.300861241 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.533416637 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 4.130750761 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.253496764 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 3.746654462 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.352886764 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.710157366 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.496317954 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 4.397644384 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.329058111 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.50139426 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.214522482 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.3713481 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.363754987 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.25596801 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.399264805 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.356142707 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.351671693 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.389562466 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.356604262 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.358355512 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.211378458 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.885244044 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.196175165 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.453524049 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.208068316 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.41916386 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.193023697 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.764348743 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.622050336 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.43248022 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.362921365 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.072855235 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.135277916 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.122845534 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.502138959 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.361023019 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.362050011 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.728734008 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.26454398 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.487343311 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.434777846 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.788641488 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 3.187614914 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.359771933 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.36239502 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.305892595 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.476490354 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.368414101 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.489069878 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.320719627 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.133253227 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.586254846 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.264883966 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.40785166 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.354832185 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.353188993 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.351002138 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.683569581 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.549032856 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 5.367707036 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.556896563 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.420145626 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.403232337 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.809352314 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.47644666 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.611544363 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.13794655 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.421247105 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.452036114 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 3.393779297 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.373453665 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.494752361 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.412379864 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.154018749 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.270796295 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 3.209939677 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.843866489 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 3.173804205 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.315686436 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.439911753 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.084686824 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.370401666 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.526362474 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.366998743 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.35906077 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.233498184 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 3.03301695 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 3.459778394 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.555502608 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.565519929 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.358863404 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.19256349 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.508251557 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.984599293 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.492508808 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.704515764 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.380247339 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.51155796 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.813113408 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.30807806 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.365355589 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.36152237 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.257800672 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.376329866 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.376615288 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.491326697 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.64981596 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.854964404 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.571324909 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.048633609 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.773546721 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.312834358 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 3.053706708 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.425928048 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.261824833 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.494549767 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 3.251362843 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.935879723 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 3.912181954 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.436198767 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.346760558 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 3.493192192 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.002924595 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.417370464 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.46534649 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.503032634 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.791598497 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.493802885 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.36102533 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.834795457 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.48281829 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.139679703 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.496504555 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.213083355 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 3.899193365 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.288082753 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.490968531 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.242282457 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.944955878 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.610686248 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.813558052 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.198666135 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.300686215 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.910064771 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 3.173561242 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.123221149 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.157913351 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.905162108 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.431250071 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.36269069 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.360852537 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.560468797 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.483652847 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.368141266 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.831872239 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.862821827 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 3.10734803 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 3.18263979 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.357588257 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.360368794 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.692992451 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.621072214 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.017998698 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.722121878 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.452998813 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.14051241 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.492628691 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.203056719 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.348896983 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.834411331 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 3.164805483 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.423269014 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.055441609 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.495785177 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.667175568 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.50921134 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.011653771 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.848443675 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.679679825 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.198950769 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.414512754 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.50273326 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.115468232 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.410719513 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 3.079416239 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 3.943881376 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.54764815 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.516072824 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.020247072 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.595203813 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.896647938 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.83039459 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.508050945 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.471142223 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.403793692 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.361233963 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 3.528045032 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.870800465 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.361781273 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.687350023 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.793920436 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.907936191 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 4.175589182 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 3.305355466 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.35686507 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.383186986 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.584348007 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 3.139449033 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.278999288 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 3.981154655 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.595845089 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.357866959 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.354653425 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.867255483 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 3.729676955 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.315677513 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.257036228 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.841098951 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.41691518 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.366171679 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.353737054 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.361188054 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.358103421 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 3.371035175 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.355247583 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.846875989 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.51773312 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 3.88867033 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 3.17320432 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.364522918 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.865326271 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.522148916 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.353077292 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 3.620663147 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.557420952 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 3.207712634 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.375307172 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.360422122 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.254577949 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 3.519833437 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 3.084701608 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.528393675 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.809235745 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.214475306 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.001322622 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.634921537 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.276297332 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.258413317 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 3.755374071 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.358306959 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.783762941 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 3.169387054 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.706744099 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.250132009 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.452248631 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.629169641 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.885729651 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.600091655 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.825688184 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.302703416 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.273019561 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.469078754 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.43298049 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.353469689 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.650966019 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.44185197 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.370383158 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 3.706466863 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.410953364 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 3.065707172 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.669899444 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.483598337 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 3.824601376 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.699824668 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 3.373164016 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.36342789 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.358765399 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.870434791 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.863582601 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.55996604 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.493504521 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 3.053190179 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.93331995 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.820370787 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.566243787 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.237908167 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.419600573 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.364495951 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.359854831 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.379751228 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 3.870697445 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.606719988 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.688642777 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.40986132 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.372782534 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 3.58642985 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.490951829 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.740628188 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.80226181 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.489234853 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.35335814 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.510743846 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.86868157 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.422842951 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.712149372 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.965457962 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.600365743 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 5.024932902 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.18230127 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.490908606 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.774236472 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.0204362 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.894607493 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.352753678 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.714482653 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.428578137 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.696595882 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.32180723 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.195658841 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.423041802 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.79533605 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 4.302021476 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.432146306 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.474464617 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.446887121 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.353840447 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 3.919986847 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.294165756 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.319448185 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.500831148 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.354660175 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 3.31243769 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.103802432 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.452317363 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.58100307 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.466629716 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.376245466 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 3.848653181 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 3.096925025 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 3.182019353 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.359966247 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.363518214 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 3.908464293 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.665556412 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.362346711 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.261607459 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.363994292 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.496911337 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.513950924 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.532854212 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.419935204 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.66552971 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 3.82106931 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 3.454107934 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.381141298 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.357996376 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.35634074 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.357863043 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.71197632 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.510616762 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.357020252 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.484751715 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.424653376 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.349302606 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.802310531 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.753214209 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.466453604 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.254013184 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.417387719 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.489451698 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.581237739 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 3.163031271 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.250026959 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.934094357 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.694141631 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.082357849 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.505766931 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.354906877 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.309656334 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 3.752708478 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.541606842 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.805310644 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.733630253 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.475507229 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.125343678 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.495478201 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 3.848529538 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.608787404 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.356783786 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.478916171 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.053653217 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.84491001 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.510172692 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.884086494 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.497405145 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 3.285621366 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.701542741 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.408221679 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.371058673 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.363011212 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.471442565 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.197857611 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 4.28167031 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.221286332 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.416223665 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.504295322 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.518178888 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.658430242 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 3.918846218 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.43642156 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.134572935 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.009947414 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.537493882 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.860698545 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 3.691719693 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.560817162 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.195727632 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.3990516 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.707621033 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.562508256 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.358085617 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.703586406 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.549430621 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.35851553 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.497845443 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 3.040051665 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.791516165 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.487580278 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.718550873 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.516705457 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.364017588 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.480038043 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.387852046 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.362693956 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.360618697 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 3.388824751 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.208377076 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 3.530431542 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.360775069 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.684819179 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.519198361 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.726098745 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.913632203 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.239071161 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.395677306 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.355527269 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.359071477 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.419648462 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 3.813282459 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 3.597743261 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.30978007 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.933506111 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.485066085 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.874535772 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.827267278 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.41257879 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.328967941 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.495849142 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.359195524 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.043258213 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 3.940064225 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.952514075 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 3.962282468 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.480532696 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.482429045 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.727492971 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.817072018 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.463606949 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.091116172 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.594615742 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 3.621034817 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.355695009 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.35957393 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.480206279 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.878949072 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.410974348 seconds)
  done (took 1908.048291092 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.583577136 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.382697674 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.380763797 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.375307673 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.422314883 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.380558111 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.373532574 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.385249647 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.380946724 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.401100488 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.37755844 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.376137107 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.406943407 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.608380097 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.433797067 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.411820908 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.375192326 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.393369545 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.377924486 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.39641962 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.406177719 seconds)
  done (took 52.952442243 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.369290183 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.379127761 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.422807881 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.429855601 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.412588697 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.370995237 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.42849111 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.368948622 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.437842327 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.37915382 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.430265659 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.372724281 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.388639504 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.382804526 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.383577816 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.385150864 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.429549175 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.417716498 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.371892201 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.432830206 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.383150025 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.426529071 seconds)
  done (took 55.129634178 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.371265419 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.360128428 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.076001523 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.495174319 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.358097772 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.414075632 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.361100228 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 3.364538504 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.875031318 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.90068734 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 4.1164556 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.945895158 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.358962672 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 3.215803986 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.401693355 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.360533589 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.363698641 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.361556061 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.360356525 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.365025475 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.368550074 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.696344168 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.504940671 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.365667849 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.718254741 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.463754942 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.357532377 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.367858294 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.359497473 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 3.0880069 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 3.16236086 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.357111482 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.236156061 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.811534421 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 3.320479323 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.879613968 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 3.175898165 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.362397492 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.358318459 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.364223629 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 3.214756504 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 3.717815377 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.367248169 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.363380048 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.809322853 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.493808267 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.362825121 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.305830178 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.924534037 seconds)
  done (took 139.629433038 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.376766408 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.450521601 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.391511112 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.381308774 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.468440535 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.390144607 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.392612036 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.382383484 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.388511328 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.382700847 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.462628848 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.516096541 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.391582993 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.383542062 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.39438443 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.390323883 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.393003275 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.388872365 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.394732938 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.390183154 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.394309252 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.395511223 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.447352995 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.516757625 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.379206661 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.387647063 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.389129839 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.38710383 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.512340037 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.396345199 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.384691857 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.388891737 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.459505219 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.411476975 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.427694831 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.492172606 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.45670496 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.389152784 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.387448945 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.383892887 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.391353836 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.38785319 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.388061669 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.466650578 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.400771905 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.446949384 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.392867945 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.378630562 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.51442178 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.374663542 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.404477009 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.516797874 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.384350571 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.389253002 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.382650531 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.447661825 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.388499916 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.390599337 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.376234385 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.512560601 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.37954529 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.387913182 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.515382652 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.373500187 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.391274187 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.521380998 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.445307069 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.386492959 seconds)
  done (took 166.563915812 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.417510324 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.460194502 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.513053971 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.520509042 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.461544373 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.463556348 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.462532837 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.464436968 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.460434408 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.486382911 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.46092577 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.435675813 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.435930024 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.430672719 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.463835224 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.458772997 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.461885931 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.467130119 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.46260774 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.463799353 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.460222057 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.52008878 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.463879345 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.517159512 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.670437493 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.432066015 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.459573792 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.468092182 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.518177914 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.465239736 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.667345079 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.466977388 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.460326534 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.5220824 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.669436506 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.459626888 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.415105899 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.459450548 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.463950961 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.45815639 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.439539313 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.525126977 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.459361813 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.431477308 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.464220089 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.4581668 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.520688961 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.6681812 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.426783259 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.474165647 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.461163255 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.516465265 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.463681666 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.45973369 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.522453074 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.420064846 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.517419286 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.516785529 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.462332221 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.518693887 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.519579009 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.421915138 seconds)
  done (took 156.263497537 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.442088383 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.443915266 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.46163889 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.368899792 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.37466776 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.470021875 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.382899029 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.370875325 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.446313125 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.444324842 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.2890695 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.461296488 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.536643228 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.29397247 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.471826585 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.538726947 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.462088652 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.480430807 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.442396323 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.480490672 seconds)
  done (took 54.984992181 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.390023421 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.457469374 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.410420393 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.507623611 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.397849864 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.464869987 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.390418867 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.180033921 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.199828804 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.175116646 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.466974695 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.467847057 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.20137114 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.505621857 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.456964518 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.467530109 seconds)
  done (took 44.466080412 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.391696945 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.401377754 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.369663761 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.372288466 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.384782691 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.363448539 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.375085843 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.361367067 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.39426005 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.733097959 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.365659495 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.404750266 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.370411259 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.369950016 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.359290949 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.398706454 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.389356612 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.371415781 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.3751986 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.361983835 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.849198945 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.361768642 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.398557179 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.362703465 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.384329408 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.846012015 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.373256404 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.391193347 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.367801037 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.404293346 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.385623281 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.742072272 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.389828156 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.366680155 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.369130907 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.365510583 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.378608457 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.397179379 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.396776688 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.382426542 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.36222297 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.392770795 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.371230868 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.366439258 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.38894127 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.396457687 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.392057645 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.734091536 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.360563264 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.391209592 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.374603978 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.366243761 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.365490184 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.74070597 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.370292709 seconds)
  done (took 135.523474895 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.380222396 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.380652204 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.384835794 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.378797313 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.396927942 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.377099747 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.375854482 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 3.201912579 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.381266999 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.375432562 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.414798895 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 3.221161169 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.380506047 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.382403751 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.412125765 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.377124337 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.382123121 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.441498803 seconds)
  done (took 46.966201297 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.394766328 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.435049795 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.381586834 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.394541931 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.395656477 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.438889188 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.374255493 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.38265762 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.795797978 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.395852179 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.858854046 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.378261299 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.787488364 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.384507683 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.435966685 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.854365044 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.383057104 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.368200753 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.397601123 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.375249079 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.436280093 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.368796028 seconds)
  done (took 56.740816134 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "Int64", "+")...
    done (took 2.374604085 seconds)
    (2/6) benchmarking ("#6", "BigInt", "+")...
    done (took 2.52630339 seconds)
    (3/6) benchmarking ("#8", "BigInt", "+")...
    done (took 2.603315503 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 2.481090872 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 2.331336681 seconds)
    (6/6) benchmarking ("#8", "UInt64", "+")...
    done (took 2.465298179 seconds)
  done (took 17.10902383 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.450831438 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.464873693 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.44638337 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.381598493 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.398536167 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.412894541 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.411500348 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.415920806 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.395989788 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.616578338 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.405167321 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.403141639 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.395618789 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.467816689 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.398265235 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.400081356 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.408211097 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.410459078 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.386921119 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.401624489 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.40905385 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.39652592 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.401460386 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.403339291 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.410084776 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.469512932 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.393404742 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.617143078 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.41157102 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.400208576 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.398076768 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.403606079 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.39622859 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.614424303 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.385961425 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.396783987 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.40811708 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.395699427 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.404439079 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.46144663 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.377062093 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.399698885 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.398095746 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.438653012 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.399231595 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.416038413 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.429760282 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.405431107 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.407971531 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.606929358 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.398982185 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.463475565 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.398855021 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.402516159 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.397383172 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.603061043 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.61830799 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.472888719 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.399565951 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.616806129 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.465587679 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.397997137 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.462808354 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.621947562 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.403186201 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.465800998 seconds)
  done (took 163.30350683 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.463360913 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.380738514 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.408354708 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.626295382 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.465123269 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.411659437 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.408864675 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.409945158 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.408883423 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.396504283 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.401548579 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.411720227 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.462536362 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.471391534 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.408756266 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.408002081 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.410340071 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.462594449 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.390070506 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.606945037 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.408913499 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.464955501 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.467595582 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.466166242 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.621829564 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.400104211 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.414578346 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.410502753 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.407550527 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.408301775 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.432491277 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.405031303 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.463431498 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.381904358 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.464797242 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.40350868 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.412478527 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.428346824 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.413538092 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.401278233 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.466029512 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.3954728 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.405204697 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.407773588 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.611845577 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.408156155 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.406745463 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.388129052 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.406919849 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.386132054 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.614790072 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.612265683 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.621013872 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.466244089 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.404932998 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.404892263 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.406473173 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.406379717 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.420947163 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.407525837 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.463769673 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.407412535 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.607814447 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.411597899 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.407994515 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.462496097 seconds)
  done (took 163.627678601 seconds)
done (took 3884.249679198 seconds)
(12/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.516820319 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.805236761 seconds)
  done (took 17.645809151 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.908980604 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 3.220850374 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 4.136891106 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 7.560788903 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.439290886 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.907373179 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.778900735 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.622057738 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 7.429625734 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.954535557 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 3.138185602 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 3.186292555 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 3.182190459 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 7.37094065 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.627249081 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 7.476377241 seconds)
  done (took 88.416955649 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.07934098 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 3.261178451 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.960846494 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.971801775 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.363550945 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.823656554 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.868383795 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 3.558642934 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.815396089 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.588327073 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.493691932 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 3.386801814 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 4.142414002 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.161141906 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 3.06704967 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.69129211 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.772406301 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.837559353 seconds)
  done (took 60.173150841 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.429379964 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 3.246402746 seconds)
  done (took 13.031390092 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.365544411 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.401540951 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.394243152 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.411213363 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.426089118 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.407160656 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.383576504 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.405997013 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.404482597 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.414529039 seconds)
  done (took 76.354178057 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 3.806832626 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.448421352 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 6.786111443 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 3.005419532 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.326321818 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.902463243 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.518429949 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.701858085 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.4515586 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.214806607 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.332860511 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.680640459 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.089839147 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.190155784 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.908019842 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 3.037466105 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.330772414 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.779753795 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.617895567 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.456187992 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.38853519 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 3.564221579 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.765255999 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 7.089184362 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.32853702 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.28473165 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.35256137 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.463496405 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.425781339 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.095942657 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.433121408 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.324556354 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 3.584554321 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.639386368 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.18588924 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.833528483 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.868305746 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.439172146 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.531984813 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.700186817 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 6.474095972 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.310236008 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.472878098 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.245698999 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.693555157 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.162763388 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 7.042196636 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 6.088683836 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 5.992347372 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 6.041721105 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 7.330794596 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.518841807 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 6.025810121 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 6.012840539 seconds)
  done (took 230.637613958 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.34805253 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 4.665398298 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.699402064 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.342242563 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.881605623 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.832561002 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.341460678 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.784822838 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.344877363 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.882927764 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.951185051 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.521804113 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.33265282 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.344054367 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.353560343 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.342060472 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.93756151 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.859524316 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.363197039 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.338510034 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.766140896 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.813211435 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.811852358 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.348332816 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.647843888 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.801458143 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.697360373 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.581748346 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.341339605 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.337380648 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.788464015 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.352575288 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.346459168 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.329112761 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.710643861 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.794640135 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.801728925 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.343013788 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.329051427 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.330801816 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 6.503812197 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.818315203 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.742151389 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.81963035 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.729838418 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.787883038 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.265229495 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.327836534 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 6.190924605 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.769420272 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.095189169 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 3.009912212 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.60130077 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.336198396 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.325327625 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.332757768 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.348500022 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.785284105 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.606247364 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.563262786 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.336169948 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.355408724 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.325772285 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.295539424 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.339423094 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.554914641 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.336827574 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.342700237 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.510715063 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.520487463 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.540171043 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.794942495 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.750349024 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.355200086 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.33549947 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.776340673 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.829439745 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.844789355 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.337134025 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.324347519 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.893018484 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.342299266 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.732743215 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.991502594 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.904453423 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.835584963 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 6.208370029 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.329431037 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.619153278 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.720865659 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.156767443 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.929279586 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.687408983 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 7.347430697 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.332419174 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.334947766 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.34916172 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.692850147 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.334565856 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 6.077496308 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.785540756 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 5.275759152 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.654212535 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.302568503 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.564703981 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.344109167 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 6.363501773 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.339852382 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.818349634 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.885952962 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.351447707 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.345214398 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.592070487 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 4.481902227 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.327956618 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 7.335060033 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.823556203 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.35044508 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.780794517 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.347532114 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.86582611 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.343681895 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.895783934 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.337336474 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.875318751 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 3.145593274 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.8287341 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.335749352 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.259976877 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.882164055 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.727493276 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.235363647 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.33993376 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.330190786 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.80291981 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.340558707 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.327129362 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.073935963 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.335199523 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.588577117 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.333862495 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.256734904 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.585640839 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.810179371 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.341138089 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.227336562 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.900043062 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.732294594 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.345220235 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.676666883 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.342602712 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.120207594 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.768059991 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.335535453 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.335556037 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 7.334609956 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.348970535 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.702486662 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.742770797 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.02094409 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.861908752 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 5.964966717 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.334277629 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.779868831 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.617885758 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 5.219263716 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.330833379 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.839371111 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.33984936 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.335187853 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.329487447 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 3.099988767 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.153386217 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.357388382 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.348912423 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.983365051 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.32940421 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.334619042 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.077169734 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.342738783 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.335681531 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.812478714 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.34643782 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.798123047 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.359088863 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.334498373 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 6.09969898 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.340003622 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.336818267 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.353896337 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.342972458 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.356055641 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.225292846 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.762630437 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 4.855287397 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.236934348 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 3.097099982 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 3.2201896 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 3.073797481 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 3.046578017 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.4308919 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.260468593 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.340977494 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.803857188 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.349754198 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.310125569 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 3.044847038 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.340462019 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.236708093 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.267128572 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.997021056 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.774325927 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.350332713 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.341030158 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.335175309 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.943079744 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.788145791 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.338254428 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.323353788 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.669868053 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.698171247 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.720765061 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.337326991 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.32732707 seconds)
  done (took 1108.510241821 seconds)
done (took 1597.093258415 seconds)
(13/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 7.685682138 seconds)
  (2/4) benchmarking "arrays"...
  done (took 7.386304269 seconds)
  (3/4) benchmarking "structs"...
  done (took 7.407258017 seconds)
  (4/4) benchmarking "grow_array"...
  done (took 7.34482551 seconds)
done (took 32.167729634 seconds)
(14/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.337785365 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.339599017 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.344921948 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.336386844 seconds)
  done (took 31.698394643 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.676807962 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.653785168 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.509275319 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.570322365 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.819130362 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.542584817 seconds)
  done (took 18.110320326 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.1548122 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.339786163 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.335629987 seconds)
  done (took 23.168251034 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 2.728197516 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 2.741864507 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.454944966 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.426224279 seconds)
  done (took 12.689189612 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.385082568 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.37865553 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.382237858 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.388569362 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.388316461 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.375079351 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 7.337258212 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.817935842 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.382523347 seconds)
  done (took 29.181224287 seconds)
  (6/6) benchmarking "26942"...
  done (took 3.456812353 seconds)
done (took 120.772995328 seconds)
(15/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 2.55431965 seconds)
    (2/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 2.523769284 seconds)
    (3/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 7.348629426 seconds)
    (4/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 2.413717989 seconds)
    (5/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 2.456863126 seconds)
    (6/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 2.58907372 seconds)
    (7/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 2.535150933 seconds)
    (8/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 2.40947429 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 2.45015445 seconds)
    (10/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 7.40646039 seconds)
    (11/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.358947886 seconds)
    (12/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 2.566897862 seconds)
    (13/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 2.568709351 seconds)
    (14/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 2.588125479 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.692519312 seconds)
    (16/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 2.697880351 seconds)
    (17/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.719735263 seconds)
    (18/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 2.593647389 seconds)
    (19/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 2.580487568 seconds)
    (20/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 2.533134314 seconds)
    (21/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.36536814 seconds)
    (22/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 2.359392078 seconds)
    (23/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 2.398846432 seconds)
    (24/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.854749502 seconds)
    (25/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 2.54291591 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 2.588486918 seconds)
    (27/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 2.561892345 seconds)
    (28/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 2.429801469 seconds)
    (29/434) benchmarking ("sort", "Float32", 0)...
    done (took 3.047983589 seconds)
    (30/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.366871408 seconds)
    (31/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.588245195 seconds)
    (32/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 2.410380323 seconds)
    (33/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 2.48722351 seconds)
    (34/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.344706526 seconds)
    (35/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 7.359853867 seconds)
    (36/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 2.373229682 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 2.420697658 seconds)
    (38/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 2.579902366 seconds)
    (39/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.783659385 seconds)
    (40/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 2.528839064 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 2.587534847 seconds)
    (42/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 2.413838627 seconds)
    (43/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 2.685286656 seconds)
    (44/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.618367404 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 2.551681406 seconds)
    (46/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 7.343354546 seconds)
    (47/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 2.598999221 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 7.350493312 seconds)
    (49/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 2.426476055 seconds)
    (50/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 2.700524704 seconds)
    (51/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 2.540847259 seconds)
    (52/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 2.429934194 seconds)
    (53/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 2.387372747 seconds)
    (54/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 7.341061413 seconds)
    (55/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 2.844371398 seconds)
    (56/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 2.556224588 seconds)
    (57/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.353091109 seconds)
    (58/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.596387659 seconds)
    (59/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 2.424708717 seconds)
    (60/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.81208716 seconds)
    (61/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 2.425433726 seconds)
    (62/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.513684031 seconds)
    (63/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 2.347237413 seconds)
    (64/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 2.647706858 seconds)
    (65/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 2.401876573 seconds)
    (66/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 2.40541974 seconds)
    (67/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.926138381 seconds)
    (68/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 7.400205428 seconds)
    (69/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 9.711677017 seconds)
    (70/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.739881552 seconds)
    (71/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 3.370489132 seconds)
    (72/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 2.425494682 seconds)
    (73/434) benchmarking ("perf_countequals", "Int8")...
    done (took 2.510110694 seconds)
    (74/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.353942788 seconds)
    (75/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 7.334139122 seconds)
    (76/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.668014901 seconds)
    (77/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 2.359036622 seconds)
    (78/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 3.268685095 seconds)
    (79/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 2.585474962 seconds)
    (80/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.34414045 seconds)
    (81/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 9.682683609 seconds)
    (82/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 2.561385367 seconds)
    (83/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 2.399072306 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 2.655863292 seconds)
    (85/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 2.482540535 seconds)
    (86/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 2.363487517 seconds)
    (87/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 2.354171157 seconds)
    (88/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 2.366572505 seconds)
    (89/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 2.480616455 seconds)
    (90/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 2.392555291 seconds)
    (91/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 7.337071799 seconds)
    (92/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 5.864304991 seconds)
    (93/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 2.519226662 seconds)
    (94/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 2.428328018 seconds)
    (95/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.825550501 seconds)
    (96/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 7.347559421 seconds)
    (97/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 2.889676221 seconds)
    (98/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.344645042 seconds)
    (99/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 9.694026629 seconds)
    (100/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 2.446380481 seconds)
    (101/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 2.595737347 seconds)
    (102/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 7.347983198 seconds)
    (103/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 2.870992381 seconds)
    (104/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 2.568426786 seconds)
    (105/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 2.429448234 seconds)
    (106/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.800037554 seconds)
    (107/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 2.896107459 seconds)
    (108/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 2.601500595 seconds)
    (109/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 2.68827135 seconds)
    (110/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 2.589278957 seconds)
    (111/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 2.775659611 seconds)
    (112/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 2.578431975 seconds)
    (113/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 2.683659152 seconds)
    (114/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.344973111 seconds)
    (115/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 11.6650919 seconds)
    (116/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 13.539358841 seconds)
    (117/434) benchmarking ("sort", "BigInt", 0)...
    done (took 11.098148242 seconds)
    (118/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 7.341158131 seconds)
    (119/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.793697604 seconds)
    (120/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 10.809413292 seconds)
    (121/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 7.243887833 seconds)
    (122/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 2.586953579 seconds)
    (123/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 2.45219807 seconds)
    (124/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 2.733870159 seconds)
    (125/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 2.367949187 seconds)
    (126/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.358590178 seconds)
    (127/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.726628651 seconds)
    (128/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 2.530209094 seconds)
    (129/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 2.537125037 seconds)
    (130/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 2.364049858 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 2.413444569 seconds)
    (132/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 7.55141537 seconds)
    (133/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 2.591223879 seconds)
    (134/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 2.429287099 seconds)
    (135/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.336430166 seconds)
    (136/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 12.17540332 seconds)
    (137/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 2.562885026 seconds)
    (138/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 7.340561605 seconds)
    (139/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 2.584309404 seconds)
    (140/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 2.482967209 seconds)
    (141/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 7.337472257 seconds)
    (142/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 2.566108043 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 2.581150558 seconds)
    (144/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 2.589176849 seconds)
    (145/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 7.341036144 seconds)
    (146/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 2.584059505 seconds)
    (147/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 2.526710833 seconds)
    (148/434) benchmarking ("perf_countequals", "Float32")...
    done (took 2.40985753 seconds)
    (149/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 2.582603121 seconds)
    (150/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.740222825 seconds)
    (151/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 2.985358107 seconds)
    (152/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 7.381192358 seconds)
    (153/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 2.414059949 seconds)
    (154/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 2.35380782 seconds)
    (155/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 2.406222393 seconds)
    (156/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 3.359224479 seconds)
    (157/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 2.542307799 seconds)
    (158/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 2.548382378 seconds)
    (159/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 7.335386189 seconds)
    (160/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 7.337609853 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 7.194685195 seconds)
    (162/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 2.592416047 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 2.90316629 seconds)
    (164/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 7.34539927 seconds)
    (165/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 2.593057727 seconds)
    (166/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 2.358292027 seconds)
    (167/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 2.491635808 seconds)
    (168/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 2.609009211 seconds)
    (169/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 7.362024601 seconds)
    (170/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 2.423547834 seconds)
    (171/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 2.470363436 seconds)
    (172/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 2.45818909 seconds)
    (173/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 2.429703627 seconds)
    (174/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 2.522426337 seconds)
    (175/434) benchmarking ("perf_countequals", "Int64")...
    done (took 2.449548709 seconds)
    (176/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 2.421380544 seconds)
    (177/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 7.331384714 seconds)
    (178/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 2.512979843 seconds)
    (179/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.233907619 seconds)
    (180/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 2.544797795 seconds)
    (181/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 2.518253472 seconds)
    (182/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 2.418853732 seconds)
    (183/434) benchmarking ("perf_countequals", "Bool")...
    done (took 2.50866313 seconds)
    (184/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.401699943 seconds)
    (185/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 2.356367037 seconds)
    (186/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.649265296 seconds)
    (187/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 2.558781589 seconds)
    (188/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 2.638953432 seconds)
    (189/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 2.48056469 seconds)
    (190/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 2.759279535 seconds)
    (191/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 2.557912093 seconds)
    (192/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 2.586026087 seconds)
    (193/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 2.684778936 seconds)
    (194/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 2.46825787 seconds)
    (195/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 2.613093053 seconds)
    (196/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 2.538301316 seconds)
    (197/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.583041445 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 2.588564741 seconds)
    (199/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 2.540862763 seconds)
    (200/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.390215735 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 2.864030601 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 2.708424741 seconds)
    (203/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 2.437338434 seconds)
    (204/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 2.346949299 seconds)
    (205/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 2.392990521 seconds)
    (206/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 2.592477558 seconds)
    (207/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 7.346544169 seconds)
    (208/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 7.736356064 seconds)
    (209/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 2.417456692 seconds)
    (210/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.626677967 seconds)
    (211/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 2.938754202 seconds)
    (212/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 2.885049791 seconds)
    (213/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 2.72512088 seconds)
    (214/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 2.599867437 seconds)
    (215/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.547501445 seconds)
    (216/434) benchmarking ("sort", "Int64", 0)...
    done (took 4.891689321 seconds)
    (217/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 2.52676335 seconds)
    (218/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.43515046 seconds)
    (219/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.659272568 seconds)
    (220/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 2.609194783 seconds)
    (221/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 7.349930489 seconds)
    (222/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 2.955115527 seconds)
    (223/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 2.693525722 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 2.602400962 seconds)
    (225/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 2.494180936 seconds)
    (226/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 2.615515106 seconds)
    (227/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.728649753 seconds)
    (228/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.366495117 seconds)
    (229/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 7.340062942 seconds)
    (230/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 7.455211487 seconds)
    (231/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 2.6749595 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 2.501092569 seconds)
    (233/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 2.604486571 seconds)
    (234/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.373041816 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 2.516043925 seconds)
    (236/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 2.683577314 seconds)
    (237/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.793335861 seconds)
    (238/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.733852844 seconds)
    (239/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 2.566270962 seconds)
    (240/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.777287054 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 2.386147057 seconds)
    (242/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 2.52951716 seconds)
    (243/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 2.535959893 seconds)
    (244/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 3.014940926 seconds)
    (245/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 2.567065823 seconds)
    (246/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 2.542932021 seconds)
    (247/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 2.692559592 seconds)
    (248/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 2.408045756 seconds)
    (249/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.788398123 seconds)
    (250/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.739588378 seconds)
    (251/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 2.994127061 seconds)
    (252/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 2.559954912 seconds)
    (253/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 7.343649767 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 6.177386496 seconds)
    (255/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 2.678293011 seconds)
    (256/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 2.592691355 seconds)
    (257/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 2.626682365 seconds)
    (258/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 2.567893615 seconds)
    (259/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.797414473 seconds)
    (260/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 2.541801285 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 2.510731096 seconds)
    (262/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 2.478858199 seconds)
    (263/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 5.324441298 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 2.687707815 seconds)
    (265/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.351664371 seconds)
    (266/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 13.912978841 seconds)
    (267/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 3.156430935 seconds)
    (268/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 2.685730469 seconds)
    (269/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 2.36602305 seconds)
    (270/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.340110905 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 9.984482203 seconds)
    (272/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.75603399 seconds)
    (273/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 6.628360746 seconds)
    (274/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.700690038 seconds)
    (275/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 2.420452171 seconds)
    (276/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.726363998 seconds)
    (277/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.429019499 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.876240025 seconds)
    (279/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 3.339759418 seconds)
    (280/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 2.585150296 seconds)
    (281/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 2.370918647 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 2.506796352 seconds)
    (283/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 2.476405553 seconds)
    (284/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 2.673689612 seconds)
    (285/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.434476826 seconds)
    (286/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 2.583691665 seconds)
    (287/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.838640153 seconds)
    (288/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 2.480338748 seconds)
    (289/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 2.37565913 seconds)
    (290/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 2.676620952 seconds)
    (291/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 2.461624892 seconds)
    (292/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 2.462744773 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 2.394288975 seconds)
    (294/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 2.555267126 seconds)
    (295/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 3.09415338 seconds)
    (296/434) benchmarking ("perf_countequals", "Float64")...
    done (took 2.424698354 seconds)
    (297/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.339577277 seconds)
    (298/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 9.587189903 seconds)
    (299/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.634821127 seconds)
    (300/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 6.669784541 seconds)
    (301/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.362092068 seconds)
    (302/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 2.352839979 seconds)
    (303/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 2.569494017 seconds)
    (304/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 2.585746271 seconds)
    (305/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 2.53876823 seconds)
    (306/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 2.520565267 seconds)
    (307/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.757395723 seconds)
    (308/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 2.434345114 seconds)
    (309/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 7.338099538 seconds)
    (310/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.817465458 seconds)
    (311/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 2.739899581 seconds)
    (312/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.649445402 seconds)
    (313/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 3.384271147 seconds)
    (314/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.813114443 seconds)
    (315/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 2.366183386 seconds)
    (316/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 7.337969691 seconds)
    (317/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 3.01431293 seconds)
    (318/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 2.558927793 seconds)
    (319/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 2.442276636 seconds)
    (320/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 2.403446793 seconds)
    (321/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 2.347859082 seconds)
    (322/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 2.585125911 seconds)
    (323/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 2.367272783 seconds)
    (324/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 2.600533817 seconds)
    (325/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 2.536824206 seconds)
    (326/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 3.512334001 seconds)
    (327/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 7.34246418 seconds)
    (328/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 3.784857271 seconds)
    (329/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 3.261132025 seconds)
    (330/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 2.500709464 seconds)
    (331/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 2.518229089 seconds)
    (332/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 2.717704543 seconds)
    (333/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 7.344254714 seconds)
    (334/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 6.599737205 seconds)
    (335/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 7.342839255 seconds)
    (336/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.795237459 seconds)
    (337/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 7.349236863 seconds)
    (338/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 9.727129985 seconds)
    (339/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.585391825 seconds)
    (340/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 2.590768838 seconds)
    (341/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 2.398860358 seconds)
    (342/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 2.445669563 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.424612388 seconds)
    (344/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.346229628 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 10.103687417 seconds)
    (346/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 2.591073751 seconds)
    (347/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 2.769729346 seconds)
    (348/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 2.532281551 seconds)
    (349/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.355805124 seconds)
    (350/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.764353257 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 2.472772929 seconds)
    (352/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 2.585627306 seconds)
    (353/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 7.347456164 seconds)
    (354/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 2.563367875 seconds)
    (355/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 2.586690956 seconds)
    (356/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 2.449472657 seconds)
    (357/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.411071063 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 7.336173408 seconds)
    (359/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 2.36849259 seconds)
    (360/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.804599677 seconds)
    (361/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.623346754 seconds)
    (362/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 2.609789738 seconds)
    (363/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 2.365490095 seconds)
    (364/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 2.544432081 seconds)
    (365/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.310985299 seconds)
    (366/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 6.26606 seconds)
    (367/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 2.35819848 seconds)
    (368/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 2.401169413 seconds)
    (369/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 2.426905388 seconds)
    (370/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 2.566037072 seconds)
    (371/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 2.441167158 seconds)
    (372/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 2.568556277 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 7.340374109 seconds)
    (374/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 3.077146706 seconds)
    (375/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 2.580572713 seconds)
    (376/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.355880564 seconds)
    (377/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 2.587239733 seconds)
    (378/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 2.36021366 seconds)
    (379/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 2.994251873 seconds)
    (380/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 2.446512558 seconds)
    (381/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.34201541 seconds)
    (382/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 13.856416688 seconds)
    (383/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 12.394771631 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 3.450847628 seconds)
    (385/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 2.534033132 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 2.939963111 seconds)
    (387/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.750453839 seconds)
    (388/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.60686627 seconds)
    (389/434) benchmarking ("sort", "Bool", 0)...
    done (took 2.372557173 seconds)
    (390/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 7.342364656 seconds)
    (391/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 10.51085073 seconds)
    (392/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 2.425823965 seconds)
    (393/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 2.4147552 seconds)
    (394/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 2.630571933 seconds)
    (395/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 7.344709811 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 9.842004007 seconds)
    (397/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 2.59197793 seconds)
    (398/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 3.214327016 seconds)
    (399/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 2.696769275 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 2.509396146 seconds)
    (401/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 5.231275615 seconds)
    (402/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.525179502 seconds)
    (403/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 7.340809626 seconds)
    (404/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 3.001325464 seconds)
    (405/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 2.362373181 seconds)
    (406/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 7.334296386 seconds)
    (407/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 3.287603561 seconds)
    (408/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 2.683823606 seconds)
    (409/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 2.510540232 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 2.351907484 seconds)
    (411/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.506308308 seconds)
    (412/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 7.432605615 seconds)
    (413/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 11.442051902 seconds)
    (414/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.364288264 seconds)
    (415/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 2.457765726 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 2.585312229 seconds)
    (417/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.686428906 seconds)
    (418/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.607873475 seconds)
    (419/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.381091757 seconds)
    (420/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 6.196262042 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 2.386197216 seconds)
    (422/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 2.426387237 seconds)
    (423/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 2.512569266 seconds)
    (424/434) benchmarking ("sort", "Float64", 0)...
    done (took 4.478941691 seconds)
    (425/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.350700538 seconds)
    (426/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 2.587690896 seconds)
    (427/434) benchmarking ("sort", "Int8", 0)...
    done (took 2.41876792 seconds)
    (428/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.819487126 seconds)
    (429/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 2.426590534 seconds)
    (430/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 2.355166198 seconds)
    (431/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 2.527812175 seconds)
    (432/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 4.938784548 seconds)
    (433/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 2.606505054 seconds)
    (434/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 2.400599621 seconds)
  done (took 1604.543320201 seconds)
done (took 1607.268201862 seconds)
(16/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.361535845 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.356607819 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.375121267 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 2.35428562 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.353017075 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 2.369780376 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.424264793 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.392518112 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.376813071 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.368774002 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.456793189 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.36697671 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.375719382 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.480368265 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 2.357408297 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.371359057 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.366576627 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.368818683 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.390622634 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.373830877 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 2.37240027 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 2.369414686 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.392483604 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.375499146 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.366919187 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 2.370062363 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.380890138 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.371818194 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.434787038 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.389640184 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.369462834 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.353203389 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.372680088 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.376352265 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.392931454 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.417889604 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.39618016 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 2.352544171 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.383457171 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.372043324 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 2.460560589 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 2.367316038 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 2.358532124 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.370567063 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.388444132 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 2.362175606 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.409096229 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.360859587 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.375564205 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.357293869 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 2.36265046 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.417284112 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.359414129 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.484299297 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.373265316 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.369389876 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.39029082 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 2.373349093 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 2.367107513 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.37208409 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.373643099 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.383438479 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.394812891 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.364971017 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.360769585 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.391232856 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.414750202 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.406768526 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.400886291 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.378197914 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.379817448 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 2.360078996 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.440149713 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.36881329 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.364166481 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.371652498 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.411924661 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 2.366875652 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.423084199 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.39243003 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 2.362364431 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.361409021 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.377050492 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.456367049 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.364836279 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.380791706 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.359071131 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.375973406 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.366849105 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.358762784 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.364754546 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.374095548 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.41705543 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.353547687 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.36806122 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.36831242 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.398625352 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.387889546 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.408919265 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.389667304 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 2.377113329 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.367324405 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.37854982 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.387017631 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.38048862 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.395333913 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.39771987 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.358790398 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.373824697 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.378647301 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 2.354214419 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.406238994 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.386735217 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.372309013 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.377425557 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.432833275 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.397287234 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.362812071 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.369797665 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.402186045 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.364872517 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.402735617 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.366927662 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.387323071 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.364845894 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.367061684 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.360184129 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 2.351543931 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 2.523112348 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.408668463 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.394322106 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.426184574 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.379561047 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.376824428 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.39140026 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.368323053 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.367418375 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.478494077 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.423731317 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.364528144 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.374430569 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.373546023 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.381152122 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.38558777 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.358742001 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.378478092 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.362657023 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.368774407 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.364297076 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.408516002 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.400399746 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.356932757 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.380669832 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 2.363603568 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 2.363796898 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.376920402 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.375739284 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.361912109 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.36098609 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.365734102 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.401781455 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.402557004 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.390883425 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.374797495 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.383830025 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.385485845 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.394554263 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.373898638 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.358821387 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 2.497758248 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.410384636 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.400210171 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.365731679 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.371333159 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.381788463 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.365452961 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 2.358465697 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.377953374 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 2.527007676 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.372164579 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.362222692 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.375382697 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.360604278 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.371867222 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.377571018 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.374769171 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.437315617 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.374242359 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.367138405 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.431699737 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.367517428 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.360957602 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.375343151 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 2.366111298 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.481142864 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.368885709 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 2.363956894 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.371297893 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.384816055 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.372666306 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.369411137 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.389239786 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.458845969 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 2.371672321 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.363708976 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.425148611 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.376774003 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.366583653 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.386779377 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 2.359603259 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.395544066 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.37887213 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.369450031 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.373184454 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.406848463 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.361878973 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.366360717 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.365007754 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.409220269 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.36965243 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.373871257 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.399429467 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.398980511 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.371082507 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.370897285 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.370945879 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.363298962 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.363838001 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.423504245 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.383238533 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.394606211 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.483399084 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.401835587 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.388420811 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.353659775 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.383400357 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.401319163 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.416325258 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.365680632 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.371151984 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.402929543 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.369237208 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.352266148 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.358343036 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.388662287 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.416010798 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.39662379 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.362188553 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.385110816 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.359461272 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.37066913 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.436462319 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.364768472 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.377414049 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.479026166 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.364014894 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.392934902 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.380824727 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.460725371 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.370850627 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.374240583 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.364044257 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.390818548 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.379096859 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 2.374889216 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.366080647 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.375004174 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.358839753 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.388769458 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.369265355 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.423040348 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.362947164 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 2.372287746 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.376576223 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.38317403 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.365156923 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.366168015 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.359671285 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.380380537 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 2.355441643 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 2.359131711 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.384808702 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.385321434 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.376511349 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.400868558 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.389167582 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 2.497446794 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.381560477 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.362090556 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.399854711 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 2.380648815 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.405675873 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.369740307 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.376767693 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.396146834 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.375744435 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.374304021 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.391763709 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.381506885 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.400760349 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.399408492 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 2.370741888 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.361608585 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.371893245 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.459730692 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 2.370050258 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.362705339 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.366860084 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.403794642 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.398421427 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.380437578 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.426763238 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.416688381 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.367628814 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 2.523536932 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.377908929 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.379151025 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.388910931 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 2.370530339 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.39245635 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.376531571 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.374187573 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.368240974 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 2.527918337 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.42162313 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.40009621 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.381233852 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.383932331 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.366234224 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.363844165 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.426269025 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.370390021 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.377736735 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.361561019 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.36997465 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.377754017 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.363874017 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.370597143 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.415576221 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.385014879 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.37273688 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.37685173 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.360213932 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 2.358789667 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.373827884 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.422440563 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.368398392 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.368873366 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.372849135 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.383239458 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.378574862 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.385973224 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.400573687 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.37964899 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 2.364152976 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 2.567701785 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.381841423 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.371760062 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.402449636 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.353241665 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.369993545 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.363149818 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.414480296 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.400748959 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.384835187 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.375202163 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.376550813 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.375644644 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.376203209 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.357136168 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.370667689 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.454820557 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.357418048 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.365733287 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.396898964 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.375916989 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.392830782 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.377328999 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.355973335 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.379809446 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.366954131 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.371270351 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.423101126 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.370282624 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.379859551 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 2.518102612 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.386938268 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.369092222 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.367782194 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 2.362148282 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.365903159 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.372559264 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.40237039 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.359566752 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.370197007 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.366155799 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.381512918 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.400396548 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.382803798 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.380427754 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.367616632 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.362013415 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.36982549 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.365279197 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.399653277 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.374895405 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.372160358 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.394979593 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.36292057 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.368273174 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.425201271 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.480461518 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.371618517 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.390180359 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.479334294 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 2.491442265 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.389027184 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.364859728 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.374668875 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.399098812 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 2.372976981 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.360504504 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.368674744 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.356140167 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.368023132 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.42013717 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.38278387 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.368457139 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.366038438 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.374518509 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.356744927 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.366673204 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.366773619 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 2.53090277 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.427429696 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 2.361620901 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.372904564 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.435471433 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.400165677 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.387784471 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.394532117 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.362791244 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.39310725 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.366289055 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.432399874 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.370015735 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.355988388 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.370399359 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.375180101 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.399770442 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.376174997 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 2.360228042 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 2.36554675 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.354254743 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.37238429 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.390841156 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.377874156 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.394496823 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.370285157 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.396445986 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.368107183 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.41406616 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.369617123 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.371974901 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.388568119 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.358463705 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.354203897 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.390461172 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 2.563138747 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.381195924 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.515270165 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.364547758 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.368005514 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.373713683 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.40530908 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.387209036 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.364711905 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.369292125 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.364049824 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 2.390384868 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.375593174 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.404326069 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.3595973 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.421149798 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.363397214 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.375020741 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 2.495043598 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.382119842 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.366886926 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.376707387 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 2.36389727 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.405688674 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.378870648 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.370712369 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.374110582 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.371788073 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.403902515 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.366216439 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 2.568860098 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.377024177 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.364587947 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.36268839 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.374225642 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.37510404 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 2.371545021 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.369213546 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.392727407 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.374473703 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.381854168 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.368499281 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.378231805 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.379982353 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.371799748 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.367418215 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.401348193 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.365960647 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.374278247 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 2.569684438 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.394615094 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.393840733 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.37441478 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.371896624 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.362015729 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 2.366655107 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.396252545 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.369201733 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.369793127 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.368930509 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.361085538 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.408312103 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.382809524 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.387774987 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.366089448 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.405214658 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 2.363238573 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.377032736 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.374256399 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.365275064 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.387408748 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 2.372228238 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.39901537 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 2.379781676 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.408313291 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 2.376130089 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.427665119 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.382719369 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 2.363106544 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.370922975 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 2.37388634 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.391118548 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 2.37268222 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 2.378401766 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.385695173 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.377947135 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.367983103 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.392293751 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.402228435 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.366329896 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.419459849 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 2.523651631 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.375292519 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.373462744 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.368744444 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 2.368141925 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.358584862 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.445500005 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.41412485 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.42844814 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.392592521 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.369272329 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.400889463 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.47515127 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.387940163 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.363839127 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.372691125 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.36379822 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.386459125 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.38165055 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.396302694 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.363424966 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.414580323 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.38127289 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.370531624 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.415342213 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.382373206 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.416009241 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.406845722 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.450700538 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.373135494 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.41221274 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.369868257 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.443155959 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.383241745 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.402158344 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.381670405 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.384759273 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.482269718 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.371685194 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.385406267 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.411065185 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.359368673 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.386840796 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.407062721 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.370388194 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.369938676 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.369416769 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 2.372478941 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.357974256 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 2.371583345 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.370619648 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.393544009 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 2.374306698 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.355792554 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.386430984 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.421741595 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.386477116 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.384406184 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.389412566 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 2.375933011 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 2.361644461 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.379407271 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.382948809 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.372352161 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.353195514 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.387835925 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.370815131 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.384709689 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.392682685 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.4349924 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.362029366 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.370902964 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.356490126 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.372785105 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 2.364661586 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.391909056 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.368463467 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 2.372909437 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 2.383289858 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.36440695 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.376958122 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.374824477 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.426376356 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.37863912 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.375154071 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.378400893 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.385591752 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.367107092 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.368140549 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 2.393494627 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.385452667 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.378247718 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 2.367854624 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.363429782 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.374456639 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.387449089 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.365913189 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 2.365208888 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.371021655 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 2.369593316 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.436734907 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.370244907 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.46272387 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.380195928 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 2.368414651 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.372970491 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.373670416 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 2.527348608 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.396844348 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.367100527 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.370582597 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.369193046 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.390900629 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.369807873 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.366628428 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.424418633 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.374144515 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.3750991 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.440685346 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.391390553 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.414317619 seconds)
done (took 1624.96454466 seconds)
(17/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.716395655 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.33968845 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.642851109 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.531710896 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.713255595 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.612776839 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.430739233 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.840404892 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.409731775 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.763098925 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.510975734 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 7.339800404 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.341825237 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.525347754 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.746261844 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.569685703 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.415875023 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.52869247 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.825027757 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.74112812 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.34317234 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.714929758 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.873542826 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.712268787 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.344066556 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.390581696 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.658065284 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.475432422 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.608936702 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.343006592 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.346684155 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.538611491 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.607724938 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 7.343577952 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 7.343057568 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 7.342581846 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.624714484 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 7.345712846 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.5932046 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.720416717 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.569301832 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.339200521 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.343013593 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.341054336 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.454392995 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.60955421 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.432169785 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 7.342764094 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.348264115 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 7.344354222 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.594523964 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 7.347564512 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 7.340846322 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.585046714 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.529722191 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 7.340011573 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.736244458 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.71779206 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.734293301 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.652037524 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.588093158 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.773980296 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.646173959 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.552508797 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.342792197 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.646815365 seconds)
  done (took 279.409884625 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.655887508 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.489639689 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.681559913 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.935923666 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.657998456 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.682770971 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 3.004889405 seconds)
  done (took 21.450154579 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.284072719 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.403620398 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.642422425 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.637692551 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.41249476 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.509956723 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.481967957 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 7.337425798 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.579924746 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.434717578 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.670568439 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.634225861 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 7.340968924 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.338139547 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.473445878 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.678803267 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.246323509 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.420005486 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.405786337 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.693074663 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 7.341514626 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 7.344041484 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.53298091 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.390030135 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.420342512 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.436564126 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.4073323 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.247788268 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.400910103 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.388801556 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.420023663 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.402803779 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.402656937 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.346168195 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.385358027 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.691754072 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.405926919 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.411591036 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.531415723 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.346731829 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.390675727 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.408157362 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.528905103 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.413440444 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.389506644 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.573686943 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.391283949 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.414704967 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.394276375 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.401585606 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.551542866 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.405473283 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.387381334 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 7.34199913 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.601240141 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 7.340864688 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.427066028 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.395797104 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.405025468 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.459763583 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.404497394 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.688415451 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.651308375 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.387621503 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.63526016 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.700417073 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.405276977 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.386032686 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.392827323 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.671264991 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.399128074 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.635795063 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.408073917 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.44524319 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.404086155 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.510272125 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.577422917 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.106803396 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 3.077020025 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.339439502 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.580644848 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.389397434 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.536953154 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.234409845 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 7.340581648 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.387023985 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.409583505 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.803925898 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.233591727 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.410369631 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.648713767 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.385655521 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.457528198 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.453236967 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.3813285 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.39732174 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.543743321 seconds)
  done (took 304.70491547 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.48210259 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 4.146482088 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.547485241 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.912502484 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.911975229 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.48569326 seconds)
  done (took 21.824528646 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.742637738 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.981366797 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.419104537 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.419831726 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.455800052 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.382318744 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.385932388 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.478102298 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 3.236896278 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.407413635 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.389478938 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.40657513 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.389154711 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.512891727 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.384106084 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.405010018 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.392125299 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.431708177 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.407255631 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.458882658 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.463073314 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.44342737 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.469532831 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.907278535 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 3.151608862 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.411427818 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 3.13329632 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.405483569 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.412680861 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.387607301 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.688914537 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.383768773 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.890360588 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 4.139047221 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.935482981 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.911229848 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.251669079 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.408920729 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.421474915 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.385498649 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.406341455 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.461708212 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.41969476 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.417323914 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.639919076 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 3.596258513 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 3.178699408 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.705178521 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.38571109 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.406977239 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.414035408 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.437870033 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.39113478 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.407104739 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.33719725 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 4.353944368 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 3.095992768 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.383288052 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.444438784 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.912852284 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 3.182117855 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.385067795 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.696281584 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 3.066128615 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 7.338925867 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.407782469 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.92138679 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.237415508 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.460446536 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.418436723 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.405301955 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.417244429 seconds)
  done (took 203.777707291 seconds)
done (took 833.503813544 seconds)
(18/23) benchmarking "inference"...
  (1/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 37.454598652 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 33.894425343 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 35.445642064 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 33.076181443 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 35.867557266 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 34.621237428 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 33.778866886 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 34.483799752 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 34.717765501 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 34.641524133 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 34.394779403 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 34.051733368 seconds)
  done (took 418.769580359 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 41.900931054 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 34.787208724 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 36.261600458 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 35.452688834 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 46.244086694 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 38.367656924 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 38.170693804 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 36.741614448 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 35.682602983 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 35.448771925 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 34.625908478 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 35.887546735 seconds)
  done (took 452.779249681 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 39.755992097 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 39.879776253 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 36.111924058 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 35.317650486 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 44.664828663 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 36.687149404 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 36.600602454 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 39.477204135 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 38.202912185 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 37.873456615 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 37.157726631 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 36.764489361 seconds)
  done (took 462.907210221 seconds)
done (took 1336.795306025 seconds)
(19/23) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 10.846557971 seconds)
  done (took 16.172628609 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 10.60012054 seconds)
  done (took 16.129715665 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.328166392 seconds)
  done (took 15.672169992 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 10.363980275 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 10.379066489 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 10.35247748 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 10.407507095 seconds)
  done (took 47.141077305 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 10.682996404 seconds)
  done (took 16.011466332 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 9.866635678 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 10.338881866 seconds)
  done (took 25.967062837 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 10.663183137 seconds)
  done (took 16.002657741 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 10.94444957 seconds)
  done (took 16.34019719 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 10.359964867 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 10.397360454 seconds)
  done (took 26.104060416 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 10.329184213 seconds)
  done (took 15.65808979 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 13.225043317 seconds)
  done (took 18.624495785 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 10.346778954 seconds)
  done (took 15.878647386 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 10.431516666 seconds)
  done (took 15.762693427 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 10.858949055 seconds)
  done (took 16.190847348 seconds)
done (took 283.031223096 seconds)
(20/23) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 10.327695349 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 10.501356234 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 10.376042389 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 10.375429365 seconds)
  done (took 46.906465078 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 5.656934705 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 5.654380619 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 5.671442127 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 5.686140024 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 5.568397838 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 5.567409542 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 5.652555843 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 5.631260761 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 5.573409909 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 5.690970575 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 5.630491822 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 5.693133243 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 5.684469836 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 5.674978499 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 5.676645783 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 5.696287392 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 5.688859605 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 5.652516631 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 5.568789304 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 5.67386437 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 5.692907836 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 5.682550803 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 6.015235412 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 6.021695403 seconds)
  done (took 141.817664098 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 6.002784101 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 6.260845395 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 5.807901452 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 5.838469255 seconds)
  done (took 29.236141416 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 10.324849951 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 5.740395274 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 5.681727581 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 5.7381033 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 5.576813979 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 5.556055989 seconds)
    (7/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 5.564317571 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 5.429440179 seconds)
    (9/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 5.546562537 seconds)
    (10/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 5.387957587 seconds)
    (11/24) benchmarking ("isequal", "BitArray")...
    done (took 5.398498622 seconds)
    (12/24) benchmarking ("==", "Vector{Int16}")...
    done (took 5.961795596 seconds)
    (13/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 5.650321106 seconds)
    (14/24) benchmarking ("==", "Vector{Int64}")...
    done (took 5.639695546 seconds)
    (15/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 5.736149133 seconds)
    (16/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 5.539164809 seconds)
    (17/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 5.362737104 seconds)
    (18/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 5.365808934 seconds)
    (19/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 5.529418308 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 5.729274345 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 5.558496379 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 5.786638606 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 5.586106814 seconds)
    (24/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 5.51974566 seconds)
  done (took 144.23917352 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 6.150949855 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 5.674802814 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 6.243556346 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 6.306054295 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 6.578248053 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 6.444347888 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 6.206855943 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 6.199013084 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 5.483951158 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 6.23275847 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 6.059862435 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 6.209232025 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 5.869554389 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 6.260533723 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 6.154029117 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 5.400837246 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 5.414017676 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 6.218184836 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 6.207173739 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 5.76008211 seconds)
  done (took 126.409884832 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 10.336059529 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 6.252569982 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 6.315124103 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 5.747309891 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 10.335773437 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 10.372071239 seconds)
  done (took 54.691341498 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 7.093245388 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 5.411712998 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 5.504004574 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 5.41889612 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 5.433430109 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 5.396722801 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 5.637796227 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 5.426339221 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 5.566469613 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 5.572269528 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 6.135182881 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 5.543843976 seconds)
  done (took 73.581843115 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 10.330519782 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 10.342433388 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 10.342215553 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 5.459758592 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 5.945786754 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 6.024162578 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 6.223924599 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 10.335242883 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 6.120992029 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 5.567018438 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 5.955497444 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 5.46803196 seconds)
  done (took 93.448039943 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.286471512 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.92716555 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.336637931 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.326685075 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.332526101 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.323405372 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.344632281 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 7.020037632 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 8.68034937 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.233365401 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.342779878 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.326720617 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.329955845 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 9.937077415 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.331040135 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.348372664 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.326492091 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.157404245 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.338684179 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.332117002 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.339705185 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 5.43892798 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.349690545 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.336758893 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.506172332 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.344667766 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.307823048 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.330308529 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.323117917 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.336688782 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.326935994 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 10.35662772 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 7.982715925 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 5.623141122 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.328591963 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 8.549631758 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.324015016 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 10.324810572 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 12.625485562 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.500780773 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.440207096 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 5.464889843 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 10.321691778 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 6.035671311 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 5.585617917 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.316355226 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 8.567143729 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.32638886 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.347007379 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.331319942 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.35178224 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.317841325 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.432546917 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.317039518 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.692656776 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.477405766 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.458952419 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.329776255 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.374717482 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 9.167199612 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 10.379610714 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.320552502 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.333671582 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.317263414 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.338266227 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.349396664 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 6.233048956 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.417597111 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 6.721416823 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.963199198 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.496763214 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.365600082 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.327123369 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 5.405102247 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.332467404 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.328854302 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.32924606 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 10.317579047 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 10.32625364 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.321956425 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 10.330014349 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.371786234 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.330364364 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.326158536 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.297600775 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.329414679 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.318110928 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.326294599 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 5.361486275 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 10.329385565 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.319406667 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 5.400982905 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.449762146 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 5.492494274 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.324662482 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.324847093 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.343905367 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.32850421 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.330150973 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.334075407 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.318637268 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.366477347 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.335529792 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.396320619 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.332163745 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.327402004 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 10.340232868 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.323896376 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.329509667 seconds)
    (110/608) benchmarking "5d"...
    done (took 8.211937416 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.334736108 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.326383758 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.330056051 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.324806427 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.324146015 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.333385331 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.322412404 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.328075954 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.350196402 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.333014844 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.329508333 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 8.164966852 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.325936753 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.324299875 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.331180758 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.326440838 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 10.325395779 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.326815037 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.327725997 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.32801625 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.323793482 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.329352801 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 6.038257885 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 5.572164204 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.326425384 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 10.340562035 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.330660609 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 10.333154575 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.33395284 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.325869497 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.812386228 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.325901728 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.326917479 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.329909661 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 8.1091411 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.339140243 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.331066516 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 6.831768655 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.373085892 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 5.363085845 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.356089819 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 5.475501679 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.347671622 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.338189333 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 10.36564011 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.326690008 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.331430667 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.422705726 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.336469135 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.335241797 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.315831025 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.327924449 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.332705363 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.344159162 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.326063829 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.185662205 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.327277953 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.05640706 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.326314013 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.33250254 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.329784767 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.328636735 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.328839435 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.323988929 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 5.569776633 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.666026546 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.331770321 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.265251194 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 6.746223448 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.327794016 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.340009826 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 10.317624589 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 10.505912759 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.330650098 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.344186498 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 5.59254425 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.33111543 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 10.327121355 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 10.433468994 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.340344954 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 10.343366993 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.331069331 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 9.95246334 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.331339536 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.329317779 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 10.330753669 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.32177662 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 5.747576996 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.325676814 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 5.779938335 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 5.490721932 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.326525784 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.330655066 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.326593935 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.322461951 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.330124216 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.323497226 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.345930008 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 5.858337971 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 6.14780246 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.418496812 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 10.329410882 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.23960712 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.345341761 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.346954059 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.33511692 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.34150072 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 5.830028667 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 5.794200341 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.331916896 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 6.740727914 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.336166811 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.325469546 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.996914264 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.336587689 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.332260194 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 9.539195251 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.350612822 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.331959512 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.330151357 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.334309555 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.322748821 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.346524757 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 6.728706119 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.268267399 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 7.682305886 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.32821915 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.813737462 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 5.632250145 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.354243197 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.32759827 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 5.462842604 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 5.481715243 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.337639822 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 5.873908226 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.366174304 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.861648994 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 6.051582305 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.476722858 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.744182459 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.57238775 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.327965527 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.472130317 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.32885989 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.340712119 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 5.389297745 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.336944081 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.409839448 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.975190224 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 5.360689638 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.601684272 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.324093998 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.328125667 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.336224915 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.303133985 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.327262346 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.328870869 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.326588966 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.342768726 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.326837363 seconds)
    (271/608) benchmarking "4d"...
    done (took 7.065297283 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.015021293 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.323814991 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.323284941 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.339301276 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.326480452 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 10.336768892 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 10.329743359 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.326430686 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.342081097 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 7.878514862 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 5.477074896 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 8.275455593 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 5.373620217 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.707149073 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.3413689 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.331612485 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 9.939891557 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.26089844 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 5.511119649 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 10.332107286 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.517493293 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.325327927 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.3466733 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.040899285 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.326717094 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.342060664 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.337122612 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.32940547 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.51989441 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.321641934 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.322222356 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.673871505 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.342059803 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 10.321487372 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.405961173 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.327897988 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.324066768 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.332364769 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.32864119 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.329234058 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.419425495 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.337585939 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.333543839 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.336294482 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.329551944 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.327141763 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.350719667 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.305473501 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.338073577 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.321820143 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.326923197 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.324819188 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.3281157 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 10.371175105 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.329388891 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.351853511 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.28898897 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.323973516 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.349448772 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.334215983 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.328345213 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 8.017694912 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.329512788 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 6.289130464 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.329873072 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.32208269 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.345913118 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 6.191211439 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.341151801 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.325595824 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.334020978 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.344439597 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.328922977 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.342237935 seconds)
    (346/608) benchmarking "3d"...
    done (took 6.944001766 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 6.450162777 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 10.331024025 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.339827574 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.328927988 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.331903267 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.335035287 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.329974441 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.331759419 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.376460124 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 9.569128404 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.341786817 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.331337425 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.333988732 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.330440766 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.329235709 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 5.82165517 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.342046654 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 7.670061163 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 5.471178731 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 7.988948741 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.328822633 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.385872151 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.34827503 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.612745918 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 10.337150837 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.521825869 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.33292687 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.335444757 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.543411486 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.338737328 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.379120975 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 5.358256016 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.329457591 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 5.567251536 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 10.335253619 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.333241891 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.380513526 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.335223333 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 8.991149875 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.331181356 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.323225214 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.333066513 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.336772822 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.324545093 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 10.357025255 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.346269492 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.35093384 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.356370287 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.16049626 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 8.071745581 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.031130622 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 8.935070912 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.357385496 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 8.007170939 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 10.336485335 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 10.335446374 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.344666728 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.341093117 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 10.332440991 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.341177901 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.346491413 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.330697209 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.368050429 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.347790482 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.452754354 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.326167112 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.327635787 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 5.813635235 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.33767724 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.331084273 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.335034127 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 5.375871671 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.319775097 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.32958702 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.340827597 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 8.987430297 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.360155523 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.33323126 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 10.333338212 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.332610685 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.329929128 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.295951492 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.329693915 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.354651891 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 9.935283084 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.327082509 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 10.334619031 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.331766674 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 10.378039939 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.613035068 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.404403164 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.352588412 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.330008306 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.373573881 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.327959353 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.350392606 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.338923194 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.330626426 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.500078544 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.337391871 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.349259524 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 5.612477707 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.329480827 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.33132054 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.355456446 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.328995764 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.335036864 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.339458304 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.333311693 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 5.639268271 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.340705893 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 10.334923278 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.347345049 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.332028288 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.431103299 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.33383225 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.334887581 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 5.617262331 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.234421375 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.335843099 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 7.998239277 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.36031254 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.351304717 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.332155345 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.329316699 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 10.465719385 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.618696308 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 5.883277228 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.294408592 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.330805409 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.329067273 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.329978969 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.326412911 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 8.809408027 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.546421623 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.331908296 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.329594186 seconds)
    (484/608) benchmarking "6d"...
    done (took 9.770191411 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.157066241 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.334087092 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 6.201053409 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.393521235 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.330366391 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 10.333390965 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.984536444 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 10.335497432 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 8.584672615 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.343137521 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.330946985 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.33292978 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.273183266 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.335794531 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.358124177 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 10.334459128 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.01235415 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 6.183734062 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 7.685565259 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.338667425 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 5.766574123 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.329258981 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.330752511 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 10.334669114 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.340284939 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.328711478 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.322843811 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 10.328720367 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.262399841 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.331045301 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.329865446 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.35613445 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 5.447911012 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.350569561 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.34023712 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 7.43748449 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.340168512 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 6.738152689 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.347597222 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.347344534 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 5.826311618 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 5.694934217 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.352191978 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 5.478837761 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.328617674 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.356294406 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.326388739 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.351635792 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.411118616 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.328470412 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 5.670885178 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.49937641 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 5.581634904 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 5.489336469 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 10.33058035 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.326955186 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 5.537354186 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.345520932 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.332560877 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.274816554 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.339698799 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 6.193027808 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.359063484 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.335215749 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.242822769 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.327335292 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.331866109 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.286623071 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.309238004 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.972069668 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.342775166 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.328180293 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.330487601 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.354203633 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 7.671447157 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 6.135185714 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 10.418970368 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.33025874 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.431486707 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 9.92601601 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.439558576 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.334960758 seconds)
    (567/608) benchmarking "2d"...
    done (took 6.555471618 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.333615826 seconds)
    (569/608) benchmarking "7d"...
    done (took 7.568024279 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.351971386 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.173874696 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.326863334 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 10.339711797 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.330869729 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.327200778 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.071812306 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.334461095 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.357483067 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.338156394 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.331944729 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.341183446 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.348698662 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.332880065 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.335581108 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.350463493 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.874596753 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.363324307 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.427143459 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 5.591401452 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.32910942 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.27236922 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.334961238 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 5.482577731 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.333309267 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.262726266 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.338578222 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.373236833 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.350177772 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.346865563 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.327886256 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.345884021 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.32934313 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.332416058 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.347498087 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.335077696 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 10.332958917 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.443247224 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.326645586 seconds)
  done (took 5748.626463923 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 10.396185169 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 10.772545938 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 10.466163093 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 10.602662623 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 10.531289931 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 10.364194447 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 10.491402922 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 10.349609703 seconds)
  done (took 89.30081954 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 10.317464274 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.560302563 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 7.152317589 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 10.871247111 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 10.330675243 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 6.48812694 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 5.776721293 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 6.653770628 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 11.09449893 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 7.261046473 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 10.927564731 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 7.862129511 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 11.676062592 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 10.328430791 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.54579948 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 5.867513706 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 10.332876878 seconds)
  done (took 150.376914012 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 10.465951758 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 14.180894161 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 10.330036107 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 12.948896316 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 10.392562256 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 10.876730082 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 10.339423051 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 10.340375698 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 10.896586139 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 15.932207313 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 10.367774956 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 10.462634637 seconds)
  done (took 142.867565997 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 5.586432112 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 5.557560643 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 5.60470453 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 5.549444786 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 5.596205645 seconds)
  done (took 33.219147398 seconds)
done (took 6880.078157375 seconds)
(21/23) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 5.584685199 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 5.591069638 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 5.788594913 seconds)
  done (took 16.712096702 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 6.388335206 seconds)
    (2/4) benchmarking "Float32"...
    done (took 5.807630444 seconds)
    (3/4) benchmarking "Float64"...
    done (took 6.036269638 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 6.44790195 seconds)
  done (took 30.026728224 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 5.983365887 seconds)
    (2/2) benchmarking "Float64"...
    done (took 6.090363325 seconds)
  done (took 17.405352673 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 5.626435418 seconds)
  (6/15) benchmarking "18129"...
  done (took 10.370770667 seconds)
  (7/15) benchmarking "20517"...
  done (took 5.925709515 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 10.345610583 seconds)
    (2/3) benchmarking "Float64"...
    done (took 10.641447549 seconds)
    (3/3) benchmarking "Float16"...
    done (took 10.34273736 seconds)
  done (took 36.663115074 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 5.368676659 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 5.362750137 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 5.369200109 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 5.413453841 seconds)
  done (took 26.852668998 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.425407283 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 5.728093605 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 10.32675063 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 10.388371392 seconds)
  done (took 39.195176547 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 5.816988923 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 5.522148515 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 5.868429453 seconds)
  done (took 22.534617615 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 5.991055845 seconds)
    (2/3) benchmarking "Int"...
    done (took 5.399587905 seconds)
    (3/3) benchmarking "Float64"...
    done (took 5.953844564 seconds)
  done (took 22.667989669 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 6.211152445 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 6.171995268 seconds)
  done (took 17.714993462 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 5.503535501 seconds)
  done (took 10.828809963 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 6.162302189 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 5.653998095 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 5.780886238 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 5.839839173 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 5.98286565 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 5.496904284 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 5.630410163 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 5.580368141 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 5.814845062 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 5.675735083 seconds)
  done (took 62.949813769 seconds)
done (took 336.378435732 seconds)
(22/23) benchmarking "sort"...
  (1/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 5.379493191 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 5.35916762 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 5.362887141 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 5.375141333 seconds)
  done (took 26.805602199 seconds)
  (2/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 10.342779918 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 10.340417968 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 10.341211807 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 10.335545974 seconds)
  done (took 46.697986546 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.348944884 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.343456953 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.335938492 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.345262619 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.349537542 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.337406773 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 5.359891996 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.341519685 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.342042114 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.334753535 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.345082721 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.343159885 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.343532531 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.338062851 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.343097436 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.344114924 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.342304282 seconds)
  done (took 96.168596064 seconds)
  (4/11) benchmarking "length = 10"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.339764076 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.341868239 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.345821273 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.335531066 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.353629055 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.337184576 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 5.388945382 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.34475413 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.332513288 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.342978366 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.348511333 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.344450486 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.355248499 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.344840376 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.34558294 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.345310833 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.348620973 seconds)
  done (took 96.230126679 seconds)
  (5/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.724837857 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.514784016 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.568929968 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.353971259 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.533848977 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.349432361 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 10.347351413 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.582014786 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.380289183 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.566932984 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.695284287 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.573926729 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.589706196 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.543015736 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.704692167 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.567205735 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.501685829 seconds)
  done (took 104.428383781 seconds)
  (6/11) benchmarking "issues"...
    (1/13) benchmarking "sortperm on a view (Float64)"...
    done (took 5.729681628 seconds)
    (2/13) benchmarking "sort(rand(10^8))"...
    done (took 15.997455324 seconds)
    (3/13) benchmarking "sortperm(rand(10^5))"...
    done (took 10.345190434 seconds)
    (4/13) benchmarking "small Int view"...
    done (took 5.342941991 seconds)
    (5/13) benchmarking "sortperm(rand(10^7))"...
    done (took 16.454944041 seconds)
    (6/13) benchmarking "small Float64 view"...
    done (took 5.340232675 seconds)
    (7/13) benchmarking "inplace sorting of a view"...
    done (took 5.500887319 seconds)
    (8/13) benchmarking "sortperm on a view (Int)"...
    done (took 9.919542147 seconds)
    (9/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 5.752291994 seconds)
    (10/13) benchmarking "sortslices sorting very short slices"...
    done (took 10.513935871 seconds)
    (11/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 10.331642434 seconds)
    (12/13) benchmarking "Float16"...
    done (took 10.335317314 seconds)
    (13/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 5.809234236 seconds)
  done (took 122.714059615 seconds)
  (7/11) benchmarking "length = 30"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.356375426 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.34566336 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.345236842 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.342652801 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.357682327 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.345328391 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 5.606407371 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.345004504 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.342041639 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.346003056 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.350414171 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.347055035 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.355255541 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.347964611 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.356573808 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.342271256 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.348149943 seconds)
  done (took 96.519779126 seconds)
  (8/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 5.94257981 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 5.952920188 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 5.972528985 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 6.385448512 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 6.250146536 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 5.803491068 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 6.392921205 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 5.949602906 seconds)
  done (took 53.983891985 seconds)
  (9/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 10.339194743 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 10.337981766 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 10.334641215 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 10.33574817 seconds)
  done (took 46.68662773 seconds)
  (10/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 10.168597854 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.126312442 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 7.88827105 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.379974264 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 7.209401072 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.368990822 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 10.347285225 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 7.138460146 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.546422704 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 7.064864104 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 9.535142461 seconds)
    (12/17) benchmarking "ascending"...
    done (took 8.02519973 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 7.216565696 seconds)
    (14/17) benchmarking "descending"...
    done (took 8.070080674 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 9.63751398 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 7.067397071 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 7.937883222 seconds)
  done (took 136.060010896 seconds)
  (11/11) benchmarking "length = 100"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.372749692 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.35638219 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.366098585 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.339494521 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.362074264 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.340318028 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 6.325959298 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.358088976 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.346518116 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.353863268 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.37912138 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.370406819 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.368580335 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.371880619 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.38468133 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.356466444 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.370483623 seconds)
  done (took 97.459704456 seconds)
done (took 929.09381259 seconds)
(23/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 6.516692173 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 5.954467187 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 5.473266652 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 5.549521883 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 6.464888436 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 5.552074547 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 5.547497577 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 5.489258466 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 5.88527717 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 5.476897306 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 5.71196653 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 5.516823382 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 5.9672016 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 5.540050777 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 5.48669373 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 5.46003208 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 5.755112817 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 5.89006105 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 5.495829855 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 5.952827031 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 5.487255524 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 5.986060936 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 5.505063798 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 5.895492364 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 5.70071375 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 5.98579732 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 6.339663018 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 5.679770404 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 5.533718224 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 5.513706171 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 8.194893804 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 6.483990011 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 5.467581448 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 5.476160414 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 5.466180036 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 5.469284439 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 6.558542611 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 6.357640645 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 5.558969995 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 5.831242652 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 5.946083347 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 5.758698708 seconds)
  done (took 250.221173155 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 5.381839428 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 5.444684597 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 5.42976848 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 5.783571518 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 6.222176757 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 5.639797079 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 5.653488849 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 5.557584747 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 5.441387004 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 5.470503916 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 5.474674537 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 5.880586106 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 5.503772896 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 5.855282064 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 5.469726064 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 5.475423191 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 5.425315801 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 5.865129653 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 5.487769941 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 5.443126218 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 5.384568615 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 5.421616138 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 5.375282677 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 5.469585823 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 5.375839199 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 5.428450097 seconds)
  done (took 149.693182576 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 5.415622018 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 5.489466455 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 5.547571629 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 6.699249102 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 5.622617867 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 6.456552446 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 5.522991983 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 5.526285771 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 6.551338213 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 6.765729748 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 5.458411904 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 5.48651067 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 5.44141827 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 5.54699535 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 7.674462964 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 6.171670025 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 5.554337014 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 5.524522749 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 5.4933495 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 6.45493093 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 6.66237008 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 5.44970059 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 5.522947916 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 6.395425741 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 6.004793168 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 6.615203828 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 6.300085024 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 5.797111229 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 6.801816697 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 6.116016122 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 5.509203534 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 5.503298307 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 5.663448011 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 5.552323099 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 5.52120696 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 5.408610538 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 5.385692897 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 5.466036971 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 6.154863664 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 5.515708594 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 5.5161759 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 6.116461102 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 5.704217911 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 5.903670165 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 6.00800985 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 5.553466339 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 5.656801522 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 5.467924842 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 5.497940423 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 6.224152112 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 5.692654567 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 6.825843754 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 5.961820507 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 5.598518957 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 5.491973031 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 5.747622246 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 5.564928886 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 5.637731497 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 6.346568505 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 6.89463505 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 5.444451781 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 5.662396443 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 5.510416912 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 6.006297503 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 5.642723931 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 5.604341387 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 6.308861646 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 6.214018448 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 5.692898036 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 6.849895218 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 6.543538455 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 5.442149957 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 5.433544025 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 5.463312715 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 5.499249877 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 5.675396277 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 6.585891763 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 5.749813738 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 5.649762736 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 5.497757965 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 6.339765632 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 5.841345491 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 6.53338358 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 6.175569502 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 5.500645837 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 5.396876754 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 5.448311116 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 5.586923712 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 5.495467432 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 5.903242877 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 5.941426827 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 5.654445825 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 6.770590678 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 6.584060024 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 6.382888782 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 5.794114707 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 5.375574976 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 5.39068231 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 5.539266027 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 5.937984417 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 5.456726829 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 6.324986643 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 6.01992235 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 6.445947184 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 6.612531145 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 6.103997878 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 5.613871338 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 6.008288305 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 5.721791553 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 5.370397693 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 6.313616044 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 6.680670519 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 7.168530102 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 6.795914687 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 5.375099516 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 5.910463629 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 5.47531197 seconds)
  done (took 695.962901242 seconds)
  (4/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 10.346521836 seconds)
    (2/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 10.343783737 seconds)
    (3/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 10.342982083 seconds)
    (4/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 10.339089223 seconds)
    (5/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 10.339679014 seconds)
    (6/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 6.65687345 seconds)
    (7/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 10.333930432 seconds)
    (8/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 10.335330652 seconds)
    (9/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 5.568820811 seconds)
    (10/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 10.339189515 seconds)
    (11/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 10.348432673 seconds)
    (12/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 10.349781519 seconds)
    (13/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 10.340347971 seconds)
    (14/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 10.357010385 seconds)
    (15/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 7.334615193 seconds)
    (16/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 6.081742539 seconds)
    (17/27) benchmarking ("BitSet", "Int8")...
    done (took 7.128003581 seconds)
    (18/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 10.339300121 seconds)
    (19/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 10.337869801 seconds)
    (20/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 10.342404384 seconds)
    (21/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 10.344745084 seconds)
    (22/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 10.339548548 seconds)
    (23/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 10.342020642 seconds)
    (24/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 10.338324138 seconds)
    (25/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 10.334924745 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 10.340662161 seconds)
    (27/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 10.492161714 seconds)
  done (took 265.778626766 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 5.408745487 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 5.725023518 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 5.428714957 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 5.466407129 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 5.439116526 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 5.398003762 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 5.743374635 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 5.414969748 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 5.422169618 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 5.399722228 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 5.373750764 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 5.620317452 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 5.6537358 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 5.811140678 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 5.441596 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 6.479466166 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 5.914209109 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 5.510285138 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 5.412045209 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 5.452406519 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 5.547813654 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 5.693334389 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 5.592875854 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 5.78118713 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 5.543103902 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 5.651377391 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 5.474615357 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 5.402949162 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 5.504648089 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 5.765773347 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 5.38213023 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 5.728885369 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 5.552356555 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 5.391368523 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 5.764851376 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 5.631401929 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 5.802096878 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 5.848178602 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 5.534607507 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 5.37083432 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 5.375491349 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 5.58076654 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 5.661594097 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 5.444785472 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 5.396117217 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 5.921504379 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 5.395579011 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 5.715137543 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 5.41091574 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 5.373656411 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 5.40888557 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 5.405236947 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 5.592743469 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 7.169543599 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 5.557447156 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 5.631216256 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 5.823024829 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 10.338725519 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 5.627453265 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 5.634705042 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 5.36777264 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 5.759671969 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 6.789858896 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 5.442380599 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 5.413609485 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 6.190622197 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 5.475518542 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 5.751901584 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 5.811828398 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 5.400069298 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 5.662811904 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 5.57109857 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 5.377589691 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 5.620786202 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 5.545886517 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 5.827821323 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 5.802208772 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 5.499869355 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 5.48103823 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 5.419033577 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 5.61039182 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 5.374734947 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 5.874957716 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 5.464633424 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 5.372470591 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 5.76317601 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 5.671992322 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 5.375374737 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 5.401505059 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 5.49428147 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 5.543035139 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 5.507676189 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 5.618363886 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 5.461176258 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 6.061784076 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 5.608120578 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 5.690156059 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 5.412768086 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 5.474805378 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 5.376526417 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 6.948745578 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 5.537722181 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 5.387705888 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 5.652158568 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 5.788911003 seconds)
  done (took 599.980546305 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 5.879596864 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 5.409354868 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 5.573415727 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 5.763089796 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 5.646482966 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 7.435555787 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 5.582581787 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 5.425933709 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 5.541637652 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 5.537872708 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 5.514654817 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 5.466312871 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 6.322691856 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 6.004611638 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 5.408657679 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 5.481494459 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 5.446927444 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 5.863994649 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 5.841311252 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 7.965312949 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 7.031346777 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 6.407279303 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 5.706618081 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 5.730973743 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 5.726499868 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 5.696147044 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 5.855453924 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 5.495133615 seconds)
  done (took 170.100123443 seconds)
done (took 2137.074940253 seconds)
SAVING RESULT...
DONE!
