cset: moving following pidspec: 28029
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.871475505 seconds)
loading group "shootout"... done (took 1.121511828 seconds)
loading group "string"... done (took 0.658199377 seconds)
loading group "linalg"... done (took 8.759119547 seconds)
loading group "parallel"... done (took 0.169623096 seconds)
loading group "find"... done (took 2.952021638 seconds)
loading group "tuple"... done (took 2.129378916 seconds)
loading group "union"... done (took 14.948392094 seconds)
loading group "dates"... done (took 1.455488827 seconds)
loading group "micro"... done (took 0.247251566 seconds)
loading group "simd"... done (took 4.806255614 seconds)
loading group "io"... done (took 1.065707057 seconds)
loading group "random"... done (took 9.662613737 seconds)
loading group "problem"... done (took 1.555877868 seconds)
loading group "array"... done (took 25.358036108 seconds)
loading group "misc"... done (took 1.911602077 seconds)
loading group "scalar"... done (took 43.888942899 seconds)
loading group "sort"... done (took 3.349518693 seconds)
loading group "sparse"... done (took 13.059495962 seconds)
loading group "collection"... done (took 18.788110195 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.536164793 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.126652675 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.131382513 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.124598779 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.192136481 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121712265 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.130252305 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085557449 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.842401351 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.139144541 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116043144 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.436805767 seconds)
done (took 5.414849689 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.221464511 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.095835977 seconds)
    (2/2) benchmarking "String"...
    done (took 0.085402878 seconds)
  done (took 1.397770322 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.073835024 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.062009814 seconds)
    (3/3) benchmarking "different"...
    done (took 0.069278093 seconds)
  done (took 1.414114042 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.066911108 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.13887936 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.068267591 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.068545138 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.068066159 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067824187 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.067732222 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.067761458 seconds)
  done (took 1.759546722 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.074482067 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.069600032 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.067937484 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069425249 seconds)
  done (took 1.493023885 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.070607814 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.125517513 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.066565401 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066173804 seconds)
  done (took 1.53786949 seconds)
done (took 9.12095591 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.248193934 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.103922354 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.295794805 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.446737182 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.618555695 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.095645105 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.077003938 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.072908086 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.138483018 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.35247065 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.104620673 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.182837916 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.090846849 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.185791125 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.077970616 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.121747113 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087151365 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.124738285 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.097169004 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.1371301 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.399593646 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.07799111 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.073557822 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.071037039 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068655936 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.908719515 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.729324689 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.123607366 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.089389748 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.162423085 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.117284491 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.716844132 seconds)
  done (took 11.44453554 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.096448013 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.095496233 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.070707578 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.125718925 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.093965628 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.071705025 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.077611757 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069751844 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.091389513 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.127896514 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.092306635 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.100912635 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.069166584 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.071397598 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.076500337 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.205259158 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080834427 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.084136496 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.069888092 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.083354526 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.107960908 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.081639918 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.08088084 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.080451848 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.13301629 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.173443696 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.100897828 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098379761 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066531923 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078604578 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115242869 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125225253 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067079952 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065486638 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.119574696 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.09632758 seconds)
  done (took 4.714863142 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.896444757 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.097612907 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.105767692 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.656279078 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.066819598 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.152012776 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.243891668 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.075472932 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.283338301 seconds)
    (9/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.154633941 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.145592654 seconds)
    (11/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.152001052 seconds)
    (12/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.120628058 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071803037 seconds)
    (14/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 1.172009989 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.120995241 seconds)
    (16/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.559672775 seconds)
    (17/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069050141 seconds)
    (18/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068053735 seconds)
    (19/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.066339396 seconds)
    (20/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.069099314 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068513769 seconds)
    (22/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064324491 seconds)
    (23/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.095855958 seconds)
    (24/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.072128012 seconds)
    (25/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.09927151 seconds)
    (26/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.09180867 seconds)
    (27/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 1.170250866 seconds)
    (28/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.988120254 seconds)
    (29/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.310709188 seconds)
    (30/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070818242 seconds)
    (31/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.170767644 seconds)
    (32/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.090274593 seconds)
    (33/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.723409192 seconds)
    (34/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073684561 seconds)
    (35/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.087045928 seconds)
    (36/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.483112283 seconds)
    (37/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.125532078 seconds)
    (38/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.06931337 seconds)
    (39/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.166671741 seconds)
    (40/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.11880491 seconds)
    (41/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065925645 seconds)
    (42/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.0652121 seconds)
    (43/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.122231678 seconds)
    (44/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079271355 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069892516 seconds)
    (46/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070017397 seconds)
    (47/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.494288354 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.070230374 seconds)
    (49/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.073039918 seconds)
    (50/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.081029676 seconds)
    (51/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.105041003 seconds)
    (52/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068917651 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066926399 seconds)
    (54/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.173483811 seconds)
    (55/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.068034072 seconds)
    (56/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068822909 seconds)
    (57/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.069890306 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.153100209 seconds)
    (59/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.067749673 seconds)
    (60/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.147548232 seconds)
    (61/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.067339598 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.071621553 seconds)
    (63/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.10588294 seconds)
    (64/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071499145 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.089552949 seconds)
    (66/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.098195105 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.701486877 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.094699024 seconds)
    (69/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068431849 seconds)
    (70/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.065175944 seconds)
    (71/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.509064656 seconds)
    (72/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.079482674 seconds)
    (73/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.068449336 seconds)
    (74/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.072834151 seconds)
    (75/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.090258325 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069011245 seconds)
    (77/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.070671798 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069724421 seconds)
    (79/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.074633013 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074196049 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07126749 seconds)
    (82/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.113075476 seconds)
    (83/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.069010507 seconds)
    (84/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.064681003 seconds)
    (85/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072702251 seconds)
    (86/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069039413 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.075092492 seconds)
    (88/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.100826608 seconds)
    (89/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.065446659 seconds)
    (90/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.065977091 seconds)
    (91/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.572364728 seconds)
    (92/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098922451 seconds)
    (93/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.18449216 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.079164374 seconds)
    (95/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109974267 seconds)
    (96/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069849786 seconds)
    (97/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.074547362 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.07033166 seconds)
    (99/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069712802 seconds)
    (100/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069135714 seconds)
    (101/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069824412 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.071645165 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.100366232 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072653917 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.116429702 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.044985091 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.070156733 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067316275 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.073942844 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072066491 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072647026 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068764195 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.074880354 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.071352398 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067805634 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.111243366 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.121514045 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.067313515 seconds)
  done (took 24.420866226 seconds)
done (took 42.697479882 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.317841715 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.081313117 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.081783191 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.081966588 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.082048778 seconds)
  done (took 1.902868033 seconds)
done (took 3.204570231 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.137210963 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.084671181 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066679404 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.104085816 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.069685414 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.102882732 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.109250555 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.104845717 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.069603203 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.069074206 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.070877901 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.104363687 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.106114139 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.069121231 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098294336 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.104137308 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069798966 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064848731 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.069202727 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.069047243 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.069100362 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064827472 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069579404 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.069473202 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.0999031 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.069141464 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.067838831 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.09938847 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069591157 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.098639912 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.069772652 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.06981352 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.069778721 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100239262 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069397832 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099584895 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065109649 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.06965511 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069358247 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.069354706 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.068987629 seconds)
  done (took 4.645973474 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.074413022 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084087392 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08652366 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064472066 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073399948 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084286876 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063738262 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084783747 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090984701 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084592126 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085136845 seconds)
  done (took 2.179921874 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.072699658 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.085915483 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.086589518 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063386998 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075875084 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08554621 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063984446 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.085338579 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088586196 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.086324792 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.086004374 seconds)
  done (took 2.165989195 seconds)
done (took 10.27516985 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.100154196 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.071568365 seconds)
  done (took 1.438516366 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.538282409 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.424193937 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.06859955 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086214461 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.194434054 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.092776443 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.2014002 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.071301525 seconds)
  done (took 8.136012791 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.107435575 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.072575584 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.069463051 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.070250831 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.070883538 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.070912429 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.070096773 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.06990518 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.071134468 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069986269 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.071257139 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.070867657 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.072034879 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.070058149 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.070259999 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.07047267 seconds)
  done (took 2.546813289 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.103665765 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.101701367 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074304751 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.075432445 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.073971046 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072773906 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.075369676 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.075296218 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.071754012 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.074116121 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.075891168 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.074093843 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.074515505 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.065586556 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.076295605 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.07591788 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.072301069 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.074873513 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075652229 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.077077994 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.075105007 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.064214653 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.073161074 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.074816612 seconds)
  done (took 3.23133722 seconds)
done (took 16.645929226 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.179381281 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.077109209 seconds)
  done (took 1.536116752 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.070821373 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.071270188 seconds)
  done (took 1.438969955 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.076092346 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.063146096 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.081151252 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.072696895 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.063788762 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.063643656 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079682254 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063889056 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.063534211 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063250179 seconds)
  done (took 1.986207301 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.065969892 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.071595518 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068827612 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066924014 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069251918 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064481634 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.067241629 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.064367312 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.071350426 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.063793921 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.067839319 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.085449654 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.067380449 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.085831358 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.066970838 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068692613 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.069601049 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.06727115 seconds)
  done (took 2.556941538 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.064434063 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.064514274 seconds)
  done (took 1.433285837 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.067052836 seconds)
    (2/7) benchmarking "second"...
    done (took 0.064085263 seconds)
    (3/7) benchmarking "month"...
    done (took 0.066497884 seconds)
    (4/7) benchmarking "year"...
    done (took 0.066434096 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.063636028 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.063218506 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.063742467 seconds)
  done (took 1.751002924 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.433090301 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.125771143 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.351511616 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.074464105 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.079289055 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.260226296 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.065564026 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070850452 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.071025025 seconds)
  done (took 2.875018134 seconds)
done (took 14.895810519 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.085540627 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.186698896 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.09127311 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.415768743 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.09479979 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.069873544 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.11566965 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.171011155 seconds)
done (took 2.559484122 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.219292823 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.195140963 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.372090649 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.126444443 seconds)
  done (took 2.999588724 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.345752592 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.081110793 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.079811245 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.069560708 seconds)
  done (took 1.893033366 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.069559388 seconds)
    (2/2) benchmarking "read"...
    done (took 0.074232975 seconds)
  done (took 1.457609931 seconds)
done (took 7.897247245 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.067536982 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.096861091 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.066120157 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.06602396 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.066657851 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065491285 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.066256906 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.066212357 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.066229742 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.076904618 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.066456331 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.06582339 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066060168 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066459214 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06627171 seconds)
    (16/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.066521468 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065853195 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.066887502 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066681867 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066271563 seconds)
    (21/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.065778347 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065995974 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.066563603 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.066374438 seconds)
  done (took 2.973666053 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.08356604 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.068566716 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.069273921 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.068673485 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.069379006 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.069432652 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.06948826 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.068237725 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.069199734 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.068084307 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069829941 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.069907233 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.067603411 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.070340684 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067765134 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.069996392 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.06990867 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068130754 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068304214 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.070325627 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.069459306 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068609345 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069796568 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069662142 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.070562978 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069973665 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.068237254 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.068652481 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069845978 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.070730271 seconds)
  done (took 3.420417848 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.06962154 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.062888253 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062937389 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.073080789 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.062908189 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.06322796 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.06330785 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.062273493 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.062939556 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.064395036 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.0634671 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.062284403 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.063769117 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.062975592 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.062642786 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.063089185 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.067309209 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.082010352 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.063241634 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.062966377 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.067169891 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.06305727 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062768592 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.062765766 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.06322144 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062415265 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.062558681 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.063266018 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.062487294 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.063079676 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.0626557 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.06681402 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.067907003 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.062325284 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.072572593 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.067554762 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.062754101 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066971867 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063413844 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.062273595 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.062290652 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.062530759 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.062578855 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.062159352 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.073212341 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.062553311 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.064059993 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.063891012 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.063076618 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.062623683 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.06234904 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.064131233 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.068105539 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.06410615 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.062281869 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.063661772 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.062277838 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.063297789 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.062461378 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061798283 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.062175443 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.068990026 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063975688 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.063586499 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.083292234 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.064297926 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.072707081 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.062063091 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.063673759 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.066233662 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.063363802 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.080958437 seconds)
  done (took 6.002128562 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.086102501 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.089742021 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.067889531 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067673861 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063639149 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063051972 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.071317161 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063148625 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068112533 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.083780025 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063583112 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067930992 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068106641 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067710187 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063295633 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067791329 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.070917303 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063596478 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.06315249 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067349569 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063268957 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.070839536 seconds)
  done (took 2.864263289 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.139856446 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.069236524 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.109994933 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.077460968 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071097085 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.077317778 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068301956 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068797319 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069138901 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069678915 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069496097 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06900328 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.07135324 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069143483 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069505068 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.069017965 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068442931 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069030031 seconds)
  done (took 2.708279364 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.080356719 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.068735022 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090184359 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068447431 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.06828845 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.068442793 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.072453673 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072771454 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.06836149 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.068784615 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.072842954 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068193661 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.068259247 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068448465 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068073319 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.068452561 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.068343255 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068481193 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.072759545 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071956416 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071984047 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.072335902 seconds)
  done (took 2.901361987 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.081093996 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066963981 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.083381864 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.069121273 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.063170965 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.063714023 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.068508075 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.067658228 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.068316113 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.067077178 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067851135 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.063099544 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.069194532 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067518994 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.069573325 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068039324 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067428567 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067670365 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067713589 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.063076373 seconds)
  done (took 2.705786795 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.090070748 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065631479 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.065532288 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.086034433 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065827761 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.065382719 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.085477662 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065505749 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065699977 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.087702099 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.066188078 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.066099518 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.085778501 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.084954101 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06474642 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.08387739 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.084234021 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.085352485 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065465942 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065634533 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.087564127 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.06561179 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.085308038 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065617465 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065754781 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065593598 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065457319 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.085760122 seconds)
  done (took 3.418086426 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.067058078 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065562623 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.066459369 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065972344 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.066284361 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.06670349 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.066653831 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.066856981 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.066335447 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066610686 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.066386309 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.066331018 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066661089 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.066618482 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066063777 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.066793765 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066096307 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.066579704 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066467536 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067094595 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.066218962 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06674989 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.066633758 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066788378 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066802595 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.066311598 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067139051 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066554629 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065725663 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066445943 seconds)
  done (took 3.336336393 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.076770181 seconds)
    (2/2) benchmarking "in"...
    done (took 0.074132248 seconds)
  done (took 1.493256205 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.064960591 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.080151029 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.062509846 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.07598884 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071694999 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.069158444 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071954852 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.072034259 seconds)
  done (took 1.903685961 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.070054922 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.09412734 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.064600239 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.06456175 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.067869635 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.135359446 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.078222822 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.076549904 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078890029 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066824012 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.065206524 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.077180752 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.064378066 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.078298464 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065754403 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.073440845 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071405641 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.082215141 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.077550929 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.0625667 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.077588546 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065118664 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.063341416 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.065520925 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.064270377 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.071987748 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.080803695 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.077349399 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073218655 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.062173067 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.083661417 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.063065541 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.064765145 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.07317044 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.067689636 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.063137533 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.101560968 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.064713082 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068591689 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.06319081 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.076338946 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.084973481 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.078411784 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.082176219 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.065407641 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.065481206 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062813797 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.065417243 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.067066105 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.072852083 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.063216468 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070752917 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062662077 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.06458442 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.074208045 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.064101442 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.06882156 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.073107606 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.077574942 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.074186112 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.072423104 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.079147104 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.072576026 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.071331354 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.064524785 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.084116509 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.065056842 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.077175713 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078644754 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064924173 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.077207684 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062933159 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.062174159 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.063210304 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.098048919 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.065175008 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.064984529 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.063620614 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.06361034 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.065256055 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073928935 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.069119243 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.0709135 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067216703 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080174576 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072894058 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.063827516 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.070517623 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.082088138 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.067103376 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.063489376 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079918662 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.066715865 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.062487764 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.08146941 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.073152325 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.064909512 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.0642019 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.066777783 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076773472 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.06483219 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.061674406 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071430923 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.064614644 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.065762296 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.067328488 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071232341 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.062591192 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.073529169 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.067588004 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.064471836 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.061865317 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.067204491 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.063812777 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.061467763 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071858111 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.062848423 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077102744 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.069368515 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.07748483 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.077204868 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.071338546 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077899105 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.062310553 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060814144 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.080441471 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.072238781 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.19844303 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.082981157 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.065464556 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.076232673 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.064644915 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.066448159 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.074421458 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.06343043 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065833391 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.063840084 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.06931391 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.06555533 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066246774 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.06951879 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.073170691 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.077253895 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.065770051 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.073158126 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.064327482 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.080261989 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.07461287 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.068495359 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.067409251 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.064558528 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.076544342 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.071440343 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.073425479 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.063583379 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.064469915 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.067365016 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.075137587 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073629735 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.066170595 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.071190873 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.06835966 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.064831472 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.064758741 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.065175264 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.067183274 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.067623523 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.064593869 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072298878 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.07254049 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.078576291 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.071821381 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.073062605 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.063065446 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.063167587 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.065952018 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.063421267 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.068405147 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.073215494 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07998346 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.075872819 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.085386556 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063733377 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.073536803 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.065060354 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.080542812 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.077428787 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.06503017 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.068511125 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.062135497 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065409036 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.07364979 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075786271 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.077353404 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.079276177 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.068515621 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.068156541 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.063122366 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.078812468 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.06432172 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072462369 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072978863 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067979977 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063672862 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.065118126 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072818091 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.068079717 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.063461046 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.079869503 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069814056 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.063371627 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.07845327 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.063808923 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.074687611 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.063294155 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.067004981 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.069058364 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.065586831 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.07355259 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.079476414 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.062464316 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.063289267 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078398978 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.065617897 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064716671 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.071899809 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.078520677 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.068190066 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.071298014 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074841575 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.073407115 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.068247835 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.073703917 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.064560422 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072961458 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.066577039 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.075044211 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.062904304 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08096673 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061908038 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.078296882 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.0635171 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.074642901 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.063447176 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072849815 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.064409635 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.080305069 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063563827 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062438461 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072369446 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059452779 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069893169 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.062059595 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.067078253 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068979669 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.072030953 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.064126072 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071862826 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.202409181 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.074865994 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.070401388 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.074156714 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.075042689 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.069485223 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.064616956 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.073281992 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.076248784 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.072603033 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.065686571 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.065801632 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.064711576 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.073923503 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.066052641 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.065196805 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072561517 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.06875208 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.070017114 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065556121 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.06561954 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.065357241 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073051852 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074029488 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083344703 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073763341 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.072680916 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.073843838 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.06335882 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.079801935 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.064040906 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071513183 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.063020995 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069989153 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.075896803 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.064248077 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083556603 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.065828652 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.072494281 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.077062053 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072951507 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.067083057 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.083104534 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066827464 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.071754948 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.07229971 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.068420886 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.07080368 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.066310893 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.072100775 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.074029836 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.075060801 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.063960258 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.070223491 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072381652 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065276336 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.072227514 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.069002404 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.07260298 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.065426031 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.062457889 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.068165425 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075570676 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.068699446 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.068496697 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.064417545 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.062867553 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.064027655 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.07085401 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.068996161 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.072983353 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078928291 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.062687512 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064968815 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.063252425 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.067458094 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082794633 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073906344 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.071988412 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.068437516 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.0629946 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.065316557 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.065167706 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.0628463 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.065794519 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.061358703 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.063231009 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.075311611 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.065719164 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.068133817 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064180199 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.06443802 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.074086969 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.068985851 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.064157251 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.070798641 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.063496539 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068836619 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.063215298 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.06536478 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.068067616 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.06356023 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.067322842 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.07422319 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.080236792 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.07009365 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.072556402 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.064799607 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.071544378 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078959735 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070400353 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064248914 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.073090709 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.062321583 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081745971 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.073115843 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071386935 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071625594 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063964451 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.0791807 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.065716092 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.071740723 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.078612088 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063393627 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.068664966 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.06198166 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078270398 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066986773 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.061810379 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.070259648 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069574798 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066529878 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.072270293 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.205462885 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.071580432 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068946443 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.068039613 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.066523475 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.066225306 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.073566624 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.081147567 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.065026567 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.068644878 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.07250924 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.072670252 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.068641476 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077142839 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.07226562 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065373912 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.066326558 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.067748357 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.065214232 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075811557 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064533675 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.069203887 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.068473377 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.064378492 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.071053485 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.081519095 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.073834761 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074007656 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062842371 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061445918 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.080130096 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066125811 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065767321 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.07018968 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072739751 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075594859 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.07223078 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.079381871 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062891358 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068182237 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074832747 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.063776101 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.062340262 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066383946 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.063692917 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.071390869 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072631579 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069902431 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064680882 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069209442 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.07574133 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.063473237 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066936741 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.067058152 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062651012 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072693142 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070414873 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070892303 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.06524031 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.063300497 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066979911 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.072769996 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.071791139 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.073275247 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065123088 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.070910191 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.078096815 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.071898722 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067220735 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.063418425 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06771705 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.073065175 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.068989584 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.063123847 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.068964793 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.06786408 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.071212458 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.074157542 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.068544993 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.063734356 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.080983173 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.072417443 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.073176383 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.068375434 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.065995664 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064791696 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.063333044 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075190352 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.063806936 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.065722642 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.068721684 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.065655403 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.082180862 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.072829928 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.080492567 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065280272 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.068444868 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.063252348 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073009757 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.068662507 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063520351 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072784804 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.061126612 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078133699 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.0758687 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.069071619 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.063331071 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.090992729 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.072042657 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.078814463 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073953331 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.072696117 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.067181402 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073466529 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.065298178 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.074903105 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.06301075 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061923869 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.073420981 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071933011 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075859834 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.062635313 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.07315307 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.065549574 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.071251914 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.070732881 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.064293018 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064019812 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.064082794 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.07225247 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.067620116 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071692039 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.211974808 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.081699721 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.065771581 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.076853817 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.074643515 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.0761653 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.078715751 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077283967 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.073049726 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.065600995 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.07198809 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.072508683 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.065458287 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.068894118 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.068055755 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.087291768 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.065954207 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.06583148 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.079883671 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.071462033 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.06433732 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.071002051 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.069158354 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.075014649 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.065750074 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.075040584 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.06847046 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.064892459 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.068558769 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.068668516 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.063075899 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.063641537 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.064017791 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074345256 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.0684992 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.064090173 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083121028 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.066058743 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.073258482 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075518259 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.07056604 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.065586399 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.063126849 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.065515312 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.077301892 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079665761 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.067250966 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072843995 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.065526599 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.073410691 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.063006636 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.072917155 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.072332479 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072476284 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.063633136 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064251874 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.078963753 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080032638 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.068347306 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.073694429 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.073398807 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.065301203 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.086185443 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.073324446 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065408368 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.075061738 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.066597668 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.063379983 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.06347563 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.065863288 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.076112975 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.063361901 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.066327194 seconds)
  done (took 43.696973629 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.104282963 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064660343 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063514178 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063907021 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.075174636 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064616258 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063891504 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064672429 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.064339778 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.066202549 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.064646113 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063859738 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.075352738 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.077545179 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07434658 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.067929518 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063999195 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064853073 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.0639819 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064819636 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074553716 seconds)
  done (took 2.907569448 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.071771101 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.079611376 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.075019492 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.081101073 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.072195884 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.068571731 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.075254781 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068269795 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.075911013 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073801156 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.076129299 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068504114 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.073418087 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.073421669 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073514922 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068439469 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.078681531 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.072007027 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.067916077 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.074937399 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067631089 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.074789414 seconds)
  done (took 3.043283594 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.066266681 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.064077164 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.072813691 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.062930054 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.063214842 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.067471393 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062809704 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.067810053 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.068163288 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.068150108 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.072992856 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.064252288 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062902889 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068679413 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.063198062 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.06455782 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.107367734 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.064881662 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.064858076 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.06292798 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.066510689 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.072824725 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.063152626 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.063647184 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.06789886 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.066858466 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.06315293 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.065802611 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.064224857 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.067472017 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.064954523 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.062963452 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.072766051 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.07203234 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.067648074 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.067842123 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.065058705 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.064129497 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.063519355 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.063280244 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.072335918 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.065005658 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.063622792 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.065116823 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.07295773 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.063586199 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.063162854 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.0732326 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062868001 seconds)
  done (took 4.724755461 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.075167741 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.117677317 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.069378726 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.097783539 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.076533919 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.069564678 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.06930437 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.098752088 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.064675646 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.065467109 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.077916025 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.077900415 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066879771 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.068184607 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.069466746 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.066140598 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.067023693 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.065805802 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.067715913 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063817952 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.067387653 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.068529397 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.074071965 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.074517033 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06521605 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063903286 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064202595 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065468072 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074636361 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.068793358 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.066310841 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06663242 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074937666 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.069865718 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064261371 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.064243938 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.075304907 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.06484671 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.06467045 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062785507 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.06394898 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065923978 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.070148383 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.077861519 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.066616198 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.071020532 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.066348161 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.064412402 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.077393582 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.066866766 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.070490448 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.077958314 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067419388 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.06695533 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067894001 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.077362295 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.066872272 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.065282506 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.06707272 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.077179092 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.064330875 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066940935 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.075894656 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.064022047 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067675936 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075807699 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.069646346 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06548536 seconds)
  done (took 6.385801219 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.074545798 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.098088588 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074771131 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.075271734 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074779748 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.073961396 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.072642938 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.072565075 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073216694 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.075138867 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074545814 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.11372195 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.069649582 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.07684261 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073034604 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.075231491 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.07249211 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072647725 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.072406103 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072006607 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.072391867 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072738152 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.072341361 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072611718 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.07473526 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068889251 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072626437 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072439176 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072711859 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072342888 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074644292 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.07230536 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072356143 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073023225 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074674934 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.074876137 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063264631 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072418121 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.072407282 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.07245746 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.0688299 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072610146 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071852316 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068626495 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072304632 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071971414 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073163234 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074952664 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.079610201 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072649204 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072089424 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073014082 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072053395 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.072576826 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073063045 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078815774 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07286354 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073211551 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072261594 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07305422 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072935825 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.080426316 seconds)
  done (took 6.073687376 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078290436 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.069036479 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.082421046 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.063648204 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06369195 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.073698671 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.064210379 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.063783766 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.070928963 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.071558559 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.072252527 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.07272332 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.074680697 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.072521235 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.073337946 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.075505735 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.073166497 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.073232979 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070418643 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.073292487 seconds)
  done (took 2.90477481 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.079558662 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.08294901 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.068500746 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.072971106 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.069677429 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.073558354 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.068910863 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069417609 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070171184 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069615642 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.074469538 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.074427684 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070098459 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.073802005 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.074122699 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.073063605 seconds)
  done (took 2.627587475 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.071479258 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.071400611 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068693992 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063245065 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.067331868 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.06407851 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.065627492 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.063477621 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063776543 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.078276586 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.0651202 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.076950041 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.064470953 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.064085488 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.064259466 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.071288838 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064122421 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.06442232 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.064538304 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.069116079 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.071239266 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.065299706 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.068968047 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.064426683 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.07001858 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.071884515 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.066101057 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.069640566 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.065024456 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064992418 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.07012806 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.071349173 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064369002 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.06542987 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.063330101 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.064723236 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.064418659 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.065026586 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.070374306 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.06448501 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.063240459 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.06975352 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.064902823 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.065373387 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063941441 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064789832 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063678889 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070273036 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.065356379 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.070553713 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.06486127 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.066226866 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.065326865 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.072157866 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.066875455 seconds)
  done (took 5.147107802 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.082257656 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.069839002 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.063531662 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.063386088 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.069275957 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.06975558 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.069392242 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069592231 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069810017 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.063544266 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069828839 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068920526 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069882244 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.069265794 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070275574 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069251621 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.06378821 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.069199754 seconds)
  done (took 2.719638912 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.076141772 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.069074489 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.073899928 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.068999676 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.068973966 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.069053573 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064091178 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.063866847 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06412318 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068442046 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068545244 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.068532732 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063735543 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.068258277 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068503622 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068602873 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.068196634 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063979374 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068678979 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063755625 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.068165112 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064562974 seconds)
  done (took 2.944962684 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.092335273 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.091014269 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.132540582 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.083603633 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.092638434 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.075111544 seconds)
  done (took 2.038676316 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.098610026 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.108815271 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068537931 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068679306 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077536695 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071895577 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071912213 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072244282 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077641483 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0763841 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071889268 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077705307 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077227913 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073810146 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078014019 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079990033 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072052613 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072038368 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068948166 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080291589 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072787161 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077471224 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072445055 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072015975 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071684795 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074169648 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079957211 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075951556 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072013988 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077934543 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080139522 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072545074 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077517585 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076396724 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068858691 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077872671 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072148487 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080295236 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077761776 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07408103 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.069387034 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076361388 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075453655 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072019229 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080507693 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072388578 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073990533 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07218086 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072933141 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081282534 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075826383 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072046072 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075455352 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078079445 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078012659 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080053184 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074202888 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072173957 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078318698 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076480852 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07458765 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07806298 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074507364 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076527015 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080661748 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074341387 seconds)
  done (took 6.488938342 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.106737438 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.069435497 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072583497 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076891163 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074111999 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072533735 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072190048 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072842221 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07268733 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069756242 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.109561732 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073146493 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074131942 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074371449 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073057407 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072494158 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072727137 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07439823 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070256412 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.082729506 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072720957 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073889839 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074376106 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074169078 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076569167 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079977194 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072425964 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072252482 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072110178 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072174984 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074146608 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072612145 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07421053 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.069477325 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07372912 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073028023 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071906816 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073943904 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072422504 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077904356 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074215782 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080396532 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072205943 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072123633 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07663407 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072318996 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071990987 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069339964 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07258803 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069088173 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076393056 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076476379 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075298363 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073367069 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071862255 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070557795 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070782533 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070402863 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070391476 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077873251 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071990583 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070419967 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080633126 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072274951 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07271946 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074683497 seconds)
  done (took 6.41710717 seconds)
done (took 133.172008321 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.239106364 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.201456944 seconds)
  done (took 1.896319006 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.0789608 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.103046582 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.080450795 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.174574814 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.073680546 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.121438109 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.117602184 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.077814723 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073708874 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.07381183 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.07596999 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.078430995 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.174031464 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.074734278 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.074291606 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075914402 seconds)
  done (took 3.015446861 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.113307983 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.1937947 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.119605582 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.073817474 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.114957424 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.081277568 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.073668672 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.085333899 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.077580187 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.08617666 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.080745739 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.079054628 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.075541525 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.079105383 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.077386922 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.080854599 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.075892236 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.081029693 seconds)
  done (took 3.132625276 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.103333534 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.096409645 seconds)
  done (took 1.688528713 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.166093484 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.108149335 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.149216404 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.336136266 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.137173471 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.129896603 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.131826415 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.126975058 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.117815496 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.127530402 seconds)
  done (took 3.013639447 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.111280624 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.182901306 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.325622399 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.127628672 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.08049856 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.102276435 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.126116359 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083839106 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.081452932 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.081274521 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.081421539 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.078766794 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.103649127 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.078183856 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.077629788 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.080218358 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.109275254 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.077934894 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.078694145 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.079367912 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.111082721 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.074263572 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.080399953 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.077471637 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.081530486 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.082054343 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.075941708 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.074610344 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.079623529 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.07902359 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.081812902 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.100878023 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.082426242 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.103598701 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.079296018 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.104749129 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.078515655 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.077929962 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.078802547 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.077786495 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.08079836 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.080729137 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.083745942 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.080724688 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.076148363 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.078606615 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.075863201 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.074325035 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.083241868 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.075638092 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.082890668 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.082249476 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.103189072 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.075198863 seconds)
  done (took 6.464157066 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.114254519 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.108300015 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.073162905 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.118783085 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.110872073 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.073910579 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.109703559 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.105564626 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.114099622 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.073422969 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.072619152 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.072746431 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.080299989 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.084675053 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.118600754 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.110829343 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.07337025 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071711094 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.110273265 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.112327329 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072580471 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.104766618 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.101716719 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.109541566 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069713752 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071921934 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071906719 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.072574586 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07756661 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.078882626 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070640087 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.077787567 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.08589514 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075782688 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069606641 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.072405976 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071901169 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.07944412 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080145047 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.080448135 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.077679669 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070351006 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071842319 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.072627812 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.072764415 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071411559 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.078711112 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.07964433 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.078594766 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.07203082 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.072158255 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.071588489 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.07263873 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.079170068 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.078428595 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.080390028 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079660554 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071815908 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072083781 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.073670643 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080559714 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.07771116 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077205636 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.07074669 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077994771 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069920282 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078705029 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.082180584 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069885398 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.072715359 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071999862 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.07230774 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.072862126 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.078399824 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.078646845 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.073113072 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.075544915 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072170568 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.081172882 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.078056826 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.072072814 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.077756477 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071398768 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.072519766 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072692653 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07251447 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.077693013 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.079135861 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.072684044 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071683853 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071897734 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071695545 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.07073859 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.077310833 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.078679613 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.078863318 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.077804532 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072126219 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.078202094 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077404266 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.072123976 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.077382195 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071499606 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.07188125 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071588482 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076375719 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.075871048 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.0782403 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071011234 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.070718014 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.077122088 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.216646486 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.074268853 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.080085817 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.0834088 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.08066935 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.073029511 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.082945232 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.073346301 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.081757087 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070627892 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.08151371 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.073330947 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.078936104 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.072558254 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.071826716 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.07227919 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.079126166 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.073362917 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.072569914 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.073104327 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.073102261 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.079046812 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.082699899 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.073487941 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.079286763 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.079397737 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.073471808 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.079770263 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.072983942 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.080426783 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072536254 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07265151 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07178606 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081989962 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.072640139 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.072819965 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.073186484 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.081277766 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070466149 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078838462 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07617058 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070359946 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.085868567 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.081337566 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.078276657 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.081119132 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.073253072 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.072690553 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072223008 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.073113568 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.078547812 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.079832133 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.073375954 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.072667809 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.078350025 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.081548388 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.072066468 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.078509708 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.078282471 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.329228727 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.072323857 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.072453363 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.082036227 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077924899 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075877691 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075711071 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076948456 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.070266906 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075544964 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075956687 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069913696 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.083179568 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070414155 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079335176 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.076305793 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074929665 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076417953 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077374381 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.078086387 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.078253603 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.080356761 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06960698 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069776702 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075478484 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069779081 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070287173 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.07773156 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.072584002 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.072468751 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.082445759 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070242715 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078011795 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069808278 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076517842 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069366206 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070202064 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080026966 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070230126 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069896375 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075541786 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069596308 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075374677 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077883342 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075116407 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069381989 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069681553 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075630942 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075627366 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06990078 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068295436 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069070841 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073642161 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.073569516 seconds)
  done (took 19.24766189 seconds)
done (took 39.969101222 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.219692154 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.178381767 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.20809149 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.120576236 seconds)
  done (took 2.32744473 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.097100528 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.104371081 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.080750172 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.06975025 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.087847535 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.068929614 seconds)
  done (took 2.046528659 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.261203402 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.196847441 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.177642153 seconds)
  done (took 2.165373077 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.228062046 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.204428073 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.520810512 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.320239923 seconds)
  done (took 2.908916865 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.13667307 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.082251193 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.067837266 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.07808295 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.109056261 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.137316345 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.089647367 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.11259007 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.079323631 seconds)
  done (took 2.489456207 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.135532498 seconds)
done (took 13.646653888 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.12714189 seconds)
    (2/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.235268425 seconds)
    (3/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.111180146 seconds)
    (4/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.074971164 seconds)
    (5/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.08060347 seconds)
    (6/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.077348412 seconds)
    (7/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.084251991 seconds)
    (8/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.2194449 seconds)
    (9/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.163643856 seconds)
    (10/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.080424739 seconds)
    (11/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.080542377 seconds)
    (12/341) benchmarking ("sort", Float32, false)...
    done (took 0.143830178 seconds)
    (13/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.079227613 seconds)
    (14/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.278408324 seconds)
    (15/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.096786332 seconds)
    (16/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.184926874 seconds)
    (17/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.170054962 seconds)
    (18/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.079796553 seconds)
    (19/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.077695807 seconds)
    (20/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.070230996 seconds)
    (21/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.269218521 seconds)
    (22/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.12618455 seconds)
    (23/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.077454438 seconds)
    (24/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.198459526 seconds)
    (25/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.074250659 seconds)
    (26/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.080874121 seconds)
    (27/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.214701946 seconds)
    (28/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.203009943 seconds)
    (29/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.074967589 seconds)
    (30/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.226998892 seconds)
    (31/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.177885179 seconds)
    (32/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.099205356 seconds)
    (33/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.140002689 seconds)
    (34/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.0980596 seconds)
    (35/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.229609141 seconds)
    (36/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.080126875 seconds)
    (37/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.079467779 seconds)
    (38/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.213956472 seconds)
    (39/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.0886399 seconds)
    (40/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.186124832 seconds)
    (41/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.077738903 seconds)
    (42/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.184930729 seconds)
    (43/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.115029652 seconds)
    (44/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.145089054 seconds)
    (45/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.231757273 seconds)
    (46/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.067820778 seconds)
    (47/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.092583537 seconds)
    (48/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.199605327 seconds)
    (49/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.189624267 seconds)
    (50/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.080981729 seconds)
    (51/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.206744909 seconds)
    (52/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.167613839 seconds)
    (53/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.0726041 seconds)
    (54/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.161982642 seconds)
    (55/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.080429449 seconds)
    (56/341) benchmarking ("sort", Bool, false)...
    done (took 0.147043086 seconds)
    (57/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.142676557 seconds)
    (58/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.135921702 seconds)
    (59/341) benchmarking ("sort", Int64, false)...
    done (took 0.069538609 seconds)
    (60/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.180630129 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.085396357 seconds)
    (62/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.074547633 seconds)
    (63/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.157464332 seconds)
    (64/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.066943308 seconds)
    (65/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.071894807 seconds)
    (66/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.067919674 seconds)
    (67/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.147106596 seconds)
    (68/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.095927694 seconds)
    (69/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.077733695 seconds)
    (70/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.236900685 seconds)
    (71/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.230596478 seconds)
    (72/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.198700752 seconds)
    (73/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.06520822 seconds)
    (74/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.140209352 seconds)
    (75/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.144666899 seconds)
    (76/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.066456584 seconds)
    (77/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078146174 seconds)
    (78/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.125375153 seconds)
    (79/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.077097996 seconds)
    (80/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.290116181 seconds)
    (81/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.139998156 seconds)
    (82/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.07401506 seconds)
    (83/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.080440483 seconds)
    (84/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.071996226 seconds)
    (85/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.198310345 seconds)
    (86/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.070810285 seconds)
    (87/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.24154821 seconds)
    (88/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.125477422 seconds)
    (89/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.087240002 seconds)
    (90/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.214675063 seconds)
    (91/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.070542116 seconds)
    (92/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.171771717 seconds)
    (93/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.078415376 seconds)
    (94/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.148702906 seconds)
    (95/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.150164079 seconds)
    (96/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.088808634 seconds)
    (97/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.097084809 seconds)
    (98/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.078055715 seconds)
    (99/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.070555059 seconds)
    (100/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.174903289 seconds)
    (101/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.069293055 seconds)
    (102/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.0794677 seconds)
    (103/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.083445294 seconds)
    (104/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.082263928 seconds)
    (105/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.070356832 seconds)
    (106/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.073943509 seconds)
    (107/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.078883312 seconds)
    (108/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.077071427 seconds)
    (109/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.077563273 seconds)
    (110/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.150841235 seconds)
    (111/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.203129852 seconds)
    (112/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.071609436 seconds)
    (113/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.209811978 seconds)
    (114/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.197353216 seconds)
    (115/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.089557067 seconds)
    (116/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.070010942 seconds)
    (117/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.078524068 seconds)
    (118/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.076215292 seconds)
    (119/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.077139988 seconds)
    (120/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.158551321 seconds)
    (121/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.081381984 seconds)
    (122/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.068861139 seconds)
    (123/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.070126772 seconds)
    (124/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.068283143 seconds)
    (125/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.166947096 seconds)
    (126/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.099417488 seconds)
    (127/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.087751299 seconds)
    (128/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.084494027 seconds)
    (129/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.078287281 seconds)
    (130/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.102019947 seconds)
    (131/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.069782152 seconds)
    (132/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.069074685 seconds)
    (133/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.089939365 seconds)
    (134/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.065965258 seconds)
    (135/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.067658086 seconds)
    (136/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.075798009 seconds)
    (137/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.085967169 seconds)
    (138/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.097605545 seconds)
    (139/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.077603341 seconds)
    (140/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.083893449 seconds)
    (141/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.076280975 seconds)
    (142/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.1959363 seconds)
    (143/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.069674668 seconds)
    (144/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.182467122 seconds)
    (145/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.079100786 seconds)
    (146/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.088530644 seconds)
    (147/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.08037328 seconds)
    (148/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.08733918 seconds)
    (149/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.069744932 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.079329076 seconds)
    (151/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.068695163 seconds)
    (152/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.159123376 seconds)
    (153/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.069402109 seconds)
    (154/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.077407791 seconds)
    (155/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.068267951 seconds)
    (156/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.069536238 seconds)
    (157/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.081354903 seconds)
    (158/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.176146019 seconds)
    (159/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.077322661 seconds)
    (160/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.06788466 seconds)
    (161/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.067963871 seconds)
    (162/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.068067128 seconds)
    (163/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.067784925 seconds)
    (164/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.067054862 seconds)
    (165/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.071722049 seconds)
    (166/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.067690251 seconds)
    (167/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.141512512 seconds)
    (168/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.09056752 seconds)
    (169/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.081582514 seconds)
    (170/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.084291017 seconds)
    (171/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.148659938 seconds)
    (172/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.076931018 seconds)
    (173/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.080814982 seconds)
    (174/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.067886137 seconds)
    (175/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.085991854 seconds)
    (176/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.071911682 seconds)
    (177/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.200709689 seconds)
    (178/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.077571122 seconds)
    (179/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.074396737 seconds)
    (180/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.152212839 seconds)
    (181/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.177604555 seconds)
    (182/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.07000487 seconds)
    (183/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.066915986 seconds)
    (184/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.068910186 seconds)
    (185/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.065156997 seconds)
    (186/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.068484956 seconds)
    (187/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.077605138 seconds)
    (188/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075261729 seconds)
    (189/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.064946384 seconds)
    (190/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.241657593 seconds)
    (191/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.075022349 seconds)
    (192/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.069865318 seconds)
    (193/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.068183864 seconds)
    (194/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.165875836 seconds)
    (195/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.07896417 seconds)
    (196/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.069902477 seconds)
    (197/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.170489535 seconds)
    (198/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.098668572 seconds)
    (199/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.071825217 seconds)
    (200/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.070541173 seconds)
    (201/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.074204853 seconds)
    (202/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.078644368 seconds)
    (203/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.070230492 seconds)
    (204/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.154170823 seconds)
    (205/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.073163317 seconds)
    (206/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.070369103 seconds)
    (207/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.068866655 seconds)
    (208/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.067208698 seconds)
    (209/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.149025007 seconds)
    (210/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.070927762 seconds)
    (211/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.069795396 seconds)
    (212/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.205001551 seconds)
    (213/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.070535856 seconds)
    (214/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.099996097 seconds)
    (215/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.07102599 seconds)
    (216/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.169636699 seconds)
    (217/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.071189983 seconds)
    (218/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.082615331 seconds)
    (219/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.069703278 seconds)
    (220/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.082320524 seconds)
    (221/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.06882456 seconds)
    (222/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.074044282 seconds)
    (223/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.069233459 seconds)
    (224/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.068210684 seconds)
    (225/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.146677988 seconds)
    (226/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.12306265 seconds)
    (227/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.157602301 seconds)
    (228/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.180563612 seconds)
    (229/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.076887762 seconds)
    (230/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.068008797 seconds)
    (231/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.068694558 seconds)
    (232/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.071842099 seconds)
    (233/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.069612265 seconds)
    (234/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.070275314 seconds)
    (235/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.156511126 seconds)
    (236/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.080409151 seconds)
    (237/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.070137847 seconds)
    (238/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.081447814 seconds)
    (239/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.152658968 seconds)
    (240/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.085143459 seconds)
    (241/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.072568285 seconds)
    (242/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.075048029 seconds)
    (243/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.081577136 seconds)
    (244/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.070515743 seconds)
    (245/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.06915518 seconds)
    (246/341) benchmarking ("sort", Int8, false)...
    done (took 0.155537163 seconds)
    (247/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.068293066 seconds)
    (248/341) benchmarking ("sort", BigInt, false)...
    done (took 0.275773204 seconds)
    (249/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.074200699 seconds)
    (250/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.076801069 seconds)
    (251/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.077475705 seconds)
    (252/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.068415967 seconds)
    (253/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.068613823 seconds)
    (254/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.071409787 seconds)
    (255/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.070083146 seconds)
    (256/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.142337393 seconds)
    (257/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.199285771 seconds)
    (258/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.079728279 seconds)
    (259/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.068305226 seconds)
    (260/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.069447246 seconds)
    (261/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.070957264 seconds)
    (262/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.149098419 seconds)
    (263/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.068012268 seconds)
    (264/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.089722371 seconds)
    (265/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.090177056 seconds)
    (266/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.072061704 seconds)
    (267/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.179736515 seconds)
    (268/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.086565205 seconds)
    (269/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.069444892 seconds)
    (270/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.068262111 seconds)
    (271/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.093299379 seconds)
    (272/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.096344795 seconds)
    (273/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.069845948 seconds)
    (274/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.075238805 seconds)
    (275/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.092754491 seconds)
    (276/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.067863244 seconds)
    (277/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.067386716 seconds)
    (278/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.068217156 seconds)
    (279/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.069165237 seconds)
    (280/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.066662683 seconds)
    (281/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.083967915 seconds)
    (282/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.152815497 seconds)
    (283/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.067350881 seconds)
    (284/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.066578004 seconds)
    (285/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.068018656 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.134914812 seconds)
    (287/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.068178588 seconds)
    (288/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.093215267 seconds)
    (289/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.072339416 seconds)
    (290/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.155371572 seconds)
    (291/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.068053812 seconds)
    (292/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.067534333 seconds)
    (293/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.067190204 seconds)
    (294/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.181560385 seconds)
    (295/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.069498299 seconds)
    (296/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.167933618 seconds)
    (297/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.086954483 seconds)
    (298/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.065710266 seconds)
    (299/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075165841 seconds)
    (300/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.090547549 seconds)
    (301/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074461048 seconds)
    (302/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.066780054 seconds)
    (303/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.124209804 seconds)
    (304/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066153265 seconds)
    (305/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.192310298 seconds)
    (306/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069664079 seconds)
    (307/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.06676395 seconds)
    (308/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.081634975 seconds)
    (309/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.073905917 seconds)
    (310/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.082922008 seconds)
    (311/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.065020422 seconds)
    (312/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.299039581 seconds)
    (313/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.162226264 seconds)
    (314/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.070722879 seconds)
    (315/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.132064105 seconds)
    (316/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.153841861 seconds)
    (317/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.071708044 seconds)
    (318/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.076158058 seconds)
    (319/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.07700439 seconds)
    (320/341) benchmarking ("sort", Float64, false)...
    done (took 0.1418033 seconds)
    (321/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.067823849 seconds)
    (322/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.069266552 seconds)
    (323/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.068196832 seconds)
    (324/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.067227585 seconds)
    (325/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.087034847 seconds)
    (326/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.069001808 seconds)
    (327/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.067441787 seconds)
    (328/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.070420765 seconds)
    (329/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.070985908 seconds)
    (330/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.079964997 seconds)
    (331/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.091982732 seconds)
    (332/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.068576612 seconds)
    (333/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.069798495 seconds)
    (334/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.066580561 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.087596777 seconds)
    (336/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.068064581 seconds)
    (337/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.075264935 seconds)
    (338/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.070090787 seconds)
    (339/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.067131751 seconds)
    (340/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.068514208 seconds)
    (341/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067971456 seconds)
  done (took 37.831913643 seconds)
done (took 39.391602915 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.089343316 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.095797107 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.078606651 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.090128641 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.085753271 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.10551445 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.078184359 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.082779367 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.085808235 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.084034413 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.083835243 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.076947982 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.078597484 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.077639998 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.075442443 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090366986 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.083056435 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.076003984 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.078281994 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.069870331 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.078779238 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.070336299 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.06928748 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.07707267 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.082245247 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.077629808 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.079486138 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.079939763 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.070216585 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.070468203 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.07545467 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.079729973 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.069574424 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.081983341 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.078365105 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.078680153 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.079942792 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.083348997 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.068952616 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.069252709 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.080433063 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.06987187 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.078747057 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.076379212 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.075521992 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.077987982 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.079482149 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.082463596 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.09345839 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074862986 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.081837257 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.08129935 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.081985332 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.07563154 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.075777346 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.079325018 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.077044743 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.093660148 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.07910308 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074833331 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.081022387 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.07941699 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.076734693 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.078324896 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.078540406 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.081117481 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.079335348 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074880475 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078459911 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.076639062 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.069288877 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.078493316 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.075035576 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.069698949 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.081129546 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.083985688 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.068436112 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.074451305 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.077996251 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.078574824 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.068981454 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074845795 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.068530498 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.074866759 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074215743 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.075946968 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.075002695 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.077087279 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.068832937 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.078559798 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.07782595 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.078363345 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.068314875 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.081526841 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.069080812 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.076833925 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.06973989 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.069658715 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.068795096 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.075899288 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.069177882 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.075200587 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.078372269 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.068101718 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.075238414 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.083245165 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.072446922 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.07739336 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.068673669 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.068555849 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.08052299 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.081375174 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.069567413 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07442322 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.068185722 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.075672657 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.068750038 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.069086285 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.069620772 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.069843494 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.07476998 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.069805932 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.075144083 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.075700258 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.081520981 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.06883544 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.074446135 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074248743 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.069231019 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.075772742 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.069550147 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.069432775 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.067764683 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.080503656 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071302745 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.067224169 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.075607466 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071255364 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.07681857 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.067947373 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.077836832 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.074037364 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071352077 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.225728448 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.0675589 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.081636267 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073487067 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.07433164 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.069660141 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.070146344 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.069149334 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.069603696 seconds)
done (took 13.402630567 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.071535807 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.110834997 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.077737562 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.087440618 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.082828573 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.071755507 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.074835217 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.087295395 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.074197052 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.090513439 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.099066207 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.092465028 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.098359454 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.069220983 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.068996747 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.069099249 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.066310026 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.07675661 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.085218065 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.094591717 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.099710399 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.070078804 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.071965421 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.087428794 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.081772404 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.089770286 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.071482471 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.071345035 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.119415025 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.08560907 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.096570048 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.070151985 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.071047566 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.084029886 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.082954271 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074801018 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.071157197 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.074540542 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.071570945 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.070111865 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.072665414 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.085133503 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.074525615 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.074744688 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.071357556 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.071429005 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.07087734 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.073426955 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.083916874 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.074170981 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.078257997 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.082352401 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.072074076 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.070472455 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.068583898 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.074179435 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.06997369 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.071494604 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.070348235 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.07044957 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.070528012 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.073161717 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.071152946 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070940836 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.073647101 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.073010806 seconds)
  done (took 6.788610349 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.08808128 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.096928722 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.083077771 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.0829084 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.067687583 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.068840663 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.068128292 seconds)
  done (took 2.226463289 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.07164996 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.077438919 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.080327926 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.081019516 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.090275128 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.078046551 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.069281284 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.100594019 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.067152979 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079592516 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.087183483 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.084410582 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.074200063 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.081122012 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.068819319 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.081472422 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.068608625 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075164641 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.076943716 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080965054 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07264222 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.098780415 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.081672761 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068624441 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.083232344 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.077557559 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.072965927 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.070974696 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.071124108 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.06995244 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.070513085 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.093554217 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.077291676 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.085345315 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.071429959 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.069855304 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.075012926 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.071261534 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.077993975 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.077387288 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.074073807 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.070396496 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.071354128 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.070213048 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.071896763 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.075271071 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.071550725 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.070476958 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.069992869 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.078242791 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.069611867 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076979062 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.072951122 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.075655841 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072795126 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07255165 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075543792 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.06863469 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.077094612 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.077221735 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.070467235 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.083292899 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.082788839 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.074109523 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.08227377 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.079406742 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.077299252 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.074709016 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.070358529 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.06957393 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.070815443 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.082756932 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.073970051 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.07249663 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.071338029 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.075168921 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.074172687 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.085720292 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.086029038 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.084119763 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.072619882 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.070472394 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.074711351 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.085662901 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.075468118 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.07038372 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.071059252 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.069665888 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.075242063 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.070611595 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.075325731 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.070140212 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.077198488 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.072893424 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.07299825 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.078989424 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.07035332 seconds)
  done (took 9.016368454 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.073828671 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.072415523 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.07169516 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.071352146 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.072167037 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.072654192 seconds)
  done (took 2.136802498 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.094953154 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.069491563 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.081222866 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.069098179 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.091729019 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.075653034 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.075503146 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.077049782 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.085538587 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.079378863 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.075287062 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.077454786 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.07553689 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.070531955 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.075137017 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.069453647 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.074827954 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071790685 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.078892637 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072636828 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.084737952 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.072741118 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.073274868 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.083797772 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.073583766 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.07206369 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071319548 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.082170765 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.081342715 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.079658819 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.072365975 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.073798986 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.079544834 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.079849747 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.07736885 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.079848387 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.0708386 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.076458221 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.073464827 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.074122194 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.079826022 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072754017 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.073553741 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.076361467 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.078863336 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.07957051 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.076708759 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.074656038 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.077984073 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.076541729 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.07701788 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.071339077 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.07264865 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.076840301 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.079537664 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.079435728 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.084468318 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.077549198 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.072534308 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.079978028 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.071233232 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.072905884 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.078680059 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.073924992 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.075725164 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.076368297 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.079626479 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072579491 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.07292095 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.07098921 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.076768812 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.070506109 seconds)
  done (took 7.166551223 seconds)
done (took 28.995546169 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.552579246 seconds)
  done (took 2.191260595 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.615360337 seconds)
  done (took 2.297095865 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.913587503 seconds)
  done (took 10.593744122 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.331596718 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.349659367 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.742052191 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133884613 seconds)
  done (took 3.285683612 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.757227161 seconds)
  done (took 2.448008008 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.23621637 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.2218764 seconds)
  done (took 2.158890033 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.586637087 seconds)
  done (took 2.267320448 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.182877865 seconds)
  done (took 2.881538498 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.232499887 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.164471851 seconds)
  done (took 2.08935942 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.527241649 seconds)
  done (took 2.212605686 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.346075008 seconds)
  done (took 6.037046919 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.243326587 seconds)
  done (took 1.969784703 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.237258871 seconds)
  done (took 1.931451811 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.115947676 seconds)
  done (took 3.797696689 seconds)
done (took 47.866463687 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.089876715 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.094858187 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.092454267 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.087036288 seconds)
  done (took 2.017543017 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.079061616 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.074669186 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.078211061 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.078266311 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.075713418 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.076687388 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.077634022 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.072971996 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.075867163 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.074725541 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.073253791 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.074349561 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.077253358 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.074553568 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.077013778 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.078240552 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.074662147 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.074318834 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.076843265 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.074246991 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.077465232 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.074098867 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.072851212 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.074273174 seconds)
  done (took 3.500506109 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.083656364 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.076204158 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.079276904 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.075418344 seconds)
  done (took 2.007488761 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.081712369 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.08105784 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.090688632 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.095636384 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.081754676 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.08147338 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.088935224 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.089824631 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.070026472 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.09243863 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.073080889 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.070921909 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.070853042 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.090575048 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.088314596 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.066642284 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.068036882 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.082224325 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.080349507 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.084022819 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.072650006 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.069483721 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.08188686 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.081749489 seconds)
  done (took 3.628133801 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.084708318 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.070349052 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.083187177 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.095514871 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.096931859 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.069765549 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.084553657 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.097560243 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.132329634 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.069491633 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.076132315 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.069653916 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.109203181 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.069677048 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.08569754 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.114252859 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.117338859 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.073546889 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.104203541 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.069566953 seconds)
  done (took 3.475637138 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.080418819 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.073877298 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.074357808 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.070003021 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.081007458 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.077866248 seconds)
  done (took 2.162106701 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.073146125 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.071575525 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068513667 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.068693766 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.075290135 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.071019185 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.069830131 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.07191131 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.071724483 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.071352144 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.07071463 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070076101 seconds)
  done (took 2.54664252 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.16139732 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.074895732 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.074630335 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.071305067 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.075569837 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.070891052 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.086006643 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.072759392 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.090284617 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.070588182 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.070975456 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.073334808 seconds)
  done (took 2.688280544 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106082681 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105983953 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.152778519 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122499391 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120912975 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102253576 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124693181 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.097602339 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.16609699 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.140885729 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121432118 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12956705 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091450892 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.073591255 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104164001 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106634691 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140790392 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076232979 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117963662 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.202736341 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120275761 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.117657635 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127338841 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121327216 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084525059 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123298064 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096005237 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103586974 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.155246471 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111275479 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122574255 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.100361356 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.073649303 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072731942 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151915875 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.105819168 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141813918 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.098019616 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106188809 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.093123264 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111804853 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.073693291 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.089501606 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.107965928 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085662355 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117957197 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.089141867 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10849696 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085934671 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.136464964 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108039773 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100643414 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091684379 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106220467 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131158591 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097293022 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112610766 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109638148 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083592344 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.119280338 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100421974 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.256063015 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096926511 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083448083 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.164417139 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092072465 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.117189062 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117563468 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.084316495 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092001766 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104951177 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.133082042 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109165803 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.109313253 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116347538 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.125888429 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112088048 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093826939 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.131147262 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098008708 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.077649976 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.109801368 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.131952441 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088669545 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10312923 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131945611 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095287149 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11090066 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.093971125 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.120384428 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082785849 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.098527774 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07150976 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.100029976 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108886154 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0987272 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114127577 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108901214 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080535289 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12654822 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.11059342 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074363435 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118900755 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101540882 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154977885 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097345766 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.078104296 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101365144 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097330927 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.151383204 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086684656 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082875337 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100662294 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144563977 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096020377 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.173622328 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101460823 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135470266 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102434675 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.092628074 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079148052 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.092493662 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104821836 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108772378 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105988963 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092750134 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.081544068 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088669791 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096116597 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.254649221 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084923826 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121648509 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.108191823 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.0805495 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094651378 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.082306163 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131767879 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.08353967 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113427166 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130103887 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.083881259 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11092683 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.132318799 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144582504 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.10323705 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113194374 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146013918 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.122073867 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084763231 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.088621585 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113420175 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.148831127 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.119498537 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090882694 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.081709983 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105849834 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116056125 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.100264563 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.138133773 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12802201 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110887514 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099509659 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143980372 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123328509 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096273146 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100786553 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101878804 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.127186008 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111247334 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161419073 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099716512 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12435819 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119085223 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145793419 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.119745282 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095276361 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090406689 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099839649 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.110168271 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111443106 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148728973 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.101495528 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.077319308 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098409001 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133558249 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078188364 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101639741 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.092249392 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.096242513 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124977705 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.088149999 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085747774 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.070792462 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102372573 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138011089 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.074398445 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115152812 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.278524635 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106566431 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.107205141 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.072097994 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101949327 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.146275286 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107877209 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143301339 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1192299 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103213086 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120935959 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.10155579 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.108199087 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081601889 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.130010082 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.136501649 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098800841 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092629264 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137892976 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120287257 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.136324062 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.098266025 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117004945 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.107237505 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101969026 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109236017 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.10639644 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.150119128 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126850084 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.131015945 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121390822 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112113691 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113213174 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140445618 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087415644 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122825325 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.08052737 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11736563 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.081998755 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113111026 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.084110395 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.116868132 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084050779 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.105272966 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.073987156 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.07907795 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.14886332 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.118385255 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09486468 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09169398 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.142895902 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.13863829 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.086220478 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106431789 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.139272801 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106583927 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10546176 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.113292746 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.090011145 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09857051 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.305415772 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082686142 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.084903096 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.101727725 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097573926 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109879449 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.090074457 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.080683748 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143861704 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107876921 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097908499 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113874852 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101697407 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.128234304 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094348203 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092858425 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11071665 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10953502 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146279357 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.096077771 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.103109993 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.124411811 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085390023 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.09806866 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.074903364 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.089875347 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.080534367 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.11487735 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081046858 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113237298 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.073665572 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.137027004 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091113587 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.095580413 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.105104872 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102230046 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134244083 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097652563 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135608537 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095301769 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108053845 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113587672 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100232131 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116226778 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109914583 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101705638 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.114714258 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.100926214 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109000367 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112612421 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095828604 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.14309083 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094236988 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127178428 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11135105 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112200487 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109302351 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122701193 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143568707 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11843569 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.150326495 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.0806522 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088332231 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110862652 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105873279 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152050832 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106961161 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.07621617 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.121154669 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09558121 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10063287 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.271523573 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089530679 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150469585 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093274377 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.093515108 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120205477 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.095222317 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103404486 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081937505 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101322335 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.107084925 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100342394 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100604231 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.138638077 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124549734 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119800457 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.139536094 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.104449315 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.098809885 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.124500611 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117161051 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116954874 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091842775 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091762235 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129991895 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106466342 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.134952702 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.106346326 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099443936 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10438419 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094858024 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105396512 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102529907 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.116592599 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085516436 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.081278314 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.073215573 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.077008698 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123642588 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113920078 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107281903 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104630913 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.077129009 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.109594158 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103781804 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076685018 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09288797 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098753768 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.130355721 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.087342571 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095888877 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.120419823 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.096548237 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109325353 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.136438259 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135719141 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.106256941 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094178922 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.149696177 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13479659 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09187234 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095471145 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.073744073 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081075875 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103629746 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146294415 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119967099 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078913644 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084814632 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.078810482 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.253219655 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.075822224 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.094543654 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.096842465 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111103303 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12571064 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.119045973 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110445758 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080918102 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.109163738 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103614626 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098124368 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.102700277 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107982512 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.112180054 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.130558421 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1071512 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103293472 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081090292 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.085915374 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080874554 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084280101 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10754961 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.083317767 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08108707 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136851044 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.097122288 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110721693 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115207528 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090706834 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081958218 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140140826 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.074005901 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138179438 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.073276546 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084433189 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.083123611 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081657844 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096403565 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11054295 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100532486 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118830347 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111732438 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111322816 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117961219 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.162734955 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075769574 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.155513626 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08117312 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080502947 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081122045 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117269935 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094666661 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106763143 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144748476 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094341401 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098345509 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080156981 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131779343 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099985612 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10636305 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086249649 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083952799 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134792535 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085316399 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.07609453 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095733137 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.115299328 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.076076053 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.137444056 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.117501494 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08149755 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.279567696 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.635144041 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095950144 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.081878712 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095912666 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.155567661 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135848801 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089191068 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114094548 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.125894178 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096143818 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12075331 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11274415 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.190296491 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078825509 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100880381 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.11023233 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103904235 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098416725 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.097480047 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.092887866 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.098739158 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.092392623 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084736551 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113527167 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09342357 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097466144 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129619661 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08898192 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.085352021 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.135832537 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.107084164 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.08407517 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09054101 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103369131 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094334862 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09706855 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.074670113 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.148901569 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.123434708 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107747009 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.096219306 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110603098 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121600397 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093000773 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118682242 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.094368706 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.115369882 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090457238 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.082962346 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107059871 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.080144597 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079940269 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122886445 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.092654556 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.099013074 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110377177 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.101371142 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119962176 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124955322 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117366426 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103602581 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084523267 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092129349 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.093167345 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08034448 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08225559 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.078529702 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.080618773 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111564815 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.252067581 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116350411 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117075478 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085399299 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10714402 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.103510453 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.112216025 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086005784 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103818943 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111733691 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092408865 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106447703 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104118767 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.131559135 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150315825 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105725443 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.12987241 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139836254 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.081815364 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.081385364 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.072379698 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.153655839 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084957443 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.086527716 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116720738 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138812798 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.087466808 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100828927 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.240708463 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085327977 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.086878177 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103101496 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.074685519 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.086073865 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111424209 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091008469 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086022077 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104913156 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11794279 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123197457 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117500535 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095488899 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.088392049 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085926441 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098031972 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.10781804 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.132360256 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.096073495 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.080253339 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112029665 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109295596 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130595974 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.078700296 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085790254 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.136139072 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097912145 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108692386 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08379429 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12445726 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.135076298 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095013494 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137985582 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076072125 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088691497 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095371281 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.133088888 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079746199 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093696832 seconds)
  done (took 68.45280245 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.157056472 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.35754156 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.10788675 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.116787411 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.205752387 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.28197881 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.163572941 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.111543156 seconds)
  done (took 3.388604532 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 0.074343575 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.089514631 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 0.107821625 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.089078869 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 0.072403691 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 0.073663921 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.215360174 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 0.088532185 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.07205998 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.113542238 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 0.080579542 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.07160451 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 0.37028765 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 0.070543635 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 0.072231981 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 0.080599651 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 0.070778624 seconds)
  done (took 3.678715856 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.38333481 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.629173531 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.328569145 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.07738026 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 6.063833295 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.09253975 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.667078325 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.141753579 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.086091829 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.556797316 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.37589159 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.134171763 seconds)
  done (took 20.385409899 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.083057633 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.080828517 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.084282328 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.084419453 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.080787174 seconds)
  done (took 2.260077955 seconds)
done (took 121.906702238 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.09085029 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.182111275 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.073493074 seconds)
  done (took 2.135147444 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.088727139 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.087317103 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.086682757 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.08405695 seconds)
  done (took 2.197394714 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.081511284 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.082344406 seconds)
  done (took 2.005816885 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.233631045 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.185138673 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.097730097 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.088637743 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.085718963 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.085783458 seconds)
  done (took 2.115275323 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.077661028 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.077177138 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.077700057 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.07772991 seconds)
  done (took 2.150422158 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.076244106 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.071399599 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.073395432 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.076395444 seconds)
  done (took 2.139741217 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.090527743 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.08543398 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.115343667 seconds)
  done (took 2.133784428 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.089728617 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.088268415 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.083242967 seconds)
  done (took 2.109049052 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.116967136 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.103013368 seconds)
  done (took 2.062024659 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.086705038 seconds)
  done (took 1.93349044 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.096919885 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.1020718 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.143632352 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.109849668 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.143507167 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.128389599 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078766235 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.08012049 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075434221 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074724144 seconds)
  done (took 2.878537846 seconds)
done (took 26.320052559 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085340461 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.37712037 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.366145066 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.093182459 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.679094509 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.362200813 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.016712981 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.095631537 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.103442487 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073799408 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.089480258 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.652211109 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.000833456 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.332304656 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.986071762 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.331756931 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.653641901 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070784576 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069690483 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07059324 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.994339936 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069473389 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070347915 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070739043 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.652998488 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.377068454 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071321581 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.331822442 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069506607 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072636541 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.359642989 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071348822 seconds)
  done (took 16.536132293 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.075716301 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.126586848 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.078194385 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088789846 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072846066 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071688098 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.073244504 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070680224 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112946354 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070997556 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08830903 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069864234 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.074255736 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071569047 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.091021171 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.071068259 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072480009 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072343266 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070981258 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071884017 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.090204468 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070949228 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071533283 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071579158 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071817396 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084254899 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.072555838 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.071483204 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071327299 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07427776 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07478259 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.072289259 seconds)
  done (took 4.358523661 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.129262164 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.131101287 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075583822 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.112888723 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.12470695 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.073944135 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.155515232 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.097417557 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.121727347 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.07402268 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.091905358 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.073301706 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.107768413 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.072098722 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090985876 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.071074877 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.073143489 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071842326 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070766877 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071304138 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.090096634 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071074811 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071497532 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.072092391 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071492888 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.086323005 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.072231029 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.071163281 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071068203 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073844576 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.075151068 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071782125 seconds)
  done (took 4.655590076 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.075131155 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.075013458 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.082370753 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.083942039 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.069585979 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.071615101 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.072892784 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.069321056 seconds)
  done (took 2.467592095 seconds)
done (took 29.892780066 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.083945591 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.07087736 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.073914665 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.090652978 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.076188873 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.072768117 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066993165 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.077028239 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073801382 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.073549883 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.075456197 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.069643747 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.073085651 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.067580524 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.074028649 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067847491 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.07472316 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072256669 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.073210939 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.074763976 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.073939342 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.074237814 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.07747893 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.073734845 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.073947051 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.073035056 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.078337276 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074736467 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.06925282 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.071649595 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.071083562 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.082289368 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.075222136 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.075755015 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068504672 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.068841445 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.073349638 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.071147701 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.075316431 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.07766468 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070940067 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.077677667 seconds)
  done (took 4.935780024 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.094076035 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.098817811 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.091262952 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.087595263 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.113288538 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.087007881 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.095536388 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.083018538 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.081674971 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.092250534 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.076156332 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.081847069 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.083137618 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.077207692 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.080430354 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.078167514 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.08528871 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.078578405 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.083752385 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.084051786 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.094862328 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.075365234 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.08217975 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.082366563 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.076619815 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.082107905 seconds)
  done (took 4.101850228 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.078514445 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.093698441 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.098335629 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.150166575 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.116021895 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.087503798 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.085495117 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.106129526 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.105707081 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.074044717 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.077418034 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.098459383 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099337806 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.077555298 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.109681226 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.088879861 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082482885 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.072139351 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076829636 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.105547473 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.09421875 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.090985431 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.104796024 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.090751999 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069491638 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079507782 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.077022133 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.08522122 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076957513 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.082007734 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.07441402 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.073754678 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070889306 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.082607984 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073724371 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067966263 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.092535103 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.083147798 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.085241412 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.108748941 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.080408831 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071299465 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.100749764 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.139377283 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.07234531 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.073707813 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.07402544 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.082954534 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.0714483 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099933377 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.089890322 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.072316793 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.092310789 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.073478379 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.072571657 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087576028 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.073406086 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.07280356 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.082628697 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.076602664 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.091621745 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.075191754 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090847698 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.06979372 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.081552465 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071479973 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.072038781 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068586094 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.106260038 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.077337512 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.122896659 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.071913475 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.069181637 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.082147186 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.081275161 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076346171 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069501065 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089846928 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.082332134 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.074195297 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.081834484 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.07260291 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.07287836 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.105801729 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.06865045 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067719419 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.068009458 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071977134 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072858597 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.070222507 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.083352594 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.069053003 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072656983 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.085059013 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.071159918 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.072300783 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.073623877 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.071332268 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.069358872 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08023303 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073261041 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.071319541 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081677022 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.07064158 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.073104815 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.085392768 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.079637367 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.069069066 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070928372 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.074954043 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071267138 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.07448517 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073819232 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.072349226 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.07698067 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077263676 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075402045 seconds)
  done (took 11.477822288 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.169737679 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.159526902 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.073394682 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.151875313 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.079320178 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.077354953 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.154120791 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.09349474 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.073922273 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.07495077 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.072894 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.101776044 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.098207158 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.112055304 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.077503354 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.074488286 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.097731997 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.10643084 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.156501247 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.153118565 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.097482193 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.081449111 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.075952531 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.074897207 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.073585932 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078973498 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.0872689 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078561816 seconds)
  done (took 4.725568504 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.080882073 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.115361823 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.076339827 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.095765893 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.090233588 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070714866 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.072634761 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071476141 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.088020138 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.07810404 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.070750367 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.075343647 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.074062248 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.071137192 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.07113479 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.077037321 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.078444569 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.072652952 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.077516366 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.078415388 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.084552295 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.097658691 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.075237584 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.071120078 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.07344152 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070531822 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076935402 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.080303864 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.070187765 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100489448 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067454997 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074780767 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.084870802 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071759706 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.070549422 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070450988 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070502642 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070449426 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.070964247 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068780023 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068138713 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.075103942 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.069264081 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.076650218 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.08458878 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.078390606 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.072128283 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.073576248 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.072859693 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.067880405 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.07358839 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073486861 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072676821 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.078719323 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073891252 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.073088348 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071415198 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099195729 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.076512188 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.070241493 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069059996 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068655742 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.072274843 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.07853738 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.087630202 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.072283026 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068475171 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.0703964 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.07502105 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084810071 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069881321 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075622045 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067715764 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070657621 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072992915 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.073347744 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071629798 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.06874961 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069991833 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070144189 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070371873 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069934712 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069344188 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.07307314 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.068370469 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068460009 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070762744 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071480546 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076869093 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.069584075 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.074241697 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.072836126 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.070043689 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.0757087 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.07861063 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.075964489 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.092692236 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.08228797 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.074068114 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.071157037 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.086779749 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.074840871 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.072445273 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.07950623 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.076630731 seconds)
  done (took 9.849379562 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.098053309 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.074856402 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.093852663 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.100884905 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.084187309 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.079446306 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.088613853 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.075380117 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.090614951 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.072750307 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.082539002 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.071894802 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.087327576 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.083312793 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.075014282 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.083853018 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.075882344 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.094356687 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.091381742 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.072620353 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.083273186 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.086012998 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.086300509 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.091921696 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.091139621 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.092073553 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.085023966 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.07525127 seconds)
  done (took 4.295202689 seconds)
done (took 41.255279413 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.971961877 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.119362355 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.945625734 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.15003014 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.005197169 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.116042402 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.071488183 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.947611042 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.161780751 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.97143911 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.269980134 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.472506481 seconds)
done (took 69.141448739 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.02752977 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.09610143 seconds)
    (2/2) benchmarking "String"...
    done (took 2.167368016 seconds)
  done (took 6.208010653 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.546018681 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.948629166 seconds)
    (3/3) benchmarking "different"...
    done (took 2.001857761 seconds)
  done (took 8.371417902 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.041945486 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.969719976 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.200425897 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.948461022 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.950008141 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.355361672 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.778768611 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.406600215 seconds)
  done (took 32.487566246 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.200444317 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.127009094 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.719698792 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.747406831 seconds)
  done (took 16.719410759 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.554675138 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.212862904 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.213307467 seconds)
    (4/4) benchmarking "different"...
    done (took 2.20774921 seconds)
  done (took 11.122952384 seconds)
done (took 86.952492625 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.967489118 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.975850599 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.956351893 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.987558014 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.946619972 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.952136565 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.951951457 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.950000116 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.998956603 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.054058532 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.947308019 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.955522745 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.950779622 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.962159042 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.613153524 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.995928398 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.963972895 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.955099589 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.973442715 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.97290444 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.949213476 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.176042938 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.467980537 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.148496288 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.585790712 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.095300408 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.27713474 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.422368867 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.949878121 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.94502472 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.014969523 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.041008903 seconds)
  done (took 209.982412585 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.935625498 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.691207605 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.776828883 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.989517185 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.225846667 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.145572124 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.077708845 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.369973309 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.950765253 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.966714425 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.091632596 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.952649206 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.115830951 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.900183929 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.945684251 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.977183602 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.095846398 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.149403703 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.952862463 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.133893469 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.975264325 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.914455392 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.855168135 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.088130888 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.966070248 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.028398101 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.96619812 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.975499912 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.136867507 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.065236227 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.97607164 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.964310716 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.120104005 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.818164714 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.969493922 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.968978604 seconds)
  done (took 175.116593509 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.136657192 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.961535411 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.952247272 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.010061674 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.089467246 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.952703544 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.633900139 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.959622702 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.16721599 seconds)
    (9/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.955057263 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.953830448 seconds)
    (11/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.95288603 seconds)
    (12/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.955896701 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.964882938 seconds)
    (14/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.045629566 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.954103266 seconds)
    (16/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.971594495 seconds)
    (17/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.955656838 seconds)
    (18/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.981693533 seconds)
    (19/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.95412627 seconds)
    (20/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.953931303 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.954209169 seconds)
    (22/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.953709768 seconds)
    (23/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.952240824 seconds)
    (24/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.952840662 seconds)
    (25/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.952391896 seconds)
    (26/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.956179715 seconds)
    (27/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.643900129 seconds)
    (28/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.19687343 seconds)
    (29/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.952120674 seconds)
    (30/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.956068254 seconds)
    (31/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.271876937 seconds)
    (32/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.965189911 seconds)
    (33/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.329896543 seconds)
    (34/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.952449027 seconds)
    (35/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.047052876 seconds)
    (36/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.007220893 seconds)
    (37/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.054670292 seconds)
    (38/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.95024114 seconds)
    (39/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.176333272 seconds)
    (40/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.0414569 seconds)
    (41/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.950770989 seconds)
    (42/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.955928762 seconds)
    (43/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.955163597 seconds)
    (44/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.020752752 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.965282619 seconds)
    (46/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.952802436 seconds)
    (47/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.958090328 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.958579847 seconds)
    (49/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.961901908 seconds)
    (50/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.018075107 seconds)
    (51/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.202950808 seconds)
    (52/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.951179532 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.097147096 seconds)
    (54/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.460702829 seconds)
    (55/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.9524955 seconds)
    (56/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.955951999 seconds)
    (57/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.957835353 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.603803109 seconds)
    (59/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.956613595 seconds)
    (60/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.9557818 seconds)
    (61/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.965144313 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.962443008 seconds)
    (63/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.956329984 seconds)
    (64/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.959241133 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.344822371 seconds)
    (66/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.024510496 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.354157891 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.349118755 seconds)
    (69/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.959665082 seconds)
    (70/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.955992602 seconds)
    (71/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.62693677 seconds)
    (72/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.029657039 seconds)
    (73/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.956885321 seconds)
    (74/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.960795688 seconds)
    (75/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.959984795 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.95977014 seconds)
    (77/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.960373103 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.959105615 seconds)
    (79/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.960229108 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.094155485 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.962837905 seconds)
    (82/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.059214951 seconds)
    (83/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.035823972 seconds)
    (84/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.954104685 seconds)
    (85/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.096330525 seconds)
    (86/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.959987892 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.972438615 seconds)
    (88/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.783585104 seconds)
    (89/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.95619848 seconds)
    (90/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.027148369 seconds)
    (91/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.992315775 seconds)
    (92/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.771252061 seconds)
    (93/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.954801567 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.330748775 seconds)
    (95/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.716126734 seconds)
    (96/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.954668103 seconds)
    (97/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.957230446 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.968923892 seconds)
    (99/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.955609492 seconds)
    (100/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.95989609 seconds)
    (101/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.9605631 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.037970013 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.955446791 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.09732326 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.710186572 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.319544476 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.961967635 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.96060679 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.969420993 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.041406539 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.093682268 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.961745951 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.026406457 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.9632793 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.961236712 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.056710506 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.955915244 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.961881862 seconds)
  done (took 430.952847721 seconds)
done (took 820.118299909 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 2.627825105 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 2.641416839 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.717947736 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 2.600731231 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 2.568443733 seconds)
  done (took 15.042622988 seconds)
done (took 16.93116978 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.990277935 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.976265607 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.966723796 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.015147115 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.982171495 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.973562582 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.00699906 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.004527677 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.988776922 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.972080869 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.009420925 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.974450104 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.992256277 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.99491971 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.03840517 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.001060683 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.97562559 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.966931457 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.015414307 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.975630836 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.980149646 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.974340969 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.971948526 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.01301101 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.039910659 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.983898765 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.973487623 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.010785904 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.979161721 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.0127758 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.028593135 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.996816668 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.008972808 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.042362062 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.021496489 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.042948779 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.983180057 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.004970486 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.965443066 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.051363416 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.01567295 seconds)
  done (took 83.809374855 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.974187638 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.119548822 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.177752144 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.000333245 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.974482168 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.183451687 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.026976591 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.10353785 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.102336787 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.182067148 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.186766078 seconds)
  done (took 24.927307278 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.973546747 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.109976939 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.192051686 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.00271443 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.997073003 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.216079834 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.031020341 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.103681672 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.103333409 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.187933363 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.193096948 seconds)
  done (took 25.011974248 seconds)
done (took 135.641622794 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.349630715 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.998793968 seconds)
  done (took 6.238236781 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.988376903 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.127724321 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.96974822 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.971988912 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.967776179 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.968615749 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.970286236 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.968281308 seconds)
  done (took 17.823042513 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.965918669 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.970178751 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.968958089 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.969573574 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.967432139 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.96590875 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.965573955 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.967177386 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.968550764 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.96834677 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.956402289 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.962582883 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.97108663 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.970190599 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.971762702 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.968920049 seconds)
  done (took 33.369705389 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.969213228 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 1.967358468 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 1.955368839 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 1.974931958 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.967421311 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.971512752 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 1.971013646 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 1.969471004 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 1.970014553 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 1.968236991 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 1.97061891 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 1.968286053 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 1.970884879 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 1.966842557 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.969941566 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 1.970309121 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.969738781 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 1.96844601 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 1.973551542 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 1.973365474 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 1.973884546 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 1.971213562 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 1.97051415 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 1.972169311 seconds)
  done (took 49.166972728 seconds)
done (took 108.501691383 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.200669559 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.881529267 seconds)
  done (took 8.973650703 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.973830347 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.968765628 seconds)
  done (took 5.905466694 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.969263812 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.969239744 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.968051667 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.971968893 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.970256182 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.972198547 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.97240825 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.970171029 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.971701728 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.969376944 seconds)
  done (took 21.600492952 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.969145336 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.970611576 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.972222844 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.969944984 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.971216584 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.971195569 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.971712416 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.971219758 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.972757356 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.97065369 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.974257637 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.972187413 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.97194104 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.972975261 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.971046315 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.97182854 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.973283896 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.970427045 seconds)
  done (took 37.383094446 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.97153025 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.972350947 seconds)
  done (took 5.83913459 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.974917829 seconds)
    (2/7) benchmarking "second"...
    done (took 1.974852831 seconds)
    (3/7) benchmarking "month"...
    done (took 1.971971406 seconds)
    (4/7) benchmarking "year"...
    done (took 1.973030861 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.970480492 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.971090645 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.971508131 seconds)
  done (took 15.702722453 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.971316299 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.128733246 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.176437903 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.595784539 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.976368451 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.977629207 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.834225397 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.976810964 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.975569534 seconds)
  done (took 21.508664023 seconds)
done (took 118.809582952 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.832372419 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.979651856 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.216778541 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.052760073 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.037052762 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.270573164 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.979036488 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.558086059 seconds)
done (took 43.825876366 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.06030855 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.970119907 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.999293492 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.000459656 seconds)
  done (took 22.866416902 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.97321442 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.294472918 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.991699453 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.887658237 seconds)
  done (took 23.060219112 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.358681214 seconds)
    (2/2) benchmarking "read"...
    done (took 2.332501942 seconds)
  done (took 6.592766403 seconds)
done (took 61.482586155 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.975547905 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.976021225 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.97537746 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.974048569 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 1.973397472 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.973770034 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.974983278 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.974109586 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.974937188 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.97466089 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.973006111 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.974101043 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.974655265 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.972596387 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.973718728 seconds)
    (16/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.972059095 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.9723106 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.974428138 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.974028962 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.975167083 seconds)
    (21/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.976248267 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.975571267 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.972710213 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.97364934 seconds)
  done (took 49.279558136 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.97411163 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.973533827 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.974143585 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.973943113 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.974206361 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.973145384 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.975042236 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.976364853 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.976416065 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.973502689 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.978735039 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.97712934 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.976945987 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.977327285 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.976353379 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.978275393 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.977237637 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.977211574 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.977226742 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.975320451 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.974592836 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.976604167 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.976275081 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.975710646 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.97444194 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.976069293 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.97715337 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.978673265 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.977505043 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.977671202 seconds)
  done (took 61.18096502 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.976625242 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.973801993 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.972826015 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.976017765 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.973549243 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.974432394 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.976469113 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.974086922 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.977373188 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.97624409 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.976512303 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.974879496 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.978609408 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.976426884 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.979646133 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.978344837 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.977787764 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.976015628 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.978393439 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.977267054 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.980873501 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.976814161 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.975515827 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.979226024 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.980015368 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.978906121 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.976140492 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.979488183 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.979149127 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.97809463 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.978656358 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.979960229 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.980786742 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.981019324 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.982214504 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.97324694 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.981670632 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.980908328 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.978813509 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.980473446 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.982609119 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.980533488 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.980103886 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.980099823 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.978310342 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.978615303 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.980005603 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.978210981 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.978759198 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.978913403 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.976095562 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.980316621 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.980255117 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.978445413 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.979937947 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.978740355 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.980468558 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.980407794 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.978379838 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.968029059 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.97975752 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.980741957 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.982671137 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.982481738 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.979454175 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.981290897 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.981707187 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.982562868 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.983910006 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.982331352 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.983094081 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.981310635 seconds)
  done (took 144.369493355 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.9803395 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.981579995 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.980406337 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.981639895 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.979291126 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.97988106 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.981955254 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.983417146 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.982444139 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.979754534 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.980138903 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.982587304 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.982481752 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.981991963 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.980377817 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.980783672 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.982898924 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.981474511 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.980449502 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.98022435 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.981028677 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.983447435 seconds)
  done (took 45.491291836 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.981865567 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.98247368 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.982598226 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.983710403 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.981909749 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.982329581 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.980251415 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.982063219 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.981486651 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.983740754 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.984587856 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.97964686 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.985110174 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.98157201 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.985225703 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.981892794 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.981845704 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.983042622 seconds)
  done (took 37.586141098 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.982635763 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.983943784 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.982130563 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.981054745 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.983668103 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.985474514 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.982661277 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.982063245 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.983893507 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.984474387 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.980517726 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.984139396 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.984614296 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.983192913 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.984075404 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.984955906 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.985472285 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.984534997 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.984552084 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.98523922 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.985189558 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.966605754 seconds)
  done (took 45.529063278 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.981967591 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.984691574 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.983033592 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.984480132 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.985230051 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.983053082 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.984038605 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.986013089 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.983964578 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.982206914 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.983398894 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.983900182 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.985985386 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.984874664 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.985979881 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.985046779 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.987400099 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.984083515 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.985593115 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.986968955 seconds)
  done (took 41.598661992 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.986949204 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.984235863 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.985633161 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.988349302 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.988234186 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.987217409 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.987999778 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.985517418 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.987578558 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.987014103 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.98852 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.984871971 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.986010192 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.986335715 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.986390273 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.988094023 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.989604119 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.984858854 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.987500336 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.986546646 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.984069216 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.98741286 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.986866699 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.987935908 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.984630643 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.986366087 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.986317782 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.989295367 seconds)
  done (took 57.53922354 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.985257175 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.988537963 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.986002387 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.985076764 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.985612954 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.987226213 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.989924295 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.98640594 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.987372583 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.988648527 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.988184648 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.987688185 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.987130728 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.988183443 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.988642683 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.985674511 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.986108591 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.987289742 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.99040093 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.990871276 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.990295645 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.989375843 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.986857377 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.990094929 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.988143583 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.985000223 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.988871142 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.988432804 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.988694727 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.989082352 seconds)
  done (took 61.545954139 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.006533839 seconds)
    (2/2) benchmarking "in"...
    done (took 2.009748594 seconds)
  done (took 5.927952298 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.989021544 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.990016971 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.990997496 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.991930793 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.986899839 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.987334326 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.991353654 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.993007264 seconds)
  done (took 17.833377749 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.989417928 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.996223204 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.991900879 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.991648699 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.991759825 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.998674833 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.99225734 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.990560106 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.993795878 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.99389781 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.997005239 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.996070418 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.000824444 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.997781042 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.993887737 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.993318806 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.995071894 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.995092541 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.992473013 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.993856774 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.997162043 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.991360985 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.992691942 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.990183767 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.993545552 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.99817434 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.004887357 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.993565417 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.989729487 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.992263641 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.997292144 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.994044169 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.99049527 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.995706979 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.993316332 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.992466915 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.000413568 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.994924895 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.99317468 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.993759958 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.994705285 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.993679283 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.994779523 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.002346062 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.994332806 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.991399453 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.992716771 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.993437725 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.991724818 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.997310705 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.005064391 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.997158452 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.994228449 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.996018578 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.99745402 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.993740945 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.995466544 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.997034247 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.002423305 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.000762214 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.99945701 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.017372735 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.00272346 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.991348545 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.993670615 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.003589039 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.024120443 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.997240633 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.994395127 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.992713137 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.00205727 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.993930237 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.995373332 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.994988085 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.008055381 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.004436748 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.994496839 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.993596671 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.992514418 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.994090127 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.99744616 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.994237859 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.997256786 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.995469673 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.003553955 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.027881534 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.994429447 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.99375617 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.998557536 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.996339387 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.999721427 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.997255098 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.994677645 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.994383106 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.996341158 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.998180618 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.994887944 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.995893271 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.995864057 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.006002496 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.996247484 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.997570758 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.00080286 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.003674627 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.994362204 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.995108477 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.996753196 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.994960971 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.004798565 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.99646846 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.995480348 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.996052466 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.996908659 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.001194273 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.995760716 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.000310359 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.008633274 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.004545715 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.995346415 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.001304132 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.999466364 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.999724658 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.007930488 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.025525185 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.997018641 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.998518482 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.002494668 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.012962146 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.002474396 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.996467207 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.999705727 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.99735728 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.998425811 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.999617121 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.996109218 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.997080993 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.995290148 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.997159153 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.975883244 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.996892746 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.998424039 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.999630259 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.001070437 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.998512602 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.001842205 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.99893841 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.001552799 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.004313031 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.997958318 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.996504654 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.999650506 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.997929453 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.000157228 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.000254687 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.997566686 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.000384982 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.999849236 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.999609862 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.000746279 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.998174498 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.998829428 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.999881996 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.004955025 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.998790727 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.999517552 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.998674737 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.998279215 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.999664695 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.001064396 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.002117732 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.003076349 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.997978514 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.003991964 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.000636278 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.998432749 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.998737385 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.001971964 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.001996028 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.004582017 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.015025563 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.004217288 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.011701499 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.001985319 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.009719767 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.001506161 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.00410045 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.003125177 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.002640474 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.002921117 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.004962831 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.003038327 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.006533924 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.028485481 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.016242227 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.003869031 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.002350691 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.009368277 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.00780542 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.007704829 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.001002798 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.001402096 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.002661442 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.002604515 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.002950217 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.002689349 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.007521524 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.001317369 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.001893935 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.004238375 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.001943282 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.002933163 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.00287353 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.002409394 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.006088692 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.003736164 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.001615287 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.002714205 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.001364387 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.012588795 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.004211216 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.001808269 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.000965025 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.005574029 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.002392659 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.003691934 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.003006507 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.008204071 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.00121623 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.005824983 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.011513678 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.003730548 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.00418536 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.002598366 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.002485354 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.005856574 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.004334662 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.005810363 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.015315599 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.006971824 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.004064441 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.009039387 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.002711518 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.005384037 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.003776951 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.00704404 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.004838531 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.007670448 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.005579753 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.004742896 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.013377452 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.004158393 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.005829149 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.003235191 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.007636176 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.005009125 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.006668826 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.005980517 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.009145269 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.017637374 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.012958052 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.005999668 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.009940737 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.006656464 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.005621174 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.009901174 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.005246002 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.018411977 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.017690512 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.004750919 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.003842166 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.006151054 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.008619455 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.005610914 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.004164958 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.010586124 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.006264802 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.007148372 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.012264405 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.007219306 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.005950399 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.005153729 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.007571207 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.011147793 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.005320954 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.008197677 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.006422157 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.007112834 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.008493663 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.005505285 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.008904803 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.01243685 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.006119085 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.00553276 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.006949089 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.013217665 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.007724941 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.005991257 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.012758199 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.005402391 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.005761712 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.007805834 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.007333016 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.007002787 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.007935776 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.006559095 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.005480241 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.006981489 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.010916206 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.021594027 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.010912716 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.017659424 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.009373163 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.019075446 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.006972268 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.005740952 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.00760619 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.010936433 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.019011047 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.008353335 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.00737821 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.015294399 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.007502621 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.010046606 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.015451092 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.008963185 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.008120507 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.009184185 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.007471792 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.015317635 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.012335353 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.010105277 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.010306846 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.009782255 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.008073752 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.012582034 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.011832912 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.011570676 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.008690927 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.008174788 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.010462261 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.01144051 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.009983275 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.009565111 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.007572584 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.009906364 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.017262246 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.00856624 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.011461298 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.01593035 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.011705543 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.022034774 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.012998475 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.011611581 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.014575459 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.011079045 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.013785969 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.010290038 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.012021019 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.013356114 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.011422381 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.011599078 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.026115139 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.020621043 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.018578652 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.011127794 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.014038285 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.014987128 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.021922352 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.042686322 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.010516447 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.015490319 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.018639888 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.02061229 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.016237931 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.019642772 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.016447687 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.024256814 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.014933193 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.011367592 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.016635926 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.028504331 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.012725009 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.011812664 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.013202303 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.017648583 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.014326333 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.010690713 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.014823964 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.016178265 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.015417769 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.026737735 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.012042915 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.014254899 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.012689319 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.014525159 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.019053444 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.013891501 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.015941619 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.013960413 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.014429 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.016317225 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.017957397 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.020909222 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.012399148 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.01781718 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.028435301 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.015492159 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.013807762 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.015368778 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.012927544 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.017482564 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.01256838 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.012778537 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.018307898 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.013864755 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.015942703 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.019048961 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.029434394 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.018347508 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.015344143 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.015167633 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.017700037 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.014774158 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.014005281 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.016213014 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.026902484 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.020244121 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.032053275 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.028523818 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.015170955 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.016036254 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.027441015 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.026661555 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.01632497 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.017179651 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.01565609 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.018781006 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.019316844 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.014559394 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.016062432 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.015787298 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.02370746 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.015297495 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.016619553 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.01617297 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.016103317 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.022069598 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.01946575 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.024295145 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.017835124 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.018729469 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.017652598 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.019891315 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.017299382 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.019793796 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.01754996 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.016557002 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.020011826 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.016818877 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.022064958 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.018026535 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.01686243 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.018441941 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.017929654 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.015878642 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.018073958 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.017842551 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.020321177 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.021144351 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.027877429 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.016557398 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.021449015 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.019889056 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.022245673 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.018182099 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.017590196 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.020452413 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.019638327 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.027105728 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.017653561 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.021133062 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.018898991 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.02073209 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.022584421 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.021315154 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.020713308 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.018365121 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.018410277 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.017036331 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.021892541 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.030204386 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.02608921 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.023283987 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.029284882 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.024429613 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.020497739 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.020545227 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.019496444 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.019018156 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.019321109 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.024097347 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.022533933 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.022934465 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.020352158 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.020908294 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.021864187 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.021386688 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.019138652 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.017956469 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.024118727 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.032328835 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.030322731 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.022473415 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.022849222 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.021459667 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.025358301 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.037037403 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.021078525 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.021697381 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.022564276 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.024219026 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.0216782 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.030776698 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.034741812 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.026824937 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.020621195 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.028724997 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.04489361 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.023486529 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.034409745 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.06146468 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.021441332 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.020653167 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.020538997 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.022673298 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.021605344 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.023590879 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.022811969 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.029155029 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.023464721 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.023740185 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.030632148 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.023166283 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.021403739 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.024126221 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.027293343 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.028564691 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.025709132 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.030160395 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.024460676 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.023577576 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.023803158 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.025461383 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.024556337 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.021407546 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.023390485 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.027135471 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.022154901 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.025989485 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.031112334 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.023783165 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.027683556 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.037175049 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.037728221 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.025759196 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.53359978 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.026245299 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.031866639 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.025586444 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.022122464 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.02895844 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.033832287 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.028801888 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.035123871 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.025710095 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.027118055 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.027020458 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.025158847 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.023450174 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.038875044 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.041119335 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.024773851 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.024209161 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.033239581 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.027426157 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.032635758 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.032979166 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.022375181 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.02649596 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.026290102 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.026549646 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.02477259 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.025655548 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.030314089 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.038131607 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.028468 seconds)
  done (took 1200.719465819 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.027761808 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.026996936 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.025814819 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.02493784 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.024953625 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.026991075 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.024993109 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.025154691 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.026639137 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.028113509 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.026774258 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.027385322 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.026088513 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.027574822 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.023901925 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.025045692 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.025906358 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.026755571 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.0239268 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.026415004 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.027873423 seconds)
  done (took 44.50103695 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.027896942 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.029164157 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.026780647 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.027116934 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.011079005 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.015593004 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.02731178 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.029139604 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.026906159 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.02706598 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.027196253 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.027236515 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.02882393 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.028323128 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.02747794 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.029019925 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.031024521 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.030162106 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.027058416 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.030306945 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.028885153 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.029112072 seconds)
  done (took 46.542913894 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.029097644 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.029647429 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.03030833 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.028390923 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.031987565 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.030570919 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.028281371 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.033054112 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.030122915 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.030685643 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.041454101 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.039777755 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.031739054 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.034762531 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.030533658 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.032296099 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.182978998 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.030433543 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.029934477 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.030017022 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.029854235 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.036832567 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.029579355 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.030229764 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.031468501 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.030710023 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.031325912 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.029551173 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.029791055 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.030097784 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.036180327 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.030194991 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.031282576 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.035053934 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.028188609 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.031156855 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.037770325 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.031047135 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.030860746 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.030643276 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.043197187 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.062583484 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.030840172 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.030322811 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.03841058 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.030775993 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.032755756 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.035126577 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.043551626 seconds)
  done (took 101.71921056 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.031683535 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.027075198 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.03225031 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.033265461 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.031128547 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.030978598 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.030248581 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.030794435 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.03349201 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.031902567 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.030753753 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.031423503 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.03118648 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.030090175 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.031455539 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.032734469 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.032732175 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.03303041 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.030214436 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.034190717 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.033681804 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.032406597 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.031644816 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.032978767 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.035193796 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.031014879 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.034909149 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.031693577 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.030900359 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.034251297 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.03238557 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.033233518 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.032763027 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.033130943 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.033655461 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.03605875 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.036737311 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.036086373 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.03455654 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.03356367 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.034581312 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.033676456 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.034626549 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.033341792 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.035912961 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.035865995 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.034266178 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.033625093 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.035053769 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.03313202 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.033074126 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.035990231 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.033854842 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.034868588 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.032848849 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.034161425 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.034917732 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.036762861 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.034590833 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.035318237 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.035596702 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.032774783 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.032004352 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.035850828 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.034396053 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.033058327 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.034021401 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.035067048 seconds)
  done (took 140.221388142 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.035201625 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.037700614 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.036125015 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.035390383 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.034881988 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.036631577 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.03471374 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.029507442 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.035411513 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.03964658 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.036205641 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.038322155 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.037020193 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.038187392 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.03919659 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.03611488 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.035520704 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.037225269 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.037333783 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.03883778 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.035296044 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.038255548 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.037413406 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.03650057 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.037237121 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.038453836 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.03756921 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.039256454 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.037896363 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.039242367 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.039279964 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.038780548 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.039241858 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.039733078 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.040045714 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.038061986 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.038468862 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.039804177 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.039228067 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.039046142 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.038677263 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.038757197 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.038598237 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.037078852 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.039227741 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.038771214 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.039883082 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.040012391 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.038519239 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.039493016 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.038644972 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.039668545 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.039585511 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.039139098 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.038825797 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.038795472 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.03832198 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.040792775 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.040578831 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.040351026 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.038398505 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.038138308 seconds)
  done (took 128.317131041 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.039171116 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.038998139 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.039127046 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.041759326 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.040707591 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.039554138 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.037159922 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.039908437 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.039426679 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.038638715 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.041408929 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.039900504 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.041343384 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.038844229 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.039239854 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.039647202 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.041083764 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.039857669 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.038956786 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.039069143 seconds)
  done (took 42.758495028 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.039092181 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.039878866 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.040261038 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.042483178 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.042116945 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.040312878 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.039667827 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.042727088 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.04154471 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.042901215 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.042518575 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.040375693 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.041812817 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.042066044 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.042346876 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.040632784 seconds)
  done (took 34.625907298 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.044155739 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.023340569 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.042507704 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.041578142 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.042143633 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.04018662 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.044237043 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.041758262 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.04225483 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.040537178 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.043220639 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.043922251 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.042402344 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.042743794 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.042434752 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.04133587 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.042988924 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.041642449 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.042889743 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.041428138 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.043094546 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.043957117 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.041804284 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.041399779 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.042389154 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.045031688 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.041677068 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.044105618 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.044547988 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.043240798 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.04399357 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.042569675 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.042280748 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.043376062 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.042405685 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.040503194 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.041570966 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.042082642 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.043025837 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.040935556 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.043059142 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.044037169 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.041194247 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.042806127 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.042804426 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.044013797 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.043659446 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.044409851 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.045046245 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.043285837 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.045060248 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.043427793 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.042770258 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.045495084 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.04457219 seconds)
  done (took 114.304428216 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.042148981 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.044170481 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.044488253 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.043877601 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.042011438 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.045441195 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.043779729 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.042467635 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.0459705 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.045579017 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.044879597 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.044775779 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.043728604 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.043111151 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.045522847 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.043996317 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.043545807 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.046413588 seconds)
  done (took 38.764121569 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.044889071 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.045218369 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.047792113 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.044702196 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.045671476 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.044416464 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.043210753 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.045949299 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.043701288 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.045489528 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.045049759 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.045917647 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.045556866 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.046473683 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.045022671 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.046340524 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.046889834 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.046669404 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.045834625 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.047288981 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.045878318 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.046919764 seconds)
  done (took 46.972806685 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.044783356 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.045625728 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.06282012 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.073053555 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.070174208 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.087858629 seconds)
  done (took 14.35406951 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045910981 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.045344954 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.04565072 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.047031338 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.045974521 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047214113 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.048572974 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045212278 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.048762147 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.047173203 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.046114107 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.046441793 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.045999412 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.045631115 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.047287088 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.045669086 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.046962335 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.048524592 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04809498 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.048499786 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048337429 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.046592423 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.046862279 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046683255 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048834 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.047701765 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.047172465 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049312501 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048546148 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.046254974 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.046345363 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.047366544 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.047992254 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048057058 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049288731 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.048932549 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.047114134 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.04806771 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.04708602 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.044880438 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.04829973 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048671968 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.047351543 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046459735 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048226089 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048493102 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04803806 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049416229 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.04749285 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.047968102 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.05091686 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.05055657 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.051102998 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.048772053 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.047928052 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049446598 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049213777 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050875388 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0476456 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.050741696 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.050652659 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.048715231 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048285062 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048115386 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.050294083 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047130313 seconds)
  done (took 137.130510989 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.04938022 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.047129236 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.047941999 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.049069078 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047907037 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050980839 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.051607211 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051251723 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.051334591 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050492576 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.050476876 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.053734734 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.050869518 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.052950386 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.051041881 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.051433822 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.05321408 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.051735191 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.051717616 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.051890696 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.05201436 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050281675 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.052448215 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050411146 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.053026909 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.052482696 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.051493078 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.049816364 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.051260595 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050356518 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.052501325 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.053986531 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.052561552 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.052846424 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.052492646 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.05137132 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050435827 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.051400872 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.053455193 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.05148547 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050732532 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.051637871 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.054242673 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.05205653 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.052155709 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.050365282 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051285289 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050328349 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.053901573 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.052161833 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.055507657 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.053227231 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.056511407 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.055197819 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.052789004 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.053336373 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.052729507 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.054546571 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.055909967 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.05567656 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.056417924 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.053381678 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.055779141 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.053124014 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.055985207 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.055085464 seconds)
  done (took 137.41886637 seconds)
done (took 2798.141633109 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.131330753 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.156652218 seconds)
  done (took 16.261448748 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.223450431 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.176227452 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.062060083 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.111136713 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.058922051 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.074961576 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.082747754 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.05608839 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 2.059209183 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 2.060970266 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.060386098 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.244909431 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.09295161 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.056034678 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.061927565 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.154523207 seconds)
  done (took 55.625251362 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.064867973 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.065533672 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.076136301 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.064309436 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.068153625 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.076927902 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 2.092701064 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 2.072414 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 2.096426116 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 2.077638972 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.131346975 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.071600143 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 2.064435864 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.111557143 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 2.075156343 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.076920816 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 2.15429584 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.141053698 seconds)
  done (took 39.558530327 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.145377154 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.070400417 seconds)
  done (took 11.199033147 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.061515868 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.067795922 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.052952405 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.076623298 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.050654962 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.071935334 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.065738798 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.065573817 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.050003849 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.070840857 seconds)
  done (took 72.617027818 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.054755002 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.055264075 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.040383173 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.037590723 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.031989687 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.043716891 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.039738384 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.034568232 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.75333967 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 2.079908425 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 2.044992502 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.047732967 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.036150283 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.037861139 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.030336464 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.066053473 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.197131259 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.037456405 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.033001305 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.040278567 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.039093063 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.11213338 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.047598795 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.036547546 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.06857816 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.745776108 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.047107636 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.044693824 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.197433048 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.032471927 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.040936719 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.198714946 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.044813506 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.387171648 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.363928444 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.039625945 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.045455144 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.043059082 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.038167535 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.212187108 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.040931273 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.040486523 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.983538877 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.347085651 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.129077941 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.085174666 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.440499797 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.037567271 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.040171776 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.068127962 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.040171161 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.041704522 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 2.060559788 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.553129972 seconds)
  done (took 142.403679002 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.033514892 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.265685667 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.1830379 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.032858603 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.291113366 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.250678035 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.036484119 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.0781057 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.032475333 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.234908946 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.287852929 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.137990707 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.029959599 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.030226189 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.033467887 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.027496519 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.179803447 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.097934214 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.034924947 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.029862681 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.053970781 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.237513011 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.1531963 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.04059618 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.05587322 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.243609861 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.156226898 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.135296096 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.854869844 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.033862939 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.093423613 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.034336934 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.027868306 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.017528663 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.169698319 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.111731984 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.101525674 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.015808601 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.016119323 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.014516589 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.688205212 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.217898646 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.109510829 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.139303767 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.263501216 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.228820494 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.626689438 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.014201341 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.63710187 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.181687959 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.220478934 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.212677286 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.134275163 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.018183515 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.571171038 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.014478123 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.016345252 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.236397531 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.234657744 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.116858705 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.017177472 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.016885485 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.012833122 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.257570612 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.016286329 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.105607564 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.017036623 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.012888109 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.110062857 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.116782635 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.242828702 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.237997195 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.046777153 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.356078611 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.500478994 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.221585326 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.080793064 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.236392426 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.016852873 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.015575478 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.098439815 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.85835796 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.271453636 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.260113521 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.214405274 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.046495348 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.664595899 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.016966494 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.204816599 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.208122635 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.24960552 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.259280036 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.252815898 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.376247541 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.017987794 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.015705207 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.314508467 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.134044738 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.96479335 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.371169024 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.244575514 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.535548782 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.044967744 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.346794238 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.146801058 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.020749098 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.666568209 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.02042138 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.224013447 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.058375102 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.018854153 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.017243271 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.208003854 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.923620529 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.018712196 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.806282362 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.078760622 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.020652051 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.223050248 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.020574508 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.263764025 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.019405857 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.254292495 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.640108842 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.048357813 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.245542156 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.262832508 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.645918085 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.262472886 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.261717824 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.132708734 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.291836982 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.021703166 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.02000261 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.281456476 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.021607854 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.020975368 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.189011175 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.022938095 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.165082949 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.02192169 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.286948159 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.039575193 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.252314028 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.02296249 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.259530937 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.052324636 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.069780457 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.022456688 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.150050993 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.022112048 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.967508575 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.179270666 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.023949359 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.019820311 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.800064493 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.023745668 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.167561641 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.249258025 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.042035196 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.091211544 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.586069664 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.015247358 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.105913879 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.043139899 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.307168663 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.022654144 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.270893696 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.980018082 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.503936853 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.022531385 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.259316939 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.254037991 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.025275861 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.022117678 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.864186015 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.0226892 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.021409031 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.180253042 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.471712591 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.926332982 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.223399233 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.02367741 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.149891759 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.023680398 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.099873956 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.366515138 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.021975753 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.021297034 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.024135281 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.025427736 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.023618278 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.28848202 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.04985521 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.456646093 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.161937981 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.282412454 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.328153292 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.22430395 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.063796426 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.0280013 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.245197005 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.023814521 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.085835466 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.024529564 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.043890717 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.253309761 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.024805835 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.228932138 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.262078989 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.90558288 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.074209723 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.028515964 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.024831707 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.989643639 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.175667587 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.111137089 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.026174839 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.025650279 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.138622959 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.145748512 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.204675462 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.836464494 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.141503093 seconds)
  done (took 935.479335895 seconds)
done (took 1275.124891248 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.027554214 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.024603575 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.029983642 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.022769103 seconds)
  done (took 30.053113576 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 2.029066547 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.027322559 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.028716684 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.027276243 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 2.02832749 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 2.028030962 seconds)
  done (took 14.119103395 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.02588356 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.023668232 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.027547981 seconds)
  done (took 23.025059714 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 2.102665595 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.453508718 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 2.166684473 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.476423201 seconds)
  done (took 11.150456058 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.029337446 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 2.027533641 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 2.028328116 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 2.028947721 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 2.028815021 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.027483557 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 2.029883506 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.030242171 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 2.031076458 seconds)
  done (took 20.212680834 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.350904675 seconds)
done (took 104.863173377 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.052775708 seconds)
    (2/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.257623793 seconds)
    (3/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.042925722 seconds)
    (4/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.124695475 seconds)
    (5/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.139074958 seconds)
    (6/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.046383657 seconds)
    (7/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.030956069 seconds)
    (8/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.293834672 seconds)
    (9/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.574918865 seconds)
    (10/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.556728923 seconds)
    (11/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.04173577 seconds)
    (12/341) benchmarking ("sort", Float32, false)...
    done (took 5.705802671 seconds)
    (13/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.043143651 seconds)
    (14/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.32734764 seconds)
    (15/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.670974507 seconds)
    (16/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.231406107 seconds)
    (17/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.121251635 seconds)
    (18/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.041698446 seconds)
    (19/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.17916754 seconds)
    (20/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.325489128 seconds)
    (21/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.119600313 seconds)
    (22/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.366842634 seconds)
    (23/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.038008675 seconds)
    (24/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.773627375 seconds)
    (25/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.09783318 seconds)
    (26/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.23276569 seconds)
    (27/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.427668992 seconds)
    (28/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.407989258 seconds)
    (29/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.041326543 seconds)
    (30/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.025614249 seconds)
    (31/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 3.78985003 seconds)
    (32/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.893772425 seconds)
    (33/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.161469282 seconds)
    (34/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.031426796 seconds)
    (35/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 4.143430621 seconds)
    (36/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.117618869 seconds)
    (37/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.043255364 seconds)
    (38/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.34553002 seconds)
    (39/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.402578368 seconds)
    (40/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.513041 seconds)
    (41/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.173053628 seconds)
    (42/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.206874967 seconds)
    (43/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.581896079 seconds)
    (44/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.193823554 seconds)
    (45/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.39878795 seconds)
    (46/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.120307406 seconds)
    (47/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.290270454 seconds)
    (48/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.33191166 seconds)
    (49/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.625929691 seconds)
    (50/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.304383987 seconds)
    (51/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.26326188 seconds)
    (52/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.210269508 seconds)
    (53/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.098115877 seconds)
    (54/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.155262499 seconds)
    (55/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.470854586 seconds)
    (56/341) benchmarking ("sort", Bool, false)...
    done (took 2.247554024 seconds)
    (57/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.23683723 seconds)
    (58/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.167555857 seconds)
    (59/341) benchmarking ("sort", Int64, false)...
    done (took 5.663183122 seconds)
    (60/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.030514879 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.286192547 seconds)
    (62/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.325640024 seconds)
    (63/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.057241216 seconds)
    (64/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.421883026 seconds)
    (65/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.091733309 seconds)
    (66/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.146035505 seconds)
    (67/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.170731777 seconds)
    (68/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.633250633 seconds)
    (69/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.055930035 seconds)
    (70/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.339477663 seconds)
    (71/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.436228847 seconds)
    (72/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.3444459 seconds)
    (73/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.117772873 seconds)
    (74/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.153684676 seconds)
    (75/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.416408282 seconds)
    (76/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.265618144 seconds)
    (77/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.05070008 seconds)
    (78/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.030953594 seconds)
    (79/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.08709751 seconds)
    (80/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.20550005 seconds)
    (81/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.034151386 seconds)
    (82/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.117955208 seconds)
    (83/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.032758072 seconds)
    (84/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.381573676 seconds)
    (85/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.102276751 seconds)
    (86/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.034099793 seconds)
    (87/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 8.488383986 seconds)
    (88/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.163845252 seconds)
    (89/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.290715403 seconds)
    (90/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.805399576 seconds)
    (91/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.419995527 seconds)
    (92/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.294171287 seconds)
    (93/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.045080256 seconds)
    (94/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.309642456 seconds)
    (95/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.166627642 seconds)
    (96/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.119292429 seconds)
    (97/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.430624582 seconds)
    (98/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.047261517 seconds)
    (99/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.783073488 seconds)
    (100/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.483060892 seconds)
    (101/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.431183692 seconds)
    (102/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.109969381 seconds)
    (103/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.034939973 seconds)
    (104/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.229401428 seconds)
    (105/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.132044948 seconds)
    (106/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.296141646 seconds)
    (107/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.02921601 seconds)
    (108/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.158261181 seconds)
    (109/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.122267419 seconds)
    (110/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.151986702 seconds)
    (111/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.30286212 seconds)
    (112/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.038554451 seconds)
    (113/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 7.449044912 seconds)
    (114/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.275486512 seconds)
    (115/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.99045634 seconds)
    (116/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.145200218 seconds)
    (117/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.20349753 seconds)
    (118/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.237179603 seconds)
    (119/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.160982803 seconds)
    (120/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.045066966 seconds)
    (121/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.045448568 seconds)
    (122/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.078751284 seconds)
    (123/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.309542185 seconds)
    (124/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.189020848 seconds)
    (125/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.300356958 seconds)
    (126/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.072725345 seconds)
    (127/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.337046996 seconds)
    (128/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.292914546 seconds)
    (129/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.050964249 seconds)
    (130/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.047627337 seconds)
    (131/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.346745325 seconds)
    (132/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.376705019 seconds)
    (133/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.426756399 seconds)
    (134/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.317532283 seconds)
    (135/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.092306 seconds)
    (136/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.049359179 seconds)
    (137/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.249072352 seconds)
    (138/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.630859868 seconds)
    (139/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.183408966 seconds)
    (140/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.855658969 seconds)
    (141/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.060005808 seconds)
    (142/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.43399384 seconds)
    (143/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.289547711 seconds)
    (144/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.10874556 seconds)
    (145/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.287692926 seconds)
    (146/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.238963856 seconds)
    (147/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 9.223476006 seconds)
    (148/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.489012347 seconds)
    (149/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.356067638 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.334605249 seconds)
    (151/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.284638505 seconds)
    (152/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.001007679 seconds)
    (153/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.752555603 seconds)
    (154/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.047285217 seconds)
    (155/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.13636853 seconds)
    (156/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.037097515 seconds)
    (157/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.512390395 seconds)
    (158/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.042998575 seconds)
    (159/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.117650634 seconds)
    (160/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.425156032 seconds)
    (161/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.561052832 seconds)
    (162/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.225003703 seconds)
    (163/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.33308249 seconds)
    (164/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.05818901 seconds)
    (165/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.11536685 seconds)
    (166/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.147137184 seconds)
    (167/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.170192601 seconds)
    (168/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.055027508 seconds)
    (169/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.038978954 seconds)
    (170/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.399392343 seconds)
    (171/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.064967007 seconds)
    (172/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.115352275 seconds)
    (173/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.71071959 seconds)
    (174/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.297628861 seconds)
    (175/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.973934637 seconds)
    (176/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.132991264 seconds)
    (177/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.356606274 seconds)
    (178/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.523763554 seconds)
    (179/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.157642742 seconds)
    (180/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.03641495 seconds)
    (181/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.18499638 seconds)
    (182/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.146372635 seconds)
    (183/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.040214298 seconds)
    (184/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.09328215 seconds)
    (185/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.151436346 seconds)
    (186/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.126519265 seconds)
    (187/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.684711158 seconds)
    (188/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.052398498 seconds)
    (189/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.308055469 seconds)
    (190/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.189274785 seconds)
    (191/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.040243944 seconds)
    (192/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 9.28353097 seconds)
    (193/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.270653481 seconds)
    (194/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.21628468 seconds)
    (195/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.049797402 seconds)
    (196/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.241506053 seconds)
    (197/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.165156941 seconds)
    (198/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.099318496 seconds)
    (199/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.044686495 seconds)
    (200/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.316823992 seconds)
    (201/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.101838048 seconds)
    (202/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.050713291 seconds)
    (203/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.437449149 seconds)
    (204/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.0404262 seconds)
    (205/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.692344944 seconds)
    (206/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.198866946 seconds)
    (207/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.757741024 seconds)
    (208/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.428271975 seconds)
    (209/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.038632294 seconds)
    (210/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 10.326620028 seconds)
    (211/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.44793376 seconds)
    (212/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.807306839 seconds)
    (213/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.041613416 seconds)
    (214/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.075056184 seconds)
    (215/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.166491439 seconds)
    (216/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.117918821 seconds)
    (217/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.465908658 seconds)
    (218/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.170225075 seconds)
    (219/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.042329513 seconds)
    (220/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.094785649 seconds)
    (221/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.415461957 seconds)
    (222/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.414112119 seconds)
    (223/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.442905632 seconds)
    (224/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.179750537 seconds)
    (225/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.146786422 seconds)
    (226/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.172211028 seconds)
    (227/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.041909625 seconds)
    (228/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.03994696 seconds)
    (229/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.277857843 seconds)
    (230/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.224075455 seconds)
    (231/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.360662472 seconds)
    (232/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.044031847 seconds)
    (233/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.355688859 seconds)
    (234/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.316771573 seconds)
    (235/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.042003042 seconds)
    (236/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.357514294 seconds)
    (237/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.216444282 seconds)
    (238/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.792149627 seconds)
    (239/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.039484744 seconds)
    (240/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.868192739 seconds)
    (241/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 9.243093952 seconds)
    (242/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.279011932 seconds)
    (243/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.043623014 seconds)
    (244/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.201818051 seconds)
    (245/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.804000992 seconds)
    (246/341) benchmarking ("sort", Int8, false)...
    done (took 4.988497158 seconds)
    (247/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.046816736 seconds)
    (248/341) benchmarking ("sort", BigInt, false)...
    done (took 7.04231742 seconds)
    (249/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.251919805 seconds)
    (250/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.043601343 seconds)
    (251/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.055530279 seconds)
    (252/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.14881896 seconds)
    (253/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.32420955 seconds)
    (254/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.712767894 seconds)
    (255/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.262305258 seconds)
    (256/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.517981724 seconds)
    (257/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.04593423 seconds)
    (258/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.060949131 seconds)
    (259/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.350152961 seconds)
    (260/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.405766204 seconds)
    (261/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.046460731 seconds)
    (262/341) benchmarking ("map", abs, Float64, false)...
    done (took 3.730501888 seconds)
    (263/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.234984988 seconds)
    (264/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.082359159 seconds)
    (265/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.955043852 seconds)
    (266/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.647517263 seconds)
    (267/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.258640128 seconds)
    (268/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.182872795 seconds)
    (269/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.044610278 seconds)
    (270/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.201798867 seconds)
    (271/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.824758564 seconds)
    (272/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.058438071 seconds)
    (273/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.959142157 seconds)
    (274/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.082221576 seconds)
    (275/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.703691636 seconds)
    (276/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.458437047 seconds)
    (277/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.439125474 seconds)
    (278/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.454359766 seconds)
    (279/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.045819567 seconds)
    (280/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 3.593755722 seconds)
    (281/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.199014848 seconds)
    (282/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.053030135 seconds)
    (283/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.177962987 seconds)
    (284/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.225720107 seconds)
    (285/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.369206288 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.158741929 seconds)
    (287/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.172553641 seconds)
    (288/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.324045986 seconds)
    (289/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.48019434 seconds)
    (290/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.958266668 seconds)
    (291/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.269808865 seconds)
    (292/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.144486014 seconds)
    (293/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.144798803 seconds)
    (294/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.046971331 seconds)
    (295/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.537921999 seconds)
    (296/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.432431549 seconds)
    (297/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.190021928 seconds)
    (298/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.233383653 seconds)
    (299/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.063662467 seconds)
    (300/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.832664376 seconds)
    (301/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.071683617 seconds)
    (302/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.287223642 seconds)
    (303/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.054801277 seconds)
    (304/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.41319725 seconds)
    (305/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.052381603 seconds)
    (306/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.12568618 seconds)
    (307/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.14073295 seconds)
    (308/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.558245083 seconds)
    (309/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.064732596 seconds)
    (310/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.152169876 seconds)
    (311/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.355982134 seconds)
    (312/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.186734642 seconds)
    (313/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.049874775 seconds)
    (314/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.318109479 seconds)
    (315/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.258630165 seconds)
    (316/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.180969225 seconds)
    (317/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.148857803 seconds)
    (318/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.06055208 seconds)
    (319/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.060990998 seconds)
    (320/341) benchmarking ("sort", Float64, false)...
    done (took 5.763123848 seconds)
    (321/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.190111854 seconds)
    (322/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.050125633 seconds)
    (323/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.396451738 seconds)
    (324/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.13197011 seconds)
    (325/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.983425661 seconds)
    (326/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.062331977 seconds)
    (327/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.311471239 seconds)
    (328/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.060177409 seconds)
    (329/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.341562719 seconds)
    (330/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.97200297 seconds)
    (331/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.925272948 seconds)
    (332/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.302010346 seconds)
    (333/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.905740668 seconds)
    (334/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.20703354 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.99052722 seconds)
    (336/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.157335695 seconds)
    (337/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.076706326 seconds)
    (338/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.020445536 seconds)
    (339/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.499754746 seconds)
    (340/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.053197497 seconds)
    (341/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.358011548 seconds)
  done (took 1154.439016124 seconds)
done (took 1156.510452546 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.086382359 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.07859547 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.061574047 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.083103079 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.174089758 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.110064043 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.076451569 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.064891883 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.111230116 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.110956804 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.058993371 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.110856316 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.061394275 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.062272639 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.061364804 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.076321965 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.431487871 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.107150684 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.079629161 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.074829742 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.07910061 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.059120456 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.112163536 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.110239739 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.065391578 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.067198007 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.065536628 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.080473636 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.173587125 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.065451681 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.068317893 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.075350892 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.432095383 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.106772253 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.062324139 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.080707526 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.075848514 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.076041689 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.065576059 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.09587447 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.601412388 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.068068694 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.063911348 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.064712551 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.065600617 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.069692287 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.063762299 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.073403299 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.08162391 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.080278357 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.592463275 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.084050444 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.067105908 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.065443569 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.077225964 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.063728578 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.069313072 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.080039397 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.083363415 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.079994698 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.416037101 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.116898103 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.067956632 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.081971703 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.073326654 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.6690888 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.085886777 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.071846619 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.601518738 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.077877307 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.669004602 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.09662503 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.06830594 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.079660056 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.098082402 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.435269899 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.109355504 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.067594695 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.073925959 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.062341597 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.078687421 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.08006054 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.070367787 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.06596361 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.082232197 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.116241204 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.080159851 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.065417793 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.078931625 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.087014434 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.074652766 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.078201085 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.071865072 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.065837954 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.080457113 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.070434003 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.068972022 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.069533947 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.073054869 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.081115167 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.603905627 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.088579511 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.06478237 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.065529585 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.067109844 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.08133475 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.607441404 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.072730371 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.090620019 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.118112356 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.069091341 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.418042364 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.114376043 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.083885887 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.079890303 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.070066844 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.066270678 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.419172905 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.636067431 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.087817193 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.070571456 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.064605631 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.085815444 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.06965263 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.065769147 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.4404846 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.116859601 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.083871123 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.189893524 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.08307482 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.100862645 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.066228252 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.073486739 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.117849787 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.08589744 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.101375902 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.07001151 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.08645067 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.08565056 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.066217031 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.079924631 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.083669434 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.07013642 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.078294883 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.066982312 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.119219182 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.083472987 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.083987065 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.090177403 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.191605006 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.067123525 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.423895364 seconds)
done (took 325.608056428 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.123862444 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.063207791 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.13370783 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.063237464 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.129978255 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.116291527 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.060877358 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.061501218 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.060926905 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.444336667 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.061676813 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.065674864 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.0603838 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.062770253 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.110850327 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.061284916 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.061384316 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.296182585 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.063348008 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.12158949 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.061676845 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.063541353 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.062785191 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.451514183 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.061114145 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.063081827 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.12091703 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.063769991 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.303057194 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.063751543 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.063561147 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.303222599 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.122757383 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.075314261 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.070755785 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.070226111 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.131528101 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.073348069 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.11158976 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.111778142 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.135112769 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.097998152 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.064726488 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.065454062 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.069174388 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.065742114 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.065762155 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.095673021 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.065737386 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.072733387 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.318827722 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.070554123 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.072288877 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.066377368 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.066178321 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.078733342 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.066939304 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.067294074 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.126311029 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.066347344 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.111385231 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.45342064 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.450064371 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.06498932 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.064875506 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.065332854 seconds)
  done (took 196.660748043 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.134562951 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.139956492 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.136142903 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.069908833 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.115118124 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.131607749 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.071285342 seconds)
  done (took 16.781517076 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.073582178 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.066847405 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.090334533 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.089385931 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.066042894 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.222611213 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.078400946 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.071646633 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.093934648 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.067217929 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.406640623 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.090844374 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.073981113 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.065110184 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.077495899 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.097895694 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.069727364 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.067851432 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.164789671 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.145503127 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.073348004 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.073975387 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.096074646 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.078525711 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.066967791 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.068588805 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.066599007 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.074422706 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.067841389 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.067069221 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.068558614 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.081400918 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.068110411 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.065650353 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.083616447 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.068523049 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.068582433 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.067748318 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.068965605 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.07286112 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.066590895 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.073217679 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.066751594 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.06670009 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.064997681 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.087844585 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.06991124 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.064462921 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.065752046 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.065079986 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.097353116 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.076128923 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.064143026 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.069492079 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.109074522 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.070384873 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.073498411 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.064744953 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.065666902 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.065176179 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.063388978 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.149116235 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.088243731 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.064562568 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.087202441 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.112556464 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.064116337 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.063040249 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.064300559 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.089789663 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.073369879 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.088722718 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.063253836 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.165885388 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.063302364 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.217899671 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.085088798 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.067589943 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.067817336 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.060804486 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.072197687 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.062670971 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.075693213 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.069014279 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.066745773 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.060596931 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.06174147 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.068995714 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.068892398 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.061399334 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.108720411 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.06116653 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.068899631 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.161113959 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.059334381 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.157097537 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.087244029 seconds)
  done (took 224.232635528 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.063939366 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.06116567 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.061856654 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.077406664 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.057449944 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.057002647 seconds)
  done (took 14.364541063 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.059592506 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.07467071 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.057222867 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.056995476 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.057063331 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.056993994 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.068856643 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.05691378 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.060706964 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.056379639 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.057258019 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.067734005 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.057285786 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.057704341 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.055537344 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.055166257 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.064948688 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.05550532 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.054642522 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.056505121 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.19484783 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.05558019 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.056695818 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.059523811 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.060737289 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.055183946 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.0635349 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.054597909 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.054691736 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.062396301 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.06103479 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.056945303 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.060029126 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.063527659 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.062198273 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.06099646 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.060054427 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.056728696 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.056156667 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.055080285 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.05497232 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.05678509 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.057370342 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.05824873 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.057702075 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.066670332 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.062537581 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.065315689 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.058003925 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.056651428 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.05795458 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.058282448 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.057085283 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.059999931 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.061598874 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.06445817 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.064045889 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.056950966 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.056843023 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.062398361 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.062200873 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.05867907 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.058796928 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.06234641 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.062164043 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.060852464 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.062739827 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.063794838 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.058769452 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.05802721 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.059736923 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.057916446 seconds)
  done (took 151.395378594 seconds)
done (took 605.450631014 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.119208445 seconds)
  done (took 9.094066546 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.202402647 seconds)
  done (took 9.270603701 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.967435226 seconds)
  done (took 12.943875861 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.08764589 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.100246778 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.068508905 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.059869282 seconds)
  done (took 30.309191008 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.273420917 seconds)
  done (took 9.250913186 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.072460815 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.052911997 seconds)
  done (took 16.16988791 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.095155742 seconds)
  done (took 9.071566712 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.542696333 seconds)
  done (took 9.540801658 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.079714358 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.058941812 seconds)
  done (took 16.138745759 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.059698718 seconds)
  done (took 9.022741071 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.880504869 seconds)
  done (took 9.943378905 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.076276272 seconds)
  done (took 9.072420715 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.086224911 seconds)
  done (took 9.062614722 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.282399172 seconds)
  done (took 10.259732421 seconds)
done (took 171.129436445 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.06605307 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.054825013 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.056609565 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.054167407 seconds)
  done (took 30.206667052 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.094181843 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.094831504 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.103890037 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.094757919 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.085033864 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.086242996 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.095996139 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.095509711 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.085846012 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.093440598 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.095440621 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.092813885 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.095514991 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.104929533 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.105964606 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.093669527 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.094791388 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.096768188 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.086755913 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.10437236 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.093671287 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.095259925 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.061614377 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.06213138 seconds)
  done (took 52.192214874 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.250412339 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.128898274 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.21576788 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.106449843 seconds)
  done (took 10.678446348 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.059856837 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.125515001 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.11233648 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.107117636 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.146699754 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.16358849 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.113294489 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.272279191 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.175817163 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.193859042 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.06917551 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.08326624 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.087696135 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.109421433 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.16855069 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.061468332 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.063208864 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.174911632 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.123952161 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.293175787 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.062614886 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.11648676 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.148283991 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.115603797 seconds)
  done (took 53.126105133 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.063911708 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.07129939 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.069515754 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.06466393 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.065157734 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.064477528 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.071998732 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.066669679 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.085426003 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.065962392 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.064013292 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.065194828 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.071007898 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.066057092 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.064520748 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.078346317 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.078360689 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.064624594 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.068648959 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.070923725 seconds)
  done (took 43.359958228 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.062030132 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.909640087 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.410040939 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.314199772 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.062018252 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.06105593 seconds)
  done (took 32.798347842 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.077180307 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 2.070117859 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.064566545 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 2.122113009 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.205432151 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.069784315 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.065571663 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 2.077131551 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 2.110228046 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 2.131992546 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.087426701 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 2.0927708 seconds)
  done (took 27.156524916 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.065388593 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.061490991 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.063273703 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.074835808 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.07495171 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.072998293 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.072792228 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.062268462 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.076209769 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.0830205 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.073758465 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.076919244 seconds)
  done (took 46.84544044 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.278724427 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.287667171 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.278801606 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.75598322 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.663605364 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.045869287 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.350776847 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.277397692 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.827846762 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.867831466 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.355401517 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.130851391 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.019574467 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.987184449 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.982932516 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.307237247 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.06674762 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.92362669 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.316581391 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.128607731 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.064269936 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.067453108 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.068179707 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.351597581 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.392239845 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.067595779 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.275894256 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.079543061 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.08894693 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.297156424 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.629407223 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.119755092 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.26972614 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.323857173 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.405132912 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.20960518 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.075139512 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.305076127 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.110728344 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.100443042 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.077477048 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.077455746 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.606011347 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.077900617 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.338368241 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.067259159 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.127927818 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.055915733 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.990490197 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.430966142 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.17633807 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.063659702 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.101291373 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.499691564 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.185239715 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.309034476 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.068937146 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.30482788 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12403637 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.369928538 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.280259317 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.070847726 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.280400035 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.991599795 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.461756268 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.186279063 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.068351439 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.071187225 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.766577303 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.309456848 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.148430347 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.433309909 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.830815675 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.068835357 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.069359538 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.086836554 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.167089839 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.065527548 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.369160043 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.033202648 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.99210096 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.165732041 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.472061821 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.071740484 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.067660478 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.0757946 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.914750367 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.071698351 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.166492541 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.372034487 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.38760867 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.069112807 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.069014586 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.091443008 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.073080873 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.015850996 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.726131422 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.139938376 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.995926367 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.632608797 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.596912392 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.03704662 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.588877563 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.112889231 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.348976602 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.226188588 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.472039349 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.27666207 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.314065016 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.600509189 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.075448723 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.68815857 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.150896624 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.146090647 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.06996352 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.625248012 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.392029685 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.409748246 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.181280154 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.071023785 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.997070745 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.081081805 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.274850971 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.604753411 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.128347518 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.066772559 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.076349264 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.069162217 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.074060916 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.184533666 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.086149635 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.36010452 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.143500479 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.070115119 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.009157007 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.072502716 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.351199955 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.8428664 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.1299663 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.32533914 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.336474287 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.77208448 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.074170759 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.096181048 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.335340938 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.145541632 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.144084473 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.641025961 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.20436421 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.16995931 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.072386349 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.203767168 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.077473383 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.075413032 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.577997475 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.487050578 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.499017569 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.115368957 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.07696362 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.085044061 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.313897965 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.314697312 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.166660172 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.10015167 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.077891633 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.156628802 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.30020903 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.07265076 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.098158232 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.318940377 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.31542087 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.362573254 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.146777871 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.170127331 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.140678699 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.084633873 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.286190246 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.154701682 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.747375108 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.619787959 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.28941856 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.699476751 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.039050642 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.738656266 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.377806825 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.452289571 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.090271572 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.52285306 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.318140134 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.814404282 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.104873662 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.600603256 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.999927643 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.079769743 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.409347831 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.032252555 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.595032287 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.136873366 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.133878797 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.074856627 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.075801369 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.08216692 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.079213206 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.179535061 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.143086683 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.149611316 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.002802687 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.786625449 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.114285849 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.07915105 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.075596679 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.482208822 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.943757062 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.027196496 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.076550094 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.153881191 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.825556076 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.630014061 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.076774402 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.079429816 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.699811144 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.707206037 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.989573234 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.162717044 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.854574635 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.101279713 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.382511784 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.175226169 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.370829342 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.774668121 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.151861059 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.078224548 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.0842929 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.778749381 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.088179858 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.77917086 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.359992364 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.353125013 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.513544246 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.136681639 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.289602536 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.093401539 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.079111643 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.605644272 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.102459408 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.079078876 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.280831706 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.600145137 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.453335777 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.03751379 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.165342136 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.105000583 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.343291738 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.076327406 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.599654045 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.76169044 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.076571424 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.102525723 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.322940477 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.76301235 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.079652102 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.054471227 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.083451387 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.29073292 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.281215512 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.347762624 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.373994807 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.529670104 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.099955972 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.08569029 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.113066229 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.32304996 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.078517804 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.115587103 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.523150939 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.172737984 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.506869794 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.371136709 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.517561025 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.709358654 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.344491335 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.143115267 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.090057003 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.718901964 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.205564859 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.010327071 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.199028298 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.00702622 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.790544327 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.371561477 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.096160491 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.342905673 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.059953471 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.41006362 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.377670184 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.402870546 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.122240588 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.109318811 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.081883231 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.123098313 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.101975894 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.342252855 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.197759622 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.087852643 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.678167197 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12042815 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.127604178 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.087183564 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.63231954 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.106018928 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.083692844 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.777674317 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.72347954 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.201343272 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.15458558 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.863400571 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.625354849 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.110549619 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.970907594 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.911495546 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.349019074 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.139127046 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.53133159 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.121659649 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.486541803 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.107084393 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.295569064 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.086712305 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.735162489 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12902634 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.351698234 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.03788883 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.292021124 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.282700723 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.113387331 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.085589045 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.010883267 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.187233179 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.955777 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.063905535 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.084996003 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.095970439 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.532516748 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.354493712 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.566133948 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.904693196 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.083725457 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.481225492 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.472246272 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.7894707 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.116209855 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.086461316 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.46130665 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.84277829 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.450771908 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.371373277 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.091130669 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.746218901 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.297756142 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.207292843 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.003058166 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.580251143 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.668393368 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.783518209 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.095077626 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.287197962 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.471247885 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.435665065 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.120197897 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.15678668 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.489532537 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.345571437 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.79440264 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.010167549 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.084342262 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.480090128 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.092109194 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.182485659 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.326658651 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.398662193 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.831202206 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.617933741 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.124832462 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.503877323 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.524985968 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.495384862 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.297225003 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.452123999 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.411439869 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.96882375 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.499398551 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.296550391 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.182849107 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.358808974 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.958747076 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.796195277 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.331804817 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.090975674 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.0154711 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.295872157 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.089993633 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.704817632 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.610496253 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.090253984 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.407335796 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.550294709 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.626138732 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.338252775 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.110999713 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.051883961 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.11037543 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.107831339 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.087355603 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.585489217 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.378410396 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.069247563 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.026206997 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.756086123 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.014901982 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.30092028 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.332690557 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.123191327 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.643295986 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.408543862 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.189300355 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.377421596 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.394844464 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.124603444 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.01428102 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.857499271 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.034068063 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.18583515 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.513244732 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.102643299 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.092338219 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.291029689 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.016363669 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.135654058 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.712697979 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.287363983 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.670625703 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.355615043 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.214883872 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.331746975 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.391762757 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.094504061 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.050510271 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.361378306 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.019028079 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.76830966 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.770029267 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.781653942 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.159696943 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.090700379 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.091423529 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.361904088 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.474481022 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.182463656 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.748789529 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.123491371 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.113103366 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.461997146 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.176451917 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.092035725 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.096134622 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.626923732 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.323891229 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.116897376 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.108748072 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.305945383 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.164658286 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.286297952 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.168621384 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.606992031 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.096932125 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.092658369 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.129743051 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.038652217 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.088604447 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.819137585 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.151697302 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.109515749 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.360611641 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.74725829 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.293801544 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.485733826 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.962363482 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.346550784 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.137759532 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.095149714 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.093579359 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.486932514 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.393944381 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.091121181 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.365709606 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.138848241 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.096843851 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.109419117 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.061753194 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.092415449 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.87761374 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.981129429 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.824113668 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.49000322 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.098859915 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.125765228 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.093720385 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.019004744 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.120243935 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.116886524 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.079416333 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.098812332 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.472437812 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.197011342 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.178257114 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.09438272 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.095715512 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.097506811 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.30860715 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.606207417 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.110064719 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.794208044 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.297833671 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.093998601 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.590927135 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.534218949 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.417235482 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.136375661 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.353502119 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.33820164 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.637241328 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.354686549 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.079525229 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.318926615 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.097460461 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.366201712 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.367673287 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.093926071 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.306973826 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.6276087 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.383926383 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.117612284 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.642045174 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.161922189 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.362782013 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.000919391 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.093584628 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.097065324 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.362618221 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.149657608 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.093627884 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.104093164 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.653450858 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.830345525 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.561124612 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.250843397 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.472895285 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.89590384 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.849131794 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.099140036 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.024170258 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.110919961 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.118339524 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.10056165 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.106383606 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.881321345 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.828370541 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.308232761 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.36684146 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.023610915 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.300063766 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.696316453 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.020887451 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.064939972 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.095731786 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.348786452 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.023952265 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.101598973 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.100691072 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.175035896 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.886710407 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.370992947 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.098504398 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.043006513 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.09923309 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.099479632 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.097385614 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.181782917 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.098159695 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.214381493 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.362192632 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.535123833 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.198369032 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.742151457 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.873868353 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.033705823 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.138437534 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.714321993 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.666673885 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.175819911 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.897169568 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.876277242 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.041738724 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.101296007 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.112509676 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.359972915 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.101846327 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.100453191 seconds)
  done (took 2294.42586151 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.148215618 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.175689172 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.214439365 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.15271382 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.179763977 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.173832527 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.159282359 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.184298188 seconds)
  done (took 59.403856763 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 7.099609354 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.129399163 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 2.104756772 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.100452541 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 2.114810305 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 7.099695238 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.296772179 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 7.116911857 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.099784825 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 2.103402035 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 7.100757137 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.1098888 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 2.412777292 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 2.134278982 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 7.100081767 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 7.095505541 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 2.101668671 seconds)
  done (took 80.371592385 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.104876992 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.214027705 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.159237774 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.106391204 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.806411566 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.106993543 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.062246049 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.116931933 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.107509543 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.472095414 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.399157455 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.155691669 seconds)
  done (took 92.830494621 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 2.109976356 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 2.101509422 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.101108392 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.102329666 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.101430929 seconds)
  done (took 12.540209496 seconds)
done (took 2837.979266168 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.359251766 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.160603491 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.203399618 seconds)
  done (took 6.38238609 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.249722923 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.293048595 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.409561432 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.428760035 seconds)
  done (took 11.407320853 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.388823035 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.467036867 seconds)
  done (took 6.874482294 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.480202947 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.11206228 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.491448834 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.104248911 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.104789374 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.105211392 seconds)
  done (took 23.339331502 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.102738182 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.10378373 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.10346534 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.104396383 seconds)
  done (took 10.434943054 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.102912417 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.843044379 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.104422883 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.113920301 seconds)
  done (took 22.184431294 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.285407322 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.160400257 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.87446215 seconds)
  done (took 9.340249567 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.984105458 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.554878368 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.712053023 seconds)
  done (took 10.271103993 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.255957823 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.089993045 seconds)
  done (took 8.365597053 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.247652307 seconds)
  done (took 4.267928377 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.966032231 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.417111053 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.585110045 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.16109754 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.75321863 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.51297523 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.612229532 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.396676505 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.540557962 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.561172182 seconds)
  done (took 28.528065251 seconds)
done (took 157.859848651 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.748728284 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.144824693 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.385519586 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.514576493 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.356172239 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.332189258 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.399849851 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.510762705 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.211783212 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.212450674 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.506619077 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.389194566 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.338130322 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.142966717 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.344647699 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.1432264 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.355293766 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.5758931 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.178218257 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.413853222 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.403385395 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.141414412 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.339574082 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.162258968 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.357062756 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.281458235 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.746832406 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.143816115 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.328753613 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.751947785 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.334536467 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.569802238 seconds)
  done (took 177.796274123 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.116619475 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.114109672 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.115328869 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.11410621 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.410066957 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.116384484 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.1156502 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.114466209 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.430636908 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.409572324 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.114724666 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.352993779 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.114851874 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.11413669 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.117274968 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.114985061 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.557535814 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.116083803 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.115116996 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.115819462 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.113120754 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.239710061 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.13613762 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.250066945 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.52647983 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.116630591 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.115796657 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.11543693 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.115306044 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.115925982 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.11579683 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.115562024 seconds)
  done (took 216.002045179 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.118528636 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.11668751 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.115919133 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.115956428 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.116863 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.117276665 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.115764202 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.116416252 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.878334586 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.869843369 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.116996731 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.123014678 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.127701169 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.11657767 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.118044341 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.117936366 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.115310676 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.117641022 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.117720539 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.116910372 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.118260369 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.899325103 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.11717806 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.94542421 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.118130771 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.126483738 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.116461605 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.118258976 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.11632555 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.118495042 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.11949886 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.117299161 seconds)
  done (took 228.937507498 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.360553419 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.1223953 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.122395498 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.133640194 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.123677563 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.120246899 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.120519999 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.367849122 seconds)
  done (took 21.508885883 seconds)
done (took 646.292590167 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.451798396 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.845896622 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.258445724 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.144736679 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.380659362 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.18975217 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.139325048 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.206618645 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.791256193 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.209754794 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.557906983 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.14742228 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.886691725 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.17096264 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.260637392 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.200215384 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.512032528 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.800920367 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.283642891 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.823976732 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.301884358 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.091635287 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.223594145 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.847757238 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.57437728 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.123565562 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.156279137 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.516639124 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.149906656 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.294315055 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.7683261 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.390558298 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.15651651 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.145073011 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.192170299 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.175013521 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.336702387 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.153509854 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.261487378 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.893466592 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.809997419 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.670505131 seconds)
  done (took 110.533859419 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.132224248 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.129150565 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.130507583 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.129283384 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.140489087 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.128856296 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.129803717 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.1307942 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.131021955 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.129148424 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.129994649 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.139733427 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.130273407 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.13976687 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.128908441 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.129357526 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.128083766 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.140682094 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.129567635 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.130399616 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.131202985 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.129402704 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.125230902 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.130995709 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.129813155 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.130899533 seconds)
  done (took 57.469188019 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.12610397 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.316281697 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.368885153 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.145933705 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.126351267 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.12839632 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.155063346 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.131299868 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.129783482 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.128663247 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.227702514 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.131284515 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.1432244 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.365630303 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.144507733 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.126154873 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.126570899 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.127401629 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.327177022 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.141952278 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.157912842 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.132622561 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.157700214 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.143315708 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.128886045 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.128626365 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.129904043 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.572832785 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.136818475 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.229500688 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.201122419 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.162745815 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.495980873 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.379566047 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.182277127 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.134689322 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.128748553 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.279878976 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.138438475 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.129833991 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.159245184 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.137985673 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.370236872 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.644516446 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.140574855 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.130577769 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.570429844 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.288790015 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.172537069 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.140144711 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.37530777 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.144786068 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.129646887 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.130477693 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.164751521 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.139199421 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.128852954 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.389755934 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.142279575 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.158968238 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.138903625 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.131008844 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.333365429 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.138730392 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.323258672 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.138132321 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.136511793 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.127713578 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.371313273 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.145006714 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.66380423 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.142603976 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.130167376 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.232960968 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.322416037 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.603040052 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.243297857 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.337254267 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.505026839 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.167747808 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.142487615 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.555264272 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.170399429 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.140542648 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.129702206 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.13162398 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.130807319 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.179594542 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.160580703 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.571985443 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.665276359 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.406605519 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.170220143 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.143945568 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.13327165 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.397990792 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.139563937 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.131182776 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.367416461 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.677313337 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.147575324 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.140365701 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.640245963 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.148548926 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.159728349 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.141171842 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.386414297 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.149273561 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.181269954 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.132436677 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.137914266 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.133863457 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.16166963 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.140742465 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.131255501 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.631254898 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.296976585 seconds)
  done (took 263.212804647 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.137070817 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.129708776 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.13058853 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.128993291 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.131835006 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.133035095 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.133340818 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.132466257 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.134523474 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.132098403 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.132684734 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.133608372 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.134340531 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.131990807 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.171053838 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.13417814 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.618744461 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.131782983 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.130449741 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.131911411 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.704392063 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.135838875 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.133888466 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.130362204 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.131927623 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.134589971 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.140935018 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.171416556 seconds)
  done (took 174.912984249 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.135641728 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.188044231 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.144061659 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.182310405 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.145499916 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.135791181 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.160080016 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.14731297 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.140033783 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.134509801 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.13406548 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.164630809 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.141186604 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.2314874 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.162473358 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.169300084 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.232095418 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.137301275 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.135760103 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.136206719 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.183497719 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.145970984 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.16745135 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.195576759 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.14586699 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.192210978 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.145730638 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.135775584 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.136708758 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.251377902 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.150631657 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.168495831 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.167772664 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.15414958 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.255249133 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.247677922 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.236986876 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.165310535 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.137548383 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.136242954 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.136341135 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.136931119 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.190301423 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.146229629 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.138292386 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.253325533 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.151677958 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.137050078 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.15813271 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.137129596 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.14966283 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.156090767 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.174377594 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.263281044 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.179840751 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.16316257 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.163326936 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.152599911 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.138826669 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.233430465 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.14041298 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.251815622 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.153559808 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.137673776 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.138174695 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.141406696 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.186106283 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.172260262 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.237022006 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.141014365 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.234927243 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.190535171 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.146451052 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.13731899 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.137493396 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.193885405 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.244038184 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.189253261 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.194839871 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.170618745 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.14846897 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.137216315 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.138998127 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.164865383 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.144262899 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.247245703 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.249179477 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.14270034 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.138310131 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.139952042 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.13949514 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.162281046 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.203184012 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.175342664 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.244231099 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.175000856 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.17731643 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.145465469 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.154105534 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.14311512 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.17309503 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.145792704 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.151685351 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.501521184 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.178457159 seconds)
  done (took 230.154021621 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.529627926 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.180794226 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.214198 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.422853507 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.531540478 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.107881815 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.17669636 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.192351008 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.200273848 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.314160887 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.247092242 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.233637165 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.175751968 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.161196594 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.181942657 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.201735914 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.220517846 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.488864986 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.28011454 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.724335956 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.180919558 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.446293398 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.473592647 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.530195815 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.230754148 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.572799918 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.831492476 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.279339358 seconds)
  done (took 70.392654609 seconds)
done (took 908.716878145 seconds)
SAVING RESULT...
DONE!
