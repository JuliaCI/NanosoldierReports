cset: moving following pidspec: 2674
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.879440434 seconds)
loading group "shootout"... done (took 1.234054458 seconds)
loading group "string"... done (took 0.659992772 seconds)
loading group "linalg"... done (took 8.67021619 seconds)
loading group "parallel"... done (took 0.17032304 seconds)
loading group "find"... done (took 2.980009889 seconds)
loading group "tuple"... done (took 2.13241825 seconds)
loading group "union"... done (took 14.95882041 seconds)
loading group "dates"... done (took 1.460815703 seconds)
loading group "micro"... done (took 0.222999919 seconds)
loading group "simd"... done (took 4.813218626 seconds)
loading group "io"... done (took 1.165724981 seconds)
loading group "random"... done (took 9.573234052 seconds)
loading group "problem"... done (took 1.53346412 seconds)
loading group "array"... done (took 25.466749015 seconds)
loading group "misc"... done (took 1.906097085 seconds)
loading group "scalar"... done (took 43.572231429 seconds)
loading group "sort"... done (took 3.337651986 seconds)
loading group "sparse"... done (took 13.28702423 seconds)
loading group "collection"... done (took 18.67266466 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.531721053 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.123976212 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.12977616 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.121988835 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.187624806 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.12087838 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.130516544 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.086616749 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.847266237 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.144645428 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.11596226 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.435228777 seconds)
done (took 5.414161874 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.40220951 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.09336354 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082484409 seconds)
  done (took 1.412257879 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071745238 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.06077304 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067725723 seconds)
  done (took 1.422414693 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065377755 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.136308529 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066263794 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067052965 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.066906498 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066311524 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066405558 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066578395 seconds)
  done (took 1.759873193 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072184079 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067754973 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065708855 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068297887 seconds)
  done (took 1.499726347 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.068212821 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122601235 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065323065 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065463304 seconds)
  done (took 1.543923284 seconds)
done (took 9.347273195 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.246770147 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.102488504 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.290940268 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.446489435 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.61781507 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.093568692 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075448141 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.070687931 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.131076621 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.344700034 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.104798788 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.183515015 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.090668049 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.185261262 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.139700969 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.121848593 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087550388 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.124065682 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096768034 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.136450575 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.401018236 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078436643 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.073826326 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.070977743 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068715064 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.706235084 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.740099862 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.126105672 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.088698124 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.161736015 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.116151629 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.708134139 seconds)
  done (took 11.289222859 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.09350268 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.09338073 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069555425 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.123938555 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.097721756 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.07201163 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.077419662 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069108467 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.091663802 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.126785965 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.093256034 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099342985 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.067111687 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069195123 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074410427 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.202770788 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080259303 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081430209 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067563586 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081798957 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.107468886 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.080859929 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.080285886 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.080528719 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132661265 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.17206964 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.098680701 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.101113219 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.067964254 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079105529 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115278585 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.126689491 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.06873795 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.067097182 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.121152774 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.097712958 seconds)
  done (took 4.704645908 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.891092081 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.096405525 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.103346982 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.648076024 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.067095441 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.151270172 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.241434645 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074818284 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.289747095 seconds)
    (9/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.154821566 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.142786037 seconds)
    (11/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.148625887 seconds)
    (12/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.118276858 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.069755388 seconds)
    (14/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 1.159549312 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.119184724 seconds)
    (16/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.571918397 seconds)
    (17/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.071559218 seconds)
    (18/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.069912877 seconds)
    (19/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.066698371 seconds)
    (20/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.069390035 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068632007 seconds)
    (22/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064994968 seconds)
    (23/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.093997839 seconds)
    (24/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.070296821 seconds)
    (25/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.0972303 seconds)
    (26/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089234101 seconds)
    (27/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 1.16890075 seconds)
    (28/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.985160398 seconds)
    (29/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.309376938 seconds)
    (30/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.06918037 seconds)
    (31/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.162801343 seconds)
    (32/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.090840843 seconds)
    (33/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.766848502 seconds)
    (34/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07108631 seconds)
    (35/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.084286849 seconds)
    (36/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.48247447 seconds)
    (37/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.124864416 seconds)
    (38/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.069615278 seconds)
    (39/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.167111194 seconds)
    (40/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.086234256 seconds)
    (41/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.117634172 seconds)
    (42/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065758519 seconds)
    (43/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.122543949 seconds)
    (44/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079561918 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069946664 seconds)
    (46/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070693579 seconds)
    (47/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.493270408 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.070875045 seconds)
    (49/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.073746609 seconds)
    (50/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.081423305 seconds)
    (51/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.102248576 seconds)
    (52/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069073591 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.067361745 seconds)
    (54/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.17366719 seconds)
    (55/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.066081073 seconds)
    (56/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067144437 seconds)
    (57/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.068416322 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.153901432 seconds)
    (59/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.066202743 seconds)
    (60/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.144164378 seconds)
    (61/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.065757355 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069970027 seconds)
    (63/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.103777827 seconds)
    (64/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.070063926 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.086956873 seconds)
    (66/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.065434293 seconds)
    (67/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.095042426 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.729301759 seconds)
    (69/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.054400941 seconds)
    (70/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.070654931 seconds)
    (71/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.498389989 seconds)
    (72/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.077047631 seconds)
    (73/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.06714802 seconds)
    (74/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.070937347 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.070174199 seconds)
    (76/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.069072416 seconds)
    (77/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.065156211 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068012147 seconds)
    (79/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073110288 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.073676704 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070023136 seconds)
    (82/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.111529527 seconds)
    (83/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.067182804 seconds)
    (84/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.065500969 seconds)
    (85/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.07243475 seconds)
    (86/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06779682 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.074758901 seconds)
    (88/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.100576742 seconds)
    (89/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.068120918 seconds)
    (90/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.577114278 seconds)
    (91/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099325122 seconds)
    (92/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066952761 seconds)
    (93/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.194305893 seconds)
    (94/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.10641854 seconds)
    (95/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068758645 seconds)
    (96/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.07203097 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068643124 seconds)
    (98/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068970986 seconds)
    (99/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067636088 seconds)
    (100/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068880863 seconds)
    (101/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.071523383 seconds)
    (102/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.098951522 seconds)
    (103/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071347091 seconds)
    (104/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114146562 seconds)
    (105/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.054455098 seconds)
    (106/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071124272 seconds)
    (107/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067801239 seconds)
    (108/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.074240216 seconds)
    (109/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070419256 seconds)
    (110/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071756508 seconds)
    (111/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067783861 seconds)
    (112/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07077988 seconds)
    (113/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.072826817 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066508458 seconds)
    (115/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.065812717 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.107496859 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.121023359 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.06790419 seconds)
  done (took 24.357754465 seconds)
done (took 42.470368881 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.314713058 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.081572447 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.081834229 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.081652993 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.08157039 seconds)
  done (took 1.917272737 seconds)
done (took 3.23395427 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.137073382 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.087392573 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066301293 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.103307341 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.06930524 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.104158519 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.112320842 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.10723367 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.071101204 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.071104196 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.071310526 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.105398412 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.106489801 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.069507281 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.099153812 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.103728408 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069387991 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.065197844 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.069910263 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.069696665 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.069277507 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.065602716 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069497272 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.069331038 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.100132324 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.069538015 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.068074122 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.099715439 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069761962 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099721738 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.069949168 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069422619 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.069851927 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100389908 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069225264 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099343614 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.0652436 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.069332072 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069135586 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.06941117 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.069826679 seconds)
  done (took 4.684059218 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.073770632 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084399772 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08603008 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063821374 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073771667 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085120024 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064333633 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084127864 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.09071316 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085246474 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084826999 seconds)
  done (took 2.198879117 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070704595 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084305146 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08549458 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062809674 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074849018 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084924492 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062940266 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083953885 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086945992 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084755777 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084491182 seconds)
  done (took 2.174704466 seconds)
done (took 10.356773663 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.097434922 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.070144891 seconds)
  done (took 1.457065575 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.528505817 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.469588668 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.068723337 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086684009 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.194915799 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093151148 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.202414655 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072858057 seconds)
  done (took 8.192911165 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.103121892 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.069535808 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.068289997 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068364801 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069364559 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.06920836 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.068347807 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.070610227 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.06883952 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069980709 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.070578951 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071105604 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069515784 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.068581652 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068850003 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069089621 seconds)
  done (took 2.543355364 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.102674572 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.10007307 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072555048 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.073152557 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.07213057 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071276068 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073986716 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.073869115 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.070947024 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.072820882 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.074125917 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.072314887 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.072097258 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.063591606 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073620491 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.074137123 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.070273981 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073773368 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.07364341 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.074916137 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.073201858 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.062983828 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.071392978 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.072224535 seconds)
  done (took 3.206323462 seconds)
done (took 16.708114212 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.177228329 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.0745251 seconds)
  done (took 1.550443858 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.069261919 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.069429576 seconds)
  done (took 1.454406762 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.0738019 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061648152 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078980681 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.071337838 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062145781 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061918757 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077527363 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.062102674 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.06203573 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.062021944 seconds)
  done (took 1.988307337 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063634272 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069377392 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067431483 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065206559 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067797227 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063047516 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065346868 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063386256 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069784499 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062550198 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066215535 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083575138 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065814062 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.083570503 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065481795 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.067319134 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068068769 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065582123 seconds)
  done (took 2.541998248 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062298562 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062576066 seconds)
  done (took 1.446023992 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065463487 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062643211 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064818446 seconds)
    (4/7) benchmarking "year"...
    done (took 0.065268593 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062259198 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.062033329 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062838151 seconds)
  done (took 1.761465345 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.421401892 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.123376796 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.342888002 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.072417761 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.077011368 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.254151337 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064441104 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.069273268 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069150488 seconds)
  done (took 2.854024395 seconds)
done (took 14.926433269 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083357821 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.18359758 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.088750471 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.407145186 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.092127757 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.068637793 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.114111277 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.168722167 seconds)
done (took 2.548500585 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.216623085 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.181643838 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.371233478 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.127623152 seconds)
  done (took 3.006966651 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.339971286 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.079631399 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.0789505 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067576678 seconds)
  done (took 1.902651883 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.066729418 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072821657 seconds)
  done (took 1.469622002 seconds)
done (took 7.936780384 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.067221213 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.097760505 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.06545893 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.064690862 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065798326 seconds)
    (6/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.065145251 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.065014102 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.065298679 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.07584249 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.064817511 seconds)
    (11/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.064333807 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.06470858 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.064606709 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064293267 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064929049 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065254371 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066656455 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.066462957 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066737931 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.066707647 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066443066 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065588553 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.065870052 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.065039776 seconds)
  done (took 2.97354646 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080051092 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.067695819 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.068145909 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067723242 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067875692 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067818914 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068928357 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.068320965 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.069609203 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.068053018 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069405005 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.070056973 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.067925217 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.070590422 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06785899 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.070409576 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.069790661 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068189791 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06803861 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.070291985 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.069622516 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068992375 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.070168253 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069580172 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069905534 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068919748 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.066534381 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.067084766 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068586663 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.068252508 seconds)
  done (took 3.406466227 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067286333 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060923353 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061533655 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.072128959 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.062498285 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062773394 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062853071 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.062553598 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.063267529 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.064050915 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.063396697 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.062941918 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.063513855 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.063054235 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.062750873 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.06325155 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.067367039 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.082999292 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.063233759 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.062629907 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.066891262 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.062579954 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062161475 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.063118517 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.063192018 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062471698 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.062406361 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062972328 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.06261744 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062794959 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.062080637 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066641763 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.067623561 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.062265837 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.072805646 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.067490339 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.063133804 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.067375519 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063732696 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.06181434 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.062129131 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.062477289 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.06281398 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.062654751 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072667091 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061310588 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.062664287 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062366996 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062077646 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.061099661 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.061941388 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.064725141 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.068392955 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062913949 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061491159 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.063368666 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.062456371 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.063411579 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.062582535 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.062848746 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.062488189 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.069408285 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.064307396 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.063380189 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.083168031 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063887556 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.0711851 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.06113571 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062063818 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065297554 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.06209783 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078736794 seconds)
  done (took 5.999046977 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.082808235 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.086925801 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.06692966 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065938508 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061740316 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061789855 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.070721487 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063286039 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068783142 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.084269182 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06339606 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067973083 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067910961 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067776239 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063755914 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068118701 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.07090869 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062568154 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.062957599 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067465616 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063347955 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.071044883 seconds)
  done (took 2.87313066 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.13712484 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06872078 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.109270029 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.076965681 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071560849 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.077256122 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.06887412 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068935284 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069159954 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069322866 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06935404 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068874387 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071690216 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068663703 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067554678 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068670068 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06811808 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068215778 seconds)
  done (took 2.722321815 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.078639685 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.068117738 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.088747563 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066898442 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066989579 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066480742 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070486635 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071468967 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.068700864 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.068304263 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.072865706 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068677026 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.068027008 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06877031 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068196064 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.068683605 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.068308592 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068434201 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.07233376 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.072053853 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.072426643 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.072791576 seconds)
  done (took 2.910322307 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078675655 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067078282 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.0839308 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.069090343 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.063036793 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.063286369 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.068776363 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.067898006 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.068386773 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.067596453 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067439624 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.063314575 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.069248224 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06812838 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.069402856 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067961308 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067675093 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067395825 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066097338 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061367722 seconds)
  done (took 2.719983085 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.087673851 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064754519 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.065639947 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.085706469 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066244678 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.065862996 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.085949509 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.066101853 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065605214 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.087809047 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065527088 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065882218 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.08559672 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.084491148 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064657799 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.083876669 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.083622007 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.084035983 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064416409 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064424665 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085627726 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.064303112 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.083832102 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064231257 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.064283373 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064274759 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064279773 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.083882829 seconds)
  done (took 3.419721572 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.06603018 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065832065 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065056929 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064686766 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.06575611 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.067198359 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.067351028 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.067579451 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.066858955 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066900082 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.066859747 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.067228753 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066651492 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.066934026 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064873173 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065115035 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066496685 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.06724908 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066725065 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067503641 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.066607915 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065931199 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.06498436 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065369166 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065993449 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065411519 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065745807 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065351399 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064979198 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064899978 seconds)
  done (took 3.347137412 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.074666377 seconds)
    (2/2) benchmarking "in"...
    done (took 0.072919971 seconds)
  done (took 1.509100848 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.063444678 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.078691337 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.061436788 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073605489 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069989001 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.068493011 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070320106 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069937451 seconds)
  done (took 1.913071944 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.068386721 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.092134691 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.06323593 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.06358854 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.066042949 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.133563251 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.075920129 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075154567 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076676487 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.06571252 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063630335 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.075067712 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062860825 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.07674804 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064682373 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072251347 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070954127 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081073786 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.076260975 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.061481229 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07550565 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063679097 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061504427 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064228067 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.063250194 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.07012326 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.078695609 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.075754315 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071518324 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060879497 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081682591 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061563077 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062748747 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071387551 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065840269 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061986881 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.099620194 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.062850212 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066928602 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.061405298 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.074144717 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082902785 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.076737686 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081971779 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.066159248 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.065978571 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.063726632 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.065673818 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.067329514 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.073184683 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.06222354 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07020617 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062638256 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064685855 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073520666 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.062328012 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.06742272 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072022161 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075974777 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072797607 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.072162313 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.079375818 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071109432 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069823573 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.06303042 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082036302 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063774886 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.075239341 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077026852 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.063311698 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.075605796 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.061589767 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060613046 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.061707231 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.096220408 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064266684 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.063470523 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062298806 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062489558 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.065013561 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073603087 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068971244 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071749708 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06729455 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07925811 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072155581 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062570933 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.070127325 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.082314841 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065683639 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.06210574 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078456809 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065271872 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.061837716 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.079444746 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071590549 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063597849 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062700427 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065264059 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075105725 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063492748 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060985234 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07057599 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063931466 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.063930848 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.066550125 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070439663 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061526104 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.071484045 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065830768 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.063002099 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060252026 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.06566272 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062792033 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060298909 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071018664 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061747769 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076359955 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.067742845 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.075826131 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.075994096 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.071839885 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.076637053 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.060673829 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059495135 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.078985495 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.07036004 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.062377866 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.078573249 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.060023137 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.071425735 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.060169751 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.061999201 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.069818816 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.06037842 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062224166 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060420084 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065342915 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062398032 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062779509 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.065949106 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.069430523 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073296115 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.061831091 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069330007 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.060718786 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076601852 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071429129 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065101162 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064074772 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.06127005 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.072237152 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067192474 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069958833 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.061003126 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.06221586 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.064863869 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071639262 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070448292 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063142454 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067495964 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.06517522 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061684856 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.060962906 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.063855779 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.066137934 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065359117 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062112991 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069252118 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.069777246 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074363479 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067049731 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069823229 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060421047 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061196152 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.062298893 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.060438813 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065719027 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070056854 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.118134977 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.074557704 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084347056 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061979022 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.073419355 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.063368788 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.07809682 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074123892 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062417294 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065241261 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060140898 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062825418 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070528256 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072283907 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074667073 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076031489 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.143487357 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066714343 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060630945 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076327033 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.060848798 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070258077 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.07089598 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.064789184 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061565488 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062515562 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070144812 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065380402 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.060549883 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.07680257 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.066542274 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060357046 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.147101717 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062329391 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073706178 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061106097 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.06428601 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066956476 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.06350657 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070645798 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076573747 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060214116 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061366541 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076710839 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.062643881 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062824667 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.070170628 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076227022 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065830918 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.138628406 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073749704 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072881277 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.067062817 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.072813443 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063738793 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072353329 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.06369804 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.073006094 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.06120501 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079353871 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.060043435 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.076631643 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061081279 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071954298 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061565565 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070253524 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.122644611 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.079367427 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.064572541 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.064446687 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.075496229 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060910643 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071865556 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061988512 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.067630919 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.069975817 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.072895171 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.065039822 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.072527567 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.064590836 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.07071147 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.065791629 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.134566202 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.071907032 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.067282815 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.062608661 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070191172 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072643757 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070048224 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.062911569 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.062659171 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062396582 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.070805385 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.06283411 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.063246439 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069471657 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066720265 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.068340028 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062702042 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.115605694 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063847193 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071633449 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072730023 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080150298 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071029332 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069030322 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071525843 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.060968843 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077461491 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061463385 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.068982368 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.059891696 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066282955 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070344392 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.062884703 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.15332637 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.063715069 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.070524857 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074643799 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071782962 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066571046 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.082224938 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.065253441 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.070694744 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.071112055 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067405616 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067899241 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063216035 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069735515 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070983131 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071803987 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061977866 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.106890713 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072221157 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064669681 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.070306778 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.067452594 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.072078566 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063921903 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060836533 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067845553 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074186881 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067546674 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.067859428 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063401999 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061329158 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063170428 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.06908883 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.143536002 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071309338 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077779809 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.061422035 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064179803 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062249415 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066539102 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081214326 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071689723 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.070773904 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067404547 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.061499339 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.064871748 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.06491454 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.063103679 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.065886084 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.062131586 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.135505913 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073172492 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.064532369 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067701597 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063136546 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062182834 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.071355674 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.064992547 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.063292909 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067448564 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.060966859 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.06605657 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060111971 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062330742 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.065184789 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060260231 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.064548025 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.137828182 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077955657 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.067725924 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070183579 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062080352 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069030265 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07664083 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067006358 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062521309 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070882721 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061393918 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.080646231 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.071022773 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070941517 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073329469 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.064180647 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.151483011 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066609154 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.073035775 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.078074776 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063726356 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.069366834 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060451554 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076126424 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.065953906 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.060345194 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068692335 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069283233 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066586981 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.07235051 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.462603246 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.073921634 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.071062459 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.070221034 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.067506907 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.067330957 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.075355612 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.0825037 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.066334716 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.07010388 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.075341876 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.075548953 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.070689247 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078943121 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.074245027 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066910043 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.068271324 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.069943674 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.067324996 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.079210204 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.067602599 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.071439895 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.071417739 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.066272336 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.073745267 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.084667357 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.076701466 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.077187656 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.066227959 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.065300588 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.084949028 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.069883132 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.069074501 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.074390312 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.076411769 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078545718 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.075571806 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.082811442 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.325605417 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.073774631 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.090783318 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.06723859 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.09375022 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.07194345 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.067476667 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.07864925 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07952734 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.074064023 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.067514803 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.072334565 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.079199439 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.071546806 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.072107961 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.069742174 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.065556198 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.075950674 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.073221796 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.074487939 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.066158843 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.06443737 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.068413071 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.074285593 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.073369549 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.074139233 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06540592 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.071317765 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.078994764 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.073026526 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067735079 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.064359516 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067866003 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.074702137 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.069670411 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.064421714 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.069480683 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.068624006 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070978412 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.074095151 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.068921234 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.063736637 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.081456295 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.072406832 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.073668825 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.068682478 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.065823139 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064350433 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.063195174 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075266366 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.063060282 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.065184205 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.068153714 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.064887768 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080688161 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.071768875 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079608038 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064940227 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067924946 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.062745301 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073182278 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067760184 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063281675 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.073813559 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.06274108 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.079162249 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.076818863 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.071164211 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.087668623 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.07014946 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.073399574 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.080823783 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075009792 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.074440569 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.068622133 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073996862 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.067028527 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.076128302 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.064771987 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.062901226 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.07515428 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.074371895 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078235941 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.064222121 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.075662794 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.067327858 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.073793332 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.072769596 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.064857081 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064898015 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.065211618 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072998033 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.067810113 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.072346683 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.225603208 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.080449294 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.064273739 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.074514106 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.072303219 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.07409409 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.076729777 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075415459 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.071580395 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.064105093 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.07052719 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.071210102 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.063983192 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.068263754 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.067066221 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.084984422 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.064601554 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.064202353 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077332083 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.069042827 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062791467 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.069235297 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.067444118 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.07337897 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064051572 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073504913 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.066780873 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.06355056 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067108824 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067448435 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.061940455 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062181136 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.062660986 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072880759 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067723087 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.063174549 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081796008 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064400192 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.073450687 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076212054 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.070911245 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.065023136 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.062015795 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.064176973 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.076894241 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078867533 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.06648241 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07252152 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.064659038 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.072795254 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.062443551 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.072468827 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.071479371 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072016811 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062857641 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063607535 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.078248283 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079166535 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067930275 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.07315422 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.072829305 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.06503314 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08671144 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.07430937 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06673471 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.076641493 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.067634297 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.064134968 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.064147757 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.066592369 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.076941186 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.064544045 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.067589037 seconds)
  done (took 44.327844089 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.102090664 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063597807 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063020794 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063328533 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073572527 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063695901 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062779819 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063769604 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.063460573 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065051937 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.062444032 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062679681 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074959809 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.077439122 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.0723897 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066197863 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06291743 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065432268 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.064582637 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065707415 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073078235 seconds)
  done (took 3.033715132 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.068787752 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.077413964 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.073276532 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.079008051 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070567835 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.066548813 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.073611935 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066535641 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.074485916 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071782913 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.074138941 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066328508 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.071680435 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.072315939 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072260745 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068993208 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.079764198 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.073239926 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.068751162 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.075632619 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068742945 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.075549072 seconds)
  done (took 3.121713869 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.064141283 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062878648 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071566014 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.062031623 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061977814 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.065220156 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.061744678 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.066819334 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.067102635 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.068848982 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.074032711 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.065910545 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.064748507 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.069968869 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062793919 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063666168 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.106031526 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.063786236 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063786 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062831967 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.065322577 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.071986661 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.063041564 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.063098962 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.067470392 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.065858718 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.06238858 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.065176791 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.0631098 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.067110808 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.064568866 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.063779152 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.073510954 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.072608308 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.068589012 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.068308185 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.065521173 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.064788604 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.063900522 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.063781182 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.072783419 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.065522531 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.064195834 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.065198892 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.073286761 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.063884709 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.063730863 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.073288611 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.063603948 seconds)
  done (took 4.816599093 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072210781 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.116637515 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.069713709 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.098819045 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.0775846 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.070326458 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.070123272 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.099262923 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.065303172 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.065557576 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.077633465 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.078235263 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066955997 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.068048991 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.069980449 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06721371 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.067477931 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.066084794 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.069499518 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.066181756 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.069365899 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.070213875 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.074813245 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.075018451 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067629955 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.065857091 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066362353 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.068022147 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.077016237 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.070644546 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.068637434 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.0694211 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.077491789 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.072111088 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.066534307 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.066700652 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.079059269 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.067041887 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.066067 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.063711045 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.064759512 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.066402531 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.069677816 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.075839949 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064964995 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.069838007 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065317528 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.064432908 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.077141035 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.065019592 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.068666143 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.07575686 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066184301 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064881267 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.068064182 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.077820909 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.066503347 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.065303118 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.066954684 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.076998592 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.064752368 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.067418921 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.078243742 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.066136253 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.070311251 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.078006833 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.071571683 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.067512526 seconds)
  done (took 6.534335734 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071885327 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.098168758 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073582048 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073430621 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072804001 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.075020797 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.075259616 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.074808669 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074364029 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.075055612 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075089283 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.116502368 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.071052541 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.079739424 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.075155796 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.074666936 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.074728504 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.075771652 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.075393158 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074716549 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.07493715 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.0748896 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.074048141 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073890816 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074654192 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068907435 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.07228693 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072473039 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072749482 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072832431 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.075443852 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.072728143 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072346304 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072860457 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074947433 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.075355801 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063132197 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07264182 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.072297698 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.072284267 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.06922196 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072908003 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.072310412 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.06911461 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072836994 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072920566 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07327949 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074770279 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.07936825 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073349223 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072440191 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072883463 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07271032 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.072328068 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072829368 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078718355 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072800615 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072739897 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072562253 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072787711 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073141086 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078943992 seconds)
  done (took 6.203036712 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078634166 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068882482 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.081133394 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.062563094 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062450113 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071548535 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062188448 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.063540365 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.070961481 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.070462307 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.072673116 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.073945167 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.075441973 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.07244102 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.073447616 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.075670169 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.073376635 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.073722002 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070857328 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.073275574 seconds)
  done (took 2.995894763 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.077766723 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.08103224 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067810117 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.071528851 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.067565215 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.072099123 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.068484626 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069606525 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070146549 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068659213 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.072236119 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.07235409 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068959745 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.071977396 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.072549356 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.072897176 seconds)
  done (took 2.703329333 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.068876196 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.068967526 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068674109 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.064507515 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.067459588 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.064524864 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.065030611 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.063534814 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.06408105 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.078969876 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.064418161 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.076876079 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.064837025 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.063758552 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.064364045 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.06969453 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.062533667 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.06459569 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.064685119 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.069135308 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.071499958 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.066809946 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.068717972 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.064977101 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.070390026 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.071823248 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.066002962 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.068594989 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.064501328 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064900386 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.071252369 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.071777653 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064545861 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.065082708 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.064215268 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.064784547 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.064683078 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064183474 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.070048162 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.063308324 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061758367 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.06991134 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.063911717 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.064861769 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063994894 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.065515756 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.06378649 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070838383 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.065180557 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.07061828 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.064567719 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.067148563 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.065605923 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071019707 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.066937469 seconds)
  done (took 5.235436549 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079050556 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067543144 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062164221 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061724191 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066933547 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.068246504 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067645504 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067633666 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068031851 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062244476 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068416788 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.067496843 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068341611 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068796788 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069722193 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069443554 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.063527907 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.069484461 seconds)
  done (took 2.791075031 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.073726122 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067664291 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.072429807 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.067366102 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.069491424 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068516564 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064024195 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.063769428 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063631693 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068758749 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068455036 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.068228352 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06362047 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.068563597 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068830686 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068596281 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.068513725 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063617803 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068576464 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064051191 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.068315625 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063772544 seconds)
  done (took 3.050833997 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.089719736 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.08916137 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.130619214 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.083388158 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.092460358 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.075075948 seconds)
  done (took 2.12878719 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096021819 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.105160338 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066952844 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06769914 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075376411 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069980216 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070802318 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07047462 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07547463 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074072453 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070338737 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075628776 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075507012 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071587671 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077266495 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079944094 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070668904 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070564904 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067498474 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078140563 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070308327 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07529332 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070040287 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0699182 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070261691 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073763629 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080263602 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076104052 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07250067 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077992352 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080047841 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072230727 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077898691 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076221853 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069287819 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077938702 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072499532 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079709056 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075555736 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071661434 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066868914 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075520545 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075793937 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071562365 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077832767 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070433365 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071917658 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070355924 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070370175 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079904428 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075659089 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072141786 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07596469 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07792125 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077976359 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080106584 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074019405 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071849589 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075681912 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074081513 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071790813 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077948331 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073132811 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074338301 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078094387 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072178554 seconds)
  done (took 6.507092578 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.103301984 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067837176 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070370055 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07457987 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072234095 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071082651 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070788201 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072233646 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071217882 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067885522 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.106383354 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071388664 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072663423 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072273384 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07290627 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072763035 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072940513 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074280759 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070046285 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.082733743 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073055899 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074944509 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074553362 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074397587 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075427952 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078165593 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070154907 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070486518 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070189552 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070638647 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072331646 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070862038 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072339633 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067473864 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072070292 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070171632 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070060008 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071975945 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072115226 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075794422 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072466995 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078255432 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070722675 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070703203 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0759817 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072184729 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072353007 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069711035 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072150834 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069376881 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076107996 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076547133 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076147345 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074113498 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072656322 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07297507 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072760325 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072530339 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0732461 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080502943 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074651364 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072037322 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0802036 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070374883 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07067413 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072259354 seconds)
  done (took 6.464409819 seconds)
done (took 135.046017558 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.281928596 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.26820496 seconds)
  done (took 2.10934443 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.076389274 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.099559035 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.076817609 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.178124749 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.074324192 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.126769185 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.120463233 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.077745355 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.074174856 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.074027824 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.074151234 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.076271058 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.195014672 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.074125303 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.073751873 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.076500971 seconds)
  done (took 3.142792177 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.109365634 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.187851543 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.116250169 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.071804722 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.112630077 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.078377622 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.071932776 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.083359648 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.07568365 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.084572965 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.078861399 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076485535 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.073817992 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076548864 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.075536895 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.078357181 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.074046263 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.078149267 seconds)
  done (took 3.186668119 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.099545501 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.087863139 seconds)
  done (took 1.773650628 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.168855314 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.110594336 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.150388726 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.335324571 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.132107092 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.13154646 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.135634206 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.133839919 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.121553424 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.127228788 seconds)
  done (took 3.125691832 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.107776559 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.178589766 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.318776473 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.124503611 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.078194585 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.09989865 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.126088139 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.084144082 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.0820473 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080959662 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.081373056 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.078927902 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.103522911 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.077430427 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.076643098 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.078503675 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.10660644 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.075756282 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.077123081 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.077431014 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.108370731 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.072732736 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.077389938 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.075642902 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.079021118 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.079063634 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.074413423 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.072566155 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.077130213 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.076233644 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.079292025 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.097845895 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.079344321 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.100119981 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.076351155 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100702672 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.076504394 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.075639626 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.076849725 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.075291356 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.07848503 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.078523495 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.081601487 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.079328062 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.075609412 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.078862623 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.075829248 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.074613181 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.083350509 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.074945126 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.08278802 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.08260637 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.10264621 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.073068863 seconds)
  done (took 6.464718874 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.109940183 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.108146144 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071725826 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.115223781 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.107174088 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071374899 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.106404784 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.102321174 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.110570856 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071622676 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070473067 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071053547 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.078029884 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.081430224 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.121581681 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.110269134 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.073081169 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071894348 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.11151842 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.111060163 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070483574 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.103414446 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.101725828 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108105494 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069770021 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071743473 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069926708 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070548108 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075351066 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075668667 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.07004667 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076494035 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.082169382 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076393748 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069939971 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.070060399 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069939116 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.077206233 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077478069 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077589934 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.07590947 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069750844 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069653198 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070466778 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071098607 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069695184 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075525477 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076827333 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075650812 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070108255 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070493074 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.069736017 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070637901 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076435445 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.075472006 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.077966232 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078582654 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070845664 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071490009 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.073538787 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.081640933 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.081121937 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.080523036 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.073337552 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.080945048 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071174637 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079075531 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.082706796 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.070096386 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070544512 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070166316 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.07009417 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070760203 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07542008 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.076283523 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070981735 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.073082575 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.07043709 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078426181 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076330958 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070885526 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075682489 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069605852 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070327562 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070622185 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070445689 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.075157954 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.077182883 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070954032 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070209379 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070221812 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070000647 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069474558 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.075319124 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076843443 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.077281693 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.076152147 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070949502 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076619845 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07638099 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070836522 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.075984015 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070209121 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070878397 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070155619 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076566162 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.075870116 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077554315 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070297027 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069973352 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.075572382 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.217552799 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071239115 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076384114 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078776332 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.077089211 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.07029618 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.082282498 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070740843 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.079722668 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071022542 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078889536 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070584609 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076508612 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070851599 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.06979265 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070639169 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.076567007 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071569866 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071035612 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.072805891 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072528385 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.079045676 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.082910417 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.074066631 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.079505897 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.079344487 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.071457227 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.079009004 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.073129164 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.080267552 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.07155001 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072447608 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071624765 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081839874 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.072747131 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.07226356 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.072285989 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.081307948 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071408996 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079037562 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.076204537 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.07047661 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.0806577 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078445727 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.076353883 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.079984589 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.073521584 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.072800253 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072351681 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072558616 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077707285 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078801878 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070595092 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070689633 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.07523397 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.078004731 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.070246673 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075865364 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.321050897 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075961889 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070194315 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069955943 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078820266 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077809297 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075498002 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075374553 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07631241 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069808307 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075427146 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076002219 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070257961 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082309423 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070159968 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.080573565 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.076355665 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075432135 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076321191 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077592288 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.07781012 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.079427675 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.080495048 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069605194 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.070096542 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.076640095 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069894261 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070196377 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075593921 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070778336 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070668185 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080704264 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.07053043 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078638474 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069731003 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076936286 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069910714 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070492323 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080912347 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070054103 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.07056631 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.076268011 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.07047113 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.07589947 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078461668 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.076072827 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070079945 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070774114 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.077196412 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.077226296 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070072538 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069536014 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072240172 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.078152897 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.077097979 seconds)
  done (took 19.118499978 seconds)
done (took 40.521494334 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.210619916 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.171414014 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.198879876 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.117955072 seconds)
  done (took 2.389514088 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.092460965 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.100987592 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.077070457 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.066948517 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.084303084 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.066827245 seconds)
  done (took 2.119646509 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.252634595 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.190198628 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175987472 seconds)
  done (took 2.244369398 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.221859151 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.20020165 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.510871688 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.314509845 seconds)
  done (took 2.979034014 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.132571626 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.079818123 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.065389995 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.075180832 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.104987233 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133977674 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.086929082 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.108928525 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.076510972 seconds)
  done (took 2.555055592 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.130816564 seconds)
done (took 14.071377246 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.109188106 seconds)
    (2/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.236213401 seconds)
    (3/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.17722405 seconds)
    (4/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.07454914 seconds)
    (5/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.078032381 seconds)
    (6/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.205741543 seconds)
    (7/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.080904387 seconds)
    (8/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.074957017 seconds)
    (9/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.078460695 seconds)
    (10/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.218877997 seconds)
    (11/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.079352344 seconds)
    (12/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.128018055 seconds)
    (13/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.077800371 seconds)
    (14/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.244440187 seconds)
    (15/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.194709365 seconds)
    (16/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.077922554 seconds)
    (17/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.196343476 seconds)
    (18/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.192114524 seconds)
    (19/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.09286193 seconds)
    (20/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.079856277 seconds)
    (21/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.203478754 seconds)
    (22/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.075872055 seconds)
    (23/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.223583226 seconds)
    (24/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.075340119 seconds)
    (25/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.19285837 seconds)
    (26/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.177118501 seconds)
    (27/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.208947955 seconds)
    (28/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.092782239 seconds)
    (29/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.214840382 seconds)
    (30/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.094152826 seconds)
    (31/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.075957022 seconds)
    (32/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.155525717 seconds)
    (33/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.118414813 seconds)
    (34/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.0868931 seconds)
    (35/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.07844995 seconds)
    (36/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.071025108 seconds)
    (37/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.092750654 seconds)
    (38/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.074938072 seconds)
    (39/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.238683114 seconds)
    (40/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.123260308 seconds)
    (41/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.078903295 seconds)
    (42/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.2352733 seconds)
    (43/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.089995878 seconds)
    (44/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.080804605 seconds)
    (45/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.07583072 seconds)
    (46/341) benchmarking ("sort", BigInt, false)...
    done (took 0.269165496 seconds)
    (47/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.075680805 seconds)
    (48/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.076070028 seconds)
    (49/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.06552325 seconds)
    (50/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.075172074 seconds)
    (51/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.219173348 seconds)
    (52/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.066585951 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.093279949 seconds)
    (54/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.068062645 seconds)
    (55/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.139337287 seconds)
    (56/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.088723507 seconds)
    (57/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.145842489 seconds)
    (58/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.072743105 seconds)
    (59/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.232046472 seconds)
    (60/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.16083534 seconds)
    (61/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.087550085 seconds)
    (62/341) benchmarking ("sort", Bool, false)...
    done (took 0.144829062 seconds)
    (63/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.065721476 seconds)
    (64/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.146548501 seconds)
    (65/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.126258891 seconds)
    (66/341) benchmarking ("sort", Int64, false)...
    done (took 0.068025477 seconds)
    (67/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.114088034 seconds)
    (68/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.074619988 seconds)
    (69/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.08464414 seconds)
    (70/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.079787592 seconds)
    (71/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.077201697 seconds)
    (72/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.171679056 seconds)
    (73/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.155112473 seconds)
    (74/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.15766245 seconds)
    (75/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.143733871 seconds)
    (76/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.066702788 seconds)
    (77/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066723361 seconds)
    (78/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.076929988 seconds)
    (79/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.081625428 seconds)
    (80/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.086840794 seconds)
    (81/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065387954 seconds)
    (82/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.23588615 seconds)
    (83/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.246928539 seconds)
    (84/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.208091598 seconds)
    (85/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.202074443 seconds)
    (86/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.152354171 seconds)
    (87/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.094792104 seconds)
    (88/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.158870637 seconds)
    (89/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.079802298 seconds)
    (90/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.082639339 seconds)
    (91/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.090375885 seconds)
    (92/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.143215709 seconds)
    (93/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.092146206 seconds)
    (94/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.205389776 seconds)
    (95/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.072389877 seconds)
    (96/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.078680114 seconds)
    (97/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.150814302 seconds)
    (98/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.070333764 seconds)
    (99/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.094404159 seconds)
    (100/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.193491582 seconds)
    (101/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.06673392 seconds)
    (102/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.204929031 seconds)
    (103/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.067516554 seconds)
    (104/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.156290084 seconds)
    (105/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.085417827 seconds)
    (106/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.204097952 seconds)
    (107/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.068185713 seconds)
    (108/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.075379654 seconds)
    (109/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.069130281 seconds)
    (110/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.069726068 seconds)
    (111/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.137664809 seconds)
    (112/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.07982247 seconds)
    (113/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.068695667 seconds)
    (114/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.067521733 seconds)
    (115/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.089844131 seconds)
    (116/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.156540462 seconds)
    (117/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.06724829 seconds)
    (118/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.067514548 seconds)
    (119/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.071109857 seconds)
    (120/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.075830077 seconds)
    (121/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.067245821 seconds)
    (122/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.206403133 seconds)
    (123/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.083918548 seconds)
    (124/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.074620003 seconds)
    (125/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.163742376 seconds)
    (126/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.218920053 seconds)
    (127/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.085379738 seconds)
    (128/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.066501751 seconds)
    (129/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.196506933 seconds)
    (130/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.079281379 seconds)
    (131/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.094199663 seconds)
    (132/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.162351069 seconds)
    (133/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.074627961 seconds)
    (134/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.085864893 seconds)
    (135/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.087577705 seconds)
    (136/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.16974518 seconds)
    (137/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.074957 seconds)
    (138/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.066263338 seconds)
    (139/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.162053864 seconds)
    (140/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.083092229 seconds)
    (141/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.146767549 seconds)
    (142/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068728886 seconds)
    (143/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.212886813 seconds)
    (144/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.069067741 seconds)
    (145/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.074520469 seconds)
    (146/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.090353734 seconds)
    (147/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.070920048 seconds)
    (148/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.078492468 seconds)
    (149/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071665177 seconds)
    (150/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067825732 seconds)
    (151/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.116952906 seconds)
    (152/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.066617551 seconds)
    (153/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.067101097 seconds)
    (154/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.077251585 seconds)
    (155/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.06781776 seconds)
    (156/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.077527934 seconds)
    (157/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.069345448 seconds)
    (158/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.070559976 seconds)
    (159/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.181231544 seconds)
    (160/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.067662921 seconds)
    (161/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.075141129 seconds)
    (162/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.067058268 seconds)
    (163/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.072717476 seconds)
    (164/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.077664464 seconds)
    (165/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.14935646 seconds)
    (166/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.092876989 seconds)
    (167/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.070957757 seconds)
    (168/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.075846788 seconds)
    (169/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.097151598 seconds)
    (170/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.067522346 seconds)
    (171/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.066468676 seconds)
    (172/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.067831784 seconds)
    (173/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.06737745 seconds)
    (174/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.078868486 seconds)
    (175/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.06785441 seconds)
    (176/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.088949784 seconds)
    (177/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.124909245 seconds)
    (178/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.162269006 seconds)
    (179/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.084232555 seconds)
    (180/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.065806138 seconds)
    (181/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.066288987 seconds)
    (182/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.066473453 seconds)
    (183/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.067738131 seconds)
    (184/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.145028584 seconds)
    (185/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.092695141 seconds)
    (186/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.066506333 seconds)
    (187/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.157609867 seconds)
    (188/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.076929793 seconds)
    (189/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.343795107 seconds)
    (190/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.074777393 seconds)
    (191/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.082095009 seconds)
    (192/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.085524624 seconds)
    (193/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.156254964 seconds)
    (194/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.067934103 seconds)
    (195/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.096822318 seconds)
    (196/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.087835114 seconds)
    (197/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.069438898 seconds)
    (198/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.069636216 seconds)
    (199/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.072007246 seconds)
    (200/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.165815086 seconds)
    (201/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.070666713 seconds)
    (202/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.067925746 seconds)
    (203/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.13632693 seconds)
    (204/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.236722016 seconds)
    (205/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.069540105 seconds)
    (206/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.126863188 seconds)
    (207/341) benchmarking ("sort", Float64, false)...
    done (took 0.141018915 seconds)
    (208/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.171230779 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.06817404 seconds)
    (210/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.22306752 seconds)
    (211/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.06660008 seconds)
    (212/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.075800864 seconds)
    (213/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.146597038 seconds)
    (214/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.068196317 seconds)
    (215/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.076900007 seconds)
    (216/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.068764775 seconds)
    (217/341) benchmarking ("sort", Float32, false)...
    done (took 0.142367725 seconds)
    (218/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.144546301 seconds)
    (219/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.068610527 seconds)
    (220/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.068506128 seconds)
    (221/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.146507915 seconds)
    (222/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.169138031 seconds)
    (223/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.068832512 seconds)
    (224/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.149984242 seconds)
    (225/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.068721974 seconds)
    (226/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.134797143 seconds)
    (227/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.072519383 seconds)
    (228/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.136096135 seconds)
    (229/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.066921661 seconds)
    (230/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.068237913 seconds)
    (231/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.067437662 seconds)
    (232/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.06696809 seconds)
    (233/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.065830096 seconds)
    (234/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.068281018 seconds)
    (235/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.074708868 seconds)
    (236/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.067601359 seconds)
    (237/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.197390769 seconds)
    (238/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.067821318 seconds)
    (239/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.079320298 seconds)
    (240/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.086571935 seconds)
    (241/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.066530277 seconds)
    (242/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.069348178 seconds)
    (243/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.06735429 seconds)
    (244/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.074077133 seconds)
    (245/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.066477396 seconds)
    (246/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.075295801 seconds)
    (247/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.069584364 seconds)
    (248/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.0676786 seconds)
    (249/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.079335772 seconds)
    (250/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.07927449 seconds)
    (251/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.077378413 seconds)
    (252/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.06730093 seconds)
    (253/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.065764034 seconds)
    (254/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.074447683 seconds)
    (255/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.149110065 seconds)
    (256/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.066971125 seconds)
    (257/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.097025976 seconds)
    (258/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.067746724 seconds)
    (259/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.155497867 seconds)
    (260/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075695801 seconds)
    (261/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.066247385 seconds)
    (262/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.130531594 seconds)
    (263/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.074836368 seconds)
    (264/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.06623665 seconds)
    (265/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.067485457 seconds)
    (266/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.17868002 seconds)
    (267/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.075952753 seconds)
    (268/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.066189017 seconds)
    (269/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.091818326 seconds)
    (270/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.0677274 seconds)
    (271/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.06989683 seconds)
    (272/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.068284724 seconds)
    (273/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.06755592 seconds)
    (274/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.065978549 seconds)
    (275/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.068072464 seconds)
    (276/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.075421458 seconds)
    (277/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.066239756 seconds)
    (278/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.161124473 seconds)
    (279/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.070978088 seconds)
    (280/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.155504222 seconds)
    (281/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.071244679 seconds)
    (282/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.068177596 seconds)
    (283/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.066261298 seconds)
    (284/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.065901729 seconds)
    (285/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.084363097 seconds)
    (286/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.068985221 seconds)
    (287/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.067071958 seconds)
    (288/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.177197276 seconds)
    (289/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.069387634 seconds)
    (290/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.096844858 seconds)
    (291/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.066579537 seconds)
    (292/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.067841812 seconds)
    (293/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.067560964 seconds)
    (294/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.123980404 seconds)
    (295/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.066394377 seconds)
    (296/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.075085343 seconds)
    (297/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.070608305 seconds)
    (298/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.134942823 seconds)
    (299/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.066201042 seconds)
    (300/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075124437 seconds)
    (301/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.066462083 seconds)
    (302/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.067209773 seconds)
    (303/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.084427627 seconds)
    (304/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.076746488 seconds)
    (305/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.06903768 seconds)
    (306/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.070412307 seconds)
    (307/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.078946968 seconds)
    (308/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.126560494 seconds)
    (309/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067638534 seconds)
    (310/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.067987402 seconds)
    (311/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.069606138 seconds)
    (312/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.26958775 seconds)
    (313/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.073309219 seconds)
    (314/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.073413578 seconds)
    (315/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.069526827 seconds)
    (316/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.07300127 seconds)
    (317/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.069905558 seconds)
    (318/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.185115677 seconds)
    (319/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.071042231 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.080032661 seconds)
    (321/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.174505977 seconds)
    (322/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.06769841 seconds)
    (323/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.076226423 seconds)
    (324/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.067998751 seconds)
    (325/341) benchmarking ("sort", Int8, false)...
    done (took 0.152207542 seconds)
    (326/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.066876245 seconds)
    (327/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.078931786 seconds)
    (328/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.074751869 seconds)
    (329/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.076289854 seconds)
    (330/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.067267888 seconds)
    (331/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.06784682 seconds)
    (332/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.075038412 seconds)
    (333/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.066632548 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.067805878 seconds)
    (335/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.074858062 seconds)
    (336/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.068580496 seconds)
    (337/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.068285167 seconds)
    (338/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067010517 seconds)
    (339/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.071378107 seconds)
    (340/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.06818281 seconds)
    (341/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.067932017 seconds)
  done (took 37.424286724 seconds)
done (took 39.072786772 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.084990196 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.092335372 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.075607952 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.086717235 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.083246636 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.101387338 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.075808353 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.08057522 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.083439656 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.081451383 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.080540274 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.074478958 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.077338213 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.077558543 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.074800231 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090885213 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.083247038 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.076865074 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.076979739 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.066837923 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.076464568 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067648842 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.066875155 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.074216913 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.079192747 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.074482102 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.07638958 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.076955629 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.067627203 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.068680225 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.073174176 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.0768602 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.067007529 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.079202133 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.076147897 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.076340611 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.07794228 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.081166378 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.066808023 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.068296015 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.079512633 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.068102592 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.075691455 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.074023566 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.072478098 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.074790221 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075898128 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.07923237 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.090599666 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072232326 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.079206456 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.078550338 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.07855622 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.07329372 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.072866987 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.076240769 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.07444978 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.08996688 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.076845315 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072368978 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.078556154 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.076901764 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074322897 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075782005 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.076379825 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.079526306 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078977365 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074528692 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078735545 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075099246 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.067136818 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.076174352 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.072498539 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.067996533 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.078954006 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.08224493 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.06630745 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.07213038 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.07544356 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.075499213 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.067087997 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072039447 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.06645863 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.072418479 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071745334 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.073616976 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072602468 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074934615 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.066132584 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076472127 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.07537129 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.076119333 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.066342401 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.079286394 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.066734793 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.074210253 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.067650308 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.06767142 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.067149134 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074456402 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.06701596 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.072718499 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075685946 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.06622895 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.072285065 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.080684412 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.070394474 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.075222392 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.067018823 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.066685895 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077968052 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.079557888 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.067487893 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072437561 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066308855 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.073565169 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.066441749 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.067025951 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.067354719 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.067388586 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.072283974 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.067806469 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.07263637 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.073489451 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.07889352 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.067257435 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.072126027 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072205636 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.067404582 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.074109686 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.06832288 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.06758493 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.066543784 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.080439284 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072129402 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.067355836 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.073625914 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072270247 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.07577171 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.065874942 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.076534423 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073855479 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071858853 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.074174445 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065613238 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.07838041 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071547162 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071684103 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.066239351 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066726046 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.065482209 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.06652077 seconds)
done (took 13.009580005 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.072700494 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.108112676 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.075513395 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.084526025 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.080510791 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.069177745 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.071876061 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.084098991 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.071461736 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.087560471 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.096017656 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.090230285 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.09489295 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066975171 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.068314431 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.069013919 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.067057893 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075953888 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.082792674 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.091746028 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.096920664 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.068067134 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.070344641 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084926075 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.079038273 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.084109173 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.069748117 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.069232404 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.114357826 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.085179784 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.094165094 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.06777192 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068910516 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.081363071 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.082257283 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074477446 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.068616531 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071599899 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.068694252 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.068090666 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.070366914 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.08199601 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071429136 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071786071 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.069012204 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068857902 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.068320721 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.071799401 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.08153193 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.071347437 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075892521 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.080115959 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.06998516 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.068130693 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.066279018 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071623158 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.068247152 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.068691036 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.069020795 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067801679 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.068164978 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.070823685 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.068543447 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.068578483 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.071581819 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069988456 seconds)
  done (took 6.731682152 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.084591613 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093917431 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.082511698 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.083205703 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.067887501 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.068986533 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.069081031 seconds)
  done (took 2.305160419 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.069297819 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.076226341 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.080380315 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.080780085 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.090269471 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.077934043 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.068647075 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.100697886 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.06753737 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076773236 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.084337361 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.081234018 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.072029568 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.080549795 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.06887226 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.080822644 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.068743243 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.076028798 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.076277894 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.081699498 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073364301 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.101612215 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.084258042 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.071232714 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.084760118 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.078447892 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.073271486 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.071373806 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070929324 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.070681162 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.070233377 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.092771491 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.076032543 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.082422882 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069059222 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.067284917 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.07439591 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.07175131 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.078146936 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.077587047 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.07417123 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.070780602 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.071158488 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.070307975 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.072011253 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.075295084 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.071639253 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.070166212 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.070004643 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.076902698 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.067628963 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076368209 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.071557072 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.073218742 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072657837 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072869006 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07536683 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.068837505 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075672031 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.074956945 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067891899 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.081191341 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.079932942 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071763124 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.080191441 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.076546496 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.074819739 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071914993 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.068075688 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.067177193 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068848034 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.079663827 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.071454008 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.070384792 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068863839 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.073413357 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071890574 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.083541218 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.083217302 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.081374225 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.07092799 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.068048824 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071786957 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.083625014 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073318603 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068053659 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.069133203 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.067418433 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.073124826 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.068595756 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072855019 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.06818594 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.075173773 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.071128278 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.070487211 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.076525021 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.068139171 seconds)
  done (took 8.9964064 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.071340877 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069654087 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.070214428 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.069913396 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.069554895 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.06976924 seconds)
  done (took 2.211066226 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091354607 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068846424 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.080894381 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.069713204 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090971875 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.075624154 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.075422286 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.076835198 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.085586523 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.079368654 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.075640016 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.077490735 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.075299219 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.071203634 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.075138672 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.06973098 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.07532084 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.072096621 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.079060791 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.07135926 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.081983876 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.070580429 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071153485 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.081141705 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.072602386 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.069831996 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069759694 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.079291662 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.07931144 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.076691124 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.070110409 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.071476355 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.07658785 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.076214258 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.075053373 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076853522 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068358768 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.074187762 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071557002 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.071937591 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.077049887 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070603734 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.07089232 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073900803 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.076007963 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076997781 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.074269925 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.072121601 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.074711722 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073854864 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073798895 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.06921986 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.071672237 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073953565 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076933705 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.07669094 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.080834081 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.074596701 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.070327825 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.077038673 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.068343724 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.071352365 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.076015621 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.0714936 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.073286279 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.074306015 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076978129 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070779979 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070641106 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.0688773 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073867737 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.069034896 seconds)
  done (took 7.12743986 seconds)
done (took 29.150477236 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.548296598 seconds)
  done (took 2.28363809 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.591974356 seconds)
  done (took 2.368030913 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.808759755 seconds)
  done (took 10.587104373 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.298577262 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.32356197 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.740958751 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.134268187 seconds)
  done (took 3.31492903 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.757729663 seconds)
  done (took 2.543733806 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.231275321 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.222746199 seconds)
  done (took 2.244417599 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.346952172 seconds)
  done (took 2.123872851 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.154217246 seconds)
  done (took 2.930765874 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.22539655 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160092032 seconds)
  done (took 2.167293393 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.517008283 seconds)
  done (took 2.293262262 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.354524758 seconds)
  done (took 6.135520992 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.237355565 seconds)
  done (took 2.066797376 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.232399385 seconds)
  done (took 2.021507572 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.13541733 seconds)
  done (took 3.917629336 seconds)
done (took 48.781459172 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086378363 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.091626525 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.088264513 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082969769 seconds)
  done (took 2.108081031 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.076173632 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.072276643 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.075794521 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.076169494 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.073634347 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.07412683 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074876789 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070245176 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.073128524 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071706106 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.070255348 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071779854 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.075154983 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071767996 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.074508756 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.075587433 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.07189797 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.072356793 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073968601 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.072068933 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.074496675 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071827962 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.070054767 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.072025049 seconds)
  done (took 3.539734739 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.081019186 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073928495 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.077706301 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072973652 seconds)
  done (took 2.097664671 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078682035 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.078877832 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.087653528 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.09240008 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.079030877 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078921898 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.08552762 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.086500469 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.067609327 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.088636757 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069823255 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.068625801 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.068898077 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.087370592 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.08553185 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063991506 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.065267219 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.079033009 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.078027665 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.081801808 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.070693729 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.067142253 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.079216673 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.079435199 seconds)
  done (took 3.662000656 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080917543 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.067923972 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079647994 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.093129083 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.094124428 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.067096203 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080969507 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.095312284 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.129529078 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.067867567 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.073698219 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.067182435 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.106326558 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.067624089 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.082102631 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.111174613 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.113828503 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.071377418 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.10077038 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.067240482 seconds)
  done (took 3.519673232 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.07788966 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.071024451 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.072410555 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.06812095 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.078976062 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.074772311 seconds)
  done (took 2.249593539 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069869051 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.069544536 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068467307 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.06839506 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.073589228 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.06901448 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067558014 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.069665532 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.069646814 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.069124362 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.068382791 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.067810616 seconds)
  done (took 2.629500826 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.157325507 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070804709 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.072220259 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.0676626 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.072611295 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.068967545 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.083274782 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.070496195 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.086928048 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.06875687 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068716907 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.071284469 seconds)
  done (took 2.760141117 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102119303 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102375286 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14693984 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119051878 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116331132 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098276015 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.1209494 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095623854 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161933554 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.138252832 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118669487 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125537513 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088861542 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.0718359 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101400739 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102912175 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137825658 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074550282 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115099625 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.197790747 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116395425 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.113425769 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123238309 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11839163 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082370268 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123173935 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096421712 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103223865 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.157117246 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111256099 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12022035 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098813363 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.073709298 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072806135 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150886825 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.101916979 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138295878 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.094920102 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101945202 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090501682 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108873274 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.071627844 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.088200825 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.107289679 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086229675 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118163737 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.089536043 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104585371 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082617146 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.131928014 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107036829 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100009299 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089386753 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105218246 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13072266 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096667901 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112147083 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10857031 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084011216 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.120828232 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.102592983 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.256949261 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096216076 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083732933 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.162200744 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091153794 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.114518087 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114917342 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.084327841 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091665468 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104521163 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132548096 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109012908 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.108970205 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116796334 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.126238746 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112008812 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093723254 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.130458737 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095245151 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074915242 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.10616145 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.130941717 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087564091 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102265232 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130786338 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094465803 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109269431 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.094187524 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.11981076 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082032694 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.097630273 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.071552082 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.099587416 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108769397 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098450664 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113388724 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108644425 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079794206 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126601136 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110205931 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074349725 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119723467 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100373407 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154927753 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097652795 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.078159106 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101253353 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095344924 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.150792207 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086672904 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082063313 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100243683 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142679359 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09581406 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.171927936 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09814316 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1303572 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099482066 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089619926 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07725236 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.091435063 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103604875 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110412879 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104691995 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090570067 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.078992956 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089014783 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097719907 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.25617517 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08361097 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11591881 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103573673 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.077194648 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090307426 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.07904551 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127517121 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.079989072 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110520837 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126294541 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.080848029 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107294422 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.130178958 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.14001157 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.099551906 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109533122 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141327905 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117660392 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081622777 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.08555334 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109929238 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.143840504 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.117038218 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088030302 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.078685705 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101564423 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112716076 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.099414466 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.139478483 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128789595 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110324281 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09956213 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142270088 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119144556 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092916003 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098096754 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098222254 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.124918207 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108648032 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157039111 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096500802 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121122291 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116126696 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141921185 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.116265252 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091766848 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086708444 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09792754 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105519014 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108176248 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144739923 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.097907921 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.074976242 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094465201 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133773061 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078199133 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101735382 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.092291743 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.095275377 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120292428 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.086082717 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08377652 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.070437204 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103611758 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138381343 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.071386886 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114512526 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.281001082 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104996718 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.107353875 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.071754463 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101951247 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.14593803 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108233131 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141682343 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119478243 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102570593 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121269055 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.101269027 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.107387038 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08176098 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.130821436 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.136352708 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09878681 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092794843 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136743658 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119621209 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.136656295 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.099641918 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117762485 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.106815919 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101972305 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10540846 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102442598 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145346849 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123101287 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.126425712 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.117101594 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108199212 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109269254 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138643549 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084489874 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11806738 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.076996857 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114217576 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.079638768 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1091408 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.081238034 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.11426661 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081421425 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101608092 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.072026835 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.076282193 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.14314934 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.114477843 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091248391 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088171847 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.138623087 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.13324156 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.08302634 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104469549 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.137531411 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10327142 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105534072 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.111263394 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.087515326 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096527915 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.30680269 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081869011 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.084046953 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.100856206 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096338773 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110062884 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.086679004 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07746599 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138175044 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10636489 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097450283 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110310065 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097788318 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.124827542 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091980911 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089606717 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106732021 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105578636 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14215152 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.092469354 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.100374255 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.119707996 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082547585 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.095007552 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.072152479 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.086629392 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.078238759 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.111046782 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07829203 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110410174 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070688615 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132255348 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088203462 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.09450372 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.105254929 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099839931 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129972487 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094117258 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131054356 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092975389 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104407867 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109753064 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096578563 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112553771 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105844652 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097983188 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11129783 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097877679 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107334157 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111909343 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095923597 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143457096 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092038635 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122676003 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107607223 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109018709 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106242288 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119254664 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138607611 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11415332 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144691667 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076994017 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085083151 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106940209 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102098994 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148351921 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10529008 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.074385319 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119077459 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093204735 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098034976 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.269829023 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085759546 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144472981 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089904618 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.090084789 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115723006 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091276463 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100491269 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078612657 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097781518 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.103174528 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096662411 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097057116 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.136473262 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118920591 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115982734 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.135239397 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.103476624 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.09749739 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.122066186 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113453093 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113336822 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088723311 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089332331 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125778299 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102643326 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.130604237 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.102019569 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096203581 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102579913 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092449058 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101200035 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099165469 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.111636213 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08232435 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.078306008 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.070270042 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.074559654 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119420366 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111460422 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103586131 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100421698 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.075070317 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105681401 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099590043 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074439527 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089650443 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096287013 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.128256833 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.085756957 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094079923 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.116310882 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.093367894 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105466497 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.131876188 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131498388 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.102545388 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090843336 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144897173 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1299288 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08999693 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094891715 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.073395805 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081279421 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10392515 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147978383 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121168343 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.079883986 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086010559 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.079846254 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.252630309 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.074678828 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.090489818 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.091905469 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106215385 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122024308 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.115511885 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10605162 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078150404 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105873705 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10004084 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09516965 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098623904 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104108341 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107288359 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.125909426 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10297038 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099896364 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079046716 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.082230526 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07780169 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081945346 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104504313 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079685027 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078676569 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131870924 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.093907862 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106764101 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111358605 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087100625 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077938467 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134278766 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.071895812 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135872566 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.073272211 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08435438 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.083062663 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081654562 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095769722 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107537223 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0969243 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115039648 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108071632 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106949802 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113830701 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157617542 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073213925 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.152120353 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078121258 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077845883 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078644471 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113113902 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092057201 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105585367 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142171681 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091059283 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094618106 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079203746 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130070776 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.100398896 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104887891 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084769892 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080963245 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129771467 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081515041 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.073325749 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088311295 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.113622638 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.074629321 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.136618554 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.117056534 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082022669 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.281423743 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.635127613 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093747928 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.078457297 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091937194 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.151747575 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130769502 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086262158 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110537146 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.121634578 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09243292 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.117281162 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109696334 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.187424167 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077203673 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096766557 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.106007538 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101035151 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095062721 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.094542985 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.089826481 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.095178631 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.088863157 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081871097 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109993578 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089765911 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094121011 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126360743 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085566655 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.082705579 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132502189 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.106887 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.084143559 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090528372 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.102849813 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090466171 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093817334 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.071553517 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.146713828 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.124468804 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103584203 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.093472385 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109915426 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120755477 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090693249 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114241742 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.090761012 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.111268962 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086989774 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.080985314 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1042913 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.080295817 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079953857 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11899285 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.088031126 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.095040958 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106464547 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097928428 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116046504 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119822083 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113209758 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100113695 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08156813 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088575921 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.090096317 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077708901 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080811568 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.07675091 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.078742888 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109771097 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.253574346 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116413684 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116210022 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084942391 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106854259 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.103076101 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.111588625 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085697662 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103655993 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111354108 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092660933 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106336401 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103253944 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130490484 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147700287 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101564628 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125807202 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134934753 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.079503959 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.077727419 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.071104924 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.148495941 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081827127 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.083314424 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113600023 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13481539 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.08441718 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097344916 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.237248595 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08305194 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.084586704 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098893791 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071966639 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085298106 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110440808 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08750394 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082294099 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10135752 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115467108 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.120120947 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113960795 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091753843 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085461122 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083428521 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096047586 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.107627542 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.131380358 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092664145 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.077729007 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108612059 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105502716 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125865477 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.075251031 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082696376 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.131347706 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09481152 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105742755 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086715412 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122238652 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133366375 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092336907 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135250504 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072891539 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085101227 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091479398 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.127707561 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076947567 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091336469 seconds)
  done (took 67.099710537 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.164678461 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.182227003 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.117396822 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.13665266 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.238571712 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.244614305 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.171445808 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.156035493 seconds)
  done (took 3.402658197 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 0.070085184 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.085851862 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 0.103589478 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.086085335 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 0.068781357 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 0.070804798 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.208395272 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 0.085045412 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.068633868 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.109696181 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 0.078158134 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.071376006 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 0.368333592 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 0.070869983 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 0.072572221 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 0.078378482 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 0.069632399 seconds)
  done (took 3.709900601 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.374943491 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.63149609 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.328409858 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077297992 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.935068083 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.092311861 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.244017559 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.139900197 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.085442331 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.542795078 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.373050986 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.137688901 seconds)
  done (took 18.913893481 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.078840768 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.077777924 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.08088058 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.080773183 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.076767078 seconds)
  done (took 2.339474712 seconds)
done (took 119.848028557 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085817103 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.175771821 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.069894117 seconds)
  done (took 2.224518184 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.084944579 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.083718346 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.08365709 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.080667057 seconds)
  done (took 2.283183092 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.0770266 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.078560193 seconds)
  done (took 2.097579147 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227207858 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.178985513 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.092252571 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.086190938 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.083138136 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.08334744 seconds)
  done (took 2.215423781 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073886983 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.073947125 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073872436 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.074591086 seconds)
  done (took 2.245738552 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.072231134 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067849863 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.070161864 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.073321617 seconds)
  done (took 2.231197722 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.08767925 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085093512 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114402808 seconds)
  done (took 2.237503311 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085332901 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084802958 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.080316184 seconds)
  done (took 2.200312098 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.11155495 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.09895458 seconds)
  done (took 2.155074035 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.082679931 seconds)
  done (took 2.034209848 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.092191642 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.101386481 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.1418331 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.109718057 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.142661093 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127568894 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078831829 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079895533 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075612266 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074731808 seconds)
  done (took 2.970990061 seconds)
done (took 27.418666637 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080981785 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.376253132 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.361661063 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.089667556 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.675985561 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.358519838 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.01160053 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092770797 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.101603758 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070465346 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087337656 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.651074586 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.00456254 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.334596469 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.991029674 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.328661933 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.655718463 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073835094 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.073115195 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.073750178 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.999435213 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.073651374 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.073691261 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.072457099 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.654999952 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.377534428 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071218682 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.331408617 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069887197 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072836453 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.358934389 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071599233 seconds)
  done (took 16.646466573 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.072122574 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.125581252 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074551864 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.086289744 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072322612 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071560276 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.073329209 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.071133762 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113264512 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070451226 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090515629 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.073022906 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.077532648 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.075284639 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.094618437 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.074284895 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.075912426 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.075602725 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.074516334 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.075005933 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.093760223 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.073974597 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.075018461 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.07514107 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.075500021 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.087820638 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.074173276 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.071545563 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071913108 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073497373 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074553964 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.072121028 seconds)
  done (took 4.500310502 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.124674978 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.129226809 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075310323 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.11166124 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.120818232 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072361516 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.154848469 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.094169986 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.117112606 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070400748 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.088002451 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069998653 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105517981 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071687671 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.09139555 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070613466 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.07286719 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071650046 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071209952 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071391196 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.09058449 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070765255 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.07164312 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.072210956 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071981123 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085898169 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.072027175 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070993928 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070937418 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073493644 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.075122429 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.072144315 seconds)
  done (took 4.721560693 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.07249588 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.074452715 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.082112596 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082835665 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068904799 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.071707004 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.072910528 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.069521892 seconds)
  done (took 2.571611025 seconds)
done (took 30.406953329 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.082237113 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.070623084 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.073827239 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.090347949 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.076330382 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.072250671 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.067065843 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.07709333 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073118888 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.073562598 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.075750027 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.069120575 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.072759675 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.06681766 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073930538 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067771094 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.074372069 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072905774 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.072902452 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.074973161 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.074368414 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073939914 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.07792881 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.073396081 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.073326958 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.073214523 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.078185229 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074640924 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068976013 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.071757874 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.070621216 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.082918645 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.075207926 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074854318 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068801335 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.068773018 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.07299457 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.071055927 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.075244727 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.077666201 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.07124386 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.077412604 seconds)
  done (took 5.041606627 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089912462 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.096036859 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.087779313 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.084212059 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.108760301 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.084291139 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.092129465 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.082001071 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.080814698 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.090837728 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075895015 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.081059231 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.083276821 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.077691581 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.08085414 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.076881456 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.082120915 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.076117252 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.080735189 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.080751171 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.091721315 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073434489 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.081597674 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.082367953 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.076241951 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.082054042 seconds)
  done (took 4.164152004 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.07596962 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.090379771 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.09510999 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.144663544 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.112013342 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084894714 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.084525147 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.104432614 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.104057716 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.07058675 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.074674588 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.097254858 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099737287 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.077377651 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.109286363 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.088917516 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082971556 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.071947289 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076883029 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.104830627 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.093283289 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.089076808 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102972709 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.090140347 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069178527 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078957238 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.07671683 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.085139911 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077384457 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081900182 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.074284789 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.074494872 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.072706391 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.084524343 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.07643048 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.069619213 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.094236959 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.083563517 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.085427955 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.108922737 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.080100294 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071526385 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.100555804 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.135939797 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.069675596 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072238954 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.073731867 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.082427227 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.071086788 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100456073 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.088485168 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.06978898 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.089066539 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070946569 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.071662078 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086894209 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.07156144 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071505051 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.082014834 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.076446348 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.091553777 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.075141009 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.091141189 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069524275 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.081317217 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071445322 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071360274 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068216368 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.106592768 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.077155844 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.12241472 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070777365 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067863278 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.082123549 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.081441213 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076546385 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069924037 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089133021 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081841516 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073388509 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.082855381 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.073305675 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.073192206 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.105789936 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.069019522 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.068065477 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067585128 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071935908 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.073101269 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.07042375 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.08342005 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068996988 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.073089152 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.085077389 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.069574126 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.070379236 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.072039002 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.071185942 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.06921004 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.080336387 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073585474 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.071809868 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.082582834 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070922904 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.073695028 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.084926079 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.079113475 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.069181668 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.071350395 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.074436944 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071650297 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.074156948 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073041238 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071831704 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.077005574 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077418296 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075818258 seconds)
  done (took 11.530966258 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.167242365 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.155723897 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.071597282 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.150880384 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.078819387 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.074977524 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.151927743 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.090167179 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.070833735 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.072193427 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.070182647 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.097981316 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.093918894 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.105984529 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.075087905 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.071642658 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.096896355 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.104338605 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.153957727 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.149300346 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.094478879 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.078079069 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.073340654 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.07191471 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.071940428 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.079046452 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086878521 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.079335793 seconds)
  done (took 4.765892503 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.078608386 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.113769799 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074821489 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094515196 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.089753796 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070586984 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.072456754 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.07150592 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.088430573 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.077763442 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.070709801 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074934032 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.07455051 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.07134507 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071540273 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.077387409 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076875599 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069916487 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.07453031 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.075746393 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.08081564 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.096671953 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074865088 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070735777 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.073159455 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070488124 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.077090344 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.08029352 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069811823 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100653488 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067972722 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.07520428 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.085054508 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071891131 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.070500904 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070856795 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070588335 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.07037022 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.070954901 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068760391 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068424277 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.075208013 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.069043139 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.076282131 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.085068181 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.077687499 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.071581082 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.07361611 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.073492487 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.067485134 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.074113325 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073864343 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.07339756 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.079248966 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.074147029 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072988332 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.072033081 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099263987 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.076616248 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069562441 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069605849 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068631177 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.07221061 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.07874604 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.088060777 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.072427937 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068942758 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070401493 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.075365572 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.08477457 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.070024496 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075489477 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067265131 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070734087 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.07300755 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.073310718 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.072307981 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.06924651 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069651515 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070814177 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070727632 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070138659 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069885811 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072703939 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.068660621 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.06870284 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070634007 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.072128911 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.07689343 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.069591047 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.0731112 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.072309158 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.069609271 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.073107694 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.075618496 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.073072531 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.090071009 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.07936809 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.071001945 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068911369 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.085296938 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.072344012 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.069470808 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.076224332 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074840112 seconds)
  done (took 9.899711018 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.094265299 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.072424012 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.091454642 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096940718 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.080711602 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.076467041 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.085097398 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.07154509 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.087747692 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.06988187 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079489401 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.069255199 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.084305208 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.080044549 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.072132552 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.080959204 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.073152802 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.091659955 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.088129748 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.068884596 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.080198355 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.083435802 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.083329896 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.089241742 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.088399947 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.089361236 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.082757811 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.073004473 seconds)
  done (took 4.323971957 seconds)
done (took 41.68901697 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.05239501 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.211579513 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.039150907 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.255856248 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.096121795 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.187954326 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.173736847 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.043373188 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.300429231 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.075228098 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.36153859 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.461311894 seconds)
done (took 70.297421748 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.1207402 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.18220296 seconds)
    (2/2) benchmarking "String"...
    done (took 2.256974639 seconds)
  done (took 6.423478278 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.640766584 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.039261576 seconds)
    (3/3) benchmarking "different"...
    done (took 2.086396133 seconds)
  done (took 8.736040591 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.140495493 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.081300005 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.295624985 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.038134063 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.045092358 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.422666578 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.849666378 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.501901158 seconds)
  done (took 33.205676052 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.336374031 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.254495441 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.819846384 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.857469465 seconds)
  done (took 17.282409836 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.641496057 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.299473875 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.298494057 seconds)
    (4/4) benchmarking "different"...
    done (took 2.294995493 seconds)
  done (took 11.561423517 seconds)
done (took 89.555938451 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.068059812 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.038190493 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.067733997 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.103864535 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.035881758 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.038446653 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.037929197 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.038190157 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.089829638 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.14622375 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.035547243 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.040623635 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.039791299 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.066905164 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.92765908 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.098771043 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.045572993 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.041957122 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.059488298 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.077893799 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.041574139 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.036600782 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.538372132 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.229087705 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.67395298 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.152811793 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.367331093 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.503128064 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.043204403 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.019899487 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.069610248 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.0852016 seconds)
  done (took 212.825982164 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.024795969 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.810002696 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.898395176 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.029181376 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.292747174 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.217932232 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.167900489 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.385499434 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.026163943 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.047354907 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.179595003 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.025874913 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.204081687 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.018303992 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.021206341 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.026292651 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.188149378 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.204202072 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.023357704 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.236255891 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.044333136 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.003658424 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.950931416 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.156829486 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.062636343 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.108881499 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.045886712 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.042646745 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.213885852 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.168975863 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.064060281 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.05307409 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.194933654 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.879191037 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.04225339 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.056229745 seconds)
  done (took 178.07523382 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.213016812 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.034759884 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.026312583 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.081474055 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.165108661 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.029730868 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.707133227 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.037176084 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.233392789 seconds)
    (9/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.033112116 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.026300089 seconds)
    (11/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.026700482 seconds)
    (12/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.030079706 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.039959578 seconds)
    (14/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.12915453 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.031433702 seconds)
    (16/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.041180409 seconds)
    (17/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.029013989 seconds)
    (18/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.052952792 seconds)
    (19/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.026446496 seconds)
    (20/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.026841181 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.02711882 seconds)
    (22/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.028119293 seconds)
    (23/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.028240987 seconds)
    (24/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.027874589 seconds)
    (25/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.026874849 seconds)
    (26/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.027966789 seconds)
    (27/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.932613143 seconds)
    (28/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.270391035 seconds)
    (29/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.028920619 seconds)
    (30/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.027569037 seconds)
    (31/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.939951988 seconds)
    (32/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.042488921 seconds)
    (33/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.633730639 seconds)
    (34/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.033484782 seconds)
    (35/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.117336 seconds)
    (36/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.084812895 seconds)
    (37/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.137771476 seconds)
    (38/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.031566715 seconds)
    (39/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.245956624 seconds)
    (40/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.027890469 seconds)
    (41/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.111948769 seconds)
    (42/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.029348016 seconds)
    (43/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.02837641 seconds)
    (44/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.090983895 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.040447098 seconds)
    (46/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.029739426 seconds)
    (47/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.028239128 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.031551043 seconds)
    (49/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.036286365 seconds)
    (50/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.09105016 seconds)
    (51/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.294375999 seconds)
    (52/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.029754966 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.167423328 seconds)
    (54/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.554541419 seconds)
    (55/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.028474547 seconds)
    (56/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.02831665 seconds)
    (57/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.029574253 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.709107438 seconds)
    (59/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.030825708 seconds)
    (60/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.028726458 seconds)
    (61/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.03782774 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.037432732 seconds)
    (63/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.030002568 seconds)
    (64/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.030957365 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.414606682 seconds)
    (66/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.030355336 seconds)
    (67/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.102597069 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.477911318 seconds)
    (69/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.457775428 seconds)
    (70/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.031302249 seconds)
    (71/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.425431219 seconds)
    (72/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.098384963 seconds)
    (73/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.029511806 seconds)
    (74/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.029902265 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.031674321 seconds)
    (76/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.033027645 seconds)
    (77/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.031346064 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.030611025 seconds)
    (79/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.034556294 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.167696997 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.041560408 seconds)
    (82/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.146436415 seconds)
    (83/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.111411087 seconds)
    (84/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.031056666 seconds)
    (85/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.169953663 seconds)
    (86/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.033859106 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.042605865 seconds)
    (88/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.857963478 seconds)
    (89/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.101966292 seconds)
    (90/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.068932185 seconds)
    (91/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.865289097 seconds)
    (92/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.033520198 seconds)
    (93/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.403693262 seconds)
    (94/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.817448671 seconds)
    (95/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.032064125 seconds)
    (96/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.031176686 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.043875814 seconds)
    (98/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.034067127 seconds)
    (99/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.031768799 seconds)
    (100/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.032420813 seconds)
    (101/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.109591704 seconds)
    (102/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.032121744 seconds)
    (103/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.170056781 seconds)
    (104/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.795104748 seconds)
    (105/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.396227208 seconds)
    (106/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.036016544 seconds)
    (107/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.031492977 seconds)
    (108/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.040132084 seconds)
    (109/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.111702607 seconds)
    (110/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.170927834 seconds)
    (111/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.034753672 seconds)
    (112/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.094680311 seconds)
    (113/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.03977848 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.034856743 seconds)
    (115/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.032277645 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.137744533 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.019610564 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.032765432 seconds)
  done (took 439.741494279 seconds)
done (took 834.875772098 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 2.692817077 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 2.709913508 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.779257851 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 2.67045425 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 2.638819981 seconds)
  done (took 15.457413172 seconds)
done (took 17.425000591 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.062528782 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.0515746 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.039332357 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.088235623 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.055225531 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.044650016 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.07945979 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.077714101 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.063685143 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.045394437 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.095301734 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.050907765 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.065040763 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.068737281 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.109442662 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.07170614 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.049471358 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.042429639 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.090162465 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.051450384 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.050282037 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.046954237 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.0481909 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.083941286 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.115904922 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.058733395 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.048815685 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.084626041 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.046296505 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.083267427 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.103548167 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.067868655 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.080686481 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.112191405 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.094123888 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.11589804 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.059567461 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.104256699 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.054541496 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.121755114 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.091549288 seconds)
  done (took 86.942235449 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.044950035 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.180894763 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.255201343 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.076038 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.044121016 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.260663977 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.100505686 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.170933315 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.179561219 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.258250645 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.267311275 seconds)
  done (took 25.80915874 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.042714553 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.181228843 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.259182471 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.079493977 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.045389077 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.284312908 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.10817019 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.175838715 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.181718484 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.262415298 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.272941874 seconds)
  done (took 25.869517518 seconds)
done (took 140.590650642 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.423370223 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.07484034 seconds)
  done (took 6.467706535 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.062399345 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.196761993 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.040494203 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.042479617 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.041826743 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.041948394 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.042330546 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.041140814 seconds)
  done (took 18.477757849 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.038293283 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.039528077 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.040460307 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.039763522 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.040240253 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.040775455 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.039689677 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.040655079 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.039739831 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.041323816 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.040262215 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.040346276 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.040461358 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.042392646 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.040516325 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.039626002 seconds)
  done (took 34.614618709 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.042894315 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 2.041745517 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 2.040662078 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 2.042288302 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.039504216 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.04061302 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 2.039907247 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 2.03946739 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 2.040694475 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 2.04190363 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 2.040722732 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 2.040646136 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 2.040014063 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 2.041938581 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.041677048 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 2.040950312 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.043236109 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 2.04258009 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 2.046446414 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 2.041907532 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 2.042949282 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 2.040959578 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 2.041481114 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 2.043352513 seconds)
  done (took 50.969427529 seconds)
done (took 112.51080044 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.327676173 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 4.038247482 seconds)
  done (took 9.337207273 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.045024854 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.043465443 seconds)
  done (took 6.137814663 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.042773734 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.041381793 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.042128334 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.042368606 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.043084536 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.042446358 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.042313574 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.043938937 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.044127835 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.04345991 seconds)
  done (took 22.399305666 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.041600396 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.042376055 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.043965668 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.042246359 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.043140771 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.04469064 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.044401582 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.044361732 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.045532053 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.043620498 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.044102312 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.044124751 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.043734815 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.045853138 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.044728865 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.04463379 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.043726755 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.044152463 seconds)
  done (took 38.765055328 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.042981994 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.043393235 seconds)
  done (took 6.059948115 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.043079324 seconds)
    (2/7) benchmarking "second"...
    done (took 2.042986513 seconds)
    (3/7) benchmarking "month"...
    done (took 2.043332162 seconds)
    (4/7) benchmarking "year"...
    done (took 2.043522111 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.043975559 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.044099114 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.043183496 seconds)
  done (took 16.276949415 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.043687175 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.186256613 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.238016191 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.644442678 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.043694904 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.044598757 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.907169449 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.045025917 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.044795521 seconds)
  done (took 22.169765832 seconds)
done (took 123.122452388 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.882583994 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.047676948 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.301462934 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.131388231 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.113135508 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.383049537 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.084308139 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.645620745 seconds)
done (took 44.563608143 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.144230101 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.039597194 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.066318592 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.071346664 seconds)
  done (took 23.14532136 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.040178391 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.368663689 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.062005798 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.981536662 seconds)
  done (took 23.433284322 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.418734323 seconds)
    (2/2) benchmarking "read"...
    done (took 2.391403497 seconds)
  done (took 6.778779972 seconds)
done (took 62.477672937 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.036378566 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.036236856 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.036453137 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.036199312 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.036853719 seconds)
    (6/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.036262535 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 2.035982774 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.038711429 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.036806842 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.036453324 seconds)
    (11/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.037149234 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 2.037769269 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 2.039088133 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.036416609 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.035680539 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.036821324 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.03695886 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.037728995 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.036427923 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.037013278 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.037142231 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.037962293 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.037651051 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.037611645 seconds)
  done (took 50.851891801 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.036997754 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.037588116 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.040322195 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.038689877 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.036783871 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.036723789 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.038281437 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.039823694 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.02465134 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.03774007 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.038071833 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.040153932 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.040345984 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.038341062 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.039129924 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.039622168 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.039809389 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.042531642 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.023582602 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.036311045 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.038130728 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.038600956 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.039742769 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.038171944 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.036713112 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.037192589 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.038602458 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.04241612 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.03661678 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.04045991 seconds)
  done (took 63.099444341 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.043123153 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.037291715 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.036152377 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.035985445 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.038186014 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.039472304 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.036040067 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.036007723 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.037246802 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.036080808 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.03726537 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.035405794 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.035569029 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.034417582 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.034270168 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.040506472 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.031615738 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.032384108 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.031280003 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.032832129 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.035765961 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.029424646 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.030816539 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.029456459 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.030108593 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.030502553 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.028764689 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.028714202 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.029496303 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.028905902 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.033789643 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.028107408 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.026941087 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.026415126 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.028524828 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.027599243 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.02599504 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.026451878 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.026427047 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.026549164 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.031082569 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.024865257 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.023879494 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.026130894 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.02462209 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.02952775 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.025049508 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.023835669 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.025357142 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.025137003 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.024945808 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.026342992 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.024206898 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.024987622 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.025447639 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.024902966 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.025244942 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.024956837 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.024427254 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.026069206 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.026575706 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.026530064 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.026587892 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.027224183 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.026116274 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.026528419 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.027570966 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.026702442 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.0258771 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.024654712 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.025698284 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.027373974 seconds)
  done (took 148.096937376 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.025835462 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.02634534 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.025800989 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.027501884 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.02777074 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.026047458 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.026858997 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.02635772 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.026511406 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.027098005 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.02541531 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.014967334 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.026220084 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.027317713 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.026908054 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.026890418 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.028319261 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.027982134 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.027084444 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.026311019 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.028057947 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.027946358 seconds)
  done (took 46.533287257 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.027226371 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.02799372 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.029043142 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.028308332 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.025895833 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.026817845 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.027713623 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.027991494 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.026871369 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.027818626 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.028303208 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.026938214 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.028734015 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.028108143 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.024542316 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.028954749 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.028459418 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.028205823 seconds)
  done (took 38.453325455 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.028023913 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.027955427 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.02897354 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.029011792 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.028804148 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.029653773 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.028815185 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.028380176 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.027649098 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.02893856 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.029750794 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.029292522 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.028932539 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.029109226 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.029937215 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.028904965 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.029492021 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.030802875 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.02915772 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.028471552 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.030205861 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.028993524 seconds)
  done (took 46.595566155 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.03053466 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.030635583 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.030751077 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.030328144 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.029523677 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.029118811 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.029300623 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.029493372 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.030716728 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.030434312 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.029594113 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.030169307 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.029810138 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.030343742 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.030129636 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.031837146 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.030562386 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.031672479 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.029845528 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.030824736 seconds)
  done (took 42.561617944 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.031783245 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.03209188 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.032678516 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.031158405 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.031281469 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.033494928 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.031552504 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.033167861 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.032362487 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.032366754 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.033324686 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.032180303 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.031868879 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.032830583 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.03164748 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.034105593 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.03263916 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.033426524 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.033401226 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.033927427 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.033200505 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.034270887 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.033658265 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.03268288 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.033196608 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.033026176 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.034550102 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.033607785 seconds)
  done (took 58.879146229 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.031458573 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.030927423 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.03171837 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.033861829 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.032804742 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.032946004 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.032951119 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.034149806 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.034204915 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.033072511 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.0326962 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.034040651 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.033928368 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.031237461 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.032858543 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.03373526 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.032437668 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.033552563 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.034135305 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.033583731 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.032900828 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.034042848 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.033604445 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.033310895 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.034139809 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.034267305 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.03375051 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.033980151 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.033899952 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.034375944 seconds)
  done (took 62.960029741 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.052611046 seconds)
    (2/2) benchmarking "in"...
    done (took 2.054753253 seconds)
  done (took 6.07019702 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.034348945 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.033733197 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.035259305 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.035017678 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.028252304 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.033487223 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.033944448 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.034719123 seconds)
  done (took 18.230433345 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.03475216 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.038004029 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.035320097 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.03645644 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.03568105 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.042471362 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.035960028 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.035749301 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.037094458 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.032338294 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.038396588 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.04213478 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.046479392 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.040318089 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.036132365 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.03616598 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.037780862 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.037717409 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.037410728 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.035044108 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.039813522 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.036745484 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.037196488 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.036971105 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.036023561 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.041474215 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.047947764 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.037876051 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.038676072 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.037324871 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.044073433 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.036970749 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.039610076 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.038897423 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.038389701 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.037065656 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.045150976 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.037478021 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.037899229 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.036501527 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.039915601 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.036149977 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.041451547 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.045674949 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.040958146 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.037424075 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.037164603 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.038440944 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.037242017 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.041178666 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.049433934 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.038533748 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.038889712 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.039266517 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.039967918 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.042709853 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.036306571 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.039646507 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.04445546 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.045698984 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.044352773 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.059955347 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.0478931 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.03897785 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.038911075 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.048397492 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.067498158 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.038524179 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.040869215 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.036850037 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.050128751 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.03650369 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.035932453 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.035582166 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.050109156 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.053999054 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.035999973 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.035682137 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.03677398 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.036477293 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.04150633 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.03729915 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.036194232 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.036926118 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.045084361 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.065572706 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.036389658 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.035886131 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.039351827 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.03672125 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.044955904 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.03739211 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.033970014 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.036476731 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.036592594 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.037351404 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.03453563 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.034245428 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.032578879 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.045983305 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.03344607 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.032661421 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.036238414 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.042833966 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.039838551 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.034419677 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.033152861 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.033286157 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.041738474 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.034760007 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.030303528 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.027538088 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.029775038 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.034962362 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.031935614 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.032148211 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.037506313 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.037334264 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.029826593 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.036252811 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.030947203 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.030347721 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.03735632 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.057004384 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.03093736 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.032004552 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.031922869 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.043237656 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.031525499 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.035605775 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.028967761 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.025994836 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.026321131 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.028821217 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.03110135 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.026275499 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.026244356 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.026160756 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.025758548 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.030294498 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.026803414 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.027045699 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.026815022 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.025961456 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.03557311 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.025951678 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.028138286 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.032375166 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.024985207 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.032740518 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.024776568 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.027912145 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.025536943 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.027381198 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.028737557 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.015182489 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.021810898 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.026672615 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.028992694 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.030047718 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.025233309 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.02467616 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.028708861 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.027100099 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.030059753 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.026038901 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.025073251 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.027568948 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.027378231 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.043265615 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.027539091 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.025749177 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.028715581 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.028217011 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.023955562 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.024834131 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.023896753 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.023103929 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.031078482 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.034101313 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.027265298 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.034718844 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.022810969 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.034011913 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.02443045 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.025946393 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.02583087 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.024572169 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.025989428 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.02395289 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.021896316 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.02691787 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.044359926 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.035886763 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.024984441 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.02375774 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.028352741 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.027785069 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.035328982 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.021464462 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.024261565 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.026634713 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.023159158 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.025547778 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.023279769 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.027758141 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.023638673 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.024272631 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.030776414 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.024439008 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.022451248 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.025619921 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.023921786 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.029579249 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.023358048 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.023748327 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.023392939 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.024116792 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.033189211 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.025991779 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.023391463 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.026138332 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.025649938 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.021667591 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.026018318 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.025963094 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.027025345 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.023608749 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.02598235 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.032301509 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.023455727 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.024504926 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.024406757 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.024772361 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.02818617 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.024606158 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.029810402 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.033192357 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.02775086 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.024004724 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.032741422 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.025212085 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.028264612 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.025697963 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.027618849 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.028015198 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.027757911 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.026280324 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.022021826 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.031633877 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.024143111 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.027260421 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.026406269 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.032566722 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.02692008 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.027995798 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.026922636 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.031781361 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.036744826 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.035434323 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.026437647 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.029925458 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.032237028 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.029468406 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.030177369 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.028576229 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.037022759 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.03537766 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.026169914 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.025455621 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.02912271 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.028762076 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.030126741 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.029666776 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.036251177 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.026385014 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.030686946 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.036927358 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.027563745 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.028312187 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.034482487 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.02870918 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.030402597 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.028565818 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.027357484 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.028607704 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.025974015 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.033355006 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.028428421 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.03029128 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.032815331 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.029943942 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.031224471 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.029957174 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.037571546 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.029541656 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.031279779 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.037947711 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.029313882 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.026785206 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.028536752 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.028280247 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.030874374 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.027745958 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.027160592 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.02920996 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.02978585 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.032480457 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.039465954 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.032709223 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.03882486 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.031386019 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.040558287 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.02838484 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.030751767 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.029886686 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.033705268 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.037253277 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.029553942 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.029860687 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.037022992 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.0351095 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.028525022 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.035585015 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.029633001 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.031988511 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.03638125 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.033436819 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.036179473 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.033593214 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.031266248 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.033314398 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.03190154 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.03173086 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.034215011 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.032524535 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.037050039 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.03124117 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.031258205 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.033914046 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.032001645 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.033386894 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.032600728 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.031421622 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.031042688 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.039380294 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.034260962 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.031487424 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.035142204 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.032147512 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.041705253 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.035104676 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.033650266 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.033078418 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.032215411 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.034950449 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.033081954 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.03405197 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.032646082 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.032871206 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.034167129 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.044919443 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.039669725 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.036367407 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.034011611 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.033952359 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.033674331 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.041470043 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.053341342 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.033256992 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.034318483 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.038353486 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.03809303 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.034923723 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.039150849 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.035507468 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.042466414 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.034617172 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.033150936 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.036384476 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.045037037 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.034364868 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.033308484 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.033158545 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.038464658 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.035408486 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.034526502 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.035258588 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.038103642 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.03372433 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.044941602 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.033946955 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.036292502 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.034693966 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.034279503 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.038580269 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.034489294 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.035753683 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.036418587 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.034623844 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.036393393 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.038919754 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.040517037 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.032926149 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.037141959 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.045064891 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.035704459 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.034643007 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.03868132 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.036792431 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.03693696 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.035714441 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.035885981 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.038829891 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.035068331 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.036139184 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.037424813 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.044817598 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.037914961 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.035621628 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.0353939 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.038084561 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.035544615 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.035821683 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.036981382 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.045436708 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.039480551 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.047301117 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.045725032 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.035766032 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.036765497 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.040832755 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.04470272 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.038786874 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.034759967 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.035733373 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.038989668 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.038518127 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.037888386 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.03674474 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.037455449 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.042400242 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.036215551 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.037628172 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.036477014 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.036579226 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.03887801 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.039260044 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.043174853 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.036864048 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.037267764 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.036494989 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.039647694 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.038856292 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.00326826 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.038742914 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.037545275 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.04046071 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.039482766 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.040462652 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.036155979 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.038993629 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.039246748 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.035864972 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.03726176 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.038142454 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.036570339 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.03834904 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.04119039 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.048190401 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.037996072 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.039896354 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.039663442 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.043595308 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.044078082 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.039935658 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.040590697 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.039777721 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.046819995 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.020465572 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.026395918 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.039438211 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.03902069 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.043743481 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.044579761 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.044052274 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.040121263 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.039673451 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.043646798 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.042262398 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.047201706 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.044104397 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.042333425 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.052768942 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.045154082 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.04219799 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.03996282 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.040237931 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.041985401 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.04072059 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.044702248 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.042246125 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.044011279 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.043370044 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.042691875 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.040913241 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.042134888 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.040231967 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.03988398 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.04369577 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.050732263 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.049807831 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.04000849 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.042795917 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.042471168 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.042756277 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.05135833 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.0416313 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.041156243 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.042209841 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.043052437 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.040998874 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.046010177 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.048804644 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.046873688 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.043633903 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.045450755 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.05848976 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.044246493 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.050184677 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.070973798 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.045311688 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.043521465 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.041539898 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.043496797 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.04293542 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.045368536 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.04248363 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.049770649 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.043662972 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.042777155 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.050928698 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.044855179 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.04349792 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.044120678 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.042840513 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.049042618 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.0463973 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.050659216 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.043355943 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.04332407 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.044856763 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.049280786 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.043271281 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.042810022 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.043920923 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.04580048 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.049134532 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.043024888 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.051851693 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.044840757 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.044837467 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.062608333 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.500418422 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.044365347 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.043983731 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.045151372 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.051241087 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.047602419 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.043566719 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.046633444 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.050858207 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.047647735 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.050936636 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.046309267 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.045272838 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.050036022 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.045850766 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.045260067 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.056474488 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.053746224 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.048871149 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.045319279 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.050829812 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.041674495 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.022954203 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.055430026 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.046267622 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.046011549 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.045918312 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.045066453 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.049485501 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.045245066 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.048352148 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.052297385 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.045477434 seconds)
  done (took 1216.014333454 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.044020887 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.046152622 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.045339379 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.044296327 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.047389368 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.045003604 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.045994311 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.045366623 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.04573945 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.050848885 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.046143383 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.046345607 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.046071412 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.045440927 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.050500782 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.046423944 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.046072313 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.046479676 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.046202755 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.053923001 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.04469996 seconds)
  done (took 44.952594562 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.045923757 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.04883619 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.047988073 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.047172838 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.046170246 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.046986024 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.050873038 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.048753002 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.046440679 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.047028281 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.047109264 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.052292842 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.04617734 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.046796641 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.046556085 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.046966231 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.049812207 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.04629196 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.046670237 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.048184145 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.047213007 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.052601623 seconds)
  done (took 47.026495842 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.047691398 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.048389221 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.048390641 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.050258957 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.04856291 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.048332988 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.047905531 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.049038302 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.050206931 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.048160662 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.040529891 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.056723477 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.047690995 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.054140271 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.048816268 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.05048861 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.194840237 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.049403468 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.053518001 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.048457541 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.048857371 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.054833443 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.051355126 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.049778898 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.049344174 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.050102129 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.0486882 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.052395224 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.049099107 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.050173802 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.053896651 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.049228008 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.052346642 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.051765555 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.048166536 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.051036781 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.053747544 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.052671404 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.048733755 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.04893297 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.058168545 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.072160644 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.053230303 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.053597767 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.057212867 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.050870042 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.050560126 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.055899888 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.059697121 seconds)
  done (took 102.633382099 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.051390638 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.050095917 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.053690763 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.050547221 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.050963855 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.05111096 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.050276543 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.049637086 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.05106019 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.050807951 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.052953202 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.055054975 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.051209547 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.050288425 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.051145617 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.052224255 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.05494775 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.053584574 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.051053036 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.049883104 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.05322913 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.057628291 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.051215235 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.052488966 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.051729008 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.052526797 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.054472562 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.05235777 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.053603829 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.051764883 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.050747291 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.056933053 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.053255 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.053235067 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.053348591 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.052692506 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.058462749 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.052539062 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.052061612 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.053273012 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.052423358 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.058692489 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.053992632 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.055818877 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.053442586 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.052117589 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.057206189 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.053533424 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.054687548 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.053244411 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.053767177 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.056454948 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.054900221 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.055647326 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.053357617 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.0598828 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.053105845 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.052868948 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.053951847 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.054607266 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.05749756 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.053953426 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.053356362 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.054021235 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.053766908 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.05983763 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.053588982 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.053584866 seconds)
  done (took 141.61186392 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.054978912 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.056841476 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.055089784 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.056320027 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.055446918 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.05505935 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.058390452 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.055705954 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.055401397 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.057797342 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.05624116 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.057329976 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.056448659 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.055019929 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.055368739 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.057658783 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.062673467 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.057762331 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.055716355 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.055852166 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.05677958 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.061067727 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.056424032 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.056164466 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.057239238 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.059584857 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.059607195 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.057099187 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.057639702 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.057384269 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.05617732 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.056690075 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.055843009 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.057034614 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.057618041 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.041160463 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.056841183 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.056596801 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.057486011 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.05661105 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.057393785 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.056809391 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.057422488 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.058158497 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.05647857 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.056787426 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.05754818 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.056480025 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.055904388 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.058191881 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.05781944 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.058120062 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.058021705 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.057601381 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.057567628 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.056107459 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.056890868 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.056730913 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.058088871 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.056875416 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.051937615 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.052701019 seconds)
  done (took 129.494035895 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.058395571 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.057440386 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.056516349 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.056327112 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.057061758 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.056747342 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.044591462 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.056877464 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.056804604 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.057279315 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.057451578 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.046108629 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.059907051 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.058809911 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.057597053 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.059374239 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.058321066 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.059312629 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.058663952 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.058869611 seconds)
  done (took 43.116811491 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.058964227 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.058988137 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.059130776 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.059676467 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.057797505 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.059423107 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.058486569 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.058563554 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.060979189 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.061073314 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.059356835 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.059753301 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.059439585 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.058792171 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.058540387 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.060342623 seconds)
  done (took 34.932285642 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.059514974 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.05995336 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.060549832 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.059983208 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.059765508 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.059103799 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.05962964 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.060107597 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.060908616 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.060106416 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.060431718 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.060314184 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.059444917 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.062443173 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.061021687 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.060155803 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.060378598 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.060022547 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.060889633 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.062218138 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.06197293 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.060437608 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.061309311 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.060467944 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.061071395 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.062281315 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.061657852 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.061113203 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.061636498 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.060764413 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.061638977 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.062082232 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.060521595 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.062076715 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.062854565 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.061429289 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.062005114 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.062395669 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.060798964 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.061654962 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.062801879 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.053990659 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.061997843 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.062140041 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.062773208 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.062766011 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.062960025 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.063531395 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.063326507 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.063050062 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.06309229 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.061713225 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.061765177 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.062553365 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.062586299 seconds)
  done (took 115.35549734 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.062578866 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.062235058 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.063233077 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.062599161 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.062165023 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.071248994 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.063245365 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.064247524 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.063704964 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.064475511 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.062511506 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.062237343 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.062809053 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.063047985 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.065893684 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.0633017 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.06426536 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.062963716 seconds)
  done (took 39.134886122 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.063916346 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.064503189 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.063743332 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.062589179 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.065400837 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.065099562 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.063641977 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.06436649 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.06484114 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.064455674 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.064401188 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.065005237 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.064041515 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.064210301 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.065229405 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.064984469 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.065306134 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.065586699 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.06502341 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.070084878 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.064848013 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.06486492 seconds)
  done (took 47.415659738 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.064801769 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.065260661 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.077615321 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.082695662 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.083296475 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.096199094 seconds)
  done (took 14.459294347 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.064423029 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.063818059 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.065983064 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.06658118 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.066482275 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.064922264 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.065550583 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.065923172 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.06656773 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.06739876 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.065128703 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.065417224 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.064772387 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.064640296 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.067163714 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.064932781 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.065088808 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.0654491 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.06485808 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.069360136 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.065935354 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.066166152 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.066544346 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.067346647 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.0648005 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.067845039 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.06674158 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.067165014 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.068237404 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.066389053 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.066589035 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.06805508 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.067294834 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.06770333 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.066348126 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.067087856 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.068053142 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.066200938 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.067251671 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.06804921 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.067327094 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.068164907 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.068091866 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.071512393 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.066748482 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.068117517 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.068578132 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.066900208 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.069825539 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.067929947 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.067980623 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.06648805 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.06773032 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.068036752 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.068107375 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.069699089 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.068631279 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.069713889 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.068851256 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.067404392 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.068182053 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.069388543 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.070209251 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.069104351 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.068191539 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.069744924 seconds)
  done (took 138.428399929 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.068066375 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.068920079 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.069290386 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.069260479 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.068333828 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.069889327 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.069366312 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.067889808 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.068597128 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.069064303 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.072066248 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.070648869 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.069425741 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.068901187 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.068537992 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.068954859 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.069329066 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.069030168 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.068946746 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.069324551 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.069016859 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.069343029 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.07088842 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.069696882 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.070296147 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.070430433 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.069900107 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.06914409 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.069891376 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.071090723 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.070219392 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.070029376 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.069698123 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.069486013 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.070703284 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.069119689 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.070855156 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.071117102 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.07153229 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.071214294 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.071247746 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.07295238 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.071420653 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.072497372 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.070309625 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.070657412 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.072084824 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.070894379 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.070703669 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.070969549 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.071472684 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.071556791 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.07179909 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.070102358 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.069917306 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.069570731 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.07123187 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.071621988 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.070456418 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.071135229 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.071327529 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.072835416 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.070316648 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.0713016 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.073412721 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.072248441 seconds)
  done (took 138.638435883 seconds)
done (took 2837.522290826 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.135304226 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.199866135 seconds)
  done (took 16.330568607 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.237068047 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.190188463 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.074167691 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.156535986 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.074955506 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.080872242 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.096982406 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.075238601 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 2.075395743 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 2.07632597 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.07390297 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.260540651 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.078728359 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.074669466 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.074747076 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.168604808 seconds)
  done (took 55.871451391 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.079712661 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.078627779 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.091226976 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.07957189 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.080160173 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.090793418 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 2.108560685 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 2.083785413 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 2.114598978 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 2.096640433 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.149592123 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.092543135 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 2.078964255 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.130925283 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 2.096094018 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.095232412 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 2.17007156 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.155134515 seconds)
  done (took 39.87079467 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.1576345 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.083614607 seconds)
  done (took 11.247526753 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.085130469 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.10908923 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.083825052 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.077910722 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.096062529 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.08904338 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.104099865 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.08673272 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.102388487 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.096623085 seconds)
  done (took 72.957946351 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.086749117 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.081299478 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.081575228 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.078664258 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.075303462 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.080378797 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.0790975 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.07364473 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.766528086 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 2.114726835 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 2.090014898 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.087957743 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.078381004 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.080290457 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.076027854 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.103252117 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.236523185 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.07444027 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.075516934 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.083382344 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.079525875 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.155192267 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.091233436 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.079478873 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.111833981 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.768978235 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.089383532 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.083796167 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.223156221 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.076004606 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.079640255 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.237243826 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.086076704 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.429017345 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.404210624 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.084227848 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.089018017 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.085987199 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.076717088 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.24020834 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.080205035 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.085430971 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.993914404 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.391533232 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.169342442 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.126025178 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.458066451 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.08416604 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.080260108 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.11331888 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.083118019 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.08083504 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 2.096161431 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.591868417 seconds)
  done (took 144.511565016 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.07812894 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.312251876 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.229185803 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.077477477 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.334094847 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.287099887 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.0799774 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.122113066 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.082539856 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.281153703 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.32904104 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.180405911 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.081326272 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.078300645 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.080778933 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.077471587 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.22588888 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.143599589 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.080213452 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.076681812 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.101341627 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.280624413 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.199959988 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.082335356 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.10342054 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.283370274 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.199160202 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.18270507 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.862054425 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.077669707 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.139704513 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.081332174 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.080158559 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.077385348 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.229799054 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.172228486 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.163887065 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.081256878 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.078631966 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.079721873 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.751468519 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.280474582 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.175415844 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.201055219 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.330189206 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.291955504 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.692542454 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.078394759 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.706306412 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.2443429 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.28467115 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.288533111 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.197180476 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.083890965 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.372897413 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.079528249 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.077935233 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.300447675 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.301293741 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.179971064 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.083712935 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.079464194 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.079923816 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.318691311 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.083220894 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.171502394 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.08431522 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.080728496 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.173056749 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.183437998 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.308749528 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.300200832 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.109610355 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.414464298 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.57463657 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.283537937 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.143706972 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.304428659 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.084147508 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.080530571 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.158751042 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.922257875 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.329937101 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.322353144 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.279905971 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.110771392 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.73035517 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.080433172 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.268222974 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.270562505 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.316167644 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.331554218 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.31485751 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.451054876 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.080363879 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.081547254 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.396995783 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.197222241 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.033322649 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.432647114 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.309102553 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.6074024 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.108012644 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.366248384 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.207466194 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.084894586 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.730367523 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.082857668 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.287832126 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.121138054 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.085046885 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.082754078 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.272679591 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.988333934 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.083204194 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.789812591 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.141361352 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.085022209 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.287464413 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.086706713 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.326671739 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.086762547 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.314948327 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.987687332 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.112547647 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.256162356 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.330100626 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.711288368 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.395208064 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.325022795 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.195243205 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.305589863 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.889172388 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.085442709 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.345243346 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.084384095 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.083605496 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.253280034 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.08609278 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.225459484 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.08456683 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.349000933 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.103614079 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.309796035 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.084831928 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.324090953 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.114133885 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.134545036 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.087155623 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.207831428 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.088377743 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.925730483 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.241348477 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.086907572 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.085798361 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.67741658 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.084741113 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.238620594 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.312200497 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.105364419 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.153193073 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.649712846 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.078991227 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.166589394 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.10636287 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.712157031 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.087714962 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.328528274 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.066874058 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.568997256 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.083637631 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.319867904 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.268437442 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.088831958 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.087187884 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.926972694 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.086247344 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.086008917 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.241563669 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.481409156 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.990135044 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.283503716 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.089519077 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.212574242 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.091449697 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.167282959 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.428178566 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.085637375 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.086549686 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.086890371 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.087303946 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.088032109 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.296824641 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.113411489 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.542165627 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.222193102 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.342129771 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.39344785 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.284342401 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.125049373 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.093226405 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.31029771 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.089119961 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.148481854 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.088110723 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.106649532 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.314802069 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.090195247 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.292148912 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.321190434 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.970538176 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.133069669 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.089710313 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.087530364 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.998837792 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.230473016 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.173795036 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.08996854 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.089421627 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.200677354 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.2058399 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.270711223 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.905911826 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.253183241 seconds)
  done (took 948.791533154 seconds)
done (took 1291.582839996 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.088135965 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.089792313 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.093659145 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.09154646 seconds)
  done (took 30.376403998 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 2.091614069 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.09044907 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.091529818 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.091199733 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 2.09115342 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 2.090641165 seconds)
  done (took 14.560820341 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.089536922 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.090051167 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.09046862 seconds)
  done (took 23.283818745 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 2.164393073 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.501686724 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 2.230305794 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.526608111 seconds)
  done (took 11.437384281 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.091078756 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 2.092762666 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 2.093283288 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 2.093433394 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 2.092942371 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.092710416 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 2.091732768 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.088785143 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 2.087263735 seconds)
  done (took 20.839276557 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.273074696 seconds)
done (took 106.788510294 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.106949117 seconds)
    (2/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.349244432 seconds)
    (3/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.212774904 seconds)
    (4/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.220816367 seconds)
    (5/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.101744096 seconds)
    (6/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.022861455 seconds)
    (7/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.089692458 seconds)
    (8/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.158968627 seconds)
    (9/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.174314384 seconds)
    (10/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.17650112 seconds)
    (11/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.251694376 seconds)
    (12/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.691999285 seconds)
    (13/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.11458742 seconds)
    (14/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.844630612 seconds)
    (15/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.088767003 seconds)
    (16/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.105449475 seconds)
    (17/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.720181253 seconds)
    (18/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.306001086 seconds)
    (19/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.003507318 seconds)
    (20/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.096727234 seconds)
    (21/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.593328835 seconds)
    (22/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.242707871 seconds)
    (23/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.308262885 seconds)
    (24/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.183466477 seconds)
    (25/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.824500506 seconds)
    (26/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.181071431 seconds)
    (27/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.463853966 seconds)
    (28/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.953608561 seconds)
    (29/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.299841894 seconds)
    (30/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.008181981 seconds)
    (31/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.179800839 seconds)
    (32/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.027895314 seconds)
    (33/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.892492829 seconds)
    (34/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.963660075 seconds)
    (35/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.094039877 seconds)
    (36/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.200025111 seconds)
    (37/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.415420809 seconds)
    (38/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.174759442 seconds)
    (39/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.416071246 seconds)
    (40/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.22398112 seconds)
    (41/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.219572144 seconds)
    (42/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.463047603 seconds)
    (43/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.409071894 seconds)
    (44/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.563172085 seconds)
    (45/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.747279431 seconds)
    (46/341) benchmarking ("sort", BigInt, false)...
    done (took 7.190545112 seconds)
    (47/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.25828775 seconds)
    (48/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.101717936 seconds)
    (49/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.184870782 seconds)
    (50/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.238489174 seconds)
    (51/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.339398064 seconds)
    (52/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.230500907 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.488140652 seconds)
    (54/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.396812051 seconds)
    (55/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.172817071 seconds)
    (56/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.099867838 seconds)
    (57/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.456031428 seconds)
    (58/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.180208079 seconds)
    (59/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.366939052 seconds)
    (60/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.093981395 seconds)
    (61/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.50694884 seconds)
    (62/341) benchmarking ("sort", Bool, false)...
    done (took 2.307177268 seconds)
    (63/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.173398738 seconds)
    (64/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.343144844 seconds)
    (65/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.986878757 seconds)
    (66/341) benchmarking ("sort", Int64, false)...
    done (took 5.820153354 seconds)
    (67/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.217692596 seconds)
    (68/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.224463292 seconds)
    (69/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.359144652 seconds)
    (70/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.201313008 seconds)
    (71/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.339393679 seconds)
    (72/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.270266119 seconds)
    (73/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.969815271 seconds)
    (74/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.098456553 seconds)
    (75/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.195175056 seconds)
    (76/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.278137798 seconds)
    (77/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.206495964 seconds)
    (78/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.11180018 seconds)
    (79/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.631625801 seconds)
    (80/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.967989144 seconds)
    (81/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.18963701 seconds)
    (82/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.091087356 seconds)
    (83/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.105600535 seconds)
    (84/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.385777427 seconds)
    (85/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.901970675 seconds)
    (86/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.301139039 seconds)
    (87/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.17899979 seconds)
    (88/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.11941749 seconds)
    (89/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.107614414 seconds)
    (90/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.891592313 seconds)
    (91/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.733405371 seconds)
    (92/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.163878134 seconds)
    (93/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.092655466 seconds)
    (94/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 3.9236145 seconds)
    (95/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.099031873 seconds)
    (96/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 3.692683786 seconds)
    (97/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.093654482 seconds)
    (98/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 5.305850377 seconds)
    (99/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.856424506 seconds)
    (100/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.097636363 seconds)
    (101/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.474067687 seconds)
    (102/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.326988206 seconds)
    (103/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.478872942 seconds)
    (104/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.12069253 seconds)
    (105/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.292039081 seconds)
    (106/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.283810633 seconds)
    (107/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.096173263 seconds)
    (108/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.127196775 seconds)
    (109/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.513888468 seconds)
    (110/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.458647156 seconds)
    (111/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.563374267 seconds)
    (112/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.102539798 seconds)
    (113/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.117247309 seconds)
    (114/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.791708576 seconds)
    (115/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.408840797 seconds)
    (116/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.110114648 seconds)
    (117/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.499700258 seconds)
    (118/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.432098743 seconds)
    (119/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.184502853 seconds)
    (120/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.923870613 seconds)
    (121/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.198864037 seconds)
    (122/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.553367275 seconds)
    (123/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.247862911 seconds)
    (124/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.113962557 seconds)
    (125/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.344513408 seconds)
    (126/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.492040256 seconds)
    (127/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.489618579 seconds)
    (128/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.270654608 seconds)
    (129/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.096648754 seconds)
    (130/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.108738787 seconds)
    (131/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.746151638 seconds)
    (132/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.248452482 seconds)
    (133/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.343469513 seconds)
    (134/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.332060589 seconds)
    (135/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.981357709 seconds)
    (136/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.618374186 seconds)
    (137/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.176300364 seconds)
    (138/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.393889213 seconds)
    (139/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.198203528 seconds)
    (140/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.582122185 seconds)
    (141/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.357011774 seconds)
    (142/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.233834634 seconds)
    (143/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.592911378 seconds)
    (144/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.124701558 seconds)
    (145/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.183813662 seconds)
    (146/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.447147122 seconds)
    (147/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.479957597 seconds)
    (148/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.096934215 seconds)
    (149/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.245376212 seconds)
    (150/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.319812993 seconds)
    (151/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.228547709 seconds)
    (152/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.174731799 seconds)
    (153/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.095395768 seconds)
    (154/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.12670075 seconds)
    (155/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.094761339 seconds)
    (156/341) benchmarking ("perf_countequals", "Int64")...
    done (took 4.207325599 seconds)
    (157/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.008066578 seconds)
    (158/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.208507341 seconds)
    (159/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.100283723 seconds)
    (160/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.429275386 seconds)
    (161/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.179913754 seconds)
    (162/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.796982105 seconds)
    (163/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.111781521 seconds)
    (164/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.40883596 seconds)
    (165/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.09626866 seconds)
    (166/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.870939138 seconds)
    (167/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.169166626 seconds)
    (168/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.108181743 seconds)
    (169/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.079853342 seconds)
    (170/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.338629838 seconds)
    (171/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.496715392 seconds)
    (172/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.098052978 seconds)
    (173/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.257923624 seconds)
    (174/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.971113493 seconds)
    (175/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.263432664 seconds)
    (176/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.31933737 seconds)
    (177/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.166276512 seconds)
    (178/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.475892981 seconds)
    (179/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.35710907 seconds)
    (180/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.118696556 seconds)
    (181/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.402379696 seconds)
    (182/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.108842067 seconds)
    (183/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.489427338 seconds)
    (184/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.291705904 seconds)
    (185/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.12362182 seconds)
    (186/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.471165718 seconds)
    (187/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.130483497 seconds)
    (188/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.114545403 seconds)
    (189/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.273800827 seconds)
    (190/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.23853182 seconds)
    (191/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.260021226 seconds)
    (192/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.448410715 seconds)
    (193/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.105002365 seconds)
    (194/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.201471756 seconds)
    (195/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.148241783 seconds)
    (196/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.229659683 seconds)
    (197/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.355608049 seconds)
    (198/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.447978847 seconds)
    (199/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.104949542 seconds)
    (200/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.229778795 seconds)
    (201/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.182158884 seconds)
    (202/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.212225142 seconds)
    (203/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.233787877 seconds)
    (204/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.481208937 seconds)
    (205/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.322144204 seconds)
    (206/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.112099617 seconds)
    (207/341) benchmarking ("sort", Float64, false)...
    done (took 5.853975891 seconds)
    (208/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.530487064 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.34302716 seconds)
    (210/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.100472622 seconds)
    (211/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.33735987 seconds)
    (212/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.114800906 seconds)
    (213/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.203131392 seconds)
    (214/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.342342699 seconds)
    (215/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.11323358 seconds)
    (216/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.406682724 seconds)
    (217/341) benchmarking ("sort", Float32, false)...
    done (took 5.761561319 seconds)
    (218/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.391872424 seconds)
    (219/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.006177491 seconds)
    (220/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.512817017 seconds)
    (221/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.252354384 seconds)
    (222/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.465365022 seconds)
    (223/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.526951529 seconds)
    (224/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.123888879 seconds)
    (225/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.410520617 seconds)
    (226/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.229152547 seconds)
    (227/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.196835295 seconds)
    (228/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.198280683 seconds)
    (229/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.403263645 seconds)
    (230/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.580903836 seconds)
    (231/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.176986432 seconds)
    (232/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.214538755 seconds)
    (233/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.211040346 seconds)
    (234/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.542917234 seconds)
    (235/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.370123125 seconds)
    (236/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.232426268 seconds)
    (237/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.274562147 seconds)
    (238/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.200679176 seconds)
    (239/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.127095153 seconds)
    (240/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.578261913 seconds)
    (241/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.404681565 seconds)
    (242/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.088796562 seconds)
    (243/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.25620996 seconds)
    (244/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.342414662 seconds)
    (245/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.114619757 seconds)
    (246/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.336692329 seconds)
    (247/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.690959881 seconds)
    (248/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.382946762 seconds)
    (249/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.752581861 seconds)
    (250/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.75989916 seconds)
    (251/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.404054569 seconds)
    (252/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.102147514 seconds)
    (253/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.427397364 seconds)
    (254/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.49447982 seconds)
    (255/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.09967921 seconds)
    (256/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.106016068 seconds)
    (257/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.146197937 seconds)
    (258/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.282775325 seconds)
    (259/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.100379401 seconds)
    (260/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.117297914 seconds)
    (261/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.49444015 seconds)
    (262/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.226529149 seconds)
    (263/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.105441811 seconds)
    (264/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.201293289 seconds)
    (265/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.22476576 seconds)
    (266/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.248460992 seconds)
    (267/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.119097308 seconds)
    (268/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.17693452 seconds)
    (269/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.981869686 seconds)
    (270/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.217528904 seconds)
    (271/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.691724871 seconds)
    (272/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.10793908 seconds)
    (273/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 4.556664304 seconds)
    (274/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.205620411 seconds)
    (275/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.868648469 seconds)
    (276/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.113309774 seconds)
    (277/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.416612332 seconds)
    (278/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.263716771 seconds)
    (279/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.168492995 seconds)
    (280/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.102698146 seconds)
    (281/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.167274359 seconds)
    (282/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.106190464 seconds)
    (283/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.451207033 seconds)
    (284/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.121898067 seconds)
    (285/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.234624724 seconds)
    (286/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.105450955 seconds)
    (287/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.59260612 seconds)
    (288/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.10235054 seconds)
    (289/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.375747367 seconds)
    (290/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.713125602 seconds)
    (291/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.578066764 seconds)
    (292/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.208000196 seconds)
    (293/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.475516922 seconds)
    (294/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.180191775 seconds)
    (295/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.909217967 seconds)
    (296/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.11607546 seconds)
    (297/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.181464237 seconds)
    (298/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.10605467 seconds)
    (299/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.308590925 seconds)
    (300/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.122777196 seconds)
    (301/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.309538879 seconds)
    (302/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.410802735 seconds)
    (303/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.21147203 seconds)
    (304/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.109880186 seconds)
    (305/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.104263342 seconds)
    (306/341) benchmarking ("perf_sum", Float64, false)...
    done (took 3.812303643 seconds)
    (307/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.576571511 seconds)
    (308/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.20053538 seconds)
    (309/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.50518233 seconds)
    (310/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.328046075 seconds)
    (311/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 9.100578219 seconds)
    (312/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.258216876 seconds)
    (313/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.079853914 seconds)
    (314/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.26374038 seconds)
    (315/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.403581919 seconds)
    (316/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.483748782 seconds)
    (317/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.102520066 seconds)
    (318/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 8.532144094 seconds)
    (319/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.395384895 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.005031848 seconds)
    (321/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.103639822 seconds)
    (322/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.422599744 seconds)
    (323/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.121086325 seconds)
    (324/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.239146664 seconds)
    (325/341) benchmarking ("sort", Int8, false)...
    done (took 5.060667967 seconds)
    (326/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.209247825 seconds)
    (327/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.776658725 seconds)
    (328/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.127611214 seconds)
    (329/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.115902496 seconds)
    (330/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.39994626 seconds)
    (331/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.294273841 seconds)
    (332/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.128004379 seconds)
    (333/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.184466332 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.507186897 seconds)
    (335/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.111132883 seconds)
    (336/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.167752275 seconds)
    (337/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.61548346 seconds)
    (338/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.31776574 seconds)
    (339/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.326048397 seconds)
    (340/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.315951715 seconds)
    (341/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.239303119 seconds)
  done (took 1170.752284197 seconds)
done (took 1172.863038478 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.137720047 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.130919546 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.114180764 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.136372289 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.228785308 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.165244526 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.127568225 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.11856708 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.163688036 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.16565746 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.114461381 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.162109529 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.116750114 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.115996394 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.115694519 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.131514591 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.478475208 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.153779858 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.13353684 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.124956616 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.13311224 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.114040708 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.164853436 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.164176494 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.119006258 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.119837571 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.11894935 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.135877258 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.228047626 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.118970633 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.121020866 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.128132347 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.477857474 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.150934777 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.114340248 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.136277237 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.137349298 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.134124694 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.122364141 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.156357955 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.631803244 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.127477183 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.125628908 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.121839707 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.122153826 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.129596688 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.1225877 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.131080287 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.139333729 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.138842394 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.620948669 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.107676608 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.129170576 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.123665365 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.137438216 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.125159376 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.127903257 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.140740966 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.142813891 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.140761692 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.464756728 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.167377678 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.127786001 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.14030211 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.133718213 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.699436469 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.139584954 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.131783888 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.632807024 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.140351075 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.698735779 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.151363669 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.127285309 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.140518199 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.134674993 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.47360961 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.162056942 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.123199445 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.135228049 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.125201733 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.13995003 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.137450072 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.133699755 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.123669349 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.139894839 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.177145723 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.136497549 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.126975098 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.13617804 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.146666291 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.13448529 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.138995591 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.128255749 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.123416364 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.140751382 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.12989951 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.129700818 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.128074344 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.129802747 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.137254833 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.635149807 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.147554753 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.124033632 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.122302242 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.125343073 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.144759829 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.633681147 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.132399966 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.150155915 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.176802214 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.126071646 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.467629504 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.166175713 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.144100628 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.137614274 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.129731537 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.122844655 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.468987596 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.661688478 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.149205738 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.128442916 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.127313064 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.146776111 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.129259656 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.120566023 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.488491905 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.166047721 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.142613221 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.251696351 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.142279636 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.161747984 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.125365713 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.130711993 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.176674154 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.143632857 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.161255826 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.129660318 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.144392048 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.144712475 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.122955677 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.141692214 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.141030778 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.128010116 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.136392378 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.125352546 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.17694811 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.143439976 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.142677103 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.150147582 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.251698778 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.1239122 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.469833248 seconds)
done (took 334.006272345 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.182130394 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.119277452 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.191253674 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.121094779 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.18921524 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.177677502 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.121686688 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.121738453 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.119830672 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.508066601 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.123675714 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.1285298 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.122185518 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.121577845 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.17151886 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.122016502 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.122208644 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.354626467 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.127854356 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.182095709 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.122739115 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.12208478 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.122026287 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.55979594 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.121717399 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.124011836 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.181274775 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.122709684 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.364304618 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.121680663 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.122027091 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.391525455 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.18245406 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.135646292 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.13139199 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.132455575 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.192012999 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.13465158 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.171337415 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.169142805 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.194745669 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.157799741 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.124961015 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.124688286 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.128002057 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.1261517 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.125962728 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.155954817 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.122567611 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.131557035 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.359655925 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.129545428 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.130848145 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.12481694 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.123934312 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.138591676 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.124399424 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.126248306 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.182982162 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.12706646 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.173793338 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.534043478 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.510574321 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.123087627 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.12554689 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.12519781 seconds)
  done (took 200.752118683 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.193708275 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.198288048 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.192658279 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.128582694 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.17320686 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.191658377 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.12852839 seconds)
  done (took 17.25183222 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.13054933 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.126316862 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.149667862 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.151028207 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.125287099 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.267201409 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.137975374 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.130467405 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.152957882 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.127638765 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.462551613 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.147977107 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.134290127 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.124361867 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.138537167 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.154286472 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.127770524 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.126433503 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.225678023 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.203209444 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.133128607 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.133659997 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.155908306 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.138510766 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.129403693 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.129885329 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.12981851 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.134745901 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.126798872 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.126949769 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.127156683 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.139377764 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.127650575 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.125906595 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.125135726 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.127095672 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.128372168 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.126065877 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.126662826 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.1252426 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.12863191 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.12633028 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.126648729 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.126849775 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.126083217 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.150890558 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.125885657 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.128178857 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.130675541 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.129653175 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.159159827 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.129283827 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.129658527 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.133572563 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.169825751 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.137026122 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.129362982 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.128503807 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.129367661 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.128042905 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.130165171 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.208341325 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.151982862 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.128343212 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.150733622 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.167448488 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.130865419 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.128722383 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.129262964 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.153814619 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.128129413 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.151080539 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.128392163 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.228061703 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.131327212 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.273142063 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.15123531 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.133133607 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.133417274 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.127555886 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.137711755 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.131598287 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.13188102 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.136615606 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.136620457 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.129570097 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.13120635 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.131386308 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.136199867 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.130912337 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.177495474 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.12864392 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.131855251 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.232722437 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.130752701 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.226446933 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.157401472 seconds)
  done (took 230.268953859 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.136140596 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.134563766 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.131776545 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.145290885 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.130443257 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.132535896 seconds)
  done (took 14.860792063 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.13305378 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.133902628 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.13057527 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.128935256 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.129636348 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.131064063 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.130317811 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.134019289 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.134799766 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.129859614 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.131531928 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.132657328 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.132130229 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.131478189 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.131479544 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.130957469 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.132370588 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.13191137 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.129819384 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.13194045 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.267067104 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.133684195 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.132535968 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.134472168 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.136963281 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.130936084 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.138499653 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.132433331 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.13202281 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.139458812 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.136939345 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.13478517 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.134846539 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.136771303 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.134967128 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.135365273 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.135852678 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.132898091 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.132961373 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.13647503 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.135524662 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.133574895 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.13121035 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.134154423 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.133364345 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.139705827 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.137838972 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.141366675 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.133782876 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.133409336 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.133984667 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.136109399 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.133861187 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.135944507 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.137716607 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.142380044 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.139065528 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.13233226 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.133649807 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.135933807 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.136587349 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.136137106 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.136547085 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.137419645 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.14144389 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.135460274 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.137289067 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.138947863 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.13462982 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.133771064 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.135639746 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.133965175 seconds)
  done (took 156.86876131 seconds)
done (took 622.075200083 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.189535833 seconds)
  done (took 9.243327612 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.206049443 seconds)
  done (took 9.354812175 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.745437774 seconds)
  done (took 12.815278964 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.142171891 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.174778403 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.147616289 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.135106634 seconds)
  done (took 30.666594732 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.300983868 seconds)
  done (took 9.354763727 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.133044318 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.131036869 seconds)
  done (took 16.375670459 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.178922434 seconds)
  done (took 9.233325215 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.587880393 seconds)
  done (took 9.661516681 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.157165429 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.158814317 seconds)
  done (took 16.389766163 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.13377406 seconds)
  done (took 9.187794586 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.909276934 seconds)
  done (took 10.044872205 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.140536201 seconds)
  done (took 9.212904099 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.159250579 seconds)
  done (took 9.214322892 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.157092687 seconds)
  done (took 10.212068679 seconds)
done (took 173.024463969 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.139958026 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.13727667 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.137572314 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.136595344 seconds)
  done (took 30.605903974 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.168239865 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.170007209 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.179167064 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.168296851 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.159352714 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.159590982 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.171168276 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.170882473 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.162600423 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.167348367 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.171362105 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.167204324 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.171031831 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.179606454 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.18198796 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.169120752 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.170906832 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.170628787 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.161338376 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.181645704 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.169365525 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.172147085 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.136070957 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.136424197 seconds)
  done (took 54.072236191 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.327068219 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.202269896 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.28937841 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.183770632 seconds)
  done (took 11.058318397 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.136475753 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.199948602 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.188832849 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.18119753 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.230496742 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.240374073 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.191514323 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.347495348 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.253096198 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.262776978 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.144308105 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.159267612 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.163147474 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.186757705 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.238560053 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.136712347 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.13759044 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.251411034 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.199713432 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.345169514 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.135562217 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.192011821 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.224474789 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.189320695 seconds)
  done (took 54.991752376 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.136640675 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.147649865 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.14541551 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.137990008 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.139072412 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.140126085 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.144445646 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.140432106 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.160769112 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.138881125 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.138744231 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.139186824 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.145259397 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.138583615 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.137519637 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.151708707 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.153085543 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.137746855 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.142675025 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.145499531 seconds)
  done (took 44.919047071 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.137069569 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.983640351 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.483794202 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.389219829 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.13797669 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.137293938 seconds)
  done (took 33.326722177 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.152242675 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 2.14594383 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.139665756 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 2.195813523 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.274110404 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.144006425 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.139710735 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 2.149557967 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 2.184853833 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 2.204557971 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.158603216 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 2.16637787 seconds)
  done (took 28.114710653 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.139264004 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.140650565 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.141110536 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.15230098 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.150530682 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.146372662 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.146580118 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.138607872 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.150900207 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.156861964 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.14581172 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.149329125 seconds)
  done (took 47.820108595 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.355914582 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.364043061 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.346207098 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.690473246 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.8099626 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.117705423 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.4256569 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.352059766 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.863104363 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.888247456 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.430057893 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.191395675 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.08441738 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.065066782 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.057344933 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.383154007 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.140773741 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.005494952 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.389900345 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.194148882 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.14061462 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.14193394 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.142598729 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.449779438 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.465866129 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.143474471 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.353247215 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.157627614 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.14483992 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.369072214 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.547389918 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.191927382 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.344067544 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.403294221 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.479421322 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.187377641 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.166359454 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.245684978 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.182308284 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.17672292 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.153638436 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.152129578 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.6828767 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.152080596 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.414124825 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.143262667 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.147585797 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.142180733 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.06697857 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.457553973 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.242557246 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.148877492 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.175137724 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.574574365 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.263029807 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.385280489 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.146897533 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.245132284 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.195362638 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.385309402 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.242520719 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.144838407 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.35608301 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.067025816 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.480547019 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.252915882 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.146432649 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.148315119 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.84423503 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.385313263 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.225418239 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.448979001 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.893134488 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.144078236 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.147481414 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.162231852 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.250004893 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.143239079 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.455401929 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.11898316 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.069776194 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.243153272 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.646089805 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.149854976 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.144415906 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.152125196 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.989228094 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.145313988 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.240076098 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.382324765 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.456598614 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.144911905 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.143768014 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.164302704 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.148589524 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.101143473 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.664720435 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.204989118 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.071113183 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.70656805 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.565590514 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.107102499 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.552950973 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.182586785 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.41312142 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.284842103 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.549463125 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.354296781 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.390414652 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.707334397 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.15164698 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.706463865 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.22764572 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.221610869 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.144547407 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.733466477 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.250876183 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.418570435 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.246697957 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.145429386 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.07276543 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.158585133 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.348694538 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.569814042 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.198825458 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.145091073 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.151465849 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.143973541 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.148945605 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.31330062 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.161865773 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.433788177 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.213931355 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.146244311 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.090702493 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.15163282 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.430622792 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.717551118 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.203505395 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.395757879 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.410370161 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.962850233 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.165058858 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.164750097 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.408064277 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.217165099 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.222599729 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.708275321 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.274201307 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.245968589 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.147700651 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.282751594 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.154171851 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.151294172 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.454809543 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.668364656 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.573786095 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.191900254 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.17424168 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.152119607 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.257349202 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.386626126 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.222333388 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.174979152 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.151972899 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.236758977 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.374223183 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.147880162 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.159118802 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.39545434 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.387316939 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.437084028 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.201101467 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.223052252 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.218223879 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.157369184 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.362615703 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.232983987 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.814972064 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.717157156 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.357396109 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.660779423 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.109037468 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.791506252 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.398007918 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.517920873 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.167994324 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.602096161 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.253090764 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.793367268 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.177448647 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.6775177 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.076251855 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.155510458 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.476337869 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.10001751 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.864900255 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.200673452 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.225677152 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.149790969 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.151727183 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.15782362 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.156882506 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.254800431 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.217774636 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.222757413 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.080036244 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.774726113 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.185867757 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.154250645 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.152069408 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.468817072 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.919448743 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.105536285 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.153431773 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.230353389 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.905573452 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.70687155 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.157902299 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.157886342 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.770008704 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.782256356 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.751531776 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.17562738 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.887961736 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.178807841 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.393622877 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.273810983 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.465455529 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.888690537 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.229668347 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.15575178 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.163181541 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.855399291 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.164182389 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.855396351 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.435507046 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.426003341 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.591203576 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.210321584 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.364227194 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.170133608 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.157441903 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.65581987 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.179562526 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.156909125 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.359850532 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.67317529 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.466161358 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.782183667 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.240431248 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.158611248 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.419081215 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.139229212 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.571120342 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.823671449 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.150905697 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.170088445 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.394092241 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.842045234 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.15793377 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.143085632 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.162390493 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.368481673 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.358582564 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.422226419 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.445832997 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.605511818 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.168711003 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.161573972 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.185395878 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.401253059 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.156528072 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.194016594 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.661016084 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.244059809 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.584390143 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.443050041 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.527550429 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.779067654 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.420789669 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.218752652 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.167797305 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.794141208 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.278642855 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.089940725 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.274801816 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.085072952 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.889978417 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.446993323 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.176519141 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.420502273 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.133975577 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.487566771 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.451073638 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.405754513 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.199632077 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.185222763 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.158070033 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.207645755 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.17558051 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.279640659 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.270502581 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.162573113 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.631778508 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.19360285 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.206623834 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.163126348 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.634468235 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.180810752 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.159616683 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.965155485 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.842592272 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.278486682 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.23118219 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.902856451 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.607294636 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.200135765 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.049329125 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.82100253 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.422145334 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.211418967 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.599045207 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.193311144 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.564137366 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.186910989 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.374569538 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.164235994 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.701868357 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.204603968 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.421161985 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.094141726 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.371023011 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.351765222 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.181408949 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.164645874 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.087799772 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.268974002 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.039024675 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.139972295 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.163168951 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.160411994 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.575342903 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.29777197 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.609510133 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.97950307 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.162973198 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.486258185 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.556459026 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.747895132 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.192227143 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.164563112 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.477514239 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.958312564 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.457938621 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.441456022 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.171138123 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.872399759 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.376203935 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.285880456 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.079898752 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.654006834 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.750784926 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.861109626 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.172536416 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.365458279 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.478382674 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.372316158 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.19247392 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.24075238 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.567870538 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.423166627 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.880477479 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.086552472 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.161049922 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.564993594 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.180674199 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.25923338 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.403452334 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.460119037 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.699716245 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.581343639 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.183299106 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.515875689 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.617941254 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.583512099 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.364559365 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.513358718 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.487745352 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.755672471 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.578401283 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.380608818 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.260205971 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.435630565 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.033691715 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.873699696 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.407737088 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.169366085 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.091949398 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.372941161 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.257282878 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.479394041 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.797413227 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.190599397 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.421750595 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.62890435 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.705567386 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.282898354 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.183534605 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.129894925 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.192320694 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.185879547 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.163987245 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.659257993 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.453951649 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.17653591 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.115395825 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.834727668 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.091706117 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.380163066 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.284707733 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.196241805 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.756169226 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.425716161 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.260014851 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.477046212 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.335093783 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.196806209 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.090982426 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.859856712 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.109520522 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.256159073 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.592542268 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.180331767 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.170724077 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.37068972 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.093405249 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.210665267 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.796152183 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.356296049 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.764979466 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.431723894 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.287108454 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.399639927 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.46277802 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.171713938 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.124655457 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.437642224 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.09508756 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.732316029 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.892952871 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.921824982 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.235243568 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.168121608 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.169074401 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.437923587 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.476013863 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.339361372 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.592012944 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.194671929 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.19171756 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.486409445 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.245857554 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.171401784 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.170398064 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.600434393 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.396811436 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.1724027 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.189335127 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.382334998 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.242615075 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.365936123 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.243400416 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.683217639 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.173832144 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.174418359 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.203756153 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.106472174 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.166896548 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.921551808 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.227757624 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.19756277 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.436884722 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.79165172 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.370837759 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.569781308 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.03973821 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.29196109 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.210121666 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.171001363 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.274238112 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.459109182 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.466489094 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.169026986 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.440598337 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.212091555 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.172862364 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.179564984 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.13733061 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.166710068 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.850345367 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.056182722 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.897999008 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.570746858 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.175205077 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.221577935 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.174402941 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.096299512 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.175486738 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.201859572 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.173877513 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.274701903 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.438921488 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.208413392 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.249069354 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.172359673 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.173166395 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.175943182 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.385314439 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.685960414 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.187715642 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.87109239 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.37531388 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.174687916 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.668708896 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.617133568 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.356542161 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.20498438 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.303557438 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.400237044 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.81276843 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.298000878 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.137087993 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.396061235 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.172495778 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.443751726 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.444770473 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.172252623 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.386448256 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.597306558 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.452081439 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.200768289 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.812075811 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.234677544 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.292304775 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.082553761 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.178555168 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.180384626 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.438337914 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.223337537 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.173104587 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.183714619 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.815463252 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.913310542 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.628038523 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.321992334 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.484493695 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.007818172 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.924826964 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.176853884 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.09970752 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.178774044 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.197394153 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.178036593 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.179038212 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.854787646 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.893551511 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.386579248 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.484839153 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.101183794 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.378660575 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.780514485 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.099576806 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.140725733 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.172052269 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.431598791 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.103300302 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.178065129 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.184890852 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.189715165 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.835589425 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.441007583 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.172994525 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.128508051 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.177575 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.176226203 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.174044286 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.266264677 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.17538901 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.291624873 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.439727464 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.54849568 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.270718864 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.844645753 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.850127895 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.111309615 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.218056256 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.737533549 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.744010036 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.190845539 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.999283177 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.856276455 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.118084595 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.180567373 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.190271118 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.444668318 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.178500975 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.17911847 seconds)
  done (took 2332.894627906 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.254877459 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.295909241 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.272249371 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.250056417 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.31637831 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.268898255 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.298556606 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.201181436 seconds)
  done (took 60.25078816 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 7.174676943 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.154981052 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 2.183564496 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.174976293 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 2.232724937 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 7.178895799 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.370582251 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 7.191095641 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.710287503 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 2.200935724 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 7.19658654 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.195470625 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 2.59509998 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 2.232609587 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 7.196443319 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 7.196388194 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 2.196752728 seconds)
  done (took 82.515970545 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.200118573 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.510063398 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.249486588 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.183995358 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.938067633 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.202984085 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.204881021 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.253444186 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.201495611 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.574342085 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.496828505 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.211373518 seconds)
  done (took 94.341492837 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 2.200979072 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 2.195921128 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.195465591 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.193465785 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.195714532 seconds)
  done (took 13.099348873 seconds)
done (took 2890.126368173 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.441908218 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.253465519 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.304725815 seconds)
  done (took 6.671533056 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.343706681 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.389286766 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.500042846 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.50883103 seconds)
  done (took 11.863005409 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.476015161 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.573628204 seconds)
  done (took 7.161843132 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.627339905 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.206334478 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.589473584 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.198257071 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.199858305 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.200312347 seconds)
  done (took 23.718548994 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.197466444 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.197478206 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.196779044 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.196689835 seconds)
  done (took 10.903528542 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.194876118 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.928353106 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.194847653 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.209335676 seconds)
  done (took 22.642767302 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.42060359 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 6.623923977 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.976468247 seconds)
  done (took 14.134589662 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.820534391 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.632394067 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.812434485 seconds)
  done (took 10.380642214 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.054993209 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.010812748 seconds)
  done (took 8.179883658 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.341389929 seconds)
  done (took 4.455406537 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.019128015 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.509241147 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.689483507 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.757378202 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.82111463 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.438744803 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.533930034 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.480874959 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.609645855 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.65863591 seconds)
  done (took 28.634498227 seconds)
done (took 165.726927984 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.645346362 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.221854441 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.410943671 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.582761364 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.44445468 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.409689115 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.499592723 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.587486156 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.287888479 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.249131081 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.592924576 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.440686954 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.445080559 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.21836044 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.451498133 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.218512091 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.438203478 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.660472758 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.26267731 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.472726636 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.503884939 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.221435745 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.422595834 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.240737268 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.481009617 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.358404669 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.824068245 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.21715403 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.409192037 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.839879192 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.36006518 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.623114975 seconds)
  done (took 180.156446124 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.080520158 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.199090616 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.199789207 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.19874944 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.467410762 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.199715102 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.201517222 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.198882043 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.426972864 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.408610217 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.199275992 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.454301165 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.198550048 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.199808417 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.199812653 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.199522493 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.532603839 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.124110229 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.20020053 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.199183252 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.19982994 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.328710896 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.200431023 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.352654153 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.51185112 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.200951026 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.201704607 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.200578928 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.201264198 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.201890418 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.200873905 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.198961584 seconds)
  done (took 218.210966915 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.202771786 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.201741467 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.194503875 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.201036139 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.200782036 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.203104945 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.201836998 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.201401588 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.886647732 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.873553694 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.204086232 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.202012665 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.202714562 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.201367337 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.201877881 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.201855227 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.199779091 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.201364588 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.202129048 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.201043729 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.204256482 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.001016543 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.202731199 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.020564835 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.202644024 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.202984659 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.202288428 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.20237875 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.202477641 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.203774365 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.205279672 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.202790068 seconds)
  done (took 231.56049887 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.449825769 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.203669889 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.204925709 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.212343588 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.207732677 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.20486358 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.205005312 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.45135073 seconds)
  done (took 22.261274469 seconds)
done (took 654.324067419 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.53501626 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.943374337 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.342011782 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.229476506 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.438244836 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.271283301 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.221571968 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.28316005 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.876360482 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.293698527 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.625278002 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.232404339 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.926967255 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.253582731 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.340256931 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.279358455 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.571115311 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.830438931 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.364236576 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.888552531 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.378019384 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.139786282 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.309055977 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.918129085 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.631898909 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.186014527 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.237293792 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.580507534 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.230036743 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.37458971 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.822495274 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.484284202 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.242251442 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.225518072 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.276804367 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.254844524 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.418192287 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.239653248 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.339401061 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.949584003 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.883603898 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.754157511 seconds)
  done (took 113.742949542 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.211995012 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.210855971 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.21105334 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.211769483 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.217479647 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.210308122 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.211383639 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.254313783 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.210943238 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.211386115 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.213157939 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.220395277 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.210981631 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.220032679 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.211516282 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.210574618 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.212272525 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.213183205 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.208666748 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.212254659 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.211980099 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.211405185 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.209803829 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.210568529 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.212289536 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.211720023 seconds)
  done (took 59.697533171 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.209376552 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.403141777 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.447036705 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.23120971 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.208748492 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.211243015 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.237618812 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.217590236 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.210766326 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.210876557 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.32624232 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.21199542 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.223838027 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.448417798 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.227293274 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.209447158 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.208586087 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.197769272 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.413246472 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.224367544 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.239080187 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.22045533 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.240236273 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.227138103 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.213065275 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.210632171 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.213106943 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.689566228 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.222255701 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.327431537 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.270090734 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.24276508 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.609321464 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.459809259 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.267602734 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.215966948 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.208994419 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.38028677 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.222109447 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.21203676 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.238729732 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.220602241 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.450053769 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.732182355 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.224785351 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.210542204 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.67550736 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.392918771 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.259281641 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.226246817 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.459759182 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.228913396 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.211907503 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.211307202 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.247080809 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.223357118 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.211245628 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.50730987 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.230306288 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.240612428 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.219049703 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.213404787 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.417237552 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.220083342 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.409680821 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.221898735 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.217607128 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.214810807 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.453798851 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.228226785 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.745754409 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.22829315 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.210897834 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.327683306 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.41550046 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.714669342 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.229444326 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.420159198 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.626265711 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.251234793 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.225291434 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.676089469 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.254850525 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.223078277 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.211449081 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.211029592 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.212896597 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.261895733 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.239637623 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.652265002 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.743071849 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.525040914 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.254020986 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.230403692 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.21504628 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.507557559 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.225307099 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.212414212 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.442236064 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.752112537 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.228668505 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.221390483 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.722111093 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.232883036 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.242605463 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.226326719 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.465535825 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.233278901 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.261889898 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.2153763 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.219416762 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.218095599 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.229478932 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.226367966 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.215387993 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.712881094 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.400302133 seconds)
  done (took 273.234706884 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.217596137 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.212692799 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.212217452 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.213098415 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.213153127 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.215392614 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.21423708 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.210733122 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.21555411 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.213366184 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.211621265 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.213923682 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.215016006 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.215079399 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.261142894 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.216519634 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.703296991 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.218556489 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.214824164 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.214989824 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.787571515 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.220790401 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.21440573 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.216704692 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.213846207 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.215475721 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.222129211 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.260591386 seconds)
  done (took 177.314293003 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.218599645 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.273127742 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.229034034 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.263065105 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.229944596 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.215609861 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.240309318 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.234200023 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.223662067 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.215416184 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.218481618 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.247078207 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.226961194 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.312555506 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.247617965 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.249999298 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.318910179 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.223074241 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.218818408 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.216003584 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.265227119 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.233456276 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.249844873 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.284707122 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.234397245 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.271177511 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.230890935 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.216274804 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.216476773 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.332278853 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.236884273 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.250325329 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.255456651 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.23882144 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.337364184 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.334001066 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.32251179 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.247728077 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.222481517 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.218559651 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.217734817 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.220236422 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.272864761 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.235394849 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.218655375 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.332754758 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.237527214 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.219699869 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.238822079 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.217665569 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.232897658 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.237840076 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.255674128 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.350437042 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.266132489 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.248564921 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.245379433 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.238515876 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.220687254 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.316251392 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.228215893 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.333170784 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.239926878 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.222908288 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.220243925 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.223741144 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.266935822 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.261679229 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.324070809 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.228328197 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.317057787 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.275126807 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.237969982 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.220322797 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.220124242 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.275980468 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.334513515 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.276805002 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.285851905 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.258701276 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.228919801 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.220899031 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.221758891 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.248751713 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.230524146 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.334614706 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.336277333 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.226046952 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.220349456 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.220167636 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.221404509 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.24538982 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.284991019 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.26287858 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.331831996 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.260716822 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.263444352 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.229661401 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.236691171 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.2274332 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.258289554 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.232360884 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.234984497 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.553686209 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.262105137 seconds)
  done (took 239.028296867 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.583290058 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.265407451 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.293515851 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.483307017 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.589768886 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.178619751 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.263775222 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.270016483 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.280074314 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.395762433 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.334219919 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.317359368 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.259650018 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.242104794 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.265286183 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.28193358 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.300575134 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.558666196 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.366421072 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.805145815 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.265738476 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.519689405 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.562698642 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.600974471 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.310931432 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.648696995 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.880934378 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.366391719 seconds)
  done (took 72.635502554 seconds)
done (took 937.779320312 seconds)
SAVING RESULT...
DONE!
